{"version":3,"sources":["../../../projects/dicom-viewer/src/lib/cornerstone.directive.ts","../../../projects/dicom-viewer/src/lib/thumbnail.directive.ts","../../../projects/dicom-viewer/src/lib/dicom-viewer.component.ts","../../../projects/dicom-viewer/src/lib/dicom-viewer.module.ts"],"names":["CornerstoneDirective","elementRef","this","imageList","imageIdList","currentIndex","patientName","hospital","instanceNumber","WwwcTool","cornerstoneTools","PanTool","ZoomTool","ProbeTool","LengthTool","AngleTool","EllipticalRoiTool","RectangleRoiTool","DragProbeTool","ZoomTouchPinchTool","PanMultiTouchTool","StackScrollTool","StackScrollMouseWheelTool","isCornerstoneEnabled","Object","defineProperty","prototype","viewport","cornerstone","getViewport","element","currentImage","Math","round","voi","windowWidth","windowCenter","scale","toFixed","onResize","event","resize","onMouseWheel","preventDefault","length","max","min","wheelDelta","detail","displayImage","ngOnInit","nativeElement","external","Hammer","cornerstoneMath","init","globalToolSyncEnabled","addTool","resetViewer","ngAfterViewChecked","disableViewer","enable","disable","resetImageCache","previousImage","nextImage","addImageData","imageData","push","imageId","image","getDefaultViewportForImage","fitToWindow","data","string","replace","intString","setToolActiveForElement","mouseButtonMask","stack","currentImageIdIndex","imageIds","addStackStateManager","addToolState","resetAllTools","setToolDisabledForElement","Directive","args","selector","ElementRef","HostListener","ThumbnailDirective","setImageData","refresh","Input","DICOMViewerComponent","enableViewerTools","enablePlayTools","downloadImagesURL","maxImagesToLoad","seriesList","currentSeriesIndex","currentSeries","imageCount","loadingImages","loadedImages","targetImageCount","color","viewPort","toString","display","loadStudyImages","_this","maxImages","index","loadAndCacheImage","then","imageLoaded","loadMoreImages","nextImageIndex","catch","err","series","studyID","seriesID","seriesNumber","studyDescription","seriesDescription","seriesIndex","findIndex","item","sort","a","b","seriesItem","showSeries","i","saveAs","stopClip","enableWindowing","enableZoom","enablePan","enableScroll","enableLength","enableAngle","enableProbe","enableElliptical","enableRectangle","playClip","frameRate","stackState","getToolState","invertImage","invert","setViewport","resetImage","getElementToolStateManager","clearToolState","updateImage","clearImage","Component","template","ViewChild","static","ViewChildren","NgModule","imports","FormsModule","CommonModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, HostListener, OnInit, AfterViewChecked } from '@angular/core';\nimport * as Hammer from 'hammerjs';\n\n\ndeclare const cornerstone;\ndeclare const cornerstoneTools;\ndeclare const cornerstoneMath;\n\n\n\n\n@Directive({\n  selector: '[cornerstone]',\n})\n\nexport class CornerstoneDirective implements OnInit, AfterViewChecked {\n\n  public element: any;\n\n  public imageList = [];\n  private imageIdList = [];\n  public currentIndex = 0;\n  public currentImage: any;\n  public patientName = ''; // current image Patient name, do display on the overlay\n  public hospital = ''; // current image Institution name, to display on the overlay\n  public instanceNumber = ''; // current image Instance #, to display on the overlay\n\n  // cornersTone Tools we use\n  private WwwcTool = cornerstoneTools.WwwcTool;\n  private PanTool = cornerstoneTools.PanTool;\n  private ZoomTool = cornerstoneTools.ZoomTool;\n  private ProbeTool = cornerstoneTools.ProbeTool;\n  private LengthTool = cornerstoneTools.LengthTool;\n  private AngleTool = cornerstoneTools.AngleTool;\n  private EllipticalRoiTool = cornerstoneTools.EllipticalRoiTool;\n  private RectangleRoiTool = cornerstoneTools.RectangleRoiTool;\n  private DragProbeTool = cornerstoneTools.DragProbeTool;\n  private ZoomTouchPinchTool = cornerstoneTools.ZoomTouchPinchTool;\n  private PanMultiTouchTool = cornerstoneTools.PanMultiTouchTool;\n  private StackScrollTool = cornerstoneTools.StackScrollTool;\n  private StackScrollMouseWheelTool = cornerstoneTools.StackScrollMouseWheelTool;\n\n\n  public get windowingValue(): string {\n    if (this.isCornerstoneEnabled) {\n      let viewport = cornerstone.getViewport(this.element);\n      if (this.currentImage && viewport) { return Math.round(viewport.voi.windowWidth) + \"/\" + Math.round(viewport.voi.windowCenter); }\n    }\n    return '';\n  }\n\n  public get zoomValue(): string {\n    if (this.isCornerstoneEnabled) {\n      let viewport = cornerstone.getViewport(this.element);\n      if (this.currentImage && viewport) { return viewport.scale.toFixed(2); }\n    }\n    return '';\n  }\n\n  private isCornerstoneEnabled = false;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    if (this.isCornerstoneEnabled) {\n      cornerstone.resize(this.element, true);\n    }\n  }\n\n  @HostListener('wheel', ['$event'])\n  onMouseWheel(event) {\n    event.preventDefault();\n\n    if (this.imageList.length > 0) {\n      const delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n      // console.log(event);\n\n\n      if (delta > 0) {\n        this.currentIndex++;\n        if (this.currentIndex >= this.imageList.length) {\n          this.currentIndex = this.imageList.length - 1;\n        }\n      } else {\n\n        this.currentIndex--;\n        if (this.currentIndex < 0) {\n          this.currentIndex = 0;\n        }\n\n      }\n\n      this.displayImage(this.imageList[this.currentIndex]);\n    }\n\n  }\n\n  ngOnInit() {\n\n    // Retrieve the DOM element itself\n    this.element = this.elementRef.nativeElement;\n\n    // now add the Tools we use\n    cornerstoneTools.external.cornerstone = cornerstone;\n    cornerstoneTools.external.Hammer = Hammer;\n    cornerstoneTools.external.cornerstoneMath = cornerstoneMath;\n    cornerstoneTools.init({ globalToolSyncEnabled: true });\n\n    cornerstoneTools.addTool(this.WwwcTool);\n    cornerstoneTools.addTool(this.PanTool);\n    cornerstoneTools.addTool(this.ZoomTool);\n    cornerstoneTools.addTool(this.ProbeTool);\n    cornerstoneTools.addTool(this.LengthTool);\n    cornerstoneTools.addTool(this.AngleTool);\n    cornerstoneTools.addTool(this.EllipticalRoiTool);\n    cornerstoneTools.addTool(this.RectangleRoiTool);\n    cornerstoneTools.addTool(this.DragProbeTool);\n    cornerstoneTools.addTool(this.ZoomTouchPinchTool);\n    cornerstoneTools.addTool(this.PanMultiTouchTool);\n    cornerstoneTools.addTool(this.StackScrollTool);\n    cornerstoneTools.addTool(this.StackScrollMouseWheelTool);\n\n    // Enable the element with Cornerstone\n    this.resetViewer();\n  }\n\n  ngAfterViewChecked() {\n  //  if (this.currentImage) cornerstone.resize(this.element, true);\n  }\n\n  //\n  // reset the viewer, so only this current element is enabled\n  //\n  public resetViewer() {\n    this.disableViewer();\n    cornerstone.enable(this.element);\n    this.isCornerstoneEnabled = true;\n  }\n\n  public disableViewer() {\n    this.element = this.elementRef.nativeElement;\n    try {\n      cornerstone.disable(this.element);\n    } finally { }\n\n    this.isCornerstoneEnabled = false;\n  }\n\n  public resetImageCache() {\n    this.imageList = [];\n    this.imageIdList = [];\n    this.currentImage = null;\n    this.currentIndex = 0;\n    this.patientName = '';\n    this.hospital = '';\n    this.instanceNumber = '';\n  }\n\n  public previousImage() {\n    if (this.imageList.length > 0) {\n      this.currentIndex--;\n      if (this.currentIndex < 0) {\n        this.currentIndex = 0;\n      }\n      this.displayImage(this.imageList[this.currentIndex]);\n    }\n\n  }\n\n  public nextImage() {\n    if (this.imageList.length > 0) {\n      this.currentIndex++;\n      if (this.currentIndex >= this.imageList.length) {\n        this.currentIndex = this.imageList.length - 1;\n      }\n      this.displayImage(this.imageList[this.currentIndex]);\n    }\n  }\n\n  public addImageData(imageData: any) {\n    this.element = this.elementRef.nativeElement;\n    //if (!this.imageList.filter(img => img.imageId === imageData.imageId).length) {\n    this.imageList.push(imageData);\n    this.imageIdList.push(imageData.imageId);\n    if (this.imageList.length === 1) {\n      this.currentIndex = 0;\n      this.displayImage(imageData);\n    }\n    //}\n\n    cornerstone.resize(this.element, true);\n  }\n\n  public displayImage(image) {\n    this.element = this.elementRef.nativeElement;\n    const viewport = cornerstone.getDefaultViewportForImage(this.element, image);\n    cornerstone.displayImage(this.element, image, viewport);\n    this.currentImage = image;\n    // Fit the image to the viewport window\n    cornerstone.fitToWindow(this.element);\n    cornerstone.resize(this.element, true);\n\n    // get image info to display in overlays\n    if (image.data.string('x00100010')) this.patientName = image.data.string('x00100010').replace(/\\^/g, '');\n    this.hospital = image.data.string('x00080080');\n    this.instanceNumber = image.data.intString('x00200011') + '/' + image.data.intString('x00200013');\n\n    // Activate mouse clicks, mouse wheel and touch\n    // cornerstoneTools.mouseInput.enable(this.element);\n    // cornerstoneTools.mouseWheelInput.enable(this.element);\n    // //cornerstoneTools.touchInput.enable(this.element);\n    // cornerstoneTools.keyboardInput.enable(this.element);\n\n    // Enable all tools we want to use with this element\n    cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', { mouseButtonMask: 1 }, ['Mouse']); // ww/wc is the default tool for left mouse button\n    cornerstoneTools.setToolActiveForElement(this.element, 'Pan', { mouseButtonMask: 4 }, ['Mouse']); // pan is the default tool for middle mouse button\n    cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', { mouseButtonMask: 2 }, ['Mouse']); // zoom is the default tool for right mouse button\n\n    /*     cornerstoneTools.wwwc.activate(this.element, 1); // ww/wc is the default tool for left mouse button\n        cornerstoneTools.pan.activate(this.element, 2); // pan is the default tool for middle mouse button\n        cornerstoneTools.zoom.activate(this.element, 4); // zoom is the default tool for right mouse button\n        cornerstoneTools.probe.enable(this.element);\n        cornerstoneTools.length.enable(this.element);\n        cornerstoneTools.angle.enable(this.element);\n        cornerstoneTools.simpleAngle.enable(this.element);\n        cornerstoneTools.ellipticalRoi.enable(this.element);\n        cornerstoneTools.rectangleRoi.enable(this.element);\n        cornerstoneTools.wwwcTouchDrag.activate(this.element) // - Drag\n        cornerstoneTools.zoomTouchPinch.activate(this.element) // - Pinch\n        cornerstoneTools.panMultiTouch.activate(this.element) // - Multi (x2) */\n\n    // Stack tools\n\n    // Define the Stack object\n    const stack = {\n      currentImageIdIndex: this.currentIndex,\n      imageIds: this.imageIdList\n    };\n\n    cornerstoneTools.addStackStateManager(this.element, ['playClip']);\n    // Add the stack tool state to the enabled element\n    cornerstoneTools.addStackStateManager(this.element, ['stack']);\n    cornerstoneTools.addToolState(this.element, 'stack', stack);\n    // cornerstoneTools.stackScrollWheel.activate(this.element);\n    // Enable all tools we want to use with this element\n    cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', {});\n    //cornerstoneTools.stackPrefetch.enable(this.element);\n\n  }\n\n\n  // cornerstone.displayImage(this.element, image);\n  // deactivate all tools\n  public resetAllTools() {\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Wwwc');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Pan');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Zoom');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Probe');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Length');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'Angle');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'EllipticalRoi');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'RectangleRoi');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'DragProbe');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'ZoomTouchPinch');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'PanMultiTouch');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'StackScroll');\n    cornerstoneTools.setToolDisabledForElement(this.element, 'StackScrollMouseWheel');\n  }\n\n}\n","import { Directive, ElementRef, OnInit, Input, AfterViewChecked } from '@angular/core';\n\n\ndeclare const cornerstone;\n\n\n@Directive({\n  selector: '[thumbnail]',\n})\n\nexport class ThumbnailDirective implements OnInit, AfterViewChecked {\n\n  @Input() public imageData: any;\n\n  public element: any;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n // Retrieve the DOM element itself\n    this.element = this.elementRef.nativeElement;\n\n    // Enable the element with Cornerstone\n    cornerstone.enable(this.element);\n    this.setImageData(this.imageData);\n  }\n\n  ngAfterViewChecked() {\n    this.refresh();\n  }\n\n  public refresh() {\n    this.setImageData(this.imageData);\n  }\n\n  public setImageData(image) {\n    this.imageData = image;\n    if (this.imageData && this.element) {\n      const viewport = cornerstone.getDefaultViewportForImage(this.element, this.imageData);\n      cornerstone.displayImage(this.element, this.imageData, viewport);\n      // Fit the image to the viewport window\n      cornerstone.fitToWindow(this.element);\n      cornerstone.resize(this.element, true);\n    }\n\n  }\n}\n","import { Component, ViewChild, OnInit, Input, ViewChildren } from '@angular/core';\nimport { CornerstoneDirective } from './cornerstone.directive';\nimport { ThumbnailDirective } from './thumbnail.directive';\n\n\n\ndeclare const cornerstone;\ndeclare const cornerstoneTools;\n\n@Component({\n  selector: 'dicom-viewer',\n  templateUrl: './dicom-viewer.component.html',\n  styleUrls: ['./dicom-viewer.component.css']\n})\nexport class DICOMViewerComponent implements OnInit {\n\n  @Input() public enableViewerTools = false; // enable viewer tools\n  @Input() public enablePlayTools = false; // enable Play Clip tools\n  @Input() public downloadImagesURL = '' // download images URL\n  @Input() public maxImagesToLoad = 20; // limit for the automatic loading of study images\n\n  public seriesList = []; // list of series on the images being displayed\n  public currentSeriesIndex = 0;\n  public currentSeries: any = {};\n  public imageCount = 0; // total image count being viewed\n\n  // control enable/disable image scroll buttons\n  public get hidePreviousImage(): any { return { color: (this.viewPort.currentIndex < 1) ? 'black' : 'white' }; }\n  public get hideNextImage(): any { return { color: (this.viewPort.currentIndex >= (this.imageCount - 1)) ? 'black' : 'white' }; }\n\n  // control message for more images to load\n  public get moreImagestoLoad(): string {\n    if (this.loadedImages.length < this.imageIdList.length && !this.loadingImages) { // are there any more images to load?\n      const imagesToLoad = (this.maxImagesToLoad <= 0) ? (this.imageIdList.length - this.loadedImages.length) : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n      return imagesToLoad.toString();\n    } else return '';\n  }\n\n  // control exhibition of a loading images progress indicator\n  public loadingImages = false;\n  public get showProgress(): any { return { display: (this.loadingImages) ? 'inline-block' : 'none' } };\n\n  @ViewChild(CornerstoneDirective, { static: true }) viewPort: CornerstoneDirective; // the main cornertone view port\n  @ViewChildren(ThumbnailDirective) thumbnails: Array<ThumbnailDirective>;\n\n  private loadedImages = [];\n  private imageIdList = [];\n  private element: any;\n  private targetImageCount = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.element = this.viewPort.element;\n  }\n\n  /**\n   * Load dicom images for display\n   *\n   * @param imageIdList list of imageIds to load and display\n   */\n  loadStudyImages(imageIdList: Array<any>) {\n    this.element = this.viewPort.element;\n    this.imageIdList = imageIdList;\n    this.viewPort.resetViewer();\n    this.viewPort.resetImageCache(); // clean up image cache\n    this.seriesList = []; // start a new series list\n    this.currentSeriesIndex = 0; // always display first series\n    this.loadedImages = []; // reset list of images already loaded\n\n    //\n    // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n    //\n    const maxImages = (this.maxImagesToLoad <= 0) ? imageIdList.length : Math.min(this.maxImagesToLoad, imageIdList.length);\n    this.loadingImages = true; // activate progress indicator\n    this.targetImageCount = maxImages;\n    for (let index = 0; index < maxImages; index++) {\n      const imageId = imageIdList[index];\n      cornerstone.loadAndCacheImage(imageId).then(imageData => { this.imageLoaded(imageData) });\n    }\n\n  }\n\n  /**\n   * Load the next batch of images\n   */\n  public loadMoreImages() {\n    this.element = this.viewPort.element;\n    //\n    // loop thru all imageIds, load and cache them for exhibition (up the the maximum limit defined)\n    //\n    const maxImages = (this.maxImagesToLoad <= 0) ? (this.imageIdList.length - this.loadedImages.length) : Math.min(this.maxImagesToLoad, this.imageIdList.length - this.loadedImages.length);\n    this.loadingImages = true; // activate progress indicator\n    this.targetImageCount += maxImages;\n    let nextImageIndex = this.loadedImages.length;\n    for (let index = 0; index < maxImages; index++) {\n      const imageId = this.imageIdList[nextImageIndex++];\n      cornerstone.loadAndCacheImage(imageId)\n        .then(imageData => { this.imageLoaded(imageData) })\n        .catch(err => { this.targetImageCount--; });\n    }\n\n  }\n\n  /**\n   *\n   * @param imageData the dicom image data\n   */\n  private imageLoaded(imageData) {\n    //console.log(imageData.imageId)\n    // build list of series in all loadded images\n    const series = {\n      studyID: imageData.data.string('x0020000d'),\n      seriesID: imageData.data.string('x0020000e'),\n      seriesNumber: imageData.data.intString('x00200011'),\n      studyDescription: imageData.data.string('x00081030'),\n      seriesDescription: imageData.data.string('x0008103e'),\n      imageCount: 1,\n      imageList: [imageData]\n    }\n    // if this is a new series, add it to the list\n    let seriesIndex = this.seriesList.findIndex(item => item.seriesID === series.seriesID);\n    if (seriesIndex < 0) {\n      seriesIndex = this.seriesList.length;\n      this.seriesList.push(series);\n      this.seriesList.sort((a, b) => {\n        if (a.seriesNumber > b.seriesNumber) return 1;\n        if (a.seriesNumber < b.seriesNumber) return -1;\n        return 0;\n      })\n    } else {\n      let seriesItem = this.seriesList[seriesIndex];\n      seriesItem.imageCount++;\n      seriesItem.imageList.push(imageData);\n      seriesItem.imageList.sort((a, b) => {\n        if (a.data.intString('x00200013') > b.data.intString('x00200013')) return 1;\n        if (a.data.intString('x00200013') < b.data.intString('x00200013')) return -1;\n        return 0;\n      })\n    }\n\n    this.loadedImages.push(imageData); // save to images loaded\n\n    if (seriesIndex === this.currentSeriesIndex) {\n      //this.currentSeries = this.seriesList[seriesIndex];\n      //this.imageCount = this.currentSeries.imageCount; // get total image count\n      //this.viewPort.addImageData(imageData);\n      this.showSeries(this.currentSeriesIndex)\n    }\n\n    if (this.loadedImages.length >= this.targetImageCount) { // did we finish loading images?\n      this.loadingImages = false; // deactivate progress indicator\n    }\n\n  }\n\n  public showSeries(index) {\n    //        this.resetAllTools();\n    this.currentSeriesIndex = index;\n    this.currentSeries = this.seriesList[index];\n    this.imageCount = this.currentSeries.imageCount; // get total image count\n    this.viewPort.resetImageCache(); // clean up image cache\n    //        this.loadingImages = true; // activate progress indicator\n    for (let i = 0; i < this.currentSeries.imageList.length; i++) {\n      const imageData = this.currentSeries.imageList[i];\n      this.viewPort.addImageData(imageData);\n    }\n    //        this.loadingImages = false; // de-activate progress indicator\n  }\n\n  public saveAs() {\n    cornerstoneTools.saveAs(this.element, \"teste.jpg\")\n  }\n\n  /**\n   * Image scroll methods\n   */\n  public nextImage() {\n    if (this.viewPort.currentIndex < this.imageCount) {\n      this.viewPort.nextImage();\n    }\n  }\n\n  public previousImage() {\n    if (this.viewPort.currentIndex > 0) {\n      this.viewPort.previousImage();\n    }\n  }\n\n  /**\n   * Methods to activate/deactivate viewer tools\n   */\n\n  // deactivate all tools\n  public resetAllTools() {\n    if (this.imageCount > 0) {\n      this.viewPort.resetAllTools()\n      this.stopClip();\n    }\n  }\n\n  // activate windowing\n  public enableWindowing() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.wwwc.activate(this.element, 1);\n      // cornerstoneTools.wwwcTouchDrag.activate(this.element);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Wwwc', { mouseButtonMask: 1 }, ['Mouse']);\n\n    }\n  }\n\n  // activate zoom\n  public enableZoom() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.zoom.activate(this.element, 5); // 5 is right mouse button and left mouse button\n      // cornerstoneTools.zoomTouchDrag.activate(this.element);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Zoom', { mouseButtonMask: 1 }, ['Mouse']); // zoom left mouse\n      // cornerstoneTools.setToolActiveForElement(this.element, 'ZoomTouchPinch', { }, ['Mouse']);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Pan', { mouseButtonMask: 2 }, ['Mouse']); // pan right mouse\n\n    }\n  }\n\n  // activate pan\n  public enablePan() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.pan.activate(this.element, 3); // 3 is middle mouse button and left mouse button\n      // cornerstoneTools.panTouchDrag.activate(this.element);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Pan', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate image scroll\n  public enableScroll() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.stackScroll.activate(this.element, 1);\n      // cornerstoneTools.stackScrollTouchDrag.activate(this.element);\n      // cornerstoneTools.stackScrollKeyboard.activate(this.element);\n      cornerstoneTools.setToolActiveForElement(this.element, 'StackScroll', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate length measurement\n  public enableLength() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.length.activate(this.element, 1);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Length', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate angle measurement\n  public enableAngle() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.simpleAngle.activate(this.element, 1);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Angle', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate pixel probe\n  public enableProbe() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.probe.activate(this.element, 1);\n      cornerstoneTools.setToolActiveForElement(this.element, 'Probe', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate Elliptical ROI\n  public enableElliptical() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.ellipticalRoi.activate(this.element, 1);\n      cornerstoneTools.setToolActiveForElement(this.element, 'EllipticalRoi', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // activate Rectangle ROI\n  public enableRectangle() {\n    if (this.imageCount > 0) {\n      this.resetAllTools();\n      // cornerstoneTools.rectangleRoi.activate(this.element, 1);\n      cornerstoneTools.setToolActiveForElement(this.element, 'RectangleRoi', { mouseButtonMask: 1 }, ['Mouse']);\n    }\n  }\n\n  // Play Clip\n  public playClip() {\n    if (this.imageCount > 0) {\n      let frameRate = 10;\n      let stackState = cornerstoneTools.getToolState(this.element, 'stack');\n      if (stackState) {\n        frameRate = stackState.data[0].frameRate;\n        // Play at a default 10 FPS if the framerate is not specified\n        if (frameRate === undefined || frameRate === null || frameRate === 0) {\n          frameRate = 10;\n        }\n      }\n      cornerstoneTools.playClip(this.element, frameRate);\n    }\n  }\n\n  // Stop Clip\n  public stopClip() {\n    cornerstoneTools.stopClip(this.element);\n  }\n\n  // invert image\n  public invertImage() {\n    if (this.imageCount > 0) {\n      let viewport = cornerstone.getViewport(this.element);\n      // Toggle invert\n      if (viewport.invert === true) {\n        viewport.invert = false;\n      } else {\n        viewport.invert = true;\n      }\n      cornerstone.setViewport(this.element, viewport);\n    }\n  }\n\n  // reset image\n  public resetImage() {\n    if (this.imageCount > 0) {\n      let toolStateManager = cornerstoneTools.getElementToolStateManager(this.element);\n      // Note that this only works on ImageId-specific tool state managers (for now)\n      //toolStateManager.clear(this.element);\n      cornerstoneTools.clearToolState(this.element, \"Length\");\n      cornerstoneTools.clearToolState(this.element, \"Angle\");\n      // cornerstoneTools.clearToolState(this.element, \"simpleAngle\");\n      cornerstoneTools.clearToolState(this.element, \"Probe\");\n      cornerstoneTools.clearToolState(this.element, \"EllipticalRoi\");\n      cornerstoneTools.clearToolState(this.element, \"RectangleRoi\");\n      cornerstone.updateImage(this.element);\n      this.resetAllTools();\n    }\n  }\n\n  public clearImage() {\n    this.viewPort.resetViewer();\n    this.viewPort.resetImageCache();\n    this.seriesList = []; // list of series on the images being displayed\n    this.currentSeriesIndex = 0;\n    this.currentSeries = {};\n    this.imageCount = 0; // total image count being viewed\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { DICOMViewerComponent } from './dicom-viewer.component';\nimport { CornerstoneDirective } from './cornerstone.directive';\nimport { ThumbnailDirective } from './thumbnail.directive';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [DICOMViewerComponent, CornerstoneDirective, ThumbnailDirective],\n  exports: [DICOMViewerComponent, CornerstoneDirective, ThumbnailDirective]\n})\nexport class DicomViewerModule { }\n"]}