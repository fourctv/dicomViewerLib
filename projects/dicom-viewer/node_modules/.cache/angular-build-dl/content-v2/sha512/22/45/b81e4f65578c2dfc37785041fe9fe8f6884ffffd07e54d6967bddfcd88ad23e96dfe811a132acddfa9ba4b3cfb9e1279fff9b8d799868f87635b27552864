(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendor"], {
    /***/
    "/d8p":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/repeat.js ***!
      \*****************************************************************/

    /*! exports provided: repeat */

    /***/
    function d8p(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "repeat", function () {
        return repeat;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/empty */
      "EY2u");

      function repeat() {
        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
        return function (source) {
          if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_1__["empty"])();
          } else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
          } else {
            return source.lift(new RepeatOperator(count - 1, source));
          }
        };
      }

      var RepeatOperator = /*#__PURE__*/function () {
        function RepeatOperator(count, source) {
          _classCallCheck(this, RepeatOperator);

          this.count = count;
          this.source = source;
        }

        _createClass2(RepeatOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
          }
        }]);

        return RepeatOperator;
      }();

      var RepeatSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_) {
        _inherits(RepeatSubscriber, _Subscriber__WEBPACK_);

        var _super = _createSuper(RepeatSubscriber);

        function RepeatSubscriber(destination, count, source) {
          var _this;

          _classCallCheck(this, RepeatSubscriber);

          _this = _super.call(this, destination);
          _this.count = count;
          _this.source = source;
          return _this;
        }

        _createClass2(RepeatSubscriber, [{
          key: "complete",
          value: function complete() {
            if (!this.isStopped) {
              var source = this.source,
                  count = this.count;

              if (count === 0) {
                return _get(_getPrototypeOf(RepeatSubscriber.prototype), "complete", this).call(this);
              } else if (count > -1) {
                this.count = count - 1;
              }

              source.subscribe(this._unsubscribeAndRecycle());
            }
          }
        }]);

        return RepeatSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=repeat.js.map

      /***/

    },

    /***/
    "/uUt":
    /*!*******************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js ***!
      \*******************************************************************************/

    /*! exports provided: distinctUntilChanged */

    /***/
    function uUt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function () {
        return distinctUntilChanged;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function distinctUntilChanged(compare, keySelector) {
        return function (source) {
          return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
        };
      }

      var DistinctUntilChangedOperator = /*#__PURE__*/function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
          _classCallCheck(this, DistinctUntilChangedOperator);

          this.compare = compare;
          this.keySelector = keySelector;
        }

        _createClass2(DistinctUntilChangedOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
          }
        }]);

        return DistinctUntilChangedOperator;
      }();

      var DistinctUntilChangedSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_2) {
        _inherits(DistinctUntilChangedSubscriber, _Subscriber__WEBPACK_2);

        var _super2 = _createSuper(DistinctUntilChangedSubscriber);

        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
          var _this2;

          _classCallCheck(this, DistinctUntilChangedSubscriber);

          _this2 = _super2.call(this, destination);
          _this2.keySelector = keySelector;
          _this2.hasKey = false;

          if (typeof compare === 'function') {
            _this2.compare = compare;
          }

          return _this2;
        }

        _createClass2(DistinctUntilChangedSubscriber, [{
          key: "compare",
          value: function compare(x, y) {
            return x === y;
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var key;

            try {
              var keySelector = this.keySelector;
              key = keySelector ? keySelector(value) : value;
            } catch (err) {
              return this.destination.error(err);
            }

            var result = false;

            if (this.hasKey) {
              try {
                var compare = this.compare;
                result = compare(this.key, key);
              } catch (err) {
                return this.destination.error(err);
              }
            } else {
              this.hasKey = true;
            }

            if (!result) {
              this.key = key;
              this.destination.next(value);
            }
          }
        }]);

        return DistinctUntilChangedSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=distinctUntilChanged.js.map

      /***/

    },

    /***/
    "02Lk":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/distinct.js ***!
      \*******************************************************************/

    /*! exports provided: distinct, DistinctSubscriber */

    /***/
    function Lk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "distinct", function () {
        return distinct;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DistinctSubscriber", function () {
        return DistinctSubscriber;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function distinct(keySelector, flushes) {
        return function (source) {
          return source.lift(new DistinctOperator(keySelector, flushes));
        };
      }

      var DistinctOperator = /*#__PURE__*/function () {
        function DistinctOperator(keySelector, flushes) {
          _classCallCheck(this, DistinctOperator);

          this.keySelector = keySelector;
          this.flushes = flushes;
        }

        _createClass2(DistinctOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
          }
        }]);

        return DistinctOperator;
      }();

      var DistinctSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP) {
        _inherits(DistinctSubscriber, _innerSubscribe__WEBP);

        var _super3 = _createSuper(DistinctSubscriber);

        function DistinctSubscriber(destination, keySelector, flushes) {
          var _this3;

          _classCallCheck(this, DistinctSubscriber);

          _this3 = _super3.call(this, destination);
          _this3.keySelector = keySelector;
          _this3.values = new Set();

          if (flushes) {
            _this3.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(flushes, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](_assertThisInitialized(_this3))));
          }

          return _this3;
        }

        _createClass2(DistinctSubscriber, [{
          key: "notifyNext",
          value: function notifyNext() {
            this.values.clear();
          }
        }, {
          key: "notifyError",
          value: function notifyError(error) {
            this._error(error);
          }
        }, {
          key: "_next",
          value: function _next(value) {
            if (this.keySelector) {
              this._useKeySelector(value);
            } else {
              this._finalizeNext(value, value);
            }
          }
        }, {
          key: "_useKeySelector",
          value: function _useKeySelector(value) {
            var key;
            var destination = this.destination;

            try {
              key = this.keySelector(value);
            } catch (err) {
              destination.error(err);
              return;
            }

            this._finalizeNext(key, value);
          }
        }, {
          key: "_finalizeNext",
          value: function _finalizeNext(key, value) {
            var values = this.values;

            if (!values.has(key)) {
              values.add(key);
              this.destination.next(value);
            }
          }
        }]);

        return DistinctSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=distinct.js.map

      /***/

    },

    /***/
    "04ZW":
    /*!****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js ***!
      \****************************************************************************/

    /*! exports provided: fromEventPattern */

    /***/
    function ZW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fromEventPattern", function () {
        return fromEventPattern;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isFunction */
      "n6bG");
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../operators/map */
      "lJxs");

      function fromEventPattern(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
          return fromEventPattern(addHandler, removeHandler).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) {
            return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
          }));
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var handler = function handler() {
            for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {
              e[_key] = arguments[_key];
            }

            return subscriber.next(e.length === 1 ? e[0] : e);
          };

          var retValue;

          try {
            retValue = addHandler(handler);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          if (!Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(removeHandler)) {
            return undefined;
          }

          return function () {
            return removeHandler(handler, retValue);
          };
        });
      } //# sourceMappingURL=fromEventPattern.js.map

      /***/

    },

    /***/
    "05l1":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js ***!
      \************************************************************************/

    /*! exports provided: publishReplay */

    /***/
    function l1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "publishReplay", function () {
        return publishReplay;
      });
      /* harmony import */


      var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../ReplaySubject */
      "jtHE");
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./multicast */
      "oB13");

      function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
        if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
          scheduler = selectorOrScheduler;
        }

        var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
        var subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
        return function (source) {
          return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(function () {
            return subject;
          }, selector)(source);
        };
      } //# sourceMappingURL=publishReplay.js.map

      /***/

    },

    /***/
    "0EUg":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concatAll.js ***!
      \********************************************************************/

    /*! exports provided: concatAll */

    /***/
    function EUg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "concatAll", function () {
        return concatAll;
      });
      /* harmony import */


      var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeAll */
      "bHdf");

      function concatAll() {
        return Object(_mergeAll__WEBPACK_IMPORTED_MODULE_0__["mergeAll"])(1);
      } //# sourceMappingURL=concatAll.js.map

      /***/

    },

    /***/
    "0Pi8":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/endWith.js ***!
      \******************************************************************/

    /*! exports provided: endWith */

    /***/
    function Pi8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "endWith", function () {
        return endWith;
      });
      /* harmony import */


      var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/concat */
      "GyhO");
      /* harmony import */


      var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/of */
      "LRne");

      function endWith() {
        for (var _len2 = arguments.length, array = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          array[_key2] = arguments[_key2];
        }

        return function (source) {
          return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(source, Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"]).apply(void 0, array));
        };
      } //# sourceMappingURL=endWith.js.map

      /***/

    },

    /***/
    "128B":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/reduce.js ***!
      \*****************************************************************/

    /*! exports provided: reduce */

    /***/
    function B(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "reduce", function () {
        return reduce;
      });
      /* harmony import */


      var _scan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./scan */
      "Kqap");
      /* harmony import */


      var _takeLast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./takeLast */
      "BFxc");
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      "xbPD");
      /* harmony import */


      var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/pipe */
      "mCNh");

      function reduce(accumulator, seed) {
        if (arguments.length >= 2) {
          return function reduceOperatorFunctionWithSeed(source) {
            return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])(accumulator, seed), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1), Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__["defaultIfEmpty"])(seed))(source);
          };
        }

        return function reduceOperatorFunction(source) {
          return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])(function (acc, value, index) {
            return accumulator(acc, value, index + 1);
          }), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1))(source);
        };
      } //# sourceMappingURL=reduce.js.map

      /***/

    },

    /***/
    "1G5W":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js ***!
      \********************************************************************/

    /*! exports provided: takeUntil */

    /***/
    function G5W(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "takeUntil", function () {
        return takeUntil;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function takeUntil(notifier) {
        return function (source) {
          return source.lift(new TakeUntilOperator(notifier));
        };
      }

      var TakeUntilOperator = /*#__PURE__*/function () {
        function TakeUntilOperator(notifier) {
          _classCallCheck(this, TakeUntilOperator);

          this.notifier = notifier;
        }

        _createClass2(TakeUntilOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
            var notifierSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(this.notifier, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](takeUntilSubscriber));

            if (notifierSubscription && !takeUntilSubscriber.seenValue) {
              takeUntilSubscriber.add(notifierSubscription);
              return source.subscribe(takeUntilSubscriber);
            }

            return takeUntilSubscriber;
          }
        }]);

        return TakeUntilOperator;
      }();

      var TakeUntilSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP2) {
        _inherits(TakeUntilSubscriber, _innerSubscribe__WEBP2);

        var _super4 = _createSuper(TakeUntilSubscriber);

        function TakeUntilSubscriber(destination) {
          var _this4;

          _classCallCheck(this, TakeUntilSubscriber);

          _this4 = _super4.call(this, destination);
          _this4.seenValue = false;
          return _this4;
        }

        _createClass2(TakeUntilSubscriber, [{
          key: "notifyNext",
          value: function notifyNext() {
            this.seenValue = true;
            this.complete();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {}
        }]);

        return TakeUntilSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=takeUntil.js.map

      /***/

    },

    /***/
    "1Ykd":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js ***!
      \*********************************************************************/

    /*! exports provided: sampleTime */

    /***/
    function Ykd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sampleTime", function () {
        return sampleTime;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");

      function sampleTime(period) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        return function (source) {
          return source.lift(new SampleTimeOperator(period, scheduler));
        };
      }

      var SampleTimeOperator = /*#__PURE__*/function () {
        function SampleTimeOperator(period, scheduler) {
          _classCallCheck(this, SampleTimeOperator);

          this.period = period;
          this.scheduler = scheduler;
        }

        _createClass2(SampleTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
          }
        }]);

        return SampleTimeOperator;
      }();

      var SampleTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_3) {
        _inherits(SampleTimeSubscriber, _Subscriber__WEBPACK_3);

        var _super5 = _createSuper(SampleTimeSubscriber);

        function SampleTimeSubscriber(destination, period, scheduler) {
          var _this5;

          _classCallCheck(this, SampleTimeSubscriber);

          _this5 = _super5.call(this, destination);
          _this5.period = period;
          _this5.scheduler = scheduler;
          _this5.hasValue = false;

          _this5.add(scheduler.schedule(dispatchNotification, period, {
            subscriber: _assertThisInitialized(_this5),
            period: period
          }));

          return _this5;
        }

        _createClass2(SampleTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.lastValue = value;
            this.hasValue = true;
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            if (this.hasValue) {
              this.hasValue = false;
              this.destination.next(this.lastValue);
            }
          }
        }]);

        return SampleTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      function dispatchNotification(state) {
        var subscriber = state.subscriber,
            period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
      } //# sourceMappingURL=sampleTime.js.map

      /***/

    },

    /***/
    "1uah":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/zip.js ***!
      \***************************************************************/

    /*! exports provided: zip, ZipOperator, ZipSubscriber */

    /***/
    function uah(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "zip", function () {
        return zip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ZipOperator", function () {
        return ZipOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ZipSubscriber", function () {
        return ZipSubscriber;
      });
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./fromArray */
      "yCtX");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../../internal/symbol/iterator */
      "Lhse");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function zip() {
        for (var _len3 = arguments.length, observables = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          observables[_key3] = arguments[_key3];
        }

        var resultSelector = observables[observables.length - 1];

        if (typeof resultSelector === 'function') {
          observables.pop();
        }

        return Object(_fromArray__WEBPACK_IMPORTED_MODULE_0__["fromArray"])(observables, undefined).lift(new ZipOperator(resultSelector));
      }

      var ZipOperator = /*#__PURE__*/function () {
        function ZipOperator(resultSelector) {
          _classCallCheck(this, ZipOperator);

          this.resultSelector = resultSelector;
        }

        _createClass2(ZipOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
          }
        }]);

        return ZipOperator;
      }();

      var ZipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_4) {
        _inherits(ZipSubscriber, _Subscriber__WEBPACK_4);

        var _super6 = _createSuper(ZipSubscriber);

        function ZipSubscriber(destination, resultSelector) {
          var _this6;

          var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.create(null);

          _classCallCheck(this, ZipSubscriber);

          _this6 = _super6.call(this, destination);
          _this6.resultSelector = resultSelector;
          _this6.iterators = [];
          _this6.active = 0;
          _this6.resultSelector = typeof resultSelector === 'function' ? resultSelector : undefined;
          return _this6;
        }

        _createClass2(ZipSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var iterators = this.iterators;

            if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
              iterators.push(new StaticArrayIterator(value));
            } else if (typeof value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__["iterator"]] === 'function') {
              iterators.push(new StaticIterator(value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__["iterator"]]()));
            } else {
              iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var iterators = this.iterators;
            var len = iterators.length;
            this.unsubscribe();

            if (len === 0) {
              this.destination.complete();
              return;
            }

            this.active = len;

            for (var i = 0; i < len; i++) {
              var iterator = iterators[i];

              if (iterator.stillUnsubscribed) {
                var destination = this.destination;
                destination.add(iterator.subscribe());
              } else {
                this.active--;
              }
            }
          }
        }, {
          key: "notifyInactive",
          value: function notifyInactive() {
            this.active--;

            if (this.active === 0) {
              this.destination.complete();
            }
          }
        }, {
          key: "checkIterators",
          value: function checkIterators() {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;

            for (var i = 0; i < len; i++) {
              var iterator = iterators[i];

              if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
              }
            }

            var shouldComplete = false;
            var args = [];

            for (var _i = 0; _i < len; _i++) {
              var _iterator = iterators[_i];

              var result = _iterator.next();

              if (_iterator.hasCompleted()) {
                shouldComplete = true;
              }

              if (result.done) {
                destination.complete();
                return;
              }

              args.push(result.value);
            }

            if (this.resultSelector) {
              this._tryresultSelector(args);
            } else {
              destination.next(args);
            }

            if (shouldComplete) {
              destination.complete();
            }
          }
        }, {
          key: "_tryresultSelector",
          value: function _tryresultSelector(args) {
            var result;

            try {
              result = this.resultSelector.apply(this, args);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return ZipSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

      var StaticIterator = /*#__PURE__*/function () {
        function StaticIterator(iterator) {
          _classCallCheck(this, StaticIterator);

          this.iterator = iterator;
          this.nextResult = iterator.next();
        }

        _createClass2(StaticIterator, [{
          key: "hasValue",
          value: function hasValue() {
            return true;
          }
        }, {
          key: "next",
          value: function next() {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
          }
        }, {
          key: "hasCompleted",
          value: function hasCompleted() {
            var nextResult = this.nextResult;
            return Boolean(nextResult && nextResult.done);
          }
        }]);

        return StaticIterator;
      }();

      var StaticArrayIterator = /*#__PURE__*/function () {
        function StaticArrayIterator(array) {
          _classCallCheck(this, StaticArrayIterator);

          this.array = array;
          this.index = 0;
          this.length = 0;
          this.length = array.length;
        }

        _createClass2(StaticArrayIterator, [{
          key: _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__["iterator"],
          value: function value() {
            return this;
          }
        }, {
          key: "next",
          value: function next(value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? {
              value: array[i],
              done: false
            } : {
              value: null,
              done: true
            };
          }
        }, {
          key: "hasValue",
          value: function hasValue() {
            return this.array.length > this.index;
          }
        }, {
          key: "hasCompleted",
          value: function hasCompleted() {
            return this.array.length === this.index;
          }
        }]);

        return StaticArrayIterator;
      }();

      var ZipBufferIterator = /*#__PURE__*/function (_innerSubscribe__WEBP3) {
        _inherits(ZipBufferIterator, _innerSubscribe__WEBP3);

        var _super7 = _createSuper(ZipBufferIterator);

        function ZipBufferIterator(destination, parent, observable) {
          var _this7;

          _classCallCheck(this, ZipBufferIterator);

          _this7 = _super7.call(this, destination);
          _this7.parent = parent;
          _this7.observable = observable;
          _this7.stillUnsubscribed = true;
          _this7.buffer = [];
          _this7.isComplete = false;
          return _this7;
        }

        _createClass2(ZipBufferIterator, [{
          key: _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__["iterator"],
          value: function value() {
            return this;
          }
        }, {
          key: "next",
          value: function next() {
            var buffer = this.buffer;

            if (buffer.length === 0 && this.isComplete) {
              return {
                value: null,
                done: true
              };
            } else {
              return {
                value: buffer.shift(),
                done: false
              };
            }
          }
        }, {
          key: "hasValue",
          value: function hasValue() {
            return this.buffer.length > 0;
          }
        }, {
          key: "hasCompleted",
          value: function hasCompleted() {
            return this.buffer.length === 0 && this.isComplete;
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            if (this.buffer.length > 0) {
              this.isComplete = true;
              this.parent.notifyInactive();
            } else {
              this.destination.complete();
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
          }
        }, {
          key: "subscribe",
          value: function subscribe() {
            return Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_4__["innerSubscribe"])(this.observable, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_4__["SimpleInnerSubscriber"](this));
          }
        }]);

        return ZipBufferIterator;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_4__["SimpleOuterSubscriber"]); //# sourceMappingURL=zip.js.map

      /***/

    },

    /***/
    "2QA8":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js ***!
      \********************************************************************/

    /*! exports provided: rxSubscriber, $$rxSubscriber */

    /***/
    function QA8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rxSubscriber", function () {
        return rxSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "$$rxSubscriber", function () {
        return $$rxSubscriber;
      });

      var rxSubscriber = function () {
        return typeof Symbol === 'function' ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
      }();

      var $$rxSubscriber = rxSubscriber; //# sourceMappingURL=rxSubscriber.js.map

      /***/
    },

    /***/
    "2QGa":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/partition.js ***!
      \*********************************************************************/

    /*! exports provided: partition */

    /***/
    function QGa(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "partition", function () {
        return partition;
      });
      /* harmony import */


      var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/not */
      "F97/");
      /* harmony import */


      var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeTo */
      "SeVD");
      /* harmony import */


      var _operators_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/filter */
      "pLZG");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      function partition(source, predicate, thisArg) {
        return [Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(predicate, thisArg)(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source))), Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source)))];
      } //# sourceMappingURL=partition.js.map

      /***/

    },

    /***/
    "2Vo4":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js ***!
      \****************************************************************/

    /*! exports provided: BehaviorSubject */

    /***/
    function Vo4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function () {
        return BehaviorSubject;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subject */
      "XNiG");
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      "9ppp");

      var BehaviorSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP) {
        _inherits(BehaviorSubject, _Subject__WEBPACK_IMP);

        var _super8 = _createSuper(BehaviorSubject);

        function BehaviorSubject(_value) {
          var _this8;

          _classCallCheck(this, BehaviorSubject);

          _this8 = _super8.call(this);
          _this8._value = _value;
          return _this8;
        }

        _createClass2(BehaviorSubject, [{
          key: "value",
          get: function get() {
            return this.getValue();
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var subscription = _get(_getPrototypeOf(BehaviorSubject.prototype), "_subscribe", this).call(this, subscriber);

            if (subscription && !subscription.closed) {
              subscriber.next(this._value);
            }

            return subscription;
          }
        }, {
          key: "getValue",
          value: function getValue() {
            if (this.hasError) {
              throw this.thrownError;
            } else if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__["ObjectUnsubscribedError"]();
            } else {
              return this._value;
            }
          }
        }, {
          key: "next",
          value: function next(value) {
            _get(_getPrototypeOf(BehaviorSubject.prototype), "next", this).call(this, this._value = value);
          }
        }]);

        return BehaviorSubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]); //# sourceMappingURL=BehaviorSubject.js.map

      /***/

    },

    /***/
    "2fFW":
    /*!*******************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/config.js ***!
      \*******************************************************/

    /*! exports provided: config */

    /***/
    function fFW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "config", function () {
        return config;
      });

      var _enable_super_gross_mode_that_will_cause_bad_things = false;
      var config = {
        Promise: undefined,

        set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
            var error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
          } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
          }

          _enable_super_gross_mode_that_will_cause_bad_things = value;
        },

        get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
        }

      }; //# sourceMappingURL=config.js.map

      /***/
    },

    /***/
    "32Ea":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js ***!
      \********************************************************************/

    /*! exports provided: skipWhile */

    /***/
    function Ea(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "skipWhile", function () {
        return skipWhile;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function skipWhile(predicate) {
        return function (source) {
          return source.lift(new SkipWhileOperator(predicate));
        };
      }

      var SkipWhileOperator = /*#__PURE__*/function () {
        function SkipWhileOperator(predicate) {
          _classCallCheck(this, SkipWhileOperator);

          this.predicate = predicate;
        }

        _createClass2(SkipWhileOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
          }
        }]);

        return SkipWhileOperator;
      }();

      var SkipWhileSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_5) {
        _inherits(SkipWhileSubscriber, _Subscriber__WEBPACK_5);

        var _super9 = _createSuper(SkipWhileSubscriber);

        function SkipWhileSubscriber(destination, predicate) {
          var _this9;

          _classCallCheck(this, SkipWhileSubscriber);

          _this9 = _super9.call(this, destination);
          _this9.predicate = predicate;
          _this9.skipping = true;
          _this9.index = 0;
          return _this9;
        }

        _createClass2(SkipWhileSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var destination = this.destination;

            if (this.skipping) {
              this.tryCallPredicate(value);
            }

            if (!this.skipping) {
              destination.next(value);
            }
          }
        }, {
          key: "tryCallPredicate",
          value: function tryCallPredicate(value) {
            try {
              var result = this.predicate(value, this.index++);
              this.skipping = Boolean(result);
            } catch (err) {
              this.destination.error(err);
            }
          }
        }]);

        return SkipWhileSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skipWhile.js.map

      /***/

    },

    /***/
    "3E0/":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/delay.js ***!
      \****************************************************************/

    /*! exports provided: delay */

    /***/
    function E0(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "delay", function () {
        return delay;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isDate */
      "mlxB");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Notification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Notification */
      "WMd4");

      function delay(delay) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        var absoluteDelay = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(delay);
        var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
        return function (source) {
          return source.lift(new DelayOperator(delayFor, scheduler));
        };
      }

      var DelayOperator = /*#__PURE__*/function () {
        function DelayOperator(delay, scheduler) {
          _classCallCheck(this, DelayOperator);

          this.delay = delay;
          this.scheduler = scheduler;
        }

        _createClass2(DelayOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
          }
        }]);

        return DelayOperator;
      }();

      var DelaySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_6) {
        _inherits(DelaySubscriber, _Subscriber__WEBPACK_6);

        var _super10 = _createSuper(DelaySubscriber);

        function DelaySubscriber(destination, delay, scheduler) {
          var _this10;

          _classCallCheck(this, DelaySubscriber);

          _this10 = _super10.call(this, destination);
          _this10.delay = delay;
          _this10.scheduler = scheduler;
          _this10.queue = [];
          _this10.active = false;
          _this10.errored = false;
          return _this10;
        }

        _createClass2(DelaySubscriber, [{
          key: "_schedule",
          value: function _schedule(scheduler) {
            this.active = true;
            var destination = this.destination;
            destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
              source: this,
              destination: this.destination,
              scheduler: scheduler
            }));
          }
        }, {
          key: "scheduleNotification",
          value: function scheduleNotification(notification) {
            if (this.errored === true) {
              return;
            }

            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);

            if (this.active === false) {
              this._schedule(scheduler);
            }
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createNext(value));
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createComplete());
            this.unsubscribe();
          }
        }], [{
          key: "dispatch",
          value: function dispatch(state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;

            while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
              queue.shift().notification.observe(destination);
            }

            if (queue.length > 0) {
              var _delay2 = Math.max(0, queue[0].time - scheduler.now());

              this.schedule(state, _delay2);
            } else {
              this.unsubscribe();
              source.active = false;
            }
          }
        }]);

        return DelaySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

      var DelayMessage = function DelayMessage(time, notification) {
        _classCallCheck(this, DelayMessage);

        this.time = time;
        this.notification = notification;
      }; //# sourceMappingURL=delay.js.map

      /***/

    },

    /***/
    "3N8a":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js ***!
      \**********************************************************************/

    /*! exports provided: AsyncAction */

    /***/
    function N8a(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsyncAction", function () {
        return AsyncAction;
      });
      /* harmony import */


      var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Action */
      "7ve7");

      var AsyncAction = /*#__PURE__*/function (_Action__WEBPACK_IMPO) {
        _inherits(AsyncAction, _Action__WEBPACK_IMPO);

        var _super11 = _createSuper(AsyncAction);

        function AsyncAction(scheduler, work) {
          var _this11;

          _classCallCheck(this, AsyncAction);

          _this11 = _super11.call(this, scheduler, work);
          _this11.scheduler = scheduler;
          _this11.work = work;
          _this11.pending = false;
          return _this11;
        }

        _createClass2(AsyncAction, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (this.closed) {
              return this;
            }

            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;

            if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
            }

            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
          }
        }, {
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && this.delay === delay && this.pending === false) {
              return id;
            }

            clearInterval(id);
            return undefined;
          }
        }, {
          key: "execute",
          value: function execute(state, delay) {
            if (this.closed) {
              return new Error('executing a cancelled action');
            }

            this.pending = false;

            var error = this._execute(state, delay);

            if (error) {
              return error;
            } else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
          }
        }, {
          key: "_execute",
          value: function _execute(state, delay) {
            var errored = false;
            var errorValue = undefined;

            try {
              this.work(state);
            } catch (e) {
              errored = true;
              errorValue = !!e && e || new Error(e);
            }

            if (errored) {
              this.unsubscribe();
              return errorValue;
            }
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;

            if (index !== -1) {
              actions.splice(index, 1);
            }

            if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
            }

            this.delay = null;
          }
        }]);

        return AsyncAction;
      }(_Action__WEBPACK_IMPORTED_MODULE_0__["Action"]); //# sourceMappingURL=AsyncAction.js.map

      /***/

    },

    /***/
    "3Pt+":
    /*!********************************************************************!*\
      !*** ./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js ***!
      \********************************************************************/

    /*! exports provided: AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormsModule, MaxLengthValidator, MinLengthValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, VERSION, Validators, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption, ɵangular_packages_forms_forms_a, ɵangular_packages_forms_forms_b, ɵangular_packages_forms_forms_ba, ɵangular_packages_forms_forms_bb, ɵangular_packages_forms_forms_bc, ɵangular_packages_forms_forms_bd, ɵangular_packages_forms_forms_be, ɵangular_packages_forms_forms_bf, ɵangular_packages_forms_forms_bg, ɵangular_packages_forms_forms_bh, ɵangular_packages_forms_forms_bi, ɵangular_packages_forms_forms_bj, ɵangular_packages_forms_forms_bk, ɵangular_packages_forms_forms_bl, ɵangular_packages_forms_forms_bm, ɵangular_packages_forms_forms_bn, ɵangular_packages_forms_forms_bo, ɵangular_packages_forms_forms_bp, ɵangular_packages_forms_forms_c, ɵangular_packages_forms_forms_d, ɵangular_packages_forms_forms_e, ɵangular_packages_forms_forms_f, ɵangular_packages_forms_forms_g, ɵangular_packages_forms_forms_h, ɵangular_packages_forms_forms_i, ɵangular_packages_forms_forms_j, ɵangular_packages_forms_forms_k, ɵangular_packages_forms_forms_l, ɵangular_packages_forms_forms_m, ɵangular_packages_forms_forms_n, ɵangular_packages_forms_forms_o, ɵangular_packages_forms_forms_p, ɵangular_packages_forms_forms_q, ɵangular_packages_forms_forms_r, ɵangular_packages_forms_forms_s, ɵangular_packages_forms_forms_t, ɵangular_packages_forms_forms_u, ɵangular_packages_forms_forms_v, ɵangular_packages_forms_forms_w, ɵangular_packages_forms_forms_x, ɵangular_packages_forms_forms_y, ɵangular_packages_forms_forms_z */

    /***/
    function Pt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractControl", function () {
        return AbstractControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractControlDirective", function () {
        return AbstractControlDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractFormGroupDirective", function () {
        return AbstractFormGroupDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "COMPOSITION_BUFFER_MODE", function () {
        return COMPOSITION_BUFFER_MODE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxControlValueAccessor", function () {
        return CheckboxControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxRequiredValidator", function () {
        return CheckboxRequiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ControlContainer", function () {
        return ControlContainer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DefaultValueAccessor", function () {
        return DefaultValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmailValidator", function () {
        return EmailValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormArray", function () {
        return FormArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormArrayName", function () {
        return FormArrayName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormBuilder", function () {
        return FormBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControl", function () {
        return FormControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControlDirective", function () {
        return FormControlDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormControlName", function () {
        return FormControlName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroup", function () {
        return FormGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroupDirective", function () {
        return FormGroupDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormGroupName", function () {
        return FormGroupName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormsModule", function () {
        return FormsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MaxLengthValidator", function () {
        return MaxLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MinLengthValidator", function () {
        return MinLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_ASYNC_VALIDATORS", function () {
        return NG_ASYNC_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_VALIDATORS", function () {
        return NG_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NG_VALUE_ACCESSOR", function () {
        return NG_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControl", function () {
        return NgControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControlStatus", function () {
        return NgControlStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgControlStatusGroup", function () {
        return NgControlStatusGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgForm", function () {
        return NgForm;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModel", function () {
        return NgModel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModelGroup", function () {
        return NgModelGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgSelectOption", function () {
        return NgSelectOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberValueAccessor", function () {
        return NumberValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PatternValidator", function () {
        return PatternValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RadioControlValueAccessor", function () {
        return RadioControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeValueAccessor", function () {
        return RangeValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReactiveFormsModule", function () {
        return ReactiveFormsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RequiredValidator", function () {
        return RequiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectControlValueAccessor", function () {
        return SelectControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectMultipleControlValueAccessor", function () {
        return SelectMultipleControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Validators", function () {
        return Validators;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵInternalFormsSharedModule", function () {
        return ɵInternalFormsSharedModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNgNoValidate", function () {
        return ɵNgNoValidate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNgSelectMultipleOption", function () {
        return ɵNgSelectMultipleOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_a", function () {
        return SHARED_FORM_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_b", function () {
        return TEMPLATE_DRIVEN_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_ba", function () {
        return ɵNgNoValidate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bb", function () {
        return REQUIRED_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bc", function () {
        return CHECKBOX_REQUIRED_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bd", function () {
        return EMAIL_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_be", function () {
        return MIN_LENGTH_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bf", function () {
        return MAX_LENGTH_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bg", function () {
        return PATTERN_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bh", function () {
        return minValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bi", function () {
        return maxValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bj", function () {
        return requiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bk", function () {
        return requiredTrueValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bl", function () {
        return emailValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bm", function () {
        return minLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bn", function () {
        return maxLengthValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bo", function () {
        return patternValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bp", function () {
        return _nullValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_c", function () {
        return REACTIVE_DRIVEN_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_d", function () {
        return ɵInternalFormsSharedModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_e", function () {
        return CHECKBOX_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_f", function () {
        return BuiltInControlValueAccessor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_g", function () {
        return DEFAULT_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_h", function () {
        return AbstractControlStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_i", function () {
        return ngControlStatusHost;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_j", function () {
        return formDirectiveProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_k", function () {
        return formControlBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_l", function () {
        return modelGroupProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_m", function () {
        return NUMBER_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_n", function () {
        return RADIO_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_o", function () {
        return RadioControlRegistryModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_p", function () {
        return RadioControlRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_q", function () {
        return RANGE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_r", function () {
        return NG_MODEL_WITH_FORM_CONTROL_WARNING;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_s", function () {
        return formControlBinding$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_t", function () {
        return controlNameBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_u", function () {
        return formDirectiveProvider$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_v", function () {
        return formGroupNameProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_w", function () {
        return formArrayNameProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_x", function () {
        return SELECT_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_y", function () {
        return SELECT_MULTIPLE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_z", function () {
        return ɵNgSelectMultipleOption;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Base class for all built-in ControlValueAccessor classes. We use this class to distinguish
       * between built-in and custom CVAs, so that Forms logic can recognize built-in CVAs and treat
       * custom ones with higher priority (when both built-in and custom CVAs are present).
       * Note: this is an *internal-only* class and should not be extended or used directly in
       * applications code.
       */


      var BuiltInControlValueAccessor = function BuiltInControlValueAccessor() {
        _classCallCheck(this, BuiltInControlValueAccessor);
      };
      /**
       * Used to provide a `ControlValueAccessor` for form controls.
       *
       * See `DefaultValueAccessor` for how to implement one.
       *
       * @publicApi
       */


      var NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValueAccessor');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return CheckboxControlValueAccessor;
        }),
        multi: true
      };
      /**
       * @description
       * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
       * element.
       *
       * @usageNotes
       *
       * ### Using a checkbox with a reactive form.
       *
       * The following example shows how to use a checkbox with a reactive form.
       *
       * ```ts
       * const rememberLoginControl = new FormControl();
       * ```
       *
       * ```
       * <input type="checkbox" [formControl]="rememberLoginControl">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var CheckboxControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA) {
        _inherits(CheckboxControlValueAccessor, _BuiltInControlValueA);

        var _super12 = _createSuper(CheckboxControlValueAccessor);

        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          var _this12;

          _classCallCheck(this, CheckboxControlValueAccessor);

          _this12 = _super12.call(this);
          _this12._renderer = _renderer;
          _this12._elementRef = _elementRef;
          /**
           * The registered callback function called when a change event occurs on the input element.
           * @nodoc
           */

          _this12.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this12.onTouched = function () {};

          return _this12;
        }
        /**
         * Sets the "checked" property on the input element.
         * @nodoc
         */


        _createClass2(CheckboxControlValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return CheckboxControlValueAccessor;
      }(BuiltInControlValueAccessor);

      CheckboxControlValueAccessor.ɵfac = function CheckboxControlValueAccessor_Factory(t) {
        return new (t || CheckboxControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      CheckboxControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CheckboxControlValueAccessor,
        selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
        hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.checked);
            })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      CheckboxControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            host: {
              '(change)': 'onChange($event.target.checked)',
              '(blur)': 'onTouched()'
            },
            providers: [CHECKBOX_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return DefaultValueAccessor;
        }),
        multi: true
      };
      /**
       * We must check whether the agent is Android because composition events
       * behave differently between iOS and Android.
       */

      function _isAndroid() {
        var userAgent = Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])() ? Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
      }
      /**
       * @description
       * Provide this token to control if form directives buffer IME input until
       * the "compositionend" event occurs.
       * @publicApi
       */


      var COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CompositionEventMode');
      /**
       * @description
       *
       * {@searchKeywords ngDefaultControl}
       *
       * The default `ControlValueAccessor` for writing a value and listening to changes on input
       * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * @usageNotes
       *
       * ### Using the default value accessor
       *
       * The following example shows how to use an input element that activates the default value accessor
       * (in this case, a text field).
       *
       * ```ts
       * const firstNameControl = new FormControl();
       * ```
       *
       * ```
       * <input type="text" [formControl]="firstNameControl">
       * ```
       *
       * This value accessor is used by default for `<input type="text">` and `<textarea>` elements, but
       * you could also use it for custom components that have similar behavior and do not require special
       * processing. In order to attach the default value accessor to a custom element, add the
       * `ngDefaultControl` attribute as shown below.
       *
       * ```
       * <custom-input-component ngDefaultControl [(ngModel)]="value"></custom-input-component>
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var DefaultValueAccessor = /*#__PURE__*/function () {
        function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
          _classCallCheck(this, DefaultValueAccessor);

          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._compositionMode = _compositionMode;
          /**
           * The registered callback function called when an input event occurs on the input element.
           * @nodoc
           */

          this.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          this.onTouched = function () {};
          /** Whether the user is creating a composition string (IME events). */


          this._composing = false;

          if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
          }
        }
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */


        _createClass2(DefaultValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            var normalizedValue = value == null ? '' : value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /** @internal */

        }, {
          key: "_handleInput",
          value: function _handleInput(value) {
            if (!this._compositionMode || this._compositionMode && !this._composing) {
              this.onChange(value);
            }
          }
          /** @internal */

        }, {
          key: "_compositionStart",
          value: function _compositionStart() {
            this._composing = true;
          }
          /** @internal */

        }, {
          key: "_compositionEnd",
          value: function _compositionEnd(value) {
            this._composing = false;
            this._compositionMode && this.onChange(value);
          }
        }]);

        return DefaultValueAccessor;
      }();

      DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) {
        return new (t || DefaultValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](COMPOSITION_BUFFER_MODE, 8));
      };

      DefaultValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: DefaultValueAccessor,
        selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
        hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
              return ctx._handleInput($event.target.value);
            })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
              return ctx._compositionStart();
            })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
              return ctx._compositionEnd($event.target.value);
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([DEFAULT_VALUE_ACCESSOR])]
      });

      DefaultValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: Boolean,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [COMPOSITION_BUFFER_MODE]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DefaultValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            // TODO: vsavkin replace the above selector with the one below it once
            // https://github.com/angular/angular/issues/3011 is implemented
            // selector: '[ngModel],[formControl],[formControlName]',
            host: {
              '(input)': '$any(this)._handleInput($event.target.value)',
              '(blur)': 'onTouched()',
              '(compositionstart)': '$any(this)._compositionStart()',
              '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
            },
            providers: [DEFAULT_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: Boolean,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [COMPOSITION_BUFFER_MODE]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function isEmptyInputValue(value) {
        // we don't check for string here so it also works with arrays
        return value == null || value.length === 0;
      }

      function hasValidLength(value) {
        // non-strict comparison is intentional, to check for both `null` and `undefined` values
        return value != null && typeof value.length === 'number';
      }
      /**
       * @description
       * An `InjectionToken` for registering additional synchronous validators used with
       * `AbstractControl`s.
       *
       * @see `NG_ASYNC_VALIDATORS`
       *
       * @usageNotes
       *
       * ### Providing a custom validator
       *
       * The following example registers a custom validator directive. Adding the validator to the
       * existing collection of validators requires the `multi: true` option.
       *
       * ```typescript
       * @Directive({
       *   selector: '[customValidator]',
       *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
       * })
       * class CustomValidatorDirective implements Validator {
       *   validate(control: AbstractControl): ValidationErrors | null {
       *     return { 'custom': true };
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValidators');
      /**
       * @description
       * An `InjectionToken` for registering additional asynchronous validators used with
       * `AbstractControl`s.
       *
       * @see `NG_VALIDATORS`
       *
       * @publicApi
       */

      var NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgAsyncValidators');
      /**
       * A regular expression that matches valid e-mail addresses.
       *
       * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:
       * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
       *   punctuation symbols).
       * - `local-part` cannot begin or end with a period (`.`).
       * - `local-part` cannot be longer than 64 characters.
       * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
       *   `foo.com`.
       * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
       *   periods (`.`)).
       * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
       * - A `label` cannot be longer than 63 characters.
       * - The whole address cannot be longer than 254 characters.
       *
       * ## Implementation background
       *
       * This regexp was ported over from AngularJS (see there for git history):
       * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
       * It is based on the
       * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
       * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
       * lengths of different parts of the address). The main differences from the WHATWG version are:
       *   - Disallow `local-part` to begin or end with a period (`.`).
       *   - Disallow `local-part` length to exceed 64 characters.
       *   - Disallow total address length to exceed 254 characters.
       *
       * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
       */

      var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      /**
       * @description
       * Provides a set of built-in validators that can be used by form controls.
       *
       * A validator is a function that processes a `FormControl` or collection of
       * controls and returns an error map or null. A null map means that validation has passed.
       *
       * @see [Form Validation](/guide/form-validation)
       *
       * @publicApi
       */

      var Validators = /*#__PURE__*/function () {
        function Validators() {
          _classCallCheck(this, Validators);
        }

        _createClass2(Validators, null, [{
          key: "min",
          value:
          /**
           * @description
           * Validator that requires the control's value to be greater than or equal to the provided number.
           *
           * @usageNotes
           *
           * ### Validate against a minimum of 3
           *
           * ```typescript
           * const control = new FormControl(2, Validators.min(3));
           *
           * console.log(control.errors); // {min: {min: 3, actual: 2}}
           * ```
           *
           * @returns A validator function that returns an error map with the
           * `min` property if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */
          function min(_min) {
            return minValidator(_min);
          }
          /**
           * @description
           * Validator that requires the control's value to be less than or equal to the provided number.
           *
           * @usageNotes
           *
           * ### Validate against a maximum of 15
           *
           * ```typescript
           * const control = new FormControl(16, Validators.max(15));
           *
           * console.log(control.errors); // {max: {max: 15, actual: 16}}
           * ```
           *
           * @returns A validator function that returns an error map with the
           * `max` property if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "max",
          value: function max(_max) {
            return maxValidator(_max);
          }
          /**
           * @description
           * Validator that requires the control have a non-empty value.
           *
           * @usageNotes
           *
           * ### Validate that the field is non-empty
           *
           * ```typescript
           * const control = new FormControl('', Validators.required);
           *
           * console.log(control.errors); // {required: true}
           * ```
           *
           * @returns An error map with the `required` property
           * if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "required",
          value: function required(control) {
            return requiredValidator(control);
          }
          /**
           * @description
           * Validator that requires the control's value be true. This validator is commonly
           * used for required checkboxes.
           *
           * @usageNotes
           *
           * ### Validate that the field value is true
           *
           * ```typescript
           * const control = new FormControl('', Validators.requiredTrue);
           *
           * console.log(control.errors); // {required: true}
           * ```
           *
           * @returns An error map that contains the `required` property
           * set to `true` if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "requiredTrue",
          value: function requiredTrue(control) {
            return requiredTrueValidator(control);
          }
          /**
           * @description
           * Validator that requires the control's value pass an email validation test.
           *
           * Tests the value using a [regular
           * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
           * pattern suitable for common usecases. The pattern is based on the definition of a valid email
           * address in the [WHATWG HTML
           * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
           * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
           * lengths of different parts of the address).
           *
           * The differences from the WHATWG version include:
           * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).
           * - Disallow `local-part` to be longer than 64 characters.
           * - Disallow the whole address to be longer than 254 characters.
           *
           * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
           * validate the value against a different pattern.
           *
           * @usageNotes
           *
           * ### Validate that the field matches a valid email pattern
           *
           * ```typescript
           * const control = new FormControl('bad@', Validators.email);
           *
           * console.log(control.errors); // {email: true}
           * ```
           *
           * @returns An error map with the `email` property
           * if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "email",
          value: function email(control) {
            return emailValidator(control);
          }
          /**
           * @description
           * Validator that requires the length of the control's value to be greater than or equal
           * to the provided minimum length. This validator is also provided by default if you use the
           * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used
           * only for types that have a numeric `length` property, such as strings or arrays. The
           * `minLength` validator logic is also not invoked for values when their `length` property is 0
           * (for example in case of an empty string or an empty array), to support optional controls. You
           * can use the standard `required` validator if empty values should not be considered valid.
           *
           * @usageNotes
           *
           * ### Validate that the field has a minimum of 3 characters
           *
           * ```typescript
           * const control = new FormControl('ng', Validators.minLength(3));
           *
           * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
           * ```
           *
           * ```html
           * <input minlength="5">
           * ```
           *
           * @returns A validator function that returns an error map with the
           * `minlength` property if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "minLength",
          value: function minLength(_minLength) {
            return minLengthValidator(_minLength);
          }
          /**
           * @description
           * Validator that requires the length of the control's value to be less than or equal
           * to the provided maximum length. This validator is also provided by default if you use the
           * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used
           * only for types that have a numeric `length` property, such as strings or arrays.
           *
           * @usageNotes
           *
           * ### Validate that the field has maximum of 5 characters
           *
           * ```typescript
           * const control = new FormControl('Angular', Validators.maxLength(5));
           *
           * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
           * ```
           *
           * ```html
           * <input maxlength="5">
           * ```
           *
           * @returns A validator function that returns an error map with the
           * `maxlength` property if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "maxLength",
          value: function maxLength(_maxLength) {
            return maxLengthValidator(_maxLength);
          }
          /**
           * @description
           * Validator that requires the control's value to match a regex pattern. This validator is also
           * provided by default if you use the HTML5 `pattern` attribute.
           *
           * @usageNotes
           *
           * ### Validate that the field only contains letters or spaces
           *
           * ```typescript
           * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
           *
           * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
           * ```
           *
           * ```html
           * <input pattern="[a-zA-Z ]*">
           * ```
           *
           * ### Pattern matching with the global or sticky flag
           *
           * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`
           * can produce different results on the same input when validations are run consecutively. This is
           * due to how the behavior of `RegExp.prototype.test` is
           * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)
           * (`RegExp` preserves the index of the last match when the global or sticky flag is used).
           * Due to this behavior, it is recommended that when using
           * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky
           * flag enabled.
           *
           * ```typescript
           * // Not recommended (since the `g` flag is used)
           * const controlOne = new FormControl('1', Validators.pattern(/foo/g));
           *
           * // Good
           * const controlTwo = new FormControl('1', Validators.pattern(/foo/));
           * ```
           *
           * @param pattern A regular expression to be used as is to test the values, or a string.
           * If a string is passed, the `^` character is prepended and the `$` character is
           * appended to the provided string (if not already present), and the resulting regular
           * expression is used to test the values.
           *
           * @returns A validator function that returns an error map with the
           * `pattern` property if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "pattern",
          value: function pattern(_pattern) {
            return patternValidator(_pattern);
          }
          /**
           * @description
           * Validator that performs no operation.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "nullValidator",
          value: function nullValidator(control) {
            return _nullValidator(control);
          }
        }, {
          key: "compose",
          value: function compose(validators) {
            return _compose(validators);
          }
          /**
           * @description
           * Compose multiple async validators into a single function that returns the union
           * of the individual error objects for the provided control.
           *
           * @returns A validator function that returns an error map with the
           * merged error objects of the async validators if the validation check fails, otherwise `null`.
           *
           * @see `updateValueAndValidity()`
           *
           */

        }, {
          key: "composeAsync",
          value: function composeAsync(validators) {
            return _composeAsync(validators);
          }
        }]);

        return Validators;
      }();
      /**
       * Validator that requires the control's value to be greater than or equal to the provided number.
       * See `Validators.min` for additional information.
       */


      function minValidator(min) {
        return function (control) {
          if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
            return null; // don't validate empty values to allow optional controls
          }

          var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
          // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min

          return !isNaN(value) && value < min ? {
            'min': {
              'min': min,
              'actual': control.value
            }
          } : null;
        };
      }
      /**
       * Validator that requires the control's value to be less than or equal to the provided number.
       * See `Validators.max` for additional information.
       */


      function maxValidator(max) {
        return function (control) {
          if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
            return null; // don't validate empty values to allow optional controls
          }

          var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
          // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max

          return !isNaN(value) && value > max ? {
            'max': {
              'max': max,
              'actual': control.value
            }
          } : null;
        };
      }
      /**
       * Validator that requires the control have a non-empty value.
       * See `Validators.required` for additional information.
       */


      function requiredValidator(control) {
        return isEmptyInputValue(control.value) ? {
          'required': true
        } : null;
      }
      /**
       * Validator that requires the control's value be true. This validator is commonly
       * used for required checkboxes.
       * See `Validators.requiredTrue` for additional information.
       */


      function requiredTrueValidator(control) {
        return control.value === true ? null : {
          'required': true
        };
      }
      /**
       * Validator that requires the control's value pass an email validation test.
       * See `Validators.email` for additional information.
       */


      function emailValidator(control) {
        if (isEmptyInputValue(control.value)) {
          return null; // don't validate empty values to allow optional controls
        }

        return EMAIL_REGEXP.test(control.value) ? null : {
          'email': true
        };
      }
      /**
       * Validator that requires the length of the control's value to be greater than or equal
       * to the provided minimum length. See `Validators.minLength` for additional information.
       */


      function minLengthValidator(minLength) {
        return function (control) {
          if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
            // don't validate empty values to allow optional controls
            // don't validate values without `length` property
            return null;
          }

          return control.value.length < minLength ? {
            'minlength': {
              'requiredLength': minLength,
              'actualLength': control.value.length
            }
          } : null;
        };
      }
      /**
       * Validator that requires the length of the control's value to be less than or equal
       * to the provided maximum length. See `Validators.maxLength` for additional information.
       */


      function maxLengthValidator(maxLength) {
        return function (control) {
          return hasValidLength(control.value) && control.value.length > maxLength ? {
            'maxlength': {
              'requiredLength': maxLength,
              'actualLength': control.value.length
            }
          } : null;
        };
      }
      /**
       * Validator that requires the control's value to match a regex pattern.
       * See `Validators.pattern` for additional information.
       */


      function patternValidator(pattern) {
        if (!pattern) return _nullValidator;
        var regex;
        var regexStr;

        if (typeof pattern === 'string') {
          regexStr = '';
          if (pattern.charAt(0) !== '^') regexStr += '^';
          regexStr += pattern;
          if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';
          regex = new RegExp(regexStr);
        } else {
          regexStr = pattern.toString();
          regex = pattern;
        }

        return function (control) {
          if (isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
          }

          var value = control.value;
          return regex.test(value) ? null : {
            'pattern': {
              'requiredPattern': regexStr,
              'actualValue': value
            }
          };
        };
      }
      /**
       * Function that has `ValidatorFn` shape, but performs no operation.
       */


      function _nullValidator(control) {
        return null;
      }

      function isPresent(o) {
        return o != null;
      }

      function toObservable(r) {
        var obs = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(r) ? Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(r) : r;

        if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obs) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
          throw new Error("Expected validator to return Promise or Observable.");
        }

        return obs;
      }

      function mergeErrors(arrayOfErrors) {
        var res = {}; // Not using Array.reduce here due to a Chrome 80 bug
        // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

        arrayOfErrors.forEach(function (errors) {
          res = errors != null ? Object.assign(Object.assign({}, res), errors) : res;
        });
        return Object.keys(res).length === 0 ? null : res;
      }

      function executeValidators(control, validators) {
        return validators.map(function (validator) {
          return validator(control);
        });
      }

      function isValidatorFn(validator) {
        return !validator.validate;
      }
      /**
       * Given the list of validators that may contain both functions as well as classes, return the list
       * of validator functions (convert validator classes into validator functions). This is needed to
       * have consistent structure in validators list before composing them.
       *
       * @param validators The set of validators that may contain validators both in plain function form
       *     as well as represented as a validator class.
       */


      function normalizeValidators(validators) {
        return validators.map(function (validator) {
          return isValidatorFn(validator) ? validator : function (c) {
            return validator.validate(c);
          };
        });
      }
      /**
       * Merges synchronous validators into a single validator function.
       * See `Validators.compose` for additional information.
       */


      function _compose(validators) {
        if (!validators) return null;
        var presentValidators = validators.filter(isPresent);
        if (presentValidators.length == 0) return null;
        return function (control) {
          return mergeErrors(executeValidators(control, presentValidators));
        };
      }
      /**
       * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),
       * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single
       * validator function.
       */


      function composeValidators(validators) {
        return validators != null ? _compose(normalizeValidators(validators)) : null;
      }
      /**
       * Merges asynchronous validators into a single validator function.
       * See `Validators.composeAsync` for additional information.
       */


      function _composeAsync(validators) {
        if (!validators) return null;
        var presentValidators = validators.filter(isPresent);
        if (presentValidators.length == 0) return null;
        return function (control) {
          var observables = executeValidators(control, presentValidators).map(toObservable);
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["forkJoin"])(observables).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(mergeErrors));
        };
      }
      /**
       * Accepts a list of async validators of different possible shapes (`AsyncValidator` and
       * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges
       * them into a single validator function.
       */


      function composeAsyncValidators(validators) {
        return validators != null ? _composeAsync(normalizeValidators(validators)) : null;
      }
      /**
       * Merges raw control validators with a given directive validator and returns the combined list of
       * validators as an array.
       */


      function mergeValidators(controlValidators, dirValidator) {
        if (controlValidators === null) return [dirValidator];
        return Array.isArray(controlValidators) ? [].concat(_toConsumableArray(controlValidators), [dirValidator]) : [controlValidators, dirValidator];
      }
      /**
       * Retrieves the list of raw synchronous validators attached to a given control.
       */


      function getControlValidators(control) {
        return control._rawValidators;
      }
      /**
       * Retrieves the list of raw asynchronous validators attached to a given control.
       */


      function getControlAsyncValidators(control) {
        return control._rawAsyncValidators;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * Base class for control directives.
       *
       * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
       *
       * @publicApi
       */


      var AbstractControlDirective = /*#__PURE__*/function () {
        function AbstractControlDirective() {
          _classCallCheck(this, AbstractControlDirective);

          /**
           * Set of synchronous validators as they were provided while calling `setValidators` function.
           * @internal
           */
          this._rawValidators = [];
          /**
           * Set of asynchronous validators as they were provided while calling `setAsyncValidators`
           * function.
           * @internal
           */

          this._rawAsyncValidators = [];
          /*
           * The set of callbacks to be invoked when directive instance is being destroyed.
           */

          this._onDestroyCallbacks = [];
        }
        /**
         * @description
         * Reports the value of the control if it is present, otherwise null.
         */


        _createClass2(AbstractControlDirective, [{
          key: "value",
          get: function get() {
            return this.control ? this.control.value : null;
          }
          /**
           * @description
           * Reports whether the control is valid. A control is considered valid if no
           * validation errors exist with the current value.
           * If the control is not present, null is returned.
           */

        }, {
          key: "valid",
          get: function get() {
            return this.control ? this.control.valid : null;
          }
          /**
           * @description
           * Reports whether the control is invalid, meaning that an error exists in the input value.
           * If the control is not present, null is returned.
           */

        }, {
          key: "invalid",
          get: function get() {
            return this.control ? this.control.invalid : null;
          }
          /**
           * @description
           * Reports whether a control is pending, meaning that that async validation is occurring and
           * errors are not yet available for the input value. If the control is not present, null is
           * returned.
           */

        }, {
          key: "pending",
          get: function get() {
            return this.control ? this.control.pending : null;
          }
          /**
           * @description
           * Reports whether the control is disabled, meaning that the control is disabled
           * in the UI and is exempt from validation checks and excluded from aggregate
           * values of ancestor controls. If the control is not present, null is returned.
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.control ? this.control.disabled : null;
          }
          /**
           * @description
           * Reports whether the control is enabled, meaning that the control is included in ancestor
           * calculations of validity or value. If the control is not present, null is returned.
           */

        }, {
          key: "enabled",
          get: function get() {
            return this.control ? this.control.enabled : null;
          }
          /**
           * @description
           * Reports the control's validation errors. If the control is not present, null is returned.
           */

        }, {
          key: "errors",
          get: function get() {
            return this.control ? this.control.errors : null;
          }
          /**
           * @description
           * Reports whether the control is pristine, meaning that the user has not yet changed
           * the value in the UI. If the control is not present, null is returned.
           */

        }, {
          key: "pristine",
          get: function get() {
            return this.control ? this.control.pristine : null;
          }
          /**
           * @description
           * Reports whether the control is dirty, meaning that the user has changed
           * the value in the UI. If the control is not present, null is returned.
           */

        }, {
          key: "dirty",
          get: function get() {
            return this.control ? this.control.dirty : null;
          }
          /**
           * @description
           * Reports whether the control is touched, meaning that the user has triggered
           * a `blur` event on it. If the control is not present, null is returned.
           */

        }, {
          key: "touched",
          get: function get() {
            return this.control ? this.control.touched : null;
          }
          /**
           * @description
           * Reports the validation status of the control. Possible values include:
           * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
           * If the control is not present, null is returned.
           */

        }, {
          key: "status",
          get: function get() {
            return this.control ? this.control.status : null;
          }
          /**
           * @description
           * Reports whether the control is untouched, meaning that the user has not yet triggered
           * a `blur` event on it. If the control is not present, null is returned.
           */

        }, {
          key: "untouched",
          get: function get() {
            return this.control ? this.control.untouched : null;
          }
          /**
           * @description
           * Returns a multicasting observable that emits a validation status whenever it is
           * calculated for the control. If the control is not present, null is returned.
           */

        }, {
          key: "statusChanges",
          get: function get() {
            return this.control ? this.control.statusChanges : null;
          }
          /**
           * @description
           * Returns a multicasting observable of value changes for the control that emits every time the
           * value of the control changes in the UI or programmatically.
           * If the control is not present, null is returned.
           */

        }, {
          key: "valueChanges",
          get: function get() {
            return this.control ? this.control.valueChanges : null;
          }
          /**
           * @description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           */

        }, {
          key: "path",
          get: function get() {
            return null;
          }
          /**
           * Sets synchronous validators for this directive.
           * @internal
           */

        }, {
          key: "_setValidators",
          value: function _setValidators(validators) {
            this._rawValidators = validators || [];
            this._composedValidatorFn = composeValidators(this._rawValidators);
          }
          /**
           * Sets asynchronous validators for this directive.
           * @internal
           */

        }, {
          key: "_setAsyncValidators",
          value: function _setAsyncValidators(validators) {
            this._rawAsyncValidators = validators || [];
            this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
          }
          /**
           * @description
           * Synchronous validator function composed of all the synchronous validators registered with this
           * directive.
           */

        }, {
          key: "validator",
          get: function get() {
            return this._composedValidatorFn || null;
          }
          /**
           * @description
           * Asynchronous validator function composed of all the asynchronous validators registered with
           * this directive.
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return this._composedAsyncValidatorFn || null;
          }
          /**
           * Internal function to register callbacks that should be invoked
           * when directive instance is being destroyed.
           * @internal
           */

        }, {
          key: "_registerOnDestroy",
          value: function _registerOnDestroy(fn) {
            this._onDestroyCallbacks.push(fn);
          }
          /**
           * Internal function to invoke all registered "on destroy" callbacks.
           * Note: calling this function also clears the list of callbacks.
           * @internal
           */

        }, {
          key: "_invokeOnDestroyCallbacks",
          value: function _invokeOnDestroyCallbacks() {
            this._onDestroyCallbacks.forEach(function (fn) {
              return fn();
            });

            this._onDestroyCallbacks = [];
          }
          /**
           * @description
           * Resets the control with the provided value if the control is present.
           */

        }, {
          key: "reset",
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            if (this.control) this.control.reset(value);
          }
          /**
           * @description
           * Reports whether the control with the given path has the error specified.
           *
           * @param errorCode The code of the error to check
           * @param path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * If no path is given, this method checks for the error on the current control.
           *
           * @returns whether the given error is present in the control at the given path.
           *
           * If the control is not present, false is returned.
           */

        }, {
          key: "hasError",
          value: function hasError(errorCode, path) {
            return this.control ? this.control.hasError(errorCode, path) : false;
          }
          /**
           * @description
           * Reports error data for the control with the given path.
           *
           * @param errorCode The code of the error to check
           * @param path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * @returns error data for that particular error. If the control or error is not present,
           * null is returned.
           */

        }, {
          key: "getError",
          value: function getError(errorCode, path) {
            return this.control ? this.control.getError(errorCode, path) : null;
          }
        }]);

        return AbstractControlDirective;
      }();

      AbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) {
        return new (t || AbstractControlDirective)();
      };

      AbstractControlDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: AbstractControlDirective
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * A base class for directives that contain multiple registered instances of `NgControl`.
       * Only used by the forms module.
       *
       * @publicApi
       */

      var ControlContainer = /*#__PURE__*/function (_AbstractControlDirec) {
        _inherits(ControlContainer, _AbstractControlDirec);

        var _super13 = _createSuper(ControlContainer);

        function ControlContainer() {
          _classCallCheck(this, ControlContainer);

          return _super13.apply(this, arguments);
        }

        _createClass2(ControlContainer, [{
          key: "formDirective",
          get:
          /**
           * @description
           * The top-level form directive for the control.
           */
          function get() {
            return null;
          }
          /**
           * @description
           * The path to this group.
           */

        }, {
          key: "path",
          get: function get() {
            return null;
          }
        }]);

        return ControlContainer;
      }(AbstractControlDirective);

      ControlContainer.ɵfac = function ControlContainer_Factory(t) {
        return ɵControlContainer_BaseFactory(t || ControlContainer);
      };

      ControlContainer.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ControlContainer,
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵControlContainer_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](ControlContainer);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * A base class that all `FormControl`-based directives extend. It binds a `FormControl`
       * object to a DOM element.
       *
       * @publicApi
       */


      var NgControl = /*#__PURE__*/function (_AbstractControlDirec2) {
        _inherits(NgControl, _AbstractControlDirec2);

        var _super14 = _createSuper(NgControl);

        function NgControl() {
          var _this13;

          _classCallCheck(this, NgControl);

          _this13 = _super14.apply(this, arguments);
          /**
           * @description
           * The parent form for the control.
           *
           * @internal
           */

          _this13._parent = null;
          /**
           * @description
           * The name for the control
           */

          _this13.name = null;
          /**
           * @description
           * The value accessor for the control
           */

          _this13.valueAccessor = null;
          return _this13;
        }

        return NgControl;
      }(AbstractControlDirective);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var AbstractControlStatus = /*#__PURE__*/function () {
        function AbstractControlStatus(cd) {
          _classCallCheck(this, AbstractControlStatus);

          this._cd = cd;
        }

        _createClass2(AbstractControlStatus, [{
          key: "is",
          value: function is(status) {
            var _a, _b;

            return !!((_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b[status]);
          }
        }]);

        return AbstractControlStatus;
      }();

      var ngControlStatusHost = {
        '[class.ng-untouched]': 'is("untouched")',
        '[class.ng-touched]': 'is("touched")',
        '[class.ng-pristine]': 'is("pristine")',
        '[class.ng-dirty]': 'is("dirty")',
        '[class.ng-valid]': 'is("valid")',
        '[class.ng-invalid]': 'is("invalid")',
        '[class.ng-pending]': 'is("pending")'
      };
      /**
       * @description
       * Directive automatically applied to Angular form controls that sets CSS classes
       * based on control status.
       *
       * @usageNotes
       *
       * ### CSS classes applied
       *
       * The following classes are applied as the properties become true:
       *
       * * ng-valid
       * * ng-invalid
       * * ng-pending
       * * ng-pristine
       * * ng-dirty
       * * ng-untouched
       * * ng-touched
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var NgControlStatus = /*#__PURE__*/function (_AbstractControlStatu) {
        _inherits(NgControlStatus, _AbstractControlStatu);

        var _super15 = _createSuper(NgControlStatus);

        function NgControlStatus(cd) {
          _classCallCheck(this, NgControlStatus);

          return _super15.call(this, cd);
        }

        return NgControlStatus;
      }(AbstractControlStatus);

      NgControlStatus.ɵfac = function NgControlStatus_Factory(t) {
        return new (t || NgControlStatus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgControl, 2));
      };

      NgControlStatus.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgControlStatus,
        selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
        hostVars: 14,
        hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"));
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      NgControlStatus.ctorParameters = function () {
        return [{
          type: NgControl,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControlName],[ngModel],[formControl]',
            host: ngControlStatusHost
          }]
        }], function () {
          return [{
            type: NgControl,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }]
          }];
        }, null);
      })();
      /**
       * @description
       * Directive automatically applied to Angular form groups that sets CSS classes
       * based on control status (valid/invalid/dirty/etc).
       *
       * @see `NgControlStatus`
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var NgControlStatusGroup = /*#__PURE__*/function (_AbstractControlStatu2) {
        _inherits(NgControlStatusGroup, _AbstractControlStatu2);

        var _super16 = _createSuper(NgControlStatusGroup);

        function NgControlStatusGroup(cd) {
          _classCallCheck(this, NgControlStatusGroup);

          return _super16.call(this, cd);
        }

        return NgControlStatusGroup;
      }(AbstractControlStatus);

      NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) {
        return new (t || NgControlStatusGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 10));
      };

      NgControlStatusGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgControlStatusGroup,
        selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
        hostVars: 14,
        hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"));
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      NgControlStatusGroup.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatusGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            host: ngControlStatusHost
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var FormErrorExamples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ReactiveErrors = /*#__PURE__*/function () {
        function ReactiveErrors() {
          _classCallCheck(this, ReactiveErrors);
        }

        _createClass2(ReactiveErrors, null, [{
          key: "controlParentException",
          value: function controlParentException() {
            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formControlName));
          }
        }, {
          key: "ngModelGroupException",
          value: function ngModelGroupException() {
            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ".concat(FormErrorExamples.formGroupName, "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ").concat(FormErrorExamples.ngModelGroup));
          }
        }, {
          key: "missingFormException",
          value: function missingFormException() {
            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ".concat(FormErrorExamples.formControlName));
          }
        }, {
          key: "groupParentException",
          value: function groupParentException() {
            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formGroupName));
          }
        }, {
          key: "arrayParentException",
          value: function arrayParentException() {
            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ".concat(FormErrorExamples.formArrayName));
          }
        }, {
          key: "disabledAttrWarning",
          value: function disabledAttrWarning() {
            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n\n      Example:\n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
          }
        }, {
          key: "ngModelWarning",
          value: function ngModelWarning(directiveName) {
            console.warn("\n    It looks like you're using ngModel on the same form field as ".concat(directiveName, ".\n    Support for using the ngModel input property and ngModelChange event with\n    reactive form directives has been deprecated in Angular v6 and will be removed\n    in a future version of Angular.\n\n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/").concat(directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName', "#use-with-ngmodel\n    "));
          }
        }]);

        return ReactiveErrors;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function controlPath(name, parent) {
        return [].concat(_toConsumableArray(parent.path), [name]);
      }
      /**
       * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both
       * instances. This function is typically invoked when form directive is being initialized.
       *
       * @param control Form control instance that should be linked.
       * @param dir Directive that should be linked with a given control.
       */


      function setUpControl(control, dir) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (!control) _throwError(dir, 'Cannot find control with');
          if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');
        }

        setUpValidators(control, dir,
        /* handleOnValidatorChange */
        true);
        dir.valueAccessor.writeValue(control.value);
        setUpViewChangePipeline(control, dir);
        setUpModelChangePipeline(control, dir);
        setUpBlurPipeline(control, dir);
        setUpDisabledChangeHandler(control, dir);
      }
      /**
       * Reverts configuration performed by the `setUpControl` control function.
       * Effectively disconnects form control with a given form directive.
       * This function is typically invoked when corresponding form directive is being destroyed.
       *
       * @param control Form control which should be cleaned up.
       * @param dir Directive that should be disconnected from a given control.
       * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should
       *     contain asserts to verify that it's not called once directive is destroyed. We need this flag
       *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.
       */


      function cleanUpControl(control, dir) {
        var validateControlPresenceOnChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var noop = function noop() {
          if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {
            _noControlError(dir);
          }
        }; // The `valueAccessor` field is typically defined on FromControl and FormControlName directive
        // instances and there is a logic in `selectValueAccessor` function that throws if it's not the
        // case. We still check the presence of `valueAccessor` before invoking its methods to make sure
        // that cleanup works correctly if app code or tests are setup to ignore the error thrown from
        // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.


        if (dir.valueAccessor) {
          dir.valueAccessor.registerOnChange(noop);
          dir.valueAccessor.registerOnTouched(noop);
        }

        cleanUpValidators(control, dir,
        /* handleOnValidatorChange */
        true);

        if (control) {
          dir._invokeOnDestroyCallbacks();

          control._registerOnCollectionChange(function () {});
        }
      }

      function registerOnValidatorChange(validators, onChange) {
        validators.forEach(function (validator) {
          if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);
        });
      }
      /**
       * Sets up disabled change handler function on a given form control if ControlValueAccessor
       * associated with a given directive instance supports the `setDisabledState` call.
       *
       * @param control Form control where disabled change handler should be setup.
       * @param dir Corresponding directive instance associated with this control.
       */


      function setUpDisabledChangeHandler(control, dir) {
        if (dir.valueAccessor.setDisabledState) {
          var onDisabledChange = function onDisabledChange(isDisabled) {
            dir.valueAccessor.setDisabledState(isDisabled);
          };

          control.registerOnDisabledChange(onDisabledChange); // Register a callback function to cleanup disabled change handler
          // from a control instance when a directive is destroyed.

          dir._registerOnDestroy(function () {
            control._unregisterOnDisabledChange(onDisabledChange);
          });
        }
      }
      /**
       * Sets up sync and async directive validators on provided form control.
       * This function merges validators from the directive into the validators of the control.
       *
       * @param control Form control where directive validators should be setup.
       * @param dir Directive instance that contains validators to be setup.
       * @param handleOnValidatorChange Flag that determines whether directive validators should be setup
       *     to handle validator input change.
       */


      function setUpValidators(control, dir, handleOnValidatorChange) {
        var validators = getControlValidators(control);

        if (dir.validator !== null) {
          control.setValidators(mergeValidators(validators, dir.validator));
        } else if (typeof validators === 'function') {
          // If sync validators are represented by a single validator function, we force the
          // `Validators.compose` call to happen by executing the `setValidators` function with
          // an array that contains that function. We need this to avoid possible discrepancies in
          // validators behavior, so sync validators are always processed by the `Validators.compose`.
          // Note: we should consider moving this logic inside the `setValidators` function itself, so we
          // have consistent behavior on AbstractControl API level. The same applies to the async
          // validators logic below.
          control.setValidators([validators]);
        }

        var asyncValidators = getControlAsyncValidators(control);

        if (dir.asyncValidator !== null) {
          control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
        } else if (typeof asyncValidators === 'function') {
          control.setAsyncValidators([asyncValidators]);
        } // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4


        if (handleOnValidatorChange) {
          var onValidatorChange = function onValidatorChange() {
            return control.updateValueAndValidity();
          };

          registerOnValidatorChange(dir._rawValidators, onValidatorChange);
          registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
        }
      }
      /**
       * Cleans up sync and async directive validators on provided form control.
       * This function reverts the setup performed by the `setUpValidators` function, i.e.
       * removes directive-specific validators from a given control instance.
       *
       * @param control Form control from where directive validators should be removed.
       * @param dir Directive instance that contains validators to be removed.
       * @param handleOnValidatorChange Flag that determines whether directive validators should also be
       *     cleaned up to stop handling validator input change (if previously configured to do so).
       * @returns true if a control was updated as a result of this action.
       */


      function cleanUpValidators(control, dir, handleOnValidatorChange) {
        var isControlUpdated = false;

        if (control !== null) {
          if (dir.validator !== null) {
            var validators = getControlValidators(control);

            if (Array.isArray(validators) && validators.length > 0) {
              // Filter out directive validator function.
              var updatedValidators = validators.filter(function (validator) {
                return validator !== dir.validator;
              });

              if (updatedValidators.length !== validators.length) {
                isControlUpdated = true;
                control.setValidators(updatedValidators);
              }
            }
          }

          if (dir.asyncValidator !== null) {
            var asyncValidators = getControlAsyncValidators(control);

            if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
              // Filter out directive async validator function.
              var updatedAsyncValidators = asyncValidators.filter(function (asyncValidator) {
                return asyncValidator !== dir.asyncValidator;
              });

              if (updatedAsyncValidators.length !== asyncValidators.length) {
                isControlUpdated = true;
                control.setAsyncValidators(updatedAsyncValidators);
              }
            }
          }
        }

        if (handleOnValidatorChange) {
          // Clear onValidatorChange callbacks by providing a noop function.
          var noop = function noop() {};

          registerOnValidatorChange(dir._rawValidators, noop);
          registerOnValidatorChange(dir._rawAsyncValidators, noop);
        }

        return isControlUpdated;
      }

      function setUpViewChangePipeline(control, dir) {
        dir.valueAccessor.registerOnChange(function (newValue) {
          control._pendingValue = newValue;
          control._pendingChange = true;
          control._pendingDirty = true;
          if (control.updateOn === 'change') updateControl(control, dir);
        });
      }

      function setUpBlurPipeline(control, dir) {
        dir.valueAccessor.registerOnTouched(function () {
          control._pendingTouched = true;
          if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
          if (control.updateOn !== 'submit') control.markAsTouched();
        });
      }

      function updateControl(control, dir) {
        if (control._pendingDirty) control.markAsDirty();
        control.setValue(control._pendingValue, {
          emitModelToViewChange: false
        });
        dir.viewToModelUpdate(control._pendingValue);
        control._pendingChange = false;
      }

      function setUpModelChangePipeline(control, dir) {
        var onChange = function onChange(newValue, emitModelEvent) {
          // control -> view
          dir.valueAccessor.writeValue(newValue); // control -> ngModel

          if (emitModelEvent) dir.viewToModelUpdate(newValue);
        };

        control.registerOnChange(onChange); // Register a callback function to cleanup onChange handler
        // from a control instance when a directive is destroyed.

        dir._registerOnDestroy(function () {
          control._unregisterOnChange(onChange);
        });
      }
      /**
       * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators
       * present in the view.
       *
       * @param control FormGroup or FormArray instance that should be linked.
       * @param dir Directive that provides view validators.
       */


      function setUpFormContainer(control, dir) {
        if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Cannot find control with');
        setUpValidators(control, dir,
        /* handleOnValidatorChange */
        false);
      }
      /**
       * Reverts the setup performed by the `setUpFormContainer` function.
       *
       * @param control FormGroup or FormArray instance that should be cleaned up.
       * @param dir Directive that provided view validators.
       * @returns true if a control was updated as a result of this action.
       */


      function cleanUpFormContainer(control, dir) {
        return cleanUpValidators(control, dir,
        /* handleOnValidatorChange */
        false);
      }

      function _noControlError(dir) {
        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
      }

      function _throwError(dir, message) {
        var messageEnd;

        if (dir.path.length > 1) {
          messageEnd = "path: '".concat(dir.path.join(' -> '), "'");
        } else if (dir.path[0]) {
          messageEnd = "name: '".concat(dir.path, "'");
        } else {
          messageEnd = 'unspecified name attribute';
        }

        throw new Error("".concat(message, " ").concat(messageEnd));
      }

      function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model')) return false;
        var change = changes['model'];
        if (change.isFirstChange()) return true;
        return !Object.is(viewModel, change.currentValue);
      }

      function isBuiltInAccessor(valueAccessor) {
        // Check if a given value accessor is an instance of a class that directly extends
        // `BuiltInControlValueAccessor` one.
        return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
      }

      function syncPendingControls(form, directives) {
        form._syncPendingControls();

        directives.forEach(function (dir) {
          var control = dir.control;

          if (control.updateOn === 'submit' && control._pendingChange) {
            dir.viewToModelUpdate(control._pendingValue);
            control._pendingChange = false;
          }
        });
      } // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented


      function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors) return null;
        if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Value accessor was not provided as an array for form control with');
        var defaultAccessor = undefined;
        var builtinAccessor = undefined;
        var customAccessor = undefined;
        valueAccessors.forEach(function (v) {
          if (v.constructor === DefaultValueAccessor) {
            defaultAccessor = v;
          } else if (isBuiltInAccessor(v)) {
            if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one built-in value accessor matches form control with');
            builtinAccessor = v;
          } else {
            if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one custom value accessor matches form control with');
            customAccessor = v;
          }
        });
        if (customAccessor) return customAccessor;
        if (builtinAccessor) return builtinAccessor;
        if (defaultAccessor) return defaultAccessor;

        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          _throwError(dir, 'No valid value accessor for form control with');
        }

        return null;
      }

      function removeListItem(list, el) {
        var index = list.indexOf(el);
        if (index > -1) list.splice(index, 1);
      } // TODO(kara): remove after deprecation period


      function _ngModelWarning(name, type, instance, warningConfig) {
        if (warningConfig === 'never') return;

        if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
          ReactiveErrors.ngModelWarning(name);
          type._ngModelWarningSentOnce = true;
          instance._ngModelWarningSent = true;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Reports that a FormControl is valid, meaning that no errors exist in the input value.
       *
       * @see `status`
       */


      var VALID = 'VALID';
      /**
       * Reports that a FormControl is invalid, meaning that an error exists in the input value.
       *
       * @see `status`
       */

      var INVALID = 'INVALID';
      /**
       * Reports that a FormControl is pending, meaning that that async validation is occurring and
       * errors are not yet available for the input value.
       *
       * @see `markAsPending`
       * @see `status`
       */

      var PENDING = 'PENDING';
      /**
       * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor
       * calculations of validity or value.
       *
       * @see `markAsDisabled`
       * @see `status`
       */

      var DISABLED = 'DISABLED';

      function _find(control, path, delimiter) {
        if (path == null) return null;

        if (!Array.isArray(path)) {
          path = path.split(delimiter);
        }

        if (Array.isArray(path) && path.length === 0) return null; // Not using Array.reduce here due to a Chrome 80 bug
        // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

        var controlToFind = control;
        path.forEach(function (name) {
          if (controlToFind instanceof FormGroup) {
            controlToFind = controlToFind.controls.hasOwnProperty(name) ? controlToFind.controls[name] : null;
          } else if (controlToFind instanceof FormArray) {
            controlToFind = controlToFind.at(name) || null;
          } else {
            controlToFind = null;
          }
        });
        return controlToFind;
      }
      /**
       * Gets validators from either an options object or given validators.
       */


      function pickValidators(validatorOrOpts) {
        return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
      }
      /**
       * Creates validator function by combining provided validators.
       */


      function coerceToValidator(validator) {
        return Array.isArray(validator) ? composeValidators(validator) : validator || null;
      }
      /**
       * Gets async validators from either an options object or given validators.
       */


      function pickAsyncValidators(asyncValidator, validatorOrOpts) {
        return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
      }
      /**
       * Creates async validator function by combining provided async validators.
       */


      function coerceToAsyncValidator(asyncValidator) {
        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
      }

      function isOptionsObj(validatorOrOpts) {
        return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
      }
      /**
       * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
       *
       * It provides some of the shared behavior that all controls and groups of controls have, like
       * running validators, calculating status, and resetting state. It also defines the properties
       * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
       * instantiated directly.
       *
       * @see [Forms Guide](/guide/forms)
       * @see [Reactive Forms Guide](/guide/reactive-forms)
       * @see [Dynamic Forms Guide](/guide/dynamic-form)
       *
       * @publicApi
       */


      var AbstractControl = /*#__PURE__*/function () {
        /**
         * Initialize the AbstractControl instance.
         *
         * @param validators The function or array of functions that is used to determine the validity of
         *     this control synchronously.
         * @param asyncValidators The function or array of functions that is used to determine validity of
         *     this control asynchronously.
         */
        function AbstractControl(validators, asyncValidators) {
          _classCallCheck(this, AbstractControl);

          /**
           * Indicates that a control has its own pending asynchronous validation in progress.
           *
           * @internal
           */
          this._hasOwnPendingAsyncValidator = false;
          /** @internal */

          this._onCollectionChange = function () {};

          this._parent = null;
          /**
           * A control is `pristine` if the user has not yet changed
           * the value in the UI.
           *
           * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
           * Programmatic changes to a control's value do not mark it dirty.
           */

          this.pristine = true;
          /**
           * True if the control is marked as `touched`.
           *
           * A control is marked `touched` once the user has triggered
           * a `blur` event on it.
           */

          this.touched = false;
          /** @internal */

          this._onDisabledChange = [];
          this._rawValidators = validators;
          this._rawAsyncValidators = asyncValidators;
          this._composedValidatorFn = coerceToValidator(this._rawValidators);
          this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
        }
        /**
         * The function that is used to determine the validity of this control synchronously.
         */


        _createClass2(AbstractControl, [{
          key: "validator",
          get: function get() {
            return this._composedValidatorFn;
          },
          set: function set(validatorFn) {
            this._rawValidators = this._composedValidatorFn = validatorFn;
          }
          /**
           * The function that is used to determine the validity of this control asynchronously.
           */

        }, {
          key: "asyncValidator",
          get: function get() {
            return this._composedAsyncValidatorFn;
          },
          set: function set(asyncValidatorFn) {
            this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
          }
          /**
           * The parent control.
           */

        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
          /**
           * A control is `valid` when its `status` is `VALID`.
           *
           * @see {@link AbstractControl.status}
           *
           * @returns True if the control has passed all of its validation tests,
           * false otherwise.
           */

        }, {
          key: "valid",
          get: function get() {
            return this.status === VALID;
          }
          /**
           * A control is `invalid` when its `status` is `INVALID`.
           *
           * @see {@link AbstractControl.status}
           *
           * @returns True if this control has failed one or more of its validation checks,
           * false otherwise.
           */

        }, {
          key: "invalid",
          get: function get() {
            return this.status === INVALID;
          }
          /**
           * A control is `pending` when its `status` is `PENDING`.
           *
           * @see {@link AbstractControl.status}
           *
           * @returns True if this control is in the process of conducting a validation check,
           * false otherwise.
           */

        }, {
          key: "pending",
          get: function get() {
            return this.status == PENDING;
          }
          /**
           * A control is `disabled` when its `status` is `DISABLED`.
           *
           * Disabled controls are exempt from validation checks and
           * are not included in the aggregate value of their ancestor
           * controls.
           *
           * @see {@link AbstractControl.status}
           *
           * @returns True if the control is disabled, false otherwise.
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.status === DISABLED;
          }
          /**
           * A control is `enabled` as long as its `status` is not `DISABLED`.
           *
           * @returns True if the control has any status other than 'DISABLED',
           * false if the status is 'DISABLED'.
           *
           * @see {@link AbstractControl.status}
           *
           */

        }, {
          key: "enabled",
          get: function get() {
            return this.status !== DISABLED;
          }
          /**
           * A control is `dirty` if the user has changed the value
           * in the UI.
           *
           * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
           * Programmatic changes to a control's value do not mark it dirty.
           */

        }, {
          key: "dirty",
          get: function get() {
            return !this.pristine;
          }
          /**
           * True if the control has not been marked as touched
           *
           * A control is `untouched` if the user has not yet triggered
           * a `blur` event on it.
           */

        }, {
          key: "untouched",
          get: function get() {
            return !this.touched;
          }
          /**
           * Reports the update strategy of the `AbstractControl` (meaning
           * the event on which the control updates itself).
           * Possible values: `'change'` | `'blur'` | `'submit'`
           * Default value: `'change'`
           */

        }, {
          key: "updateOn",
          get: function get() {
            return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';
          }
          /**
           * Sets the synchronous validators that are active on this control.  Calling
           * this overwrites any existing sync validators.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           */

        }, {
          key: "setValidators",
          value: function setValidators(newValidator) {
            this._rawValidators = newValidator;
            this._composedValidatorFn = coerceToValidator(newValidator);
          }
          /**
           * Sets the async validators that are active on this control. Calling this
           * overwrites any existing async validators.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           */

        }, {
          key: "setAsyncValidators",
          value: function setAsyncValidators(newValidator) {
            this._rawAsyncValidators = newValidator;
            this._composedAsyncValidatorFn = coerceToAsyncValidator(newValidator);
          }
          /**
           * Empties out the sync validator list.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           */

        }, {
          key: "clearValidators",
          value: function clearValidators() {
            this.validator = null;
          }
          /**
           * Empties out the async validator list.
           *
           * When you add or remove a validator at run time, you must call
           * `updateValueAndValidity()` for the new validation to take effect.
           *
           */

        }, {
          key: "clearAsyncValidators",
          value: function clearAsyncValidators() {
            this.asyncValidator = null;
          }
          /**
           * Marks the control as `touched`. A control is touched by focus and
           * blur events that do not change the value.
           *
           * @see `markAsUntouched()`
           * @see `markAsDirty()`
           * @see `markAsPristine()`
           *
           * @param opts Configuration options that determine how the control propagates changes
           * and emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           */

        }, {
          key: "markAsTouched",
          value: function markAsTouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.touched = true;

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsTouched(opts);
            }
          }
          /**
           * Marks the control and all its descendant controls as `touched`.
           * @see `markAsTouched()`
           */

        }, {
          key: "markAllAsTouched",
          value: function markAllAsTouched() {
            this.markAsTouched({
              onlySelf: true
            });

            this._forEachChild(function (control) {
              return control.markAllAsTouched();
            });
          }
          /**
           * Marks the control as `untouched`.
           *
           * If the control has any children, also marks all children as `untouched`
           * and recalculates the `touched` status of all parent controls.
           *
           * @see `markAsTouched()`
           * @see `markAsDirty()`
           * @see `markAsPristine()`
           *
           * @param opts Configuration options that determine how the control propagates changes
           * and emits events after the marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           */

        }, {
          key: "markAsUntouched",
          value: function markAsUntouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.touched = false;
            this._pendingTouched = false;

            this._forEachChild(function (control) {
              control.markAsUntouched({
                onlySelf: true
              });
            });

            if (this._parent && !opts.onlySelf) {
              this._parent._updateTouched(opts);
            }
          }
          /**
           * Marks the control as `dirty`. A control becomes dirty when
           * the control's value is changed through the UI; compare `markAsTouched`.
           *
           * @see `markAsTouched()`
           * @see `markAsUntouched()`
           * @see `markAsPristine()`
           *
           * @param opts Configuration options that determine how the control propagates changes
           * and emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           */

        }, {
          key: "markAsDirty",
          value: function markAsDirty() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.pristine = false;

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsDirty(opts);
            }
          }
          /**
           * Marks the control as `pristine`.
           *
           * If the control has any children, marks all children as `pristine`,
           * and recalculates the `pristine` status of all parent
           * controls.
           *
           * @see `markAsTouched()`
           * @see `markAsUntouched()`
           * @see `markAsDirty()`
           *
           * @param opts Configuration options that determine how the control emits events after
           * marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           */

        }, {
          key: "markAsPristine",
          value: function markAsPristine() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.pristine = true;
            this._pendingDirty = false;

            this._forEachChild(function (control) {
              control.markAsPristine({
                onlySelf: true
              });
            });

            if (this._parent && !opts.onlySelf) {
              this._parent._updatePristine(opts);
            }
          }
          /**
           * Marks the control as `pending`.
           *
           * A control is pending while the control performs async validation.
           *
           * @see {@link AbstractControl.status}
           *
           * @param opts Configuration options that determine how the control propagates changes and
           * emits events after marking is applied.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
           * observable emits an event with the latest status the control is marked pending.
           * When false, no events are emitted.
           *
           */

        }, {
          key: "markAsPending",
          value: function markAsPending() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.status = PENDING;

            if (opts.emitEvent !== false) {
              this.statusChanges.emit(this.status);
            }

            if (this._parent && !opts.onlySelf) {
              this._parent.markAsPending(opts);
            }
          }
          /**
           * Disables the control. This means the control is exempt from validation checks and
           * excluded from the aggregate value of any parent. Its status is `DISABLED`.
           *
           * If the control has children, all children are also disabled.
           *
           * @see {@link AbstractControl.status}
           *
           * @param opts Configuration options that determine how the control propagates
           * changes and emits events after the control is disabled.
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is disabled.
           * When false, no events are emitted.
           */

        }, {
          key: "disable",
          value: function disable() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            // If parent has been marked artificially dirty we don't want to re-calculate the
            // parent's dirtiness based on the children.
            var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

            this.status = DISABLED;
            this.errors = null;

            this._forEachChild(function (control) {
              control.disable(Object.assign(Object.assign({}, opts), {
                onlySelf: true
              }));
            });

            this._updateValue();

            if (opts.emitEvent !== false) {
              this.valueChanges.emit(this.value);
              this.statusChanges.emit(this.status);
            }

            this._updateAncestors(Object.assign(Object.assign({}, opts), {
              skipPristineCheck: skipPristineCheck
            }));

            this._onDisabledChange.forEach(function (changeFn) {
              return changeFn(true);
            });
          }
          /**
           * Enables the control. This means the control is included in validation checks and
           * the aggregate value of its parent. Its status recalculates based on its value and
           * its validators.
           *
           * By default, if the control has children, all children are enabled.
           *
           * @see {@link AbstractControl.status}
           *
           * @param opts Configure options that control how the control propagates changes and
           * emits events when marked as untouched
           * * `onlySelf`: When true, mark only this control. When false or not supplied,
           * marks all direct ancestors. Default is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is enabled.
           * When false, no events are emitted.
           */

        }, {
          key: "enable",
          value: function enable() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            // If parent has been marked artificially dirty we don't want to re-calculate the
            // parent's dirtiness based on the children.
            var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

            this.status = VALID;

            this._forEachChild(function (control) {
              control.enable(Object.assign(Object.assign({}, opts), {
                onlySelf: true
              }));
            });

            this.updateValueAndValidity({
              onlySelf: true,
              emitEvent: opts.emitEvent
            });

            this._updateAncestors(Object.assign(Object.assign({}, opts), {
              skipPristineCheck: skipPristineCheck
            }));

            this._onDisabledChange.forEach(function (changeFn) {
              return changeFn(false);
            });
          }
        }, {
          key: "_updateAncestors",
          value: function _updateAncestors(opts) {
            if (this._parent && !opts.onlySelf) {
              this._parent.updateValueAndValidity(opts);

              if (!opts.skipPristineCheck) {
                this._parent._updatePristine();
              }

              this._parent._updateTouched();
            }
          }
          /**
           * @param parent Sets the parent of the control
           */

        }, {
          key: "setParent",
          value: function setParent(parent) {
            this._parent = parent;
          }
          /**
           * Recalculates the value and validation status of the control.
           *
           * By default, it also updates the value and validity of its ancestors.
           *
           * @param opts Configuration options determine how the control propagates changes and emits events
           * after updates and validity checks are applied.
           * * `onlySelf`: When true, only update this control. When false or not supplied,
           * update all direct ancestors. Default is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is updated.
           * When false, no events are emitted.
           */

        }, {
          key: "updateValueAndValidity",
          value: function updateValueAndValidity() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this._setInitialStatus();

            this._updateValue();

            if (this.enabled) {
              this._cancelExistingSubscription();

              this.errors = this._runValidator();
              this.status = this._calculateStatus();

              if (this.status === VALID || this.status === PENDING) {
                this._runAsyncValidator(opts.emitEvent);
              }
            }

            if (opts.emitEvent !== false) {
              this.valueChanges.emit(this.value);
              this.statusChanges.emit(this.status);
            }

            if (this._parent && !opts.onlySelf) {
              this._parent.updateValueAndValidity(opts);
            }
          }
          /** @internal */

        }, {
          key: "_updateTreeValidity",
          value: function _updateTreeValidity() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              emitEvent: true
            };

            this._forEachChild(function (ctrl) {
              return ctrl._updateTreeValidity(opts);
            });

            this.updateValueAndValidity({
              onlySelf: true,
              emitEvent: opts.emitEvent
            });
          }
        }, {
          key: "_setInitialStatus",
          value: function _setInitialStatus() {
            this.status = this._allControlsDisabled() ? DISABLED : VALID;
          }
        }, {
          key: "_runValidator",
          value: function _runValidator() {
            return this.validator ? this.validator(this) : null;
          }
        }, {
          key: "_runAsyncValidator",
          value: function _runAsyncValidator(emitEvent) {
            var _this14 = this;

            if (this.asyncValidator) {
              this.status = PENDING;
              this._hasOwnPendingAsyncValidator = true;
              var obs = toObservable(this.asyncValidator(this));
              this._asyncValidationSubscription = obs.subscribe(function (errors) {
                _this14._hasOwnPendingAsyncValidator = false; // This will trigger the recalculation of the validation status, which depends on
                // the state of the asynchronous validation (whether it is in progress or not). So, it is
                // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.

                _this14.setErrors(errors, {
                  emitEvent: emitEvent
                });
              });
            }
          }
        }, {
          key: "_cancelExistingSubscription",
          value: function _cancelExistingSubscription() {
            if (this._asyncValidationSubscription) {
              this._asyncValidationSubscription.unsubscribe();

              this._hasOwnPendingAsyncValidator = false;
            }
          }
          /**
           * Sets errors on a form control when running validations manually, rather than automatically.
           *
           * Calling `setErrors` also updates the validity of the parent control.
           *
           * @usageNotes
           *
           * ### Manually set the errors for a control
           *
           * ```
           * const login = new FormControl('someLogin');
           * login.setErrors({
           *   notUnique: true
           * });
           *
           * expect(login.valid).toEqual(false);
           * expect(login.errors).toEqual({ notUnique: true });
           *
           * login.setValue('someOtherLogin');
           *
           * expect(login.valid).toEqual(true);
           * ```
           */

        }, {
          key: "setErrors",
          value: function setErrors(errors) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.errors = errors;

            this._updateControlsErrors(opts.emitEvent !== false);
          }
          /**
           * Retrieves a child control given the control's name or path.
           *
           * @param path A dot-delimited string or array of string/number values that define the path to the
           * control.
           *
           * @usageNotes
           * ### Retrieve a nested control
           *
           * For example, to get a `name` control nested within a `person` sub-group:
           *
           * * `this.form.get('person.name');`
           *
           * -OR-
           *
           * * `this.form.get(['person', 'name']);`
           *
           * ### Retrieve a control in a FormArray
           *
           * When accessing an element inside a FormArray, you can use an element index.
           * For example, to get a `price` control from the first element in an `items` array you can use:
           *
           * * `this.form.get('items.0.price');`
           *
           * -OR-
           *
           * * `this.form.get(['items', 0, 'price']);`
           */

        }, {
          key: "get",
          value: function get(path) {
            return _find(this, path, '.');
          }
          /**
           * @description
           * Reports error data for the control with the given path.
           *
           * @param errorCode The code of the error to check
           * @param path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * @returns error data for that particular error. If the control or error is not present,
           * null is returned.
           */

        }, {
          key: "getError",
          value: function getError(errorCode, path) {
            var control = path ? this.get(path) : this;
            return control && control.errors ? control.errors[errorCode] : null;
          }
          /**
           * @description
           * Reports whether the control with the given path has the error specified.
           *
           * @param errorCode The code of the error to check
           * @param path A list of control names that designates how to move from the current control
           * to the control that should be queried for errors.
           *
           * @usageNotes
           * For example, for the following `FormGroup`:
           *
           * ```
           * form = new FormGroup({
           *   address: new FormGroup({ street: new FormControl() })
           * });
           * ```
           *
           * The path to the 'street' control from the root form would be 'address' -> 'street'.
           *
           * It can be provided to this method in one of two formats:
           *
           * 1. An array of string control names, e.g. `['address', 'street']`
           * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
           *
           * If no path is given, this method checks for the error on the current control.
           *
           * @returns whether the given error is present in the control at the given path.
           *
           * If the control is not present, false is returned.
           */

        }, {
          key: "hasError",
          value: function hasError(errorCode, path) {
            return !!this.getError(errorCode, path);
          }
          /**
           * Retrieves the top-level ancestor of this control.
           */

        }, {
          key: "root",
          get: function get() {
            var x = this;

            while (x._parent) {
              x = x._parent;
            }

            return x;
          }
          /** @internal */

        }, {
          key: "_updateControlsErrors",
          value: function _updateControlsErrors(emitEvent) {
            this.status = this._calculateStatus();

            if (emitEvent) {
              this.statusChanges.emit(this.status);
            }

            if (this._parent) {
              this._parent._updateControlsErrors(emitEvent);
            }
          }
          /** @internal */

        }, {
          key: "_initObservables",
          value: function _initObservables() {
            this.valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
            this.statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          }
        }, {
          key: "_calculateStatus",
          value: function _calculateStatus() {
            if (this._allControlsDisabled()) return DISABLED;
            if (this.errors) return INVALID;
            if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;
            if (this._anyControlsHaveStatus(INVALID)) return INVALID;
            return VALID;
          }
          /** @internal */

        }, {
          key: "_anyControlsHaveStatus",
          value: function _anyControlsHaveStatus(status) {
            return this._anyControls(function (control) {
              return control.status === status;
            });
          }
          /** @internal */

        }, {
          key: "_anyControlsDirty",
          value: function _anyControlsDirty() {
            return this._anyControls(function (control) {
              return control.dirty;
            });
          }
          /** @internal */

        }, {
          key: "_anyControlsTouched",
          value: function _anyControlsTouched() {
            return this._anyControls(function (control) {
              return control.touched;
            });
          }
          /** @internal */

        }, {
          key: "_updatePristine",
          value: function _updatePristine() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.pristine = !this._anyControlsDirty();

            if (this._parent && !opts.onlySelf) {
              this._parent._updatePristine(opts);
            }
          }
          /** @internal */

        }, {
          key: "_updateTouched",
          value: function _updateTouched() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            this.touched = this._anyControlsTouched();

            if (this._parent && !opts.onlySelf) {
              this._parent._updateTouched(opts);
            }
          }
          /** @internal */

        }, {
          key: "_isBoxedValue",
          value: function _isBoxedValue(formState) {
            return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
          }
          /** @internal */

        }, {
          key: "_registerOnCollectionChange",
          value: function _registerOnCollectionChange(fn) {
            this._onCollectionChange = fn;
          }
          /** @internal */

        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy(opts) {
            if (isOptionsObj(opts) && opts.updateOn != null) {
              this._updateOn = opts.updateOn;
            }
          }
          /**
           * Check to see if parent has been marked artificially dirty.
           *
           * @internal
           */

        }, {
          key: "_parentMarkedDirty",
          value: function _parentMarkedDirty(onlySelf) {
            var parentDirty = this._parent && this._parent.dirty;
            return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
          }
        }]);

        return AbstractControl;
      }();
      /**
       * Tracks the value and validation status of an individual form control.
       *
       * This is one of the three fundamental building blocks of Angular forms, along with
       * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that
       * implements most of the base functionality for accessing the value, validation status,
       * user interactions and events. See [usage examples below](#usage-notes).
       *
       * @see `AbstractControl`
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see [Usage Notes](#usage-notes)
       *
       * @usageNotes
       *
       * ### Initializing Form Controls
       *
       * Instantiate a `FormControl`, with an initial value.
       *
       * ```ts
       * const control = new FormControl('some value');
       * console.log(control.value);     // 'some value'
       *```
       *
       * The following example initializes the control with a form state object. The `value`
       * and `disabled` keys are required in this case.
       *
       * ```ts
       * const control = new FormControl({ value: 'n/a', disabled: true });
       * console.log(control.value);     // 'n/a'
       * console.log(control.status);    // 'DISABLED'
       * ```
       *
       * The following example initializes the control with a sync validator.
       *
       * ```ts
       * const control = new FormControl('', Validators.required);
       * console.log(control.value);      // ''
       * console.log(control.status);     // 'INVALID'
       * ```
       *
       * The following example initializes the control using an options object.
       *
       * ```ts
       * const control = new FormControl('', {
       *    validators: Validators.required,
       *    asyncValidators: myAsyncValidator
       * });
       * ```
       *
       * ### Configure the control to update on a blur event
       *
       * Set the `updateOn` option to `'blur'` to update on the blur `event`.
       *
       * ```ts
       * const control = new FormControl('', { updateOn: 'blur' });
       * ```
       *
       * ### Configure the control to update on a submit event
       *
       * Set the `updateOn` option to `'submit'` to update on a submit `event`.
       *
       * ```ts
       * const control = new FormControl('', { updateOn: 'submit' });
       * ```
       *
       * ### Reset the control back to an initial value
       *
       * You reset to a specific form state by passing through a standalone
       * value or a form state object that contains both a value and a disabled state
       * (these are the only two properties that cannot be calculated).
       *
       * ```ts
       * const control = new FormControl('Nancy');
       *
       * console.log(control.value); // 'Nancy'
       *
       * control.reset('Drew');
       *
       * console.log(control.value); // 'Drew'
       * ```
       *
       * ### Reset the control back to an initial value and disabled
       *
       * ```
       * const control = new FormControl('Nancy');
       *
       * console.log(control.value); // 'Nancy'
       * console.log(control.status); // 'VALID'
       *
       * control.reset({ value: 'Drew', disabled: true });
       *
       * console.log(control.value); // 'Drew'
       * console.log(control.status); // 'DISABLED'
       * ```
       *
       * @publicApi
       */


      var FormControl = /*#__PURE__*/function (_AbstractControl) {
        _inherits(FormControl, _AbstractControl);

        var _super17 = _createSuper(FormControl);

        /**
         * Creates a new `FormControl` instance.
         *
         * @param formState Initializes the control with an initial value,
         * or an object that defines the initial value and disabled state.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormControl() {
          var _this15;

          var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var validatorOrOpts = arguments.length > 1 ? arguments[1] : undefined;
          var asyncValidator = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, FormControl);

          _this15 = _super17.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          /** @internal */

          _this15._onChange = [];

          _this15._applyFormState(formState);

          _this15._setUpdateStrategy(validatorOrOpts);

          _this15._initObservables();

          _this15.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`.
            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
            // to `true` to allow that during the control creation process.
            emitEvent: !!asyncValidator
          });

          return _this15;
        }
        /**
         * Sets a new value for the form control.
         *
         * @param value The new value for the control.
         * @param options Configuration options that determine how the control propagates changes
         * and emits events when the value changes.
         * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
         * false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control value is updated.
         * When false, no events are emitted.
         * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an
         * `onChange` event to
         * update the view.
         * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an
         * `ngModelChange`
         * event to update the model.
         *
         */


        _createClass2(FormControl, [{
          key: "setValue",
          value: function setValue(value) {
            var _this16 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.value = this._pendingValue = value;

            if (this._onChange.length && options.emitModelToViewChange !== false) {
              this._onChange.forEach(function (changeFn) {
                return changeFn(_this16.value, options.emitViewToModelChange !== false);
              });
            }

            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of a control.
           *
           * This function is functionally the same as {@link FormControl#setValue setValue} at this level.
           * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and
           * `FormArrays`, where it does behave differently.
           *
           * @see `setValue` for options
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.setValue(value, options);
          }
          /**
           * Resets the form control, marking it `pristine` and `untouched`, and setting
           * the value to null.
           *
           * @param formState Resets the control with an initial value,
           * or an object that defines the initial value and disabled state.
           *
           * @param options Configuration options that determine how the control propagates changes
           * and emits events after the value changes.
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           *
           */

        }, {
          key: "reset",
          value: function reset() {
            var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._applyFormState(formState);

            this.markAsPristine(options);
            this.markAsUntouched(options);
            this.setValue(this.value, options);
            this._pendingChange = false;
          }
          /**
           * @internal
           */

        }, {
          key: "_updateValue",
          value: function _updateValue() {}
          /**
           * @internal
           */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            return false;
          }
          /**
           * @internal
           */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            return this.disabled;
          }
          /**
           * Register a listener for change events.
           *
           * @param fn The method that is called when the value changes
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this._onChange.push(fn);
          }
          /**
           * Internal function to unregister a change events listener.
           * @internal
           */

        }, {
          key: "_unregisterOnChange",
          value: function _unregisterOnChange(fn) {
            removeListItem(this._onChange, fn);
          }
          /**
           * Register a listener for disabled events.
           *
           * @param fn The method that is called when the disabled status changes.
           */

        }, {
          key: "registerOnDisabledChange",
          value: function registerOnDisabledChange(fn) {
            this._onDisabledChange.push(fn);
          }
          /**
           * Internal function to unregister a disabled event listener.
           * @internal
           */

        }, {
          key: "_unregisterOnDisabledChange",
          value: function _unregisterOnDisabledChange(fn) {
            removeListItem(this._onDisabledChange, fn);
          }
          /**
           * @internal
           */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {}
          /** @internal */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            if (this.updateOn === 'submit') {
              if (this._pendingDirty) this.markAsDirty();
              if (this._pendingTouched) this.markAsTouched();

              if (this._pendingChange) {
                this.setValue(this._pendingValue, {
                  onlySelf: true,
                  emitModelToViewChange: false
                });
                return true;
              }
            }

            return false;
          }
        }, {
          key: "_applyFormState",
          value: function _applyFormState(formState) {
            if (this._isBoxedValue(formState)) {
              this.value = this._pendingValue = formState.value;
              formState.disabled ? this.disable({
                onlySelf: true,
                emitEvent: false
              }) : this.enable({
                onlySelf: true,
                emitEvent: false
              });
            } else {
              this.value = this._pendingValue = formState;
            }
          }
        }]);

        return FormControl;
      }(AbstractControl);
      /**
       * Tracks the value and validity state of a group of `FormControl` instances.
       *
       * A `FormGroup` aggregates the values of each child `FormControl` into one object,
       * with each control name as the key.  It calculates its status by reducing the status values
       * of its children. For example, if one of the controls in a group is invalid, the entire
       * group becomes invalid.
       *
       * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
       * along with `FormControl` and `FormArray`.
       *
       * When instantiating a `FormGroup`, pass in a collection of child controls as the first
       * argument. The key for each child registers the name for the control.
       *
       * @usageNotes
       *
       * ### Create a form group with 2 controls
       *
       * ```
       * const form = new FormGroup({
       *   first: new FormControl('Nancy', Validators.minLength(2)),
       *   last: new FormControl('Drew'),
       * });
       *
       * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
       * console.log(form.status);  // 'VALID'
       * ```
       *
       * ### Create a form group with a group-level validator
       *
       * You include group-level validators as the second arg, or group-level async
       * validators as the third arg. These come in handy when you want to perform validation
       * that considers the value of more than one child control.
       *
       * ```
       * const form = new FormGroup({
       *   password: new FormControl('', Validators.minLength(2)),
       *   passwordConfirm: new FormControl('', Validators.minLength(2)),
       * }, passwordMatchValidator);
       *
       *
       * function passwordMatchValidator(g: FormGroup) {
       *    return g.get('password').value === g.get('passwordConfirm').value
       *       ? null : {'mismatch': true};
       * }
       * ```
       *
       * Like `FormControl` instances, you choose to pass in
       * validators and async validators as part of an options object.
       *
       * ```
       * const form = new FormGroup({
       *   password: new FormControl('')
       *   passwordConfirm: new FormControl('')
       * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
       * ```
       *
       * ### Set the updateOn property for all controls in a form group
       *
       * The options object is used to set a default value for each child
       * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
       * group level, all child controls default to 'blur', unless the child
       * has explicitly specified a different `updateOn` value.
       *
       * ```ts
       * const c = new FormGroup({
       *   one: new FormControl()
       * }, { updateOn: 'blur' });
       * ```
       *
       * @publicApi
       */


      var FormGroup = /*#__PURE__*/function (_AbstractControl2) {
        _inherits(FormGroup, _AbstractControl2);

        var _super18 = _createSuper(FormGroup);

        /**
         * Creates a new `FormGroup` instance.
         *
         * @param controls A collection of child controls. The key for each child is the name
         * under which it is registered.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormGroup(controls, validatorOrOpts, asyncValidator) {
          var _this17;

          _classCallCheck(this, FormGroup);

          _this17 = _super18.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          _this17.controls = controls;

          _this17._initObservables();

          _this17._setUpdateStrategy(validatorOrOpts);

          _this17._setUpControls();

          _this17.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
            // so we set `emitEvent` to `true` to allow that during the control creation process.
            emitEvent: !!asyncValidator
          });

          return _this17;
        }
        /**
         * Registers a control with the group's list of controls.
         *
         * This method does not update the value or validity of the control.
         * Use {@link FormGroup#addControl addControl} instead.
         *
         * @param name The control name to register in the collection
         * @param control Provides the control for the given name
         */


        _createClass2(FormGroup, [{
          key: "registerControl",
          value: function registerControl(name, control) {
            if (this.controls[name]) return this.controls[name];
            this.controls[name] = control;
            control.setParent(this);

            control._registerOnCollectionChange(this._onCollectionChange);

            return control;
          }
          /**
           * Add a control to this group.
           *
           * This method also updates the value and validity of the control.
           *
           * @param name The control name to add to the collection
           * @param control Provides the control for the given name
           */

        }, {
          key: "addControl",
          value: function addControl(name, control) {
            this.registerControl(name, control);
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Remove a control from this group.
           *
           * @param name The control name to remove from the collection
           */

        }, {
          key: "removeControl",
          value: function removeControl(name) {
            if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
            delete this.controls[name];
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Replace an existing control.
           *
           * @param name The control name to replace in the collection
           * @param control Provides the control for the given name
           */

        }, {
          key: "setControl",
          value: function setControl(name, control) {
            if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
            delete this.controls[name];
            if (control) this.registerControl(name, control);
            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Check whether there is an enabled control with the given name in the group.
           *
           * Reports false for disabled controls. If you'd like to check for existence in the group
           * only, use {@link AbstractControl#get get} instead.
           *
           * @param controlName The control name to check for existence in the collection
           *
           * @returns false for disabled controls, true otherwise.
           */

        }, {
          key: "contains",
          value: function contains(controlName) {
            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
          }
          /**
           * Sets the value of the `FormGroup`. It accepts an object that matches
           * the structure of the group, with control names as keys.
           *
           * @usageNotes
           * ### Set the complete value for the form group
           *
           * ```
           * const form = new FormGroup({
           *   first: new FormControl(),
           *   last: new FormControl()
           * });
           *
           * console.log(form.value);   // {first: null, last: null}
           *
           * form.setValue({first: 'Nancy', last: 'Drew'});
           * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
           * ```
           *
           * @throws When strict checks fail, such as setting the value of a control
           * that doesn't exist or if you exclude a value of a control that does exist.
           *
           * @param value The new value for the control that matches the structure of the group.
           * @param options Configuration options that determine how the control propagates changes
           * and emits events after the value changes.
           * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           */

        }, {
          key: "setValue",
          value: function setValue(value) {
            var _this18 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._checkAllValuesPresent(value);

            Object.keys(value).forEach(function (name) {
              _this18._throwIfControlMissing(name);

              _this18.controls[name].setValue(value[name], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of the `FormGroup`. It accepts an object with control
           * names as keys, and does its best to match the values to the correct controls
           * in the group.
           *
           * It accepts both super-sets and sub-sets of the group without throwing an error.
           *
           * @usageNotes
           * ### Patch the value for a form group
           *
           * ```
           * const form = new FormGroup({
           *    first: new FormControl(),
           *    last: new FormControl()
           * });
           * console.log(form.value);   // {first: null, last: null}
           *
           * form.patchValue({first: 'Nancy'});
           * console.log(form.value);   // {first: 'Nancy', last: null}
           * ```
           *
           * @param value The object that matches the structure of the group.
           * @param options Configuration options that determine how the control propagates changes and
           * emits events after the value is patched.
           * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
           * true.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges` observables emit events with the latest status and value when the control value
           * is updated. When false, no events are emitted. The configuration options are passed to
           * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var _this19 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
            // `patchValue` can be called recursively and inner data structures might have these values, so
            // we just ignore such cases when a field containing FormGroup instance receives `null` or
            // `undefined` as a value.
            if (value == null
            /* both `null` and `undefined` */
            ) return;
            Object.keys(value).forEach(function (name) {
              if (_this19.controls[name]) {
                _this19.controls[name].patchValue(value[name], {
                  onlySelf: true,
                  emitEvent: options.emitEvent
                });
              }
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
           * the value of all descendants to null.
           *
           * You reset to a specific form state by passing in a map of states
           * that matches the structure of your form, with control names as keys. The state
           * is a standalone value or a form state object with both a value and a disabled
           * status.
           *
           * @param value Resets the control with an initial value,
           * or an object that defines the initial value and disabled state.
           *
           * @param options Configuration options that determine how the control propagates changes
           * and emits events when the group is reset.
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
           * false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           *
           * @usageNotes
           *
           * ### Reset the form group values
           *
           * ```ts
           * const form = new FormGroup({
           *   first: new FormControl('first name'),
           *   last: new FormControl('last name')
           * });
           *
           * console.log(form.value);  // {first: 'first name', last: 'last name'}
           *
           * form.reset({ first: 'name', last: 'last name' });
           *
           * console.log(form.value);  // {first: 'name', last: 'last name'}
           * ```
           *
           * ### Reset the form group values and disabled status
           *
           * ```
           * const form = new FormGroup({
           *   first: new FormControl('first name'),
           *   last: new FormControl('last name')
           * });
           *
           * form.reset({
           *   first: {value: 'name', disabled: true},
           *   last: 'last'
           * });
           *
           * console.log(form.value);  // {last: 'last'}
           * console.log(form.get('first').status);  // 'DISABLED'
           * ```
           */

        }, {
          key: "reset",
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._forEachChild(function (control, name) {
              control.reset(value[name], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });

            this._updatePristine(options);

            this._updateTouched(options);

            this.updateValueAndValidity(options);
          }
          /**
           * The aggregate value of the `FormGroup`, including any disabled controls.
           *
           * Retrieves all values regardless of disabled status.
           * The `value` property is the best way to get the value of the group, because
           * it excludes disabled controls in the `FormGroup`.
           */

        }, {
          key: "getRawValue",
          value: function getRawValue() {
            return this._reduceChildren({}, function (acc, control, name) {
              acc[name] = control instanceof FormControl ? control.value : control.getRawValue();
              return acc;
            });
          }
          /** @internal */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            var subtreeUpdated = this._reduceChildren(false, function (updated, child) {
              return child._syncPendingControls() ? true : updated;
            });

            if (subtreeUpdated) this.updateValueAndValidity({
              onlySelf: true
            });
            return subtreeUpdated;
          }
          /** @internal */

        }, {
          key: "_throwIfControlMissing",
          value: function _throwIfControlMissing(name) {
            if (!Object.keys(this.controls).length) {
              throw new Error("\n        There are no form controls registered with this group yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }

            if (!this.controls[name]) {
              throw new Error("Cannot find form control with name: ".concat(name, "."));
            }
          }
          /** @internal */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {
            var _this20 = this;

            Object.keys(this.controls).forEach(function (key) {
              // The list of controls can change (for ex. controls might be removed) while the loop
              // is running (as a result of invoking Forms API in `valueChanges` subscription), so we
              // have to null check before invoking the callback.
              var control = _this20.controls[key];
              control && cb(control, key);
            });
          }
          /** @internal */

        }, {
          key: "_setUpControls",
          value: function _setUpControls() {
            var _this21 = this;

            this._forEachChild(function (control) {
              control.setParent(_this21);

              control._registerOnCollectionChange(_this21._onCollectionChange);
            });
          }
          /** @internal */

        }, {
          key: "_updateValue",
          value: function _updateValue() {
            this.value = this._reduceValue();
          }
          /** @internal */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            for (var _i2 = 0, _Object$keys = Object.keys(this.controls); _i2 < _Object$keys.length; _i2++) {
              var controlName = _Object$keys[_i2];
              var control = this.controls[controlName];

              if (this.contains(controlName) && condition(control)) {
                return true;
              }
            }

            return false;
          }
          /** @internal */

        }, {
          key: "_reduceValue",
          value: function _reduceValue() {
            var _this22 = this;

            return this._reduceChildren({}, function (acc, control, name) {
              if (control.enabled || _this22.disabled) {
                acc[name] = control.value;
              }

              return acc;
            });
          }
          /** @internal */

        }, {
          key: "_reduceChildren",
          value: function _reduceChildren(initValue, fn) {
            var res = initValue;

            this._forEachChild(function (control, name) {
              res = fn(res, control, name);
            });

            return res;
          }
          /** @internal */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            for (var _i3 = 0, _Object$keys2 = Object.keys(this.controls); _i3 < _Object$keys2.length; _i3++) {
              var controlName = _Object$keys2[_i3];

              if (this.controls[controlName].enabled) {
                return false;
              }
            }

            return Object.keys(this.controls).length > 0 || this.disabled;
          }
          /** @internal */

        }, {
          key: "_checkAllValuesPresent",
          value: function _checkAllValuesPresent(value) {
            this._forEachChild(function (control, name) {
              if (value[name] === undefined) {
                throw new Error("Must supply a value for form control with name: '".concat(name, "'."));
              }
            });
          }
        }]);

        return FormGroup;
      }(AbstractControl);
      /**
       * Tracks the value and validity state of an array of `FormControl`,
       * `FormGroup` or `FormArray` instances.
       *
       * A `FormArray` aggregates the values of each child `FormControl` into an array.
       * It calculates its status by reducing the status values of its children. For example, if one of
       * the controls in a `FormArray` is invalid, the entire array becomes invalid.
       *
       * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
       * along with `FormControl` and `FormGroup`.
       *
       * @usageNotes
       *
       * ### Create an array of form controls
       *
       * ```
       * const arr = new FormArray([
       *   new FormControl('Nancy', Validators.minLength(2)),
       *   new FormControl('Drew'),
       * ]);
       *
       * console.log(arr.value);   // ['Nancy', 'Drew']
       * console.log(arr.status);  // 'VALID'
       * ```
       *
       * ### Create a form array with array-level validators
       *
       * You include array-level validators and async validators. These come in handy
       * when you want to perform validation that considers the value of more than one child
       * control.
       *
       * The two types of validators are passed in separately as the second and third arg
       * respectively, or together as part of an options object.
       *
       * ```
       * const arr = new FormArray([
       *   new FormControl('Nancy'),
       *   new FormControl('Drew')
       * ], {validators: myValidator, asyncValidators: myAsyncValidator});
       * ```
       *
       * ### Set the updateOn property for all controls in a form array
       *
       * The options object is used to set a default value for each child
       * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
       * array level, all child controls default to 'blur', unless the child
       * has explicitly specified a different `updateOn` value.
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl()
       * ], {updateOn: 'blur'});
       * ```
       *
       * ### Adding or removing controls from a form array
       *
       * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
       * in `FormArray` itself. These methods ensure the controls are properly tracked in the
       * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
       * the `FormArray` directly, as that result in strange and unexpected behavior such
       * as broken change detection.
       *
       * @publicApi
       */


      var FormArray = /*#__PURE__*/function (_AbstractControl3) {
        _inherits(FormArray, _AbstractControl3);

        var _super19 = _createSuper(FormArray);

        /**
         * Creates a new `FormArray` instance.
         *
         * @param controls An array of child controls. Each child control is given an index
         * where it is registered.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         */
        function FormArray(controls, validatorOrOpts, asyncValidator) {
          var _this23;

          _classCallCheck(this, FormArray);

          _this23 = _super19.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          _this23.controls = controls;

          _this23._initObservables();

          _this23._setUpdateStrategy(validatorOrOpts);

          _this23._setUpControls();

          _this23.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`.
            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
            // to `true` to allow that during the control creation process.
            emitEvent: !!asyncValidator
          });

          return _this23;
        }
        /**
         * Get the `AbstractControl` at the given `index` in the array.
         *
         * @param index Index in the array to retrieve the control
         */


        _createClass2(FormArray, [{
          key: "at",
          value: function at(index) {
            return this.controls[index];
          }
          /**
           * Insert a new `AbstractControl` at the end of the array.
           *
           * @param control Form control to be inserted
           */

        }, {
          key: "push",
          value: function push(control) {
            this.controls.push(control);

            this._registerControl(control);

            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Insert a new `AbstractControl` at the given `index` in the array.
           *
           * @param index Index in the array to insert the control
           * @param control Form control to be inserted
           */

        }, {
          key: "insert",
          value: function insert(index, control) {
            this.controls.splice(index, 0, control);

            this._registerControl(control);

            this.updateValueAndValidity();
          }
          /**
           * Remove the control at the given `index` in the array.
           *
           * @param index Index in the array to remove the control
           */

        }, {
          key: "removeAt",
          value: function removeAt(index) {
            if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
            this.controls.splice(index, 1);
            this.updateValueAndValidity();
          }
          /**
           * Replace an existing control.
           *
           * @param index Index in the array to replace the control
           * @param control The `AbstractControl` control to replace the existing control
           */

        }, {
          key: "setControl",
          value: function setControl(index, control) {
            if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
            this.controls.splice(index, 1);

            if (control) {
              this.controls.splice(index, 0, control);

              this._registerControl(control);
            }

            this.updateValueAndValidity();

            this._onCollectionChange();
          }
          /**
           * Length of the control array.
           */

        }, {
          key: "length",
          get: function get() {
            return this.controls.length;
          }
          /**
           * Sets the value of the `FormArray`. It accepts an array that matches
           * the structure of the control.
           *
           * This method performs strict checks, and throws an error if you try
           * to set the value of a control that doesn't exist or if you exclude the
           * value of a control.
           *
           * @usageNotes
           * ### Set the values for the controls in the form array
           *
           * ```
           * const arr = new FormArray([
           *   new FormControl(),
           *   new FormControl()
           * ]);
           * console.log(arr.value);   // [null, null]
           *
           * arr.setValue(['Nancy', 'Drew']);
           * console.log(arr.value);   // ['Nancy', 'Drew']
           * ```
           *
           * @param value Array of values for the controls
           * @param options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control value is updated.
           * When false, no events are emitted.
           * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           */

        }, {
          key: "setValue",
          value: function setValue(value) {
            var _this24 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._checkAllValuesPresent(value);

            value.forEach(function (newValue, index) {
              _this24._throwIfControlMissing(index);

              _this24.at(index).setValue(newValue, {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Patches the value of the `FormArray`. It accepts an array that matches the
           * structure of the control, and does its best to match the values to the correct
           * controls in the group.
           *
           * It accepts both super-sets and sub-sets of the array without throwing an error.
           *
           * @usageNotes
           * ### Patch the values for controls in a form array
           *
           * ```
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * console.log(arr.value);   // [null, null]
           *
           * arr.patchValue(['Nancy']);
           * console.log(arr.value);   // ['Nancy', null]
           * ```
           *
           * @param value Array of latest values for the controls
           * @param options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges` observables emit events with the latest status and value when the control value
           * is updated. When false, no events are emitted. The configuration options are passed to
           * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
           */

        }, {
          key: "patchValue",
          value: function patchValue(value) {
            var _this25 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
            // `patchValue` can be called recursively and inner data structures might have these values, so
            // we just ignore such cases when a field containing FormArray instance receives `null` or
            // `undefined` as a value.
            if (value == null
            /* both `null` and `undefined` */
            ) return;
            value.forEach(function (newValue, index) {
              if (_this25.at(index)) {
                _this25.at(index).patchValue(newValue, {
                  onlySelf: true,
                  emitEvent: options.emitEvent
                });
              }
            });
            this.updateValueAndValidity(options);
          }
          /**
           * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
           * value of all descendants to null or null maps.
           *
           * You reset to a specific form state by passing in an array of states
           * that matches the structure of the control. The state is a standalone value
           * or a form state object with both a value and a disabled status.
           *
           * @usageNotes
           * ### Reset the values in a form array
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * arr.reset(['name', 'last name']);
           *
           * console.log(this.arr.value);  // ['name', 'last name']
           * ```
           *
           * ### Reset the values in a form array and the disabled status for the first control
           *
           * ```
           * this.arr.reset([
           *   {value: 'name', disabled: true},
           *   'last'
           * ]);
           *
           * console.log(this.arr.value);  // ['name', 'last name']
           * console.log(this.arr.get(0).status);  // 'DISABLED'
           * ```
           *
           * @param value Array of values for the controls
           * @param options Configure options that determine how the control propagates changes and
           * emits events after the value changes
           *
           * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
           * is false.
           * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
           * `valueChanges`
           * observables emit events with the latest status and value when the control is reset.
           * When false, no events are emitted.
           * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
           * updateValueAndValidity} method.
           */

        }, {
          key: "reset",
          value: function reset() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._forEachChild(function (control, index) {
              control.reset(value[index], {
                onlySelf: true,
                emitEvent: options.emitEvent
              });
            });

            this._updatePristine(options);

            this._updateTouched(options);

            this.updateValueAndValidity(options);
          }
          /**
           * The aggregate value of the array, including any disabled controls.
           *
           * Reports all values regardless of disabled status.
           * For enabled controls only, the `value` property is the best way to get the value of the array.
           */

        }, {
          key: "getRawValue",
          value: function getRawValue() {
            return this.controls.map(function (control) {
              return control instanceof FormControl ? control.value : control.getRawValue();
            });
          }
          /**
           * Remove all controls in the `FormArray`.
           *
           * @usageNotes
           * ### Remove all elements from a FormArray
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           * console.log(arr.length);  // 2
           *
           * arr.clear();
           * console.log(arr.length);  // 0
           * ```
           *
           * It's a simpler and more efficient alternative to removing all elements one by one:
           *
           * ```ts
           * const arr = new FormArray([
           *    new FormControl(),
           *    new FormControl()
           * ]);
           *
           * while (arr.length) {
           *    arr.removeAt(0);
           * }
           * ```
           */

        }, {
          key: "clear",
          value: function clear() {
            if (this.controls.length < 1) return;

            this._forEachChild(function (control) {
              return control._registerOnCollectionChange(function () {});
            });

            this.controls.splice(0);
            this.updateValueAndValidity();
          }
          /** @internal */

        }, {
          key: "_syncPendingControls",
          value: function _syncPendingControls() {
            var subtreeUpdated = this.controls.reduce(function (updated, child) {
              return child._syncPendingControls() ? true : updated;
            }, false);
            if (subtreeUpdated) this.updateValueAndValidity({
              onlySelf: true
            });
            return subtreeUpdated;
          }
          /** @internal */

        }, {
          key: "_throwIfControlMissing",
          value: function _throwIfControlMissing(index) {
            if (!this.controls.length) {
              throw new Error("\n        There are no form controls registered with this array yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }

            if (!this.at(index)) {
              throw new Error("Cannot find form control at index ".concat(index));
            }
          }
          /** @internal */

        }, {
          key: "_forEachChild",
          value: function _forEachChild(cb) {
            this.controls.forEach(function (control, index) {
              cb(control, index);
            });
          }
          /** @internal */

        }, {
          key: "_updateValue",
          value: function _updateValue() {
            var _this26 = this;

            this.value = this.controls.filter(function (control) {
              return control.enabled || _this26.disabled;
            }).map(function (control) {
              return control.value;
            });
          }
          /** @internal */

        }, {
          key: "_anyControls",
          value: function _anyControls(condition) {
            return this.controls.some(function (control) {
              return control.enabled && condition(control);
            });
          }
          /** @internal */

        }, {
          key: "_setUpControls",
          value: function _setUpControls() {
            var _this27 = this;

            this._forEachChild(function (control) {
              return _this27._registerControl(control);
            });
          }
          /** @internal */

        }, {
          key: "_checkAllValuesPresent",
          value: function _checkAllValuesPresent(value) {
            this._forEachChild(function (control, i) {
              if (value[i] === undefined) {
                throw new Error("Must supply a value for form control at index: ".concat(i, "."));
              }
            });
          }
          /** @internal */

        }, {
          key: "_allControlsDisabled",
          value: function _allControlsDisabled() {
            var _iterator2 = _createForOfIteratorHelper(this.controls),
                _step;

            try {
              for (_iterator2.s(); !(_step = _iterator2.n()).done;) {
                var control = _step.value;
                if (control.enabled) return false;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return this.controls.length > 0 || this.disabled;
          }
        }, {
          key: "_registerControl",
          value: function _registerControl(control) {
            control.setParent(this);

            control._registerOnCollectionChange(this._onCollectionChange);
          }
        }]);

        return FormArray;
      }(AbstractControl);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return NgForm;
        })
      };

      var ɵ0 = function ɵ0() {
        return Promise.resolve(null);
      };

      var resolvedPromise = ɵ0();
      /**
       * @description
       * Creates a top-level `FormGroup` instance and binds it to a form
       * to track aggregate form value and validation status.
       *
       * As soon as you import the `FormsModule`, this directive becomes active by default on
       * all `<form>` tags.  You don't need to add a special selector.
       *
       * You optionally export the directive into a local template variable using `ngForm` as the key
       * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
       * `FormGroup` instance are duplicated on the directive itself, so a reference to it
       * gives you access to the aggregate value and validity status of the form, as well as
       * user interaction properties like `dirty` and `touched`.
       *
       * To register child controls with the form, use `NgModel` with a `name`
       * attribute. You may use `NgModelGroup` to create sub-groups within the form.
       *
       * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
       * triggered a form submission. The `ngSubmit` event emits the original form
       * submission event.
       *
       * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
       * To import the `FormsModule` but skip its usage in some forms,
       * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
       * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
       * unnecessary because the `<form>` tags are inert. In that case, you would
       * refrain from using the `formGroup` directive.
       *
       * @usageNotes
       *
       * ### Listening for form submission
       *
       * The following example shows how to capture the form values from the "ngSubmit" event.
       *
       * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
       *
       * ### Setting the update options
       *
       * The following example shows you how to change the "updateOn" option from its default using
       * ngFormOptions.
       *
       * ```html
       * <form [ngFormOptions]="{updateOn: 'blur'}">
       *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
       * </form>
       * ```
       *
       * ### Native DOM validation UI
       *
       * In order to prevent the native DOM form validation UI from interfering with Angular's form
       * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
       * `FormModule` or `ReactiveFormModule` are imported into the application.
       * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
       * `ngNativeValidate` attribute to the `<form>` element:
       *
       * ```html
       * <form ngNativeValidate>
       *   ...
       * </form>
       * ```
       *
       * @ngModule FormsModule
       * @publicApi
       */

      var NgForm = /*#__PURE__*/function (_ControlContainer) {
        _inherits(NgForm, _ControlContainer);

        var _super20 = _createSuper(NgForm);

        function NgForm(validators, asyncValidators) {
          var _this28;

          _classCallCheck(this, NgForm);

          _this28 = _super20.call(this);
          /**
           * @description
           * Returns whether the form submission has been triggered.
           */

          _this28.submitted = false;
          _this28._directives = [];
          /**
           * @description
           * Event emitter for the "ngSubmit" event
           */

          _this28.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          _this28.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
          return _this28;
        }
        /** @nodoc */


        _createClass2(NgForm, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            this._setUpdateStrategy();
          }
          /**
           * @description
           * The directive instance.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this;
          }
          /**
           * @description
           * The internal `FormGroup` instance.
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
          /**
           * @description
           * Returns an array representing the path to this group. Because this directive
           * always lives at the top level of a form, it is always an empty array.
           */

        }, {
          key: "path",
          get: function get() {
            return [];
          }
          /**
           * @description
           * Returns a map of the controls in this group.
           */

        }, {
          key: "controls",
          get: function get() {
            return this.form.controls;
          }
          /**
           * @description
           * Method that sets up the control directive in this group, re-calculates its value
           * and validity, and adds the instance to the internal list of directives.
           *
           * @param dir The `NgModel` directive instance.
           */

        }, {
          key: "addControl",
          value: function addControl(dir) {
            var _this29 = this;

            resolvedPromise.then(function () {
              var container = _this29._findContainer(dir.path);

              dir.control = container.registerControl(dir.name, dir.control);
              setUpControl(dir.control, dir);
              dir.control.updateValueAndValidity({
                emitEvent: false
              });

              _this29._directives.push(dir);
            });
          }
          /**
           * @description
           * Retrieves the `FormControl` instance from the provided `NgModel` directive.
           *
           * @param dir The `NgModel` directive instance.
           */

        }, {
          key: "getControl",
          value: function getControl(dir) {
            return this.form.get(dir.path);
          }
          /**
           * @description
           * Removes the `NgModel` instance from the internal list of directives
           *
           * @param dir The `NgModel` directive instance.
           */

        }, {
          key: "removeControl",
          value: function removeControl(dir) {
            var _this30 = this;

            resolvedPromise.then(function () {
              var container = _this30._findContainer(dir.path);

              if (container) {
                container.removeControl(dir.name);
              }

              removeListItem(_this30._directives, dir);
            });
          }
          /**
           * @description
           * Adds a new `NgModelGroup` directive instance to the form.
           *
           * @param dir The `NgModelGroup` directive instance.
           */

        }, {
          key: "addFormGroup",
          value: function addFormGroup(dir) {
            var _this31 = this;

            resolvedPromise.then(function () {
              var container = _this31._findContainer(dir.path);

              var group = new FormGroup({});
              setUpFormContainer(group, dir);
              container.registerControl(dir.name, group);
              group.updateValueAndValidity({
                emitEvent: false
              });
            });
          }
          /**
           * @description
           * Removes the `NgModelGroup` directive instance from the form.
           *
           * @param dir The `NgModelGroup` directive instance.
           */

        }, {
          key: "removeFormGroup",
          value: function removeFormGroup(dir) {
            var _this32 = this;

            resolvedPromise.then(function () {
              var container = _this32._findContainer(dir.path);

              if (container) {
                container.removeControl(dir.name);
              }
            });
          }
          /**
           * @description
           * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
           *
           * @param dir The `NgModelGroup` directive instance.
           */

        }, {
          key: "getFormGroup",
          value: function getFormGroup(dir) {
            return this.form.get(dir.path);
          }
          /**
           * Sets the new value for the provided `NgControl` directive.
           *
           * @param dir The `NgControl` directive instance.
           * @param value The new value for the directive's control.
           */

        }, {
          key: "updateModel",
          value: function updateModel(dir, value) {
            var _this33 = this;

            resolvedPromise.then(function () {
              var ctrl = _this33.form.get(dir.path);

              ctrl.setValue(value);
            });
          }
          /**
           * @description
           * Sets the value for this `FormGroup`.
           *
           * @param value The new value
           */

        }, {
          key: "setValue",
          value: function setValue(value) {
            this.control.setValue(value);
          }
          /**
           * @description
           * Method called when the "submit" event is triggered on the form.
           * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
           *
           * @param $event The "submit" event object
           */

        }, {
          key: "onSubmit",
          value: function onSubmit($event) {
            this.submitted = true;
            syncPendingControls(this.form, this._directives);
            this.ngSubmit.emit($event);
            return false;
          }
          /**
           * @description
           * Method called when the "reset" event is triggered on the form.
           */

        }, {
          key: "onReset",
          value: function onReset() {
            this.resetForm();
          }
          /**
           * @description
           * Resets the form to an initial value and resets its submitted status.
           *
           * @param value The new value for the form.
           */

        }, {
          key: "resetForm",
          value: function resetForm() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            this.form.reset(value);
            this.submitted = false;
          }
        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy() {
            if (this.options && this.options.updateOn != null) {
              this.form._updateOn = this.options.updateOn;
            }
          }
          /** @internal */

        }, {
          key: "_findContainer",
          value: function _findContainer(path) {
            path.pop();
            return path.length ? this.form.get(path) : this.form;
          }
        }]);

        return NgForm;
      }(ControlContainer);

      NgForm.ɵfac = function NgForm_Factory(t) {
        return new (t || NgForm)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      NgForm.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgForm,
        selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
        hostBindings: function NgForm_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function NgForm_submit_HostBindingHandler($event) {
              return ctx.onSubmit($event);
            })("reset", function NgForm_reset_HostBindingHandler() {
              return ctx.onReset();
            });
          }
        },
        inputs: {
          options: ["ngFormOptions", "options"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      NgForm.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      NgForm.propDecorators = {
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngFormOptions']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgForm, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',
            providers: [formDirectiveProvider],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            outputs: ['ngSubmit'],
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngFormOptions']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
       *
       * @publicApi
       */


      var AbstractFormGroupDirective = /*#__PURE__*/function (_ControlContainer2) {
        _inherits(AbstractFormGroupDirective, _ControlContainer2);

        var _super21 = _createSuper(AbstractFormGroupDirective);

        function AbstractFormGroupDirective() {
          _classCallCheck(this, AbstractFormGroupDirective);

          return _super21.apply(this, arguments);
        }

        _createClass2(AbstractFormGroupDirective, [{
          key: "ngOnInit",
          value:
          /** @nodoc */
          function ngOnInit() {
            this._checkParentType(); // Register the group with its parent group.


            this.formDirective.addFormGroup(this);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              // Remove the group from its parent group.
              this.formDirective.removeFormGroup(this);
            }
          }
          /**
           * @description
           * The `FormGroup` bound to this directive.
           */

        }, {
          key: "control",
          get: function get() {
            return this.formDirective.getFormGroup(this);
          }
          /**
           * @description
           * The path to this group from the top-level directive.
           */

        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
          }
          /**
           * @description
           * The top-level directive for this group if present, otherwise null.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /** @internal */

        }, {
          key: "_checkParentType",
          value: function _checkParentType() {}
        }]);

        return AbstractFormGroupDirective;
      }(ControlContainer);

      AbstractFormGroupDirective.ɵfac = function AbstractFormGroupDirective_Factory(t) {
        return ɵAbstractFormGroupDirective_BaseFactory(t || AbstractFormGroupDirective);
      };

      AbstractFormGroupDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: AbstractFormGroupDirective,
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵAbstractFormGroupDirective_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](AbstractFormGroupDirective);

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AbstractFormGroupDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var TemplateDrivenErrors = /*#__PURE__*/function () {
        function TemplateDrivenErrors() {
          _classCallCheck(this, TemplateDrivenErrors);
        }

        _createClass2(TemplateDrivenErrors, null, [{
          key: "modelParentException",
          value: function modelParentException() {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ".concat(FormErrorExamples.formControlName, "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ").concat(FormErrorExamples.ngModelWithFormGroup));
          }
        }, {
          key: "formGroupNameException",
          value: function formGroupNameException() {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
          }
        }, {
          key: "missingNameException",
          value: function missingNameException() {
            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
          }
        }, {
          key: "modelGroupParentException",
          value: function modelGroupParentException() {
            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
          }
        }]);

        return TemplateDrivenErrors;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var modelGroupProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return NgModelGroup;
        })
      };
      /**
       * @description
       * Creates and binds a `FormGroup` instance to a DOM element.
       *
       * This directive can only be used as a child of `NgForm` (within `<form>` tags).
       *
       * Use this directive to validate a sub-group of your form separately from the
       * rest of your form, or if some values in your domain model make more sense
       * to consume together in a nested object.
       *
       * Provide a name for the sub-group and it will become the key
       * for the sub-group in the form's full value. If you need direct access, export the directive into
       * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
       *
       * @usageNotes
       *
       * ### Consuming controls in a grouping
       *
       * The following example shows you how to combine controls together in a sub-group
       * of the form.
       *
       * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
       *
       * @ngModule FormsModule
       * @publicApi
       */

      var NgModelGroup = /*#__PURE__*/function (_AbstractFormGroupDir) {
        _inherits(NgModelGroup, _AbstractFormGroupDir);

        var _super22 = _createSuper(NgModelGroup);

        function NgModelGroup(parent, validators, asyncValidators) {
          var _this34;

          _classCallCheck(this, NgModelGroup);

          _this34 = _super22.call(this);
          _this34._parent = parent;

          _this34._setValidators(validators);

          _this34._setAsyncValidators(asyncValidators);

          return _this34;
        }
        /** @internal */


        _createClass2(NgModelGroup, [{
          key: "_checkParentType",
          value: function _checkParentType() {
            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              TemplateDrivenErrors.modelGroupParentException();
            }
          }
        }]);

        return NgModelGroup;
      }(AbstractFormGroupDirective);

      NgModelGroup.ɵfac = function NgModelGroup_Factory(t) {
        return new (t || NgModelGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 5), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      NgModelGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgModelGroup,
        selectors: [["", "ngModelGroup", ""]],
        inputs: {
          name: ["ngModelGroup", "name"]
        },
        exportAs: ["ngModelGroup"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([modelGroupProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      NgModelGroup.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      NgModelGroup.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModelGroup']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModelGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngModelGroup]',
            providers: [modelGroupProvider],
            exportAs: 'ngModelGroup'
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModelGroup']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var formControlBinding = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return NgModel;
        })
      };

      var ɵ0$1 = function ɵ0$1() {
        return Promise.resolve(null);
      };
      /**
       * `ngModel` forces an additional change detection run when its inputs change:
       * E.g.:
       * ```
       * <div>{{myModel.valid}}</div>
       * <input [(ngModel)]="myValue" #myModel="ngModel">
       * ```
       * I.e. `ngModel` can export itself on the element and then be used in the template.
       * Normally, this would result in expressions before the `input` that use the exported directive
       * to have an old value as they have been
       * dirty checked before. As this is a very common case for `ngModel`, we added this second change
       * detection run.
       *
       * Notes:
       * - this is just one extra run no matter how many `ngModel`s have been changed.
       * - this is a general problem when using `exportAs` for directives!
       */


      var resolvedPromise$1 = ɵ0$1();
      /**
       * @description
       * Creates a `FormControl` instance from a domain model and binds it
       * to a form control element.
       *
       * The `FormControl` instance tracks the value, user interaction, and
       * validation status of the control and keeps the view synced with the model. If used
       * within a parent form, the directive also registers itself with the form as a child
       * control.
       *
       * This directive is used by itself or as part of a larger form. Use the
       * `ngModel` selector to activate it.
       *
       * It accepts a domain model as an optional `Input`. If you have a one-way binding
       * to `ngModel` with `[]` syntax, changing the domain model's value in the component
       * class sets the value in the view. If you have a two-way binding with `[()]` syntax
       * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to
       * the domain model in your class.
       *
       * To inspect the properties of the associated `FormControl` (like the validity state),
       * export the directive into a local template variable using `ngModel` as the key (ex:
       * `#myVar="ngModel"`). You can then access the control using the directive's `control` property.
       * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control
       * for direct access. See a full list of properties directly available in
       * `AbstractControlDirective`.
       *
       * @see `RadioControlValueAccessor`
       * @see `SelectControlValueAccessor`
       *
       * @usageNotes
       *
       * ### Using ngModel on a standalone control
       *
       * The following examples show a simple standalone control using `ngModel`:
       *
       * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
       *
       * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
       * so that the control can be registered with the parent form under that name.
       *
       * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
       * as the parent form syncs the value for you. You access its properties by exporting it into a
       * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
       * needed on form submission.
       *
       * If you do need to populate initial values into your form, using a one-way binding for
       * `ngModel` tends to be sufficient as long as you use the exported form's value rather
       * than the domain model's value on submit.
       *
       * ### Using ngModel within a form
       *
       * The following example shows controls using `ngModel` within a form:
       *
       * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
       *
       * ### Using a standalone ngModel within a group
       *
       * The following example shows you how to use a standalone ngModel control
       * within a form. This controls the display of the form, but doesn't contain form data.
       *
       * ```html
       * <form>
       *   <input name="login" ngModel placeholder="Login">
       *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
       * </form>
       * <!-- form value: {login: ''} -->
       * ```
       *
       * ### Setting the ngModel `name` attribute through options
       *
       * The following example shows you an alternate way to set the name attribute. Here,
       * an attribute identified as name is used within a custom form control component. To still be able
       * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.
       *
       * ```html
       * <form>
       *   <my-custom-form-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
       *   </my-custom-form-control>
       * </form>
       * <!-- form value: {user: ''} -->
       * ```
       *
       * @ngModule FormsModule
       * @publicApi
       */

      var NgModel = /*#__PURE__*/function (_NgControl) {
        _inherits(NgModel, _NgControl);

        var _super23 = _createSuper(NgModel);

        function NgModel(parent, validators, asyncValidators, valueAccessors) {
          var _this35;

          _classCallCheck(this, NgModel);

          _this35 = _super23.call(this);
          _this35.control = new FormControl();
          /** @internal */

          _this35._registered = false;
          /**
           * @description
           * Event emitter for producing the `ngModelChange` event after
           * the view model updates.
           */

          _this35.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          _this35._parent = parent;

          _this35._setValidators(validators);

          _this35._setAsyncValidators(asyncValidators);

          _this35.valueAccessor = selectValueAccessor(_assertThisInitialized(_this35), valueAccessors);
          return _this35;
        }
        /** @nodoc */


        _createClass2(NgModel, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._checkForErrors();

            if (!this._registered) this._setUpControl();

            if ('isDisabled' in changes) {
              this._updateDisabled(changes);
            }

            if (isPropertyUpdated(changes, this.viewModel)) {
              this._updateValue(this.model);

              this.viewModel = this.model;
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.formDirective && this.formDirective.removeControl(this);
          }
          /**
           * @description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           */

        }, {
          key: "path",
          get: function get() {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
          }
          /**
           * @description
           * The top-level directive for this control if present, otherwise null.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /**
           * @description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param newValue The new value emitted by `ngModelChange`.
           */

        }, {
          key: "viewToModelUpdate",
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
        }, {
          key: "_setUpControl",
          value: function _setUpControl() {
            this._setUpdateStrategy();

            this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
            this._registered = true;
          }
        }, {
          key: "_setUpdateStrategy",
          value: function _setUpdateStrategy() {
            if (this.options && this.options.updateOn != null) {
              this.control._updateOn = this.options.updateOn;
            }
          }
        }, {
          key: "_isStandalone",
          value: function _isStandalone() {
            return !this._parent || !!(this.options && this.options.standalone);
          }
        }, {
          key: "_setUpStandalone",
          value: function _setUpStandalone() {
            setUpControl(this.control, this);
            this.control.updateValueAndValidity({
              emitEvent: false
            });
          }
        }, {
          key: "_checkForErrors",
          value: function _checkForErrors() {
            if (!this._isStandalone()) {
              this._checkParentType();
            }

            this._checkName();
          }
        }, {
          key: "_checkParentType",
          value: function _checkParentType() {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
                TemplateDrivenErrors.formGroupNameException();
              } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                TemplateDrivenErrors.modelParentException();
              }
            }
          }
        }, {
          key: "_checkName",
          value: function _checkName() {
            if (this.options && this.options.name) this.name = this.options.name;

            if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              TemplateDrivenErrors.missingNameException();
            }
          }
        }, {
          key: "_updateValue",
          value: function _updateValue(value) {
            var _this36 = this;

            resolvedPromise$1.then(function () {
              _this36.control.setValue(value, {
                emitViewToModelChange: false
              });
            });
          }
        }, {
          key: "_updateDisabled",
          value: function _updateDisabled(changes) {
            var _this37 = this;

            var disabledValue = changes['isDisabled'].currentValue;
            var isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';
            resolvedPromise$1.then(function () {
              if (isDisabled && !_this37.control.disabled) {
                _this37.control.disable();
              } else if (!isDisabled && _this37.control.disabled) {
                _this37.control.enable();
              }
            });
          }
        }]);

        return NgModel;
      }(NgControl);

      NgModel.ɵfac = function NgModel_Factory(t) {
        return new (t || NgModel)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 9), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10));
      };

      NgModel.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgModel,
        selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
        inputs: {
          name: "name",
          isDisabled: ["disabled", "isDisabled"],
          model: ["ngModel", "model"],
          options: ["ngModelOptions", "options"]
        },
        outputs: {
          update: "ngModelChange"
        },
        exportAs: ["ngModel"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      NgModel.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
      };

      NgModel.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModelOptions']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModel, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngModel]:not([formControlName]):not([formControl])',
            providers: [formControlBinding],
            exportAs: 'ngModel'
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModelOptions']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Adds `novalidate` attribute to all forms by default.
       *
       * `novalidate` is used to disable browser's native form validation.
       *
       * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
       *
       * ```
       * <form ngNativeValidate></form>
       * ```
       *
       * @publicApi
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       */


      var ɵNgNoValidate = function ɵNgNoValidate() {
        _classCallCheck(this, ɵNgNoValidate);
      };

      ɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) {
        return new (t || ɵNgNoValidate)();
      };

      ɵNgNoValidate.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ɵNgNoValidate,
        selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
        hostAttrs: ["novalidate", ""]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgNoValidate, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
            host: {
              'novalidate': ''
            }
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return NumberValueAccessor;
        }),
        multi: true
      };
      /**
       * @description
       * The `ControlValueAccessor` for writing a number value and listening to number input changes.
       * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
       * directives.
       *
       * @usageNotes
       *
       * ### Using a number input with a reactive form.
       *
       * The following example shows how to use a number input with a reactive form.
       *
       * ```ts
       * const totalCountControl = new FormControl();
       * ```
       *
       * ```
       * <input type="number" [formControl]="totalCountControl">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var NumberValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA2) {
        _inherits(NumberValueAccessor, _BuiltInControlValueA2);

        var _super24 = _createSuper(NumberValueAccessor);

        function NumberValueAccessor(_renderer, _elementRef) {
          var _this38;

          _classCallCheck(this, NumberValueAccessor);

          _this38 = _super24.call(this);
          _this38._renderer = _renderer;
          _this38._elementRef = _elementRef;
          /**
           * The registered callback function called when a change or input event occurs on the input
           * element.
           * @nodoc
           */

          _this38.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this38.onTouched = function () {};

          return _this38;
        }
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */


        _createClass2(NumberValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
            var normalizedValue = value == null ? '' : value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = function (value) {
              fn(value == '' ? null : parseFloat(value));
            };
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return NumberValueAccessor;
      }(BuiltInControlValueAccessor);

      NumberValueAccessor.ɵfac = function NumberValueAccessor_Factory(t) {
        return new (t || NumberValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      NumberValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NumberValueAccessor,
        selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
        hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function NumberValueAccessor_input_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([NUMBER_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      NumberValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NumberValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
            host: {
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [NUMBER_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return RadioControlValueAccessor;
        }),
        multi: true
      };

      function throwNameError() {
        throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
      }
      /**
       * Internal-only NgModule that works as a host for the `RadioControlRegistry` tree-shakable
       * provider. Note: the `InternalFormsSharedModule` can not be used here directly, since it's
       * declared *after* the `RadioControlRegistry` class and the `providedIn` doesn't support
       * `forwardRef` logic.
       */


      var RadioControlRegistryModule = function RadioControlRegistryModule() {
        _classCallCheck(this, RadioControlRegistryModule);
      };

      RadioControlRegistryModule.ɵfac = function RadioControlRegistryModule_Factory(t) {
        return new (t || RadioControlRegistryModule)();
      };

      RadioControlRegistryModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: RadioControlRegistryModule
      });
      RadioControlRegistryModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlRegistryModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"]
        }], null, null);
      })();
      /**
       * @description
       * Class used by Angular to track radio buttons. For internal use only.
       */


      var RadioControlRegistry = /*#__PURE__*/function () {
        function RadioControlRegistry() {
          _classCallCheck(this, RadioControlRegistry);

          this._accessors = [];
        }
        /**
         * @description
         * Adds a control to the internal registry. For internal use only.
         */


        _createClass2(RadioControlRegistry, [{
          key: "add",
          value: function add(control, accessor) {
            this._accessors.push([control, accessor]);
          }
          /**
           * @description
           * Removes a control from the internal registry. For internal use only.
           */

        }, {
          key: "remove",
          value: function remove(accessor) {
            for (var i = this._accessors.length - 1; i >= 0; --i) {
              if (this._accessors[i][1] === accessor) {
                this._accessors.splice(i, 1);

                return;
              }
            }
          }
          /**
           * @description
           * Selects a radio button. For internal use only.
           */

        }, {
          key: "select",
          value: function select(accessor) {
            var _this39 = this;

            this._accessors.forEach(function (c) {
              if (_this39._isSameGroup(c, accessor) && c[1] !== accessor) {
                c[1].fireUncheck(accessor.value);
              }
            });
          }
        }, {
          key: "_isSameGroup",
          value: function _isSameGroup(controlPair, accessor) {
            if (!controlPair[0].control) return false;
            return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
          }
        }]);

        return RadioControlRegistry;
      }();

      RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {
        return new (t || RadioControlRegistry)();
      };

      RadioControlRegistry.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function RadioControlRegistry_Factory() {
          return new RadioControlRegistry();
        },
        token: RadioControlRegistry,
        providedIn: RadioControlRegistryModule
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlRegistry, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: RadioControlRegistryModule
          }]
        }], function () {
          return [];
        }, null);
      })();
      /**
       * @description
       * The `ControlValueAccessor` for writing radio control values and listening to radio control
       * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * @usageNotes
       *
       * ### Using radio buttons with reactive form directives
       *
       * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
       * a reactive form, radio buttons in the same group should have the same `formControlName`.
       * Providing a `name` attribute is optional.
       *
       * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var RadioControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA3) {
        _inherits(RadioControlValueAccessor, _BuiltInControlValueA3);

        var _super25 = _createSuper(RadioControlValueAccessor);

        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          var _this40;

          _classCallCheck(this, RadioControlValueAccessor);

          _this40 = _super25.call(this);
          _this40._renderer = _renderer;
          _this40._elementRef = _elementRef;
          _this40._registry = _registry;
          _this40._injector = _injector;
          /**
           * The registered callback function called when a change event occurs on the input element.
           * @nodoc
           */

          _this40.onChange = function () {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this40.onTouched = function () {};

          return _this40;
        }
        /** @nodoc */


        _createClass2(RadioControlValueAccessor, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this._control = this._injector.get(NgControl);

            this._checkName();

            this._registry.add(this._control, this);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._registry.remove(this);
          }
          /**
           * Sets the "checked" property value on the radio input element.
           * @nodoc
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._state = value === this.value;

            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this41 = this;

            this._fn = fn;

            this.onChange = function () {
              fn(_this41.value);

              _this41._registry.select(_this41);
            };
          }
          /**
           * Sets the "value" on the radio input element and unchecks it.
           *
           * @param value
           */

        }, {
          key: "fireUncheck",
          value: function fireUncheck(value) {
            this.writeValue(value);
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }, {
          key: "_checkName",
          value: function _checkName() {
            if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throwNameError();
            }

            if (!this.name && this.formControlName) this.name = this.formControlName;
          }
        }]);

        return RadioControlValueAccessor;
      }(BuiltInControlValueAccessor);

      RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) {
        return new (t || RadioControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](RadioControlRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]));
      };

      RadioControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RadioControlValueAccessor,
        selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
        hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RadioControlValueAccessor_change_HostBindingHandler() {
              return ctx.onChange();
            })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          name: "name",
          formControlName: "formControlName",
          value: "value"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RADIO_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      RadioControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: RadioControlRegistry
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
        }];
      };

      RadioControlValueAccessor.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        formControlName: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            host: {
              '(change)': 'onChange()',
              '(blur)': 'onTouched()'
            },
            providers: [RADIO_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: RadioControlRegistry
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          formControlName: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return RangeValueAccessor;
        }),
        multi: true
      };
      /**
       * @description
       * The `ControlValueAccessor` for writing a range value and listening to range input changes.
       * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
       * directives.
       *
       * @usageNotes
       *
       * ### Using a range input with a reactive form
       *
       * The following example shows how to use a range input with a reactive form.
       *
       * ```ts
       * const ageControl = new FormControl();
       * ```
       *
       * ```
       * <input type="range" [formControl]="ageControl">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var RangeValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA4) {
        _inherits(RangeValueAccessor, _BuiltInControlValueA4);

        var _super26 = _createSuper(RangeValueAccessor);

        function RangeValueAccessor(_renderer, _elementRef) {
          var _this42;

          _classCallCheck(this, RangeValueAccessor);

          _this42 = _super26.call(this);
          _this42._renderer = _renderer;
          _this42._elementRef = _elementRef;
          /**
           * The registered callback function called when a change or input event occurs on the input
           * element.
           * @nodoc
           */

          _this42.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this42.onTouched = function () {};

          return _this42;
        }
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */


        _createClass2(RangeValueAccessor, [{
          key: "writeValue",
          value: function writeValue(value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = function (value) {
              fn(value == '' ? null : parseFloat(value));
            };
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the range input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
        }]);

        return RangeValueAccessor;
      }(BuiltInControlValueAccessor);

      RangeValueAccessor.ɵfac = function RangeValueAccessor_Factory(t) {
        return new (t || RangeValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      RangeValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RangeValueAccessor,
        selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
        hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RangeValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RANGE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      RangeValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RangeValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [RANGE_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Token to provide to turn off the ngModel warning on formControl and formControlName.
       */


      var NG_MODEL_WITH_FORM_CONTROL_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgModelWithFormControlWarning');
      var formControlBinding$1 = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return FormControlDirective;
        })
      };
      /**
       * @description
       * Synchronizes a standalone `FormControl` instance to a form control element.
       *
       * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive
       * form directives was deprecated in Angular v6 and is scheduled for removal in
       * a future version of Angular.
       * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `FormControl`
       * @see `AbstractControl`
       *
       * @usageNotes
       *
       * The following example shows how to register a standalone control and set its value.
       *
       * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
       *
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var FormControlDirective = /*#__PURE__*/function (_NgControl2) {
        _inherits(FormControlDirective, _NgControl2);

        var _super27 = _createSuper(FormControlDirective);

        function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
          var _this43;

          _classCallCheck(this, FormControlDirective);

          _this43 = _super27.call(this);
          _this43._ngModelWarningConfig = _ngModelWarningConfig;
          /** @deprecated as of v6 */

          _this43.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * @description
           * Instance property used to track whether an ngModel warning has been sent out for this
           * particular `FormControlDirective` instance. Used to support warning config of "always".
           *
           * @internal
           */

          _this43._ngModelWarningSent = false;

          _this43._setValidators(validators);

          _this43._setAsyncValidators(asyncValidators);

          _this43.valueAccessor = selectValueAccessor(_assertThisInitialized(_this43), valueAccessors);
          return _this43;
        }
        /**
         * @description
         * Triggers a warning in dev mode that this input should not be used with reactive forms.
         */


        _createClass2(FormControlDirective, [{
          key: "isDisabled",
          set: function set(isDisabled) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              ReactiveErrors.disabledAttrWarning();
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (this._isControlChanged(changes)) {
              var previousForm = changes['form'].previousValue;

              if (previousForm) {
                cleanUpControl(previousForm, this,
                /* validateControlPresenceOnChange */
                false);
              }

              setUpControl(this.form, this);

              if (this.control.disabled && this.valueAccessor.setDisabledState) {
                this.valueAccessor.setDisabledState(true);
              }

              this.form.updateValueAndValidity({
                emitEvent: false
              });
            }

            if (isPropertyUpdated(changes, this.viewModel)) {
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);
              }

              this.form.setValue(this.model);
              this.viewModel = this.model;
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.form) {
              cleanUpControl(this.form, this,
              /* validateControlPresenceOnChange */
              false);
            }
          }
          /**
           * @description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           */

        }, {
          key: "path",
          get: function get() {
            return [];
          }
          /**
           * @description
           * The `FormControl` bound to this directive.
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
          /**
           * @description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param newValue The new value for the view model.
           */

        }, {
          key: "viewToModelUpdate",
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
        }, {
          key: "_isControlChanged",
          value: function _isControlChanged(changes) {
            return changes.hasOwnProperty('form');
          }
        }]);

        return FormControlDirective;
      }(NgControl);

      FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {
        return new (t || FormControlDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
      };

      FormControlDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormControlDirective,
        selectors: [["", "formControl", ""]],
        inputs: {
          isDisabled: ["disabled", "isDisabled"],
          form: ["formControl", "form"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /**
       * @description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlDirective. Used to support warning config of "once".
       *
       * @internal
       */

      FormControlDirective._ngModelWarningSentOnce = false;

      FormControlDirective.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
          }]
        }];
      };

      FormControlDirective.propDecorators = {
        form: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formControl']
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControl]',
            providers: [formControlBinding$1],
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          form: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formControl']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return FormGroupDirective;
        })
      };
      /**
       * @description
       *
       * Binds an existing `FormGroup` to a DOM element.
       *
       * This directive accepts an existing `FormGroup` instance. It will then use this
       * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
       * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
       * and `FormArrayName` directives.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `AbstractControl`
       *
       * @usageNotes
       * ### Register Form Group
       *
       * The following example registers a `FormGroup` with first name and last name controls,
       * and listens for the *ngSubmit* event when the button is clicked.
       *
       * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
       *
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var FormGroupDirective = /*#__PURE__*/function (_ControlContainer3) {
        _inherits(FormGroupDirective, _ControlContainer3);

        var _super28 = _createSuper(FormGroupDirective);

        function FormGroupDirective(validators, asyncValidators) {
          var _this44;

          _classCallCheck(this, FormGroupDirective);

          _this44 = _super28.call(this);
          _this44.validators = validators;
          _this44.asyncValidators = asyncValidators;
          /**
           * @description
           * Reports whether the form submission has been triggered.
           */

          _this44.submitted = false;
          /**
           * Callback that should be invoked when controls in FormGroup or FormArray collection change
           * (added or removed). This callback triggers corresponding DOM updates.
           */

          _this44._onCollectionChange = function () {
            return _this44._updateDomValue();
          };
          /**
           * @description
           * Tracks the list of added `FormControlName` instances
           */


          _this44.directives = [];
          /**
           * @description
           * Tracks the `FormGroup` bound to this directive.
           */

          _this44.form = null;
          /**
           * @description
           * Emits an event when the form submission has been triggered.
           */

          _this44.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();

          _this44._setValidators(validators);

          _this44._setAsyncValidators(asyncValidators);

          return _this44;
        }
        /** @nodoc */


        _createClass2(FormGroupDirective, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._checkFormPresent();

            if (changes.hasOwnProperty('form')) {
              this._updateValidators();

              this._updateDomValue();

              this._updateRegistrations();

              this._oldForm = this.form;
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.form) {
              cleanUpValidators(this.form, this,
              /* handleOnValidatorChange */
              false); // Currently the `onCollectionChange` callback is rewritten each time the
              // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should
              // happen *only* when the `onCollectionChange` callback was set by this directive instance.
              // Otherwise it might cause overriding a callback of some other directive instances. We should
              // consider updating this logic later to make it similar to how `onChange` callbacks are
              // handled, see https://github.com/angular/angular/issues/39732 for additional info.

              if (this.form._onCollectionChange === this._onCollectionChange) {
                this.form._registerOnCollectionChange(function () {});
              }
            }
          }
          /**
           * @description
           * Returns this directive's instance.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this;
          }
          /**
           * @description
           * Returns the `FormGroup` bound to this directive.
           */

        }, {
          key: "control",
          get: function get() {
            return this.form;
          }
          /**
           * @description
           * Returns an array representing the path to this group. Because this directive
           * always lives at the top level of a form, it always an empty array.
           */

        }, {
          key: "path",
          get: function get() {
            return [];
          }
          /**
           * @description
           * Method that sets up the control directive in this group, re-calculates its value
           * and validity, and adds the instance to the internal list of directives.
           *
           * @param dir The `FormControlName` directive instance.
           */

        }, {
          key: "addControl",
          value: function addControl(dir) {
            var ctrl = this.form.get(dir.path);
            setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
            this.directives.push(dir);
            return ctrl;
          }
          /**
           * @description
           * Retrieves the `FormControl` instance from the provided `FormControlName` directive
           *
           * @param dir The `FormControlName` directive instance.
           */

        }, {
          key: "getControl",
          value: function getControl(dir) {
            return this.form.get(dir.path);
          }
          /**
           * @description
           * Removes the `FormControlName` instance from the internal list of directives
           *
           * @param dir The `FormControlName` directive instance.
           */

        }, {
          key: "removeControl",
          value: function removeControl(dir) {
            cleanUpControl(dir.control || null, dir,
            /* validateControlPresenceOnChange */
            false);
            removeListItem(this.directives, dir);
          }
          /**
           * Adds a new `FormGroupName` directive instance to the form.
           *
           * @param dir The `FormGroupName` directive instance.
           */

        }, {
          key: "addFormGroup",
          value: function addFormGroup(dir) {
            this._setUpFormContainer(dir);
          }
          /**
           * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
           * view.
           *
           * @param dir The `FormGroupName` directive instance.
           */

        }, {
          key: "removeFormGroup",
          value: function removeFormGroup(dir) {
            this._cleanUpFormContainer(dir);
          }
          /**
           * @description
           * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
           *
           * @param dir The `FormGroupName` directive instance.
           */

        }, {
          key: "getFormGroup",
          value: function getFormGroup(dir) {
            return this.form.get(dir.path);
          }
          /**
           * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
           *
           * @param dir The `FormArrayName` directive instance.
           */

        }, {
          key: "addFormArray",
          value: function addFormArray(dir) {
            this._setUpFormContainer(dir);
          }
          /**
           * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
           * view.
           *
           * @param dir The `FormArrayName` directive instance.
           */

        }, {
          key: "removeFormArray",
          value: function removeFormArray(dir) {
            this._cleanUpFormContainer(dir);
          }
          /**
           * @description
           * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
           *
           * @param dir The `FormArrayName` directive instance.
           */

        }, {
          key: "getFormArray",
          value: function getFormArray(dir) {
            return this.form.get(dir.path);
          }
          /**
           * Sets the new value for the provided `FormControlName` directive.
           *
           * @param dir The `FormControlName` directive instance.
           * @param value The new value for the directive's control.
           */

        }, {
          key: "updateModel",
          value: function updateModel(dir, value) {
            var ctrl = this.form.get(dir.path);
            ctrl.setValue(value);
          }
          /**
           * @description
           * Method called with the "submit" event is triggered on the form.
           * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
           *
           * @param $event The "submit" event object
           */

        }, {
          key: "onSubmit",
          value: function onSubmit($event) {
            this.submitted = true;
            syncPendingControls(this.form, this.directives);
            this.ngSubmit.emit($event);
            return false;
          }
          /**
           * @description
           * Method called when the "reset" event is triggered on the form.
           */

        }, {
          key: "onReset",
          value: function onReset() {
            this.resetForm();
          }
          /**
           * @description
           * Resets the form to an initial value and resets its submitted status.
           *
           * @param value The new value for the form.
           */

        }, {
          key: "resetForm",
          value: function resetForm() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            this.form.reset(value);
            this.submitted = false;
          }
          /** @internal */

        }, {
          key: "_updateDomValue",
          value: function _updateDomValue() {
            var _this45 = this;

            this.directives.forEach(function (dir) {
              var oldCtrl = dir.control;

              var newCtrl = _this45.form.get(dir.path);

              if (oldCtrl !== newCtrl) {
                // Note: the value of the `dir.control` may not be defined, for example when it's a first
                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).
                cleanUpControl(oldCtrl || null, dir); // Check whether new control at the same location inside the corresponding `FormGroup` is an
                // instance of `FormControl` and perform control setup only if that's the case.
                // Note: we don't need to clear the list of directives (`this.directives`) here, it would be
                // taken care of in the `removeControl` method invoked when corresponding `formControlName`
                // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).

                if (newCtrl instanceof FormControl) {
                  setUpControl(newCtrl, dir);
                  dir.control = newCtrl;
                }
              }
            });

            this.form._updateTreeValidity({
              emitEvent: false
            });
          }
        }, {
          key: "_setUpFormContainer",
          value: function _setUpFormContainer(dir) {
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir); // NOTE: this operation looks unnecessary in case no new validators were added in
            // `setUpFormContainer` call. Consider updating this code to match the logic in
            // `_cleanUpFormContainer` function.

            ctrl.updateValueAndValidity({
              emitEvent: false
            });
          }
        }, {
          key: "_cleanUpFormContainer",
          value: function _cleanUpFormContainer(dir) {
            if (this.form) {
              var ctrl = this.form.get(dir.path);

              if (ctrl) {
                var isControlUpdated = cleanUpFormContainer(ctrl, dir);

                if (isControlUpdated) {
                  // Run validity check only in case a control was updated (i.e. view validators were
                  // removed) as removing view validators might cause validity to change.
                  ctrl.updateValueAndValidity({
                    emitEvent: false
                  });
                }
              }
            }
          }
        }, {
          key: "_updateRegistrations",
          value: function _updateRegistrations() {
            this.form._registerOnCollectionChange(this._onCollectionChange);

            if (this._oldForm) {
              this._oldForm._registerOnCollectionChange(function () {});
            }
          }
        }, {
          key: "_updateValidators",
          value: function _updateValidators() {
            setUpValidators(this.form, this,
            /* handleOnValidatorChange */
            false);

            if (this._oldForm) {
              cleanUpValidators(this._oldForm, this,
              /* handleOnValidatorChange */
              false);
            }
          }
        }, {
          key: "_checkFormPresent",
          value: function _checkFormPresent() {
            if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              ReactiveErrors.missingFormException();
            }
          }
        }]);

        return FormGroupDirective;
      }(ControlContainer);

      FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {
        return new (t || FormGroupDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormGroupDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormGroupDirective,
        selectors: [["", "formGroup", ""]],
        hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
              return ctx.onSubmit($event);
            })("reset", function FormGroupDirective_reset_HostBindingHandler() {
              return ctx.onReset();
            });
          }
        },
        inputs: {
          form: ["formGroup", "form"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        exportAs: ["ngForm"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      FormGroupDirective.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormGroupDirective.propDecorators = {
        form: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formGroup']
        }],
        ngSubmit: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroup]',
            providers: [formDirectiveProvider$1],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            exportAs: 'ngForm'
          }]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          form: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formGroup']
          }],
          ngSubmit: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return FormGroupName;
        })
      };
      /**
       * @description
       *
       * Syncs a nested `FormGroup` to a DOM element.
       *
       * This directive can only be used with a parent `FormGroupDirective`.
       *
       * It accepts the string name of the nested `FormGroup` to link, and
       * looks for a `FormGroup` registered with that name in the parent
       * `FormGroup` instance you passed into `FormGroupDirective`.
       *
       * Use nested form groups to validate a sub-group of a
       * form separately from the rest or to group the values of certain
       * controls into their own nested object.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       *
       * @usageNotes
       *
       * ### Access the group by name
       *
       * The following example uses the {@link AbstractControl#get get} method to access the
       * associated `FormGroup`
       *
       * ```ts
       *   this.form.get('name');
       * ```
       *
       * ### Access individual controls in the group
       *
       * The following example uses the {@link AbstractControl#get get} method to access
       * individual controls within the group using dot syntax.
       *
       * ```ts
       *   this.form.get('name.first');
       * ```
       *
       * ### Register a nested `FormGroup`.
       *
       * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
       * and provides methods to retrieve the nested `FormGroup` and individual controls.
       *
       * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
       *
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var FormGroupName = /*#__PURE__*/function (_AbstractFormGroupDir2) {
        _inherits(FormGroupName, _AbstractFormGroupDir2);

        var _super29 = _createSuper(FormGroupName);

        function FormGroupName(parent, validators, asyncValidators) {
          var _this46;

          _classCallCheck(this, FormGroupName);

          _this46 = _super29.call(this);
          _this46._parent = parent;

          _this46._setValidators(validators);

          _this46._setAsyncValidators(asyncValidators);

          return _this46;
        }
        /** @internal */


        _createClass2(FormGroupName, [{
          key: "_checkParentType",
          value: function _checkParentType() {
            if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              ReactiveErrors.groupParentException();
            }
          }
        }]);

        return FormGroupName;
      }(AbstractFormGroupDirective);

      FormGroupName.ɵfac = function FormGroupName_Factory(t) {
        return new (t || FormGroupName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormGroupName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormGroupName,
        selectors: [["", "formGroupName", ""]],
        inputs: {
          name: ["formGroupName", "name"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formGroupNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      FormGroupName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormGroupName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formGroupName']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formGroupName]',
            providers: [formGroupNameProvider]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formGroupName']
          }]
        });
      })();

      var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return FormArrayName;
        })
      };
      /**
       * @description
       *
       * Syncs a nested `FormArray` to a DOM element.
       *
       * This directive is designed to be used with a parent `FormGroupDirective` (selector:
       * `[formGroup]`).
       *
       * It accepts the string name of the nested `FormArray` you want to link, and
       * will look for a `FormArray` registered with that name in the parent
       * `FormGroup` instance you passed into `FormGroupDirective`.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `AbstractControl`
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
       *
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var FormArrayName = /*#__PURE__*/function (_ControlContainer4) {
        _inherits(FormArrayName, _ControlContainer4);

        var _super30 = _createSuper(FormArrayName);

        function FormArrayName(parent, validators, asyncValidators) {
          var _this47;

          _classCallCheck(this, FormArrayName);

          _this47 = _super30.call(this);
          _this47._parent = parent;

          _this47._setValidators(validators);

          _this47._setAsyncValidators(asyncValidators);

          return _this47;
        }
        /**
         * A lifecycle method called when the directive's inputs are initialized. For internal use only.
         * @throws If the directive does not have a valid parent.
         * @nodoc
         */


        _createClass2(FormArrayName, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this._checkParentType();

            this.formDirective.addFormArray(this);
          }
          /**
           * A lifecycle method called before the directive's instance is destroyed. For internal use only.
           * @nodoc
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              this.formDirective.removeFormArray(this);
            }
          }
          /**
           * @description
           * The `FormArray` bound to this directive.
           */

        }, {
          key: "control",
          get: function get() {
            return this.formDirective.getFormArray(this);
          }
          /**
           * @description
           * The top-level directive for this group if present, otherwise null.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
          /**
           * @description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           */

        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
          }
        }, {
          key: "_checkParentType",
          value: function _checkParentType() {
            if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              ReactiveErrors.arrayParentException();
            }
          }
        }]);

        return FormArrayName;
      }(ControlContainer);

      FormArrayName.ɵfac = function FormArrayName_Factory(t) {
        return new (t || FormArrayName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
      };

      FormArrayName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormArrayName,
        selectors: [["", "formArrayName", ""]],
        inputs: {
          name: ["formArrayName", "name"]
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formArrayNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      FormArrayName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
      };

      FormArrayName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formArrayName']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormArrayName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formArrayName]',
            providers: [formArrayNameProvider]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formArrayName']
          }]
        });
      })();

      function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var controlNameBinding = {
        provide: NgControl,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return FormControlName;
        })
      };
      /**
       * @description
       * Syncs a `FormControl` in an existing `FormGroup` to a form control
       * element by name.
       *
       * @see [Reactive Forms Guide](guide/reactive-forms)
       * @see `FormControl`
       * @see `AbstractControl`
       *
       * @usageNotes
       *
       * ### Register `FormControl` within a group
       *
       * The following example shows how to register multiple form controls within a form group
       * and set their value.
       *
       * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
       *
       * To see `formControlName` examples with different form control types, see:
       *
       * * Radio buttons: `RadioControlValueAccessor`
       * * Selects: `SelectControlValueAccessor`
       *
       * ### Use with ngModel is deprecated
       *
       * Support for using the `ngModel` input property and `ngModelChange` event with reactive
       * form directives has been deprecated in Angular v6 and is scheduled for removal in
       * a future version of Angular.
       *
       * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
       *
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var FormControlName = /*#__PURE__*/function (_NgControl3) {
        _inherits(FormControlName, _NgControl3);

        var _super31 = _createSuper(FormControlName);

        function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
          var _this48;

          _classCallCheck(this, FormControlName);

          _this48 = _super31.call(this);
          _this48._ngModelWarningConfig = _ngModelWarningConfig;
          _this48._added = false;
          /** @deprecated as of v6 */

          _this48.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * @description
           * Instance property used to track whether an ngModel warning has been sent out for this
           * particular FormControlName instance. Used to support warning config of "always".
           *
           * @internal
           */

          _this48._ngModelWarningSent = false;
          _this48._parent = parent;

          _this48._setValidators(validators);

          _this48._setAsyncValidators(asyncValidators);

          _this48.valueAccessor = selectValueAccessor(_assertThisInitialized(_this48), valueAccessors);
          return _this48;
        }
        /**
         * @description
         * Triggers a warning in dev mode that this input should not be used with reactive forms.
         */


        _createClass2(FormControlName, [{
          key: "isDisabled",
          set: function set(isDisabled) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              ReactiveErrors.disabledAttrWarning();
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (!this._added) this._setUpControl();

            if (isPropertyUpdated(changes, this.viewModel)) {
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);
              }

              this.viewModel = this.model;
              this.formDirective.updateModel(this, this.model);
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.formDirective) {
              this.formDirective.removeControl(this);
            }
          }
          /**
           * @description
           * Sets the new value for the view model and emits an `ngModelChange` event.
           *
           * @param newValue The new value for the view model.
           */

        }, {
          key: "viewToModelUpdate",
          value: function viewToModelUpdate(newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
          }
          /**
           * @description
           * Returns an array that represents the path from the top-level form to this control.
           * Each index is the string name of the control on that level.
           */

        }, {
          key: "path",
          get: function get() {
            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
          }
          /**
           * @description
           * The top-level directive for this group if present, otherwise null.
           */

        }, {
          key: "formDirective",
          get: function get() {
            return this._parent ? this._parent.formDirective : null;
          }
        }, {
          key: "_checkParentType",
          value: function _checkParentType() {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
                ReactiveErrors.ngModelGroupException();
              } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
                ReactiveErrors.controlParentException();
              }
            }
          }
        }, {
          key: "_setUpControl",
          value: function _setUpControl() {
            this._checkParentType();

            this.control = this.formDirective.addControl(this);

            if (this.control.disabled && this.valueAccessor.setDisabledState) {
              this.valueAccessor.setDisabledState(true);
            }

            this._added = true;
          }
        }]);

        return FormControlName;
      }(NgControl);

      FormControlName.ɵfac = function FormControlName_Factory(t) {
        return new (t || FormControlName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
      };

      FormControlName.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: FormControlName,
        selectors: [["", "formControlName", ""]],
        inputs: {
          isDisabled: ["disabled", "isDisabled"],
          name: ["formControlName", "name"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([controlNameBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      /**
       * @description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlName. Used to support warning config of "once".
       *
       * @internal
       */

      FormControlName._ngModelWarningSentOnce = false;

      FormControlName.ctorParameters = function () {
        return [{
          type: ControlContainer,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_VALUE_ACCESSOR]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
          }]
        }];
      };

      FormControlName.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['formControlName']
        }],
        isDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['disabled']
        }],
        model: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngModel']
        }],
        update: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['ngModelChange']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlName, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[formControlName]',
            providers: [controlNameBinding]
          }]
        }], function () {
          return [{
            type: ControlContainer,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_ASYNC_VALIDATORS]
            }]
          }, {
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_VALUE_ACCESSOR]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
            }]
          }];
        }, {
          update: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['ngModelChange']
          }],
          isDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['disabled']
          }],
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['formControlName']
          }],
          model: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngModel']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return SelectControlValueAccessor;
        }),
        multi: true
      };

      function _buildValueString(id, value) {
        if (id == null) return "".concat(value);
        if (value && typeof value === 'object') value = 'Object';
        return "".concat(id, ": ").concat(value).slice(0, 50);
      }

      function _extractId(valueString) {
        return valueString.split(':')[0];
      }
      /**
       * @description
       * The `ControlValueAccessor` for writing select control values and listening to select control
       * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * @usageNotes
       *
       * ### Using select controls in a reactive form
       *
       * The following examples show how to use a select control in a reactive form.
       *
       * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
       *
       * ### Using select controls in a template-driven form
       *
       * To use a select in a template-driven form, simply add an `ngModel` and a `name`
       * attribute to the main `<select>` tag.
       *
       * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
       *
       * ### Customizing option selection
       *
       * Angular uses object identity to select option. It's possible for the identities of items
       * to change while the data does not. This can happen, for example, if the items are produced
       * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
       * second response will produce objects with different identities.
       *
       * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
       * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
       * If `compareWith` is given, Angular selects option by the return value of the function.
       *
       * ```ts
       * const selectedCountriesControl = new FormControl();
       * ```
       *
       * ```
       * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
       *     <option *ngFor="let country of countries" [ngValue]="country">
       *         {{country.name}}
       *     </option>
       * </select>
       *
       * compareFn(c1: Country, c2: Country): boolean {
       *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
       * }
       * ```
       *
       * **Note:** We listen to the 'change' event because 'input' events aren't fired
       * for selects in IE, see:
       * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var SelectControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA5) {
        _inherits(SelectControlValueAccessor, _BuiltInControlValueA5);

        var _super32 = _createSuper(SelectControlValueAccessor);

        function SelectControlValueAccessor(_renderer, _elementRef) {
          var _this49;

          _classCallCheck(this, SelectControlValueAccessor);

          _this49 = _super32.call(this);
          _this49._renderer = _renderer;
          _this49._elementRef = _elementRef;
          /** @internal */

          _this49._optionMap = new Map();
          /** @internal */

          _this49._idCounter = 0;
          /**
           * The registered callback function called when a change event occurs on the input element.
           * @nodoc
           */

          _this49.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this49.onTouched = function () {};

          _this49._compareWith = Object.is;
          return _this49;
        }
        /**
         * @description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         */


        _createClass2(SelectControlValueAccessor, [{
          key: "compareWith",
          set: function set(fn) {
            if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
            }

            this._compareWith = fn;
          }
          /**
           * Sets the "value" property on the input element. The "selectedIndex"
           * property is also set if an ID is provided on the option element.
           * @nodoc
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;

            var id = this._getOptionId(value);

            if (id == null) {
              this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
            }

            var valueString = _buildValueString(id, value);

            this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
          }
          /**
           * Registers a function called when the control value changes.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this50 = this;

            this.onChange = function (valueString) {
              _this50.value = _this50._getOptionValue(valueString);
              fn(_this50.value);
            };
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the select input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /** @internal */

        }, {
          key: "_registerOption",
          value: function _registerOption() {
            return (this._idCounter++).toString();
          }
          /** @internal */

        }, {
          key: "_getOptionId",
          value: function _getOptionId(value) {
            for (var _i4 = 0, _Array$from = Array.from(this._optionMap.keys()); _i4 < _Array$from.length; _i4++) {
              var id = _Array$from[_i4];
              if (this._compareWith(this._optionMap.get(id), value)) return id;
            }

            return null;
          }
          /** @internal */

        }, {
          key: "_getOptionValue",
          value: function _getOptionValue(valueString) {
            var id = _extractId(valueString);

            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
          }
        }]);

        return SelectControlValueAccessor;
      }(BuiltInControlValueAccessor);

      SelectControlValueAccessor.ɵfac = function SelectControlValueAccessor_Factory(t) {
        return new (t || SelectControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      SelectControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: SelectControlValueAccessor,
        selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
        hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target.value);
            })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          compareWith: "compareWith"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      SelectControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      SelectControlValueAccessor.propDecorators = {
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, {
          compareWith: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @description
       * Marks `<option>` as dynamic, so Angular can be notified when options change.
       *
       * @see `SelectControlValueAccessor`
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var NgSelectOption = /*#__PURE__*/function () {
        function NgSelectOption(_element, _renderer, _select) {
          _classCallCheck(this, NgSelectOption);

          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select) this.id = this._select._registerOption();
        }
        /**
         * @description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         */


        _createClass2(NgSelectOption, [{
          key: "ngValue",
          set: function set(value) {
            if (this._select == null) return;

            this._select._optionMap.set(this.id, value);

            this._setElementValue(_buildValueString(this.id, value));

            this._select.writeValue(this._select.value);
          }
          /**
           * @description
           * Tracks simple string values bound to the option element.
           * For objects, use the `ngValue` input binding.
           */

        }, {
          key: "value",
          set: function set(value) {
            this._setElementValue(value);

            if (this._select) this._select.writeValue(this._select.value);
          }
          /** @internal */

        }, {
          key: "_setElementValue",
          value: function _setElementValue(value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._select) {
              this._select._optionMap["delete"](this.id);

              this._select.writeValue(this._select.value);
            }
          }
        }]);

        return NgSelectOption;
      }();

      NgSelectOption.ɵfac = function NgSelectOption_Factory(t) {
        return new (t || NgSelectOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectControlValueAccessor, 9));
      };

      NgSelectOption.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSelectOption,
        selectors: [["option"]],
        inputs: {
          ngValue: "ngValue",
          value: "value"
        }
      });

      NgSelectOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: SelectControlValueAccessor,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      NgSelectOption.propDecorators = {
        ngValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngValue']
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['value']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSelectOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'option'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: SelectControlValueAccessor,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, {
          ngValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngValue']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['value']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return SelectMultipleControlValueAccessor;
        }),
        multi: true
      };

      function _buildValueString$1(id, value) {
        if (id == null) return "".concat(value);
        if (typeof value === 'string') value = "'".concat(value, "'");
        if (value && typeof value === 'object') value = 'Object';
        return "".concat(id, ": ").concat(value).slice(0, 50);
      }

      function _extractId$1(valueString) {
        return valueString.split(':')[0];
      }
      /** Mock interface for HTMLCollection */


      var HTMLCollection = function HTMLCollection() {
        _classCallCheck(this, HTMLCollection);
      };
      /**
       * @description
       * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select
       * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
       * `NgModel` directives.
       *
       * @see `SelectControlValueAccessor`
       *
       * @usageNotes
       *
       * ### Using a multi-select control
       *
       * The follow example shows you how to use a multi-select control with a reactive form.
       *
       * ```ts
       * const countryControl = new FormControl();
       * ```
       *
       * ```
       * <select multiple name="countries" [formControl]="countryControl">
       *   <option *ngFor="let country of countries" [ngValue]="country">
       *     {{ country.name }}
       *   </option>
       * </select>
       * ```
       *
       * ### Customizing option selection
       *
       * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
       * See the `SelectControlValueAccessor` for usage.
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var SelectMultipleControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA6) {
        _inherits(SelectMultipleControlValueAccessor, _BuiltInControlValueA6);

        var _super33 = _createSuper(SelectMultipleControlValueAccessor);

        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
          var _this51;

          _classCallCheck(this, SelectMultipleControlValueAccessor);

          _this51 = _super33.call(this);
          _this51._renderer = _renderer;
          _this51._elementRef = _elementRef;
          /** @internal */

          _this51._optionMap = new Map();
          /** @internal */

          _this51._idCounter = 0;
          /**
           * The registered callback function called when a change event occurs on the input element.
           * @nodoc
           */

          _this51.onChange = function (_) {};
          /**
           * The registered callback function called when a blur event occurs on the input element.
           * @nodoc
           */


          _this51.onTouched = function () {};

          _this51._compareWith = Object.is;
          return _this51;
        }
        /**
         * @description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         */


        _createClass2(SelectMultipleControlValueAccessor, [{
          key: "compareWith",
          set: function set(fn) {
            if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
            }

            this._compareWith = fn;
          }
          /**
           * Sets the "value" property on one or of more of the select's options.
           * @nodoc
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            var _this52 = this;

            this.value = value;
            var optionSelectedStateSetter;

            if (Array.isArray(value)) {
              // convert values to ids
              var ids = value.map(function (v) {
                return _this52._getOptionId(v);
              });

              optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {
                opt._setSelected(ids.indexOf(o.toString()) > -1);
              };
            } else {
              optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {
                opt._setSelected(false);
              };
            }

            this._optionMap.forEach(optionSelectedStateSetter);
          }
          /**
           * Registers a function called when the control value changes
           * and writes an array of the selected options.
           * @nodoc
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            var _this53 = this;

            this.onChange = function (_) {
              var selected = [];

              if (_.selectedOptions !== undefined) {
                var options = _.selectedOptions;

                for (var i = 0; i < options.length; i++) {
                  var opt = options.item(i);

                  var val = _this53._getOptionValue(opt.value);

                  selected.push(val);
                }
              } // Degrade on IE
              else {
                  var _options = _.options;

                  for (var _i5 = 0; _i5 < _options.length; _i5++) {
                    var _opt = _options.item(_i5);

                    if (_opt.selected) {
                      var _val = _this53._getOptionValue(_opt.value);

                      selected.push(_val);
                    }
                  }
                }

              _this53.value = selected;
              fn(selected);
            };
          }
          /**
           * Registers a function called when the control is touched.
           * @nodoc
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the "disabled" property on the select input element.
           * @nodoc
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
          }
          /** @internal */

        }, {
          key: "_registerOption",
          value: function _registerOption(value) {
            var id = (this._idCounter++).toString();

            this._optionMap.set(id, value);

            return id;
          }
          /** @internal */

        }, {
          key: "_getOptionId",
          value: function _getOptionId(value) {
            for (var _i6 = 0, _Array$from2 = Array.from(this._optionMap.keys()); _i6 < _Array$from2.length; _i6++) {
              var id = _Array$from2[_i6];
              if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
            }

            return null;
          }
          /** @internal */

        }, {
          key: "_getOptionValue",
          value: function _getOptionValue(valueString) {
            var id = _extractId$1(valueString);

            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
          }
        }]);

        return SelectMultipleControlValueAccessor;
      }(BuiltInControlValueAccessor);

      SelectMultipleControlValueAccessor.ɵfac = function SelectMultipleControlValueAccessor_Factory(t) {
        return new (t || SelectMultipleControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
      };

      SelectMultipleControlValueAccessor.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: SelectMultipleControlValueAccessor,
        selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
        hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
              return ctx.onChange($event.target);
            })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
              return ctx.onTouched();
            });
          }
        },
        inputs: {
          compareWith: "compareWith"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_MULTIPLE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      SelectMultipleControlValueAccessor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      SelectMultipleControlValueAccessor.propDecorators = {
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectMultipleControlValueAccessor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
            host: {
              '(change)': 'onChange($event.target)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }];
        }, {
          compareWith: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @description
       * Marks `<option>` as dynamic, so Angular can be notified when options change.
       *
       * @see `SelectMultipleControlValueAccessor`
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */


      var ɵNgSelectMultipleOption = /*#__PURE__*/function () {
        function ɵNgSelectMultipleOption(_element, _renderer, _select) {
          _classCallCheck(this, ɵNgSelectMultipleOption);

          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;

          if (this._select) {
            this.id = this._select._registerOption(this);
          }
        }
        /**
         * @description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         */


        _createClass2(ɵNgSelectMultipleOption, [{
          key: "ngValue",
          set: function set(value) {
            if (this._select == null) return;
            this._value = value;

            this._setElementValue(_buildValueString$1(this.id, value));

            this._select.writeValue(this._select.value);
          }
          /**
           * @description
           * Tracks simple string values bound to the option element.
           * For objects, use the `ngValue` input binding.
           */

        }, {
          key: "value",
          set: function set(value) {
            if (this._select) {
              this._value = value;

              this._setElementValue(_buildValueString$1(this.id, value));

              this._select.writeValue(this._select.value);
            } else {
              this._setElementValue(value);
            }
          }
          /** @internal */

        }, {
          key: "_setElementValue",
          value: function _setElementValue(value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
          }
          /** @internal */

        }, {
          key: "_setSelected",
          value: function _setSelected(selected) {
            this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._select) {
              this._select._optionMap["delete"](this.id);

              this._select.writeValue(this._select.value);
            }
          }
        }]);

        return ɵNgSelectMultipleOption;
      }();

      ɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) {
        return new (t || ɵNgSelectMultipleOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectMultipleControlValueAccessor, 9));
      };

      ɵNgSelectMultipleOption.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ɵNgSelectMultipleOption,
        selectors: [["option"]],
        inputs: {
          ngValue: "ngValue",
          value: "value"
        }
      });

      ɵNgSelectMultipleOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: SelectMultipleControlValueAccessor,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      ɵNgSelectMultipleOption.propDecorators = {
        ngValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngValue']
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['value']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgSelectMultipleOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'option'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: SelectMultipleControlValueAccessor,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, {
          ngValue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngValue']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['value']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
       */


      var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return RequiredValidator;
        }),
        multi: true
      };
      /**
       * @description
       * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
       */

      var CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return CheckboxRequiredValidator;
        }),
        multi: true
      };
      /**
       * @description
       * A directive that adds the `required` validator to any controls marked with the
       * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding a required validator using template-driven forms
       *
       * ```
       * <input name="fullName" ngModel required>
       * ```
       *
       * @ngModule FormsModule
       * @ngModule ReactiveFormsModule
       * @publicApi
       */

      var RequiredValidator = /*#__PURE__*/function () {
        function RequiredValidator() {
          _classCallCheck(this, RequiredValidator);

          this._required = false;
        }
        /**
         * @description
         * Tracks changes to the required attribute bound to this directive.
         */


        _createClass2(RequiredValidator, [{
          key: "required",
          get: function get() {
            return this._required;
          },
          set: function set(value) {
            this._required = value != null && value !== false && "".concat(value) !== 'false';
            if (this._onChange) this._onChange();
          }
          /**
           * Method that validates whether the control is empty.
           * Returns the validation result if enabled, otherwise null.
           * @nodoc
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this.required ? requiredValidator(control) : null;
          }
          /**
           * Registers a callback function to call when the validator inputs change.
           * @nodoc
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }]);

        return RequiredValidator;
      }();

      RequiredValidator.ɵfac = function RequiredValidator_Factory(t) {
        return new (t || RequiredValidator)();
      };

      RequiredValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: RequiredValidator,
        selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
        hostVars: 1,
        hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx.required ? "" : null);
          }
        },
        inputs: {
          required: "required"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([REQUIRED_VALIDATOR])]
      });
      RequiredValidator.propDecorators = {
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RequiredValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
            providers: [REQUIRED_VALIDATOR],
            host: {
              '[attr.required]': 'required ? "" : null'
            }
          }]
        }], function () {
          return [];
        }, {
          required: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * A Directive that adds the `required` validator to checkbox controls marked with the
       * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding a required checkbox validator using template-driven forms
       *
       * The following example shows how to add a checkbox required validator to an input attached to an
       * ngModel binding.
       *
       * ```
       * <input type="checkbox" name="active" ngModel required>
       * ```
       *
       * @publicApi
       * @ngModule FormsModule
       * @ngModule ReactiveFormsModule
       */


      var CheckboxRequiredValidator = /*#__PURE__*/function (_RequiredValidator) {
        _inherits(CheckboxRequiredValidator, _RequiredValidator);

        var _super34 = _createSuper(CheckboxRequiredValidator);

        function CheckboxRequiredValidator() {
          _classCallCheck(this, CheckboxRequiredValidator);

          return _super34.apply(this, arguments);
        }

        _createClass2(CheckboxRequiredValidator, [{
          key: "validate",
          value:
          /**
           * Method that validates whether or not the checkbox has been checked.
           * Returns the validation result if enabled, otherwise null.
           * @nodoc
           */
          function validate(control) {
            return this.required ? requiredTrueValidator(control) : null;
          }
        }]);

        return CheckboxRequiredValidator;
      }(RequiredValidator);

      CheckboxRequiredValidator.ɵfac = function CheckboxRequiredValidator_Factory(t) {
        return ɵCheckboxRequiredValidator_BaseFactory(t || CheckboxRequiredValidator);
      };

      CheckboxRequiredValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CheckboxRequiredValidator,
        selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx.required ? "" : null);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_REQUIRED_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      var ɵCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](CheckboxRequiredValidator);

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxRequiredValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
            providers: [CHECKBOX_REQUIRED_VALIDATOR],
            host: {
              '[attr.required]': 'required ? "" : null'
            }
          }]
        }], null, null);
      })();
      /**
       * @description
       * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
       */


      var EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return EmailValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds the `email` validator to controls marked with the
       * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding an email validator
       *
       * The following example shows how to add an email validator to an input attached to an ngModel
       * binding.
       *
       * ```
       * <input type="email" name="email" ngModel email>
       * <input type="email" name="email" ngModel email="true">
       * <input type="email" name="email" ngModel [email]="true">
       * ```
       *
       * @publicApi
       * @ngModule FormsModule
       * @ngModule ReactiveFormsModule
       */

      var EmailValidator = /*#__PURE__*/function () {
        function EmailValidator() {
          _classCallCheck(this, EmailValidator);

          this._enabled = false;
        }
        /**
         * @description
         * Tracks changes to the email attribute bound to this directive.
         */


        _createClass2(EmailValidator, [{
          key: "email",
          set: function set(value) {
            this._enabled = value === '' || value === true || value === 'true';
            if (this._onChange) this._onChange();
          }
          /**
           * Method that validates whether an email address is valid.
           * Returns the validation result if enabled, otherwise null.
           * @nodoc
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this._enabled ? emailValidator(control) : null;
          }
          /**
           * Registers a callback function to call when the validator inputs change.
           * @nodoc
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }]);

        return EmailValidator;
      }();

      EmailValidator.ɵfac = function EmailValidator_Factory(t) {
        return new (t || EmailValidator)();
      };

      EmailValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: EmailValidator,
        selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
        inputs: {
          email: "email"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([EMAIL_VALIDATOR])]
      });
      EmailValidator.propDecorators = {
        email: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EmailValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[email][formControlName],[email][formControl],[email][ngModel]',
            providers: [EMAIL_VALIDATOR]
          }]
        }], function () {
          return [];
        }, {
          email: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @description
       * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
       */


      var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return MinLengthValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds minimum length validation to controls marked with the
       * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding a minimum length validator
       *
       * The following example shows how to add a minimum length validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel minlength="4">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var MinLengthValidator = /*#__PURE__*/function () {
        function MinLengthValidator() {
          _classCallCheck(this, MinLengthValidator);

          this._validator = _nullValidator;
        }
        /** @nodoc */


        _createClass2(MinLengthValidator, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if ('minlength' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * Method that validates whether the value meets a minimum length requirement.
           * Returns the validation result if enabled, otherwise null.
           * @nodoc
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this.minlength == null ? null : this._validator(control);
          }
          /**
           * Registers a callback function to call when the validator inputs change.
           * @nodoc
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = minLengthValidator(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));
          }
        }]);

        return MinLengthValidator;
      }();

      MinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) {
        return new (t || MinLengthValidator)();
      };

      MinLengthValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MinLengthValidator,
        selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("minlength", ctx.minlength ? ctx.minlength : null);
          }
        },
        inputs: {
          minlength: "minlength"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MIN_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      MinLengthValidator.propDecorators = {
        minlength: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MinLengthValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            providers: [MIN_LENGTH_VALIDATOR],
            host: {
              '[attr.minlength]': 'minlength ? minlength : null'
            }
          }]
        }], function () {
          return [];
        }, {
          minlength: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @description
       * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
       */


      var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return MaxLengthValidator;
        }),
        multi: true
      };
      /**
       * A directive that adds max length validation to controls marked with the
       * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding a maximum length validator
       *
       * The following example shows how to add a maximum length validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel maxlength="25">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var MaxLengthValidator = /*#__PURE__*/function () {
        function MaxLengthValidator() {
          _classCallCheck(this, MaxLengthValidator);

          this._validator = _nullValidator;
        }
        /** @nodoc */


        _createClass2(MaxLengthValidator, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if ('maxlength' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * Method that validates whether the value exceeds the maximum length requirement.
           * @nodoc
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this.maxlength != null ? this._validator(control) : null;
          }
          /**
           * Registers a callback function to call when the validator inputs change.
           * @nodoc
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = maxLengthValidator(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));
          }
        }]);

        return MaxLengthValidator;
      }();

      MaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) {
        return new (t || MaxLengthValidator)();
      };

      MaxLengthValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MaxLengthValidator,
        selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("maxlength", ctx.maxlength ? ctx.maxlength : null);
          }
        },
        inputs: {
          maxlength: "maxlength"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MAX_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      MaxLengthValidator.propDecorators = {
        maxlength: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MaxLengthValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            providers: [MAX_LENGTH_VALIDATOR],
            host: {
              '[attr.maxlength]': 'maxlength ? maxlength : null'
            }
          }]
        }], function () {
          return [];
        }, {
          maxlength: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @description
       * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
       */


      var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
          return PatternValidator;
        }),
        multi: true
      };
      /**
       * @description
       * A directive that adds regex pattern validation to controls marked with the
       * `pattern` attribute. The regex must match the entire control value.
       * The directive is provided with the `NG_VALIDATORS` multi-provider list.
       *
       * @see [Form Validation](guide/form-validation)
       *
       * @usageNotes
       *
       * ### Adding a pattern validator
       *
       * The following example shows how to add a pattern validator to an input attached to an
       * ngModel binding.
       *
       * ```html
       * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
       * ```
       *
       * @ngModule ReactiveFormsModule
       * @ngModule FormsModule
       * @publicApi
       */

      var PatternValidator = /*#__PURE__*/function () {
        function PatternValidator() {
          _classCallCheck(this, PatternValidator);

          this._validator = _nullValidator;
        }
        /** @nodoc */


        _createClass2(PatternValidator, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if ('pattern' in changes) {
              this._createValidator();

              if (this._onChange) this._onChange();
            }
          }
          /**
           * Method that validates whether the value matches the pattern requirement.
           * @nodoc
           */

        }, {
          key: "validate",
          value: function validate(control) {
            return this._validator(control);
          }
          /**
           * Registers a callback function to call when the validator inputs change.
           * @nodoc
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this._onChange = fn;
          }
        }, {
          key: "_createValidator",
          value: function _createValidator() {
            this._validator = patternValidator(this.pattern);
          }
        }]);

        return PatternValidator;
      }();

      PatternValidator.ɵfac = function PatternValidator_Factory(t) {
        return new (t || PatternValidator)();
      };

      PatternValidator.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: PatternValidator,
        selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
        hostVars: 1,
        hostBindings: function PatternValidator_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("pattern", ctx.pattern ? ctx.pattern : null);
          }
        },
        inputs: {
          pattern: "pattern"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([PATTERN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      PatternValidator.propDecorators = {
        pattern: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PatternValidator, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            providers: [PATTERN_VALIDATOR],
            host: {
              '[attr.pattern]': 'pattern ? pattern : null'
            }
          }]
        }], function () {
          return [];
        }, {
          pattern: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator];
      var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
      var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
      /**
       * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
       */

      var ɵInternalFormsSharedModule = function ɵInternalFormsSharedModule() {
        _classCallCheck(this, ɵInternalFormsSharedModule);
      };

      ɵInternalFormsSharedModule.ɵfac = function ɵInternalFormsSharedModule_Factory(t) {
        return new (t || ɵInternalFormsSharedModule)();
      };

      ɵInternalFormsSharedModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ɵInternalFormsSharedModule
      });
      ɵInternalFormsSharedModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[RadioControlRegistryModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ɵInternalFormsSharedModule, {
          declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator],
          imports: [RadioControlRegistryModule],
          exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵInternalFormsSharedModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: SHARED_FORM_DIRECTIVES,
            imports: [RadioControlRegistryModule],
            exports: SHARED_FORM_DIRECTIVES
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Exports the required providers and directives for template-driven forms,
       * making them available for import by NgModules that import this module.
       *
       * Providers associated with this module:
       * * `RadioControlRegistry`
       *
       * @see [Forms Overview](/guide/forms-overview)
       * @see [Template-driven Forms Guide](/guide/forms)
       *
       * @publicApi
       */


      var FormsModule = function FormsModule() {
        _classCallCheck(this, FormsModule);
      };

      FormsModule.ɵfac = function FormsModule_Factory(t) {
        return new (t || FormsModule)();
      };

      FormsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: FormsModule
      });
      FormsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [ɵInternalFormsSharedModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](FormsModule, {
          declarations: [NgModel, NgModelGroup, NgForm],
          exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
            exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
          }]
        }], null, null);
      })();
      /**
       * Exports the required infrastructure and directives for reactive forms,
       * making them available for import by NgModules that import this module.
       *
       * Providers associated with this module:
       * * `FormBuilder`
       * * `RadioControlRegistry`
       *
       * @see [Forms Overview](guide/forms-overview)
       * @see [Reactive Forms Guide](guide/reactive-forms)
       *
       * @publicApi
       */


      var ReactiveFormsModule = /*#__PURE__*/function () {
        function ReactiveFormsModule() {
          _classCallCheck(this, ReactiveFormsModule);
        }

        _createClass2(ReactiveFormsModule, null, [{
          key: "withConfig",
          value:
          /**
           * @description
           * Provides options for configuring the reactive forms module.
           *
           * @param opts An object of configuration options
           * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
           * binding is used with reactive form directives.
           */
          function withConfig(opts) {
            return {
              ngModule: ReactiveFormsModule,
              providers: [{
                provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
                useValue: opts.warnOnNgModelWithFormControl
              }]
            };
          }
        }]);

        return ReactiveFormsModule;
      }();

      ReactiveFormsModule.ɵfac = function ReactiveFormsModule_Factory(t) {
        return new (t || ReactiveFormsModule)();
      };

      ReactiveFormsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ReactiveFormsModule
      });
      ReactiveFormsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [ɵInternalFormsSharedModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ReactiveFormsModule, {
          declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
          exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ReactiveFormsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
            exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function isAbstractControlOptions(options) {
        return options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined;
      }
      /**
       * @description
       * Creates an `AbstractControl` from a user-specified configuration.
       *
       * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
       * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
       * forms.
       *
       * @see [Reactive Forms Guide](/guide/reactive-forms)
       *
       * @publicApi
       */


      var FormBuilder = /*#__PURE__*/function () {
        function FormBuilder() {
          _classCallCheck(this, FormBuilder);
        }

        _createClass2(FormBuilder, [{
          key: "group",
          value: function group(controlsConfig) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var controls = this._reduceControls(controlsConfig);

            var validators = null;
            var asyncValidators = null;
            var updateOn = undefined;

            if (options != null) {
              if (isAbstractControlOptions(options)) {
                // `options` are `AbstractControlOptions`
                validators = options.validators != null ? options.validators : null;
                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;
                updateOn = options.updateOn != null ? options.updateOn : undefined;
              } else {
                // `options` are legacy form group options
                validators = options['validator'] != null ? options['validator'] : null;
                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;
              }
            }

            return new FormGroup(controls, {
              asyncValidators: asyncValidators,
              updateOn: updateOn,
              validators: validators
            });
          }
          /**
           * @description
           * Construct a new `FormControl` with the given state, validators and options.
           *
           * @param formState Initializes the control with an initial state value, or
           * with an object that contains both a value and a disabled status.
           *
           * @param validatorOrOpts A synchronous validator function, or an array of
           * such functions, or an `AbstractControlOptions` object that contains
           * validation functions and a validation trigger.
           *
           * @param asyncValidator A single async validator or array of async validator
           * functions.
           *
           * @usageNotes
           *
           * ### Initialize a control as disabled
           *
           * The following example returns a control with an initial value in a disabled state.
           *
           * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
           * </code-example>
           */

        }, {
          key: "control",
          value: function control(formState, validatorOrOpts, asyncValidator) {
            return new FormControl(formState, validatorOrOpts, asyncValidator);
          }
          /**
           * Constructs a new `FormArray` from the given array of configurations,
           * validators and options.
           *
           * @param controlsConfig An array of child controls or control configs. Each
           * child control is given an index when it is registered.
           *
           * @param validatorOrOpts A synchronous validator function, or an array of
           * such functions, or an `AbstractControlOptions` object that contains
           * validation functions and a validation trigger.
           *
           * @param asyncValidator A single async validator or array of async validator
           * functions.
           */

        }, {
          key: "array",
          value: function array(controlsConfig, validatorOrOpts, asyncValidator) {
            var _this54 = this;

            var controls = controlsConfig.map(function (c) {
              return _this54._createControl(c);
            });
            return new FormArray(controls, validatorOrOpts, asyncValidator);
          }
          /** @internal */

        }, {
          key: "_reduceControls",
          value: function _reduceControls(controlsConfig) {
            var _this55 = this;

            var controls = {};
            Object.keys(controlsConfig).forEach(function (controlName) {
              controls[controlName] = _this55._createControl(controlsConfig[controlName]);
            });
            return controls;
          }
          /** @internal */

        }, {
          key: "_createControl",
          value: function _createControl(controlConfig) {
            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
              return controlConfig;
            } else if (Array.isArray(controlConfig)) {
              var value = controlConfig[0];
              var validator = controlConfig.length > 1 ? controlConfig[1] : null;
              var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
              return this.control(value, validator, asyncValidator);
            } else {
              return this.control(controlConfig);
            }
          }
        }]);

        return FormBuilder;
      }();

      FormBuilder.ɵfac = function FormBuilder_Factory(t) {
        return new (t || FormBuilder)();
      };

      FormBuilder.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function FormBuilder_Factory() {
          return new FormBuilder();
        },
        token: FormBuilder,
        providedIn: ReactiveFormsModule
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormBuilder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: ReactiveFormsModule
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('11.2.6');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=forms.js.map

      /***/
    },

    /***/
    "3UWI":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js ***!
      \********************************************************************/

    /*! exports provided: auditTime */

    /***/
    function UWI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "auditTime", function () {
        return auditTime;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./audit */
      "tnsW");
      /* harmony import */


      var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/timer */
      "PqYM");

      function auditTime(duration) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        return Object(_audit__WEBPACK_IMPORTED_MODULE_1__["audit"])(function () {
          return Object(_observable_timer__WEBPACK_IMPORTED_MODULE_2__["timer"])(duration, scheduler);
        });
      } //# sourceMappingURL=auditTime.js.map

      /***/

    },

    /***/
    "4A3s":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js ***!
      \*************************************************************************/

    /*! exports provided: ignoreElements */

    /***/
    function A3s(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ignoreElements", function () {
        return ignoreElements;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function ignoreElements() {
        return function ignoreElementsOperatorFunction(source) {
          return source.lift(new IgnoreElementsOperator());
        };
      }

      var IgnoreElementsOperator = /*#__PURE__*/function () {
        function IgnoreElementsOperator() {
          _classCallCheck(this, IgnoreElementsOperator);
        }

        _createClass2(IgnoreElementsOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new IgnoreElementsSubscriber(subscriber));
          }
        }]);

        return IgnoreElementsOperator;
      }();

      var IgnoreElementsSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_7) {
        _inherits(IgnoreElementsSubscriber, _Subscriber__WEBPACK_7);

        var _super35 = _createSuper(IgnoreElementsSubscriber);

        function IgnoreElementsSubscriber() {
          _classCallCheck(this, IgnoreElementsSubscriber);

          return _super35.apply(this, arguments);
        }

        _createClass2(IgnoreElementsSubscriber, [{
          key: "_next",
          value: function _next(unused) {}
        }]);

        return IgnoreElementsSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=ignoreElements.js.map

      /***/

    },

    /***/
    "4I5i":
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js ***!
      \*****************************************************************************/

    /*! exports provided: ArgumentOutOfRangeError */

    /***/
    function I5i(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function () {
        return ArgumentOutOfRangeError;
      });

      var ArgumentOutOfRangeErrorImpl = function () {
        function ArgumentOutOfRangeErrorImpl() {
          Error.call(this);
          this.message = 'argument out of range';
          this.name = 'ArgumentOutOfRangeError';
          return this;
        }

        ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
        return ArgumentOutOfRangeErrorImpl;
      }();

      var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl; //# sourceMappingURL=ArgumentOutOfRangeError.js.map

      /***/
    },

    /***/
    "4O5X":
    /*!****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js ***!
      \****************************************************************************/

    /*! exports provided: bindNodeCallback */

    /***/
    function O5X(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function () {
        return bindNodeCallback;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../AsyncSubject */
      "NHP+");
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/map */
      "lJxs");
      /* harmony import */


      var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/canReportError */
      "8Qeq");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");

      function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
          if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
          } else {
            return function () {
              return bindNodeCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
                return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_5__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
              }));
            };
          }
        }

        return function () {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this
          };
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var context = params.context;
            var subject = params.subject;

            if (!scheduler) {
              if (!subject) {
                subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

                var handler = function handler() {
                  for (var _len5 = arguments.length, innerArgs = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    innerArgs[_key5] = arguments[_key5];
                  }

                  var err = innerArgs.shift();

                  if (err) {
                    subject.error(err);
                    return;
                  }

                  subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                  subject.complete();
                };

                try {
                  callbackFunc.apply(context, [].concat(args, [handler]));
                } catch (err) {
                  if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                    subject.error(err);
                  } else {
                    console.warn(err);
                  }
                }
              }

              return subject.subscribe(subscriber);
            } else {
              return scheduler.schedule(dispatch, 0, {
                params: params,
                subscriber: subscriber,
                context: context
              });
            }
          });
        };
      }

      function dispatch(state) {
        var _this56 = this;

        var params = state.params,
            subscriber = state.subscriber,
            context = state.context;
        var callbackFunc = params.callbackFunc,
            args = params.args,
            scheduler = params.scheduler;
        var subject = params.subject;

        if (!subject) {
          subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

          var handler = function handler() {
            for (var _len6 = arguments.length, innerArgs = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              innerArgs[_key6] = arguments[_key6];
            }

            var err = innerArgs.shift();

            if (err) {
              _this56.add(scheduler.schedule(dispatchError, 0, {
                err: err,
                subject: subject
              }));
            } else {
              var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;

              _this56.add(scheduler.schedule(dispatchNext, 0, {
                value: value,
                subject: subject
              }));
            }
          };

          try {
            callbackFunc.apply(context, [].concat(_toConsumableArray(args), [handler]));
          } catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, {
              err: err,
              subject: subject
            }));
          }
        }

        this.add(subject.subscribe(subscriber));
      }

      function dispatchNext(arg) {
        var value = arg.value,
            subject = arg.subject;
        subject.next(value);
        subject.complete();
      }

      function dispatchError(arg) {
        var err = arg.err,
            subject = arg.subject;
        subject.error(err);
      } //# sourceMappingURL=bindNodeCallback.js.map

      /***/

    },

    /***/
    "4f8F":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/race.js ***!
      \***************************************************************/

    /*! exports provided: race */

    /***/
    function f8F(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "race", function () {
        return race;
      });
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _observable_race__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/race */
      "Nv8m");

      function race() {
        for (var _len7 = arguments.length, observables = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          observables[_key7] = arguments[_key7];
        }

        return function raceOperatorFunction(source) {
          if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
            observables = observables[0];
          }

          return source.lift.call(Object(_observable_race__WEBPACK_IMPORTED_MODULE_1__["race"]).apply(void 0, [source].concat(_toConsumableArray(observables))));
        };
      } //# sourceMappingURL=race.js.map

      /***/

    },

    /***/
    "4hIw":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js ***!
      \***********************************************************************/

    /*! exports provided: timeInterval, TimeInterval */

    /***/
    function hIw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "timeInterval", function () {
        return timeInterval;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeInterval", function () {
        return TimeInterval;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _scan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./scan */
      "Kqap");
      /* harmony import */


      var _observable_defer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/defer */
      "NXyV");
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./map */
      "lJxs");

      function timeInterval() {
        var scheduler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        return function (source) {
          return Object(_observable_defer__WEBPACK_IMPORTED_MODULE_2__["defer"])(function () {
            return source.pipe(Object(_scan__WEBPACK_IMPORTED_MODULE_1__["scan"])(function (_ref2, value) {
              var current = _ref2.current;
              return {
                value: value,
                current: scheduler.now(),
                last: current
              };
            }, {
              current: scheduler.now(),
              value: undefined,
              last: undefined
            }), Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (_ref3) {
              var current = _ref3.current,
                  last = _ref3.last,
                  value = _ref3.value;
              return new TimeInterval(value, current - last);
            }));
          });
        };
      }

      var TimeInterval = function TimeInterval(value, interval) {
        _classCallCheck(this, TimeInterval);

        this.value = value;
        this.interval = interval;
      }; //# sourceMappingURL=timeInterval.js.map

      /***/

    },

    /***/
    "4yVj":
    /*!**************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js ***!
      \**************************************************************************/

    /*! exports provided: schedulePromise */

    /***/
    function yVj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "schedulePromise", function () {
        return schedulePromise;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");

      function schedulePromise(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          sub.add(scheduler.schedule(function () {
            return input.then(function (value) {
              sub.add(scheduler.schedule(function () {
                subscriber.next(value);
                sub.add(scheduler.schedule(function () {
                  return subscriber.complete();
                }));
              }));
            }, function (err) {
              sub.add(scheduler.schedule(function () {
                return subscriber.error(err);
              }));
            });
          }));
          return sub;
        });
      } //# sourceMappingURL=schedulePromise.js.map

      /***/

    },

    /***/
    "5+tZ":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js ***!
      \*******************************************************************/

    /*! exports provided: mergeMap, MergeMapOperator, MergeMapSubscriber, flatMap */

    /***/
    function tZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeMap", function () {
        return mergeMap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MergeMapOperator", function () {
        return MergeMapOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MergeMapSubscriber", function () {
        return MergeMapSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "flatMap", function () {
        return flatMap;
      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./map */
      "lJxs");
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/from */
      "Cfvw");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function mergeMap(project, resultSelector) {
        var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(mergeMap(function (a, i) {
              return Object(_observable_from__WEBPACK_IMPORTED_MODULE_1__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(function (b, ii) {
                return resultSelector(a, b, i, ii);
              }));
            }, concurrent));
          };
        } else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
        }

        return function (source) {
          return source.lift(new MergeMapOperator(project, concurrent));
        };
      }

      var MergeMapOperator = /*#__PURE__*/function () {
        function MergeMapOperator(project) {
          var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

          _classCallCheck(this, MergeMapOperator);

          this.project = project;
          this.concurrent = concurrent;
        }

        _createClass2(MergeMapOperator, [{
          key: "call",
          value: function call(observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
          }
        }]);

        return MergeMapOperator;
      }();

      var MergeMapSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP4) {
        _inherits(MergeMapSubscriber, _innerSubscribe__WEBP4);

        var _super36 = _createSuper(MergeMapSubscriber);

        function MergeMapSubscriber(destination, project) {
          var _this57;

          var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

          _classCallCheck(this, MergeMapSubscriber);

          _this57 = _super36.call(this, destination);
          _this57.project = project;
          _this57.concurrent = concurrent;
          _this57.hasCompleted = false;
          _this57.buffer = [];
          _this57.active = 0;
          _this57.index = 0;
          return _this57;
        }

        _createClass2(MergeMapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.active < this.concurrent) {
              this._tryNext(value);
            } else {
              this.buffer.push(value);
            }
          }
        }, {
          key: "_tryNext",
          value: function _tryNext(value) {
            var result;
            var index = this.index++;

            try {
              result = this.project(value, index);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.active++;

            this._innerSub(result);
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(ish) {
            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleInnerSubscriber"](this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["innerSubscribe"])(ish, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
            }

            this.unsubscribe();
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            var buffer = this.buffer;
            this.active--;

            if (buffer.length > 0) {
              this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
            }
          }
        }]);

        return MergeMapSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleOuterSubscriber"]);

      var flatMap = mergeMap; //# sourceMappingURL=mergeMap.js.map

      /***/
    },

    /***/
    "51Bx":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js ***!
      \********************************************************************/

    /*! exports provided: mergeScan, MergeScanOperator, MergeScanSubscriber */

    /***/
    function Bx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeScan", function () {
        return mergeScan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MergeScanOperator", function () {
        return MergeScanOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MergeScanSubscriber", function () {
        return MergeScanSubscriber;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function mergeScan(accumulator, seed) {
        var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;
        return function (source) {
          return source.lift(new MergeScanOperator(accumulator, seed, concurrent));
        };
      }

      var MergeScanOperator = /*#__PURE__*/function () {
        function MergeScanOperator(accumulator, seed, concurrent) {
          _classCallCheck(this, MergeScanOperator);

          this.accumulator = accumulator;
          this.seed = seed;
          this.concurrent = concurrent;
        }

        _createClass2(MergeScanOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
          }
        }]);

        return MergeScanOperator;
      }();

      var MergeScanSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP5) {
        _inherits(MergeScanSubscriber, _innerSubscribe__WEBP5);

        var _super37 = _createSuper(MergeScanSubscriber);

        function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
          var _this58;

          _classCallCheck(this, MergeScanSubscriber);

          _this58 = _super37.call(this, destination);
          _this58.accumulator = accumulator;
          _this58.acc = acc;
          _this58.concurrent = concurrent;
          _this58.hasValue = false;
          _this58.hasCompleted = false;
          _this58.buffer = [];
          _this58.active = 0;
          _this58.index = 0;
          return _this58;
        }

        _createClass2(MergeScanSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.active < this.concurrent) {
              var index = this.index++;
              var destination = this.destination;
              var ish;

              try {
                var accumulator = this.accumulator;
                ish = accumulator(this.acc, value, index);
              } catch (e) {
                return destination.error(e);
              }

              this.active++;

              this._innerSub(ish);
            } else {
              this.buffer.push(value);
            }
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(ish) {
            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(ish, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (this.active === 0 && this.buffer.length === 0) {
              if (this.hasValue === false) {
                this.destination.next(this.acc);
              }

              this.destination.complete();
            }

            this.unsubscribe();
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            var buffer = this.buffer;
            this.active--;

            if (buffer.length > 0) {
              this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
              if (this.hasValue === false) {
                this.destination.next(this.acc);
              }

              this.destination.complete();
            }
          }
        }]);

        return MergeScanSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=mergeScan.js.map

      /***/

    },

    /***/
    "51Dv":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js ***!
      \****************************************************************/

    /*! exports provided: InnerSubscriber */

    /***/
    function Dv(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InnerSubscriber", function () {
        return InnerSubscriber;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      "7o/Q");

      var InnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_8) {
        _inherits(InnerSubscriber, _Subscriber__WEBPACK_8);

        var _super38 = _createSuper(InnerSubscriber);

        function InnerSubscriber(parent, outerValue, outerIndex) {
          var _this59;

          _classCallCheck(this, InnerSubscriber);

          _this59 = _super38.call(this);
          _this59.parent = parent;
          _this59.outerValue = outerValue;
          _this59.outerIndex = outerIndex;
          _this59.index = 0;
          return _this59;
        }

        _createClass2(InnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete(this);
            this.unsubscribe();
          }
        }]);

        return InnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=InnerSubscriber.js.map

      /***/

    },

    /***/
    "5B2Y":
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js ***!
      \*****************************************************************************/

    /*! exports provided: scheduleObservable */

    /***/
    function B2Y(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scheduleObservable", function () {
        return scheduleObservable;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../symbol/observable */
      "kJWO");

      function scheduleObservable(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          sub.add(scheduler.schedule(function () {
            var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]]();

            sub.add(observable.subscribe({
              next: function next(value) {
                sub.add(scheduler.schedule(function () {
                  return subscriber.next(value);
                }));
              },
              error: function error(err) {
                sub.add(scheduler.schedule(function () {
                  return subscriber.error(err);
                }));
              },
              complete: function complete() {
                sub.add(scheduler.schedule(function () {
                  return subscriber.complete();
                }));
              }
            }));
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleObservable.js.map

      /***/

    },

    /***/
    "5yfJ":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/never.js ***!
      \*****************************************************************/

    /*! exports provided: NEVER, never */

    /***/
    function yfJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NEVER", function () {
        return NEVER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "never", function () {
        return never;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/noop */
      "KqfI");

      var NEVER = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](_util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"]);

      function never() {
        return NEVER;
      } //# sourceMappingURL=never.js.map

      /***/

    },

    /***/
    "6eBy":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/debounce.js ***!
      \*******************************************************************/

    /*! exports provided: debounce */

    /***/
    function eBy(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "debounce", function () {
        return debounce;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function debounce(durationSelector) {
        return function (source) {
          return source.lift(new DebounceOperator(durationSelector));
        };
      }

      var DebounceOperator = /*#__PURE__*/function () {
        function DebounceOperator(durationSelector) {
          _classCallCheck(this, DebounceOperator);

          this.durationSelector = durationSelector;
        }

        _createClass2(DebounceOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
          }
        }]);

        return DebounceOperator;
      }();

      var DebounceSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP6) {
        _inherits(DebounceSubscriber, _innerSubscribe__WEBP6);

        var _super39 = _createSuper(DebounceSubscriber);

        function DebounceSubscriber(destination, durationSelector) {
          var _this60;

          _classCallCheck(this, DebounceSubscriber);

          _this60 = _super39.call(this, destination);
          _this60.durationSelector = durationSelector;
          _this60.hasValue = false;
          return _this60;
        }

        _createClass2(DebounceSubscriber, [{
          key: "_next",
          value: function _next(value) {
            try {
              var result = this.durationSelector.call(this, value);

              if (result) {
                this._tryNext(value, result);
              }
            } catch (err) {
              this.destination.error(err);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.emitValue();
            this.destination.complete();
          }
        }, {
          key: "_tryNext",
          value: function _tryNext(value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;

            if (subscription) {
              subscription.unsubscribe();
              this.remove(subscription);
            }

            subscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(duration, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this));

            if (subscription && !subscription.closed) {
              this.add(this.durationSubscription = subscription);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.emitValue();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.emitValue();
          }
        }, {
          key: "emitValue",
          value: function emitValue() {
            if (this.hasValue) {
              var value = this.value;
              var subscription = this.durationSubscription;

              if (subscription) {
                this.durationSubscription = undefined;
                subscription.unsubscribe();
                this.remove(subscription);
              }

              this.value = undefined;
              this.hasValue = false;

              _get(_getPrototypeOf(DebounceSubscriber.prototype), "_next", this).call(this, value);
            }
          }
        }]);

        return DebounceSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=debounce.js.map

      /***/

    },

    /***/
    "7+OI":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isObservable.js ***!
      \******************************************************************/

    /*! exports provided: isObservable */

    /***/
    function OI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isObservable", function () {
        return isObservable;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      function isObservable(obj) {
        return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] || typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
      } //# sourceMappingURL=isObservable.js.map

      /***/

    },

    /***/
    "7HRe":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js ***!
      \********************************************************************/

    /*! exports provided: scheduled */

    /***/
    function HRe(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scheduled", function () {
        return scheduled;
      });
      /* harmony import */


      var _scheduleObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./scheduleObservable */
      "5B2Y");
      /* harmony import */


      var _schedulePromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./schedulePromise */
      "4yVj");
      /* harmony import */


      var _scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./scheduleArray */
      "jZKg");
      /* harmony import */


      var _scheduleIterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./scheduleIterable */
      "MBAA");
      /* harmony import */


      var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/isInteropObservable */
      "QIAL");
      /* harmony import */


      var _util_isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/isPromise */
      "c2HN");
      /* harmony import */


      var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../util/isArrayLike */
      "I55L");
      /* harmony import */


      var _util_isIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../util/isIterable */
      "CMyj");

      function scheduled(input, scheduler) {
        if (input != null) {
          if (Object(_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__["isInteropObservable"])(input)) {
            return Object(_scheduleObservable__WEBPACK_IMPORTED_MODULE_0__["scheduleObservable"])(input, scheduler);
          } else if (Object(_util_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(input)) {
            return Object(_schedulePromise__WEBPACK_IMPORTED_MODULE_1__["schedulePromise"])(input, scheduler);
          } else if (Object(_util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__["isArrayLike"])(input)) {
            return Object(_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
          } else if (Object(_util_isIterable__WEBPACK_IMPORTED_MODULE_7__["isIterable"])(input) || typeof input === 'string') {
            return Object(_scheduleIterable__WEBPACK_IMPORTED_MODULE_3__["scheduleIterable"])(input, scheduler);
          }
        }

        throw new TypeError((input !== null && typeof input || input) + ' is not observable');
      } //# sourceMappingURL=scheduled.js.map

      /***/

    },

    /***/
    "7Hc7":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js ***!
      \***************************************************************/

    /*! exports provided: asapScheduler, asap */

    /***/
    function Hc7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asapScheduler", function () {
        return asapScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asap", function () {
        return asap;
      });
      /* harmony import */


      var _AsapAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsapAction */
      "Pz8W");
      /* harmony import */


      var _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsapScheduler */
      "RUbi");

      var asapScheduler = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__["AsapScheduler"](_AsapAction__WEBPACK_IMPORTED_MODULE_0__["AsapAction"]);
      var asap = asapScheduler; //# sourceMappingURL=asap.js.map

      /***/
    },

    /***/
    "7o/Q":
    /*!***********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subscriber.js ***!
      \***********************************************************/

    /*! exports provided: Subscriber, SafeSubscriber */

    /***/
    function oQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Subscriber", function () {
        return Subscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SafeSubscriber", function () {
        return SafeSubscriber;
      });
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./util/isFunction */
      "n6bG");
      /* harmony import */


      var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Observer */
      "gRHU");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./Subscription */
      "quSY");
      /* harmony import */


      var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../internal/symbol/rxSubscriber */
      "2QA8");
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./config */
      "2fFW");
      /* harmony import */


      var _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./util/hostReportError */
      "NJ4a");

      var Subscriber = /*#__PURE__*/function (_Subscription__WEBPAC) {
        _inherits(Subscriber, _Subscription__WEBPAC);

        var _super40 = _createSuper(Subscriber);

        function Subscriber(destinationOrNext, error, complete) {
          var _this61;

          _classCallCheck(this, Subscriber);

          _this61 = _super40.call(this);
          _this61.syncErrorValue = null;
          _this61.syncErrorThrown = false;
          _this61.syncErrorThrowable = false;
          _this61.isStopped = false;

          switch (arguments.length) {
            case 0:
              _this61.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
              break;

            case 1:
              if (!destinationOrNext) {
                _this61.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
                break;
              }

              if (typeof destinationOrNext === 'object') {
                if (destinationOrNext instanceof Subscriber) {
                  _this61.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                  _this61.destination = destinationOrNext;
                  destinationOrNext.add(_assertThisInitialized(_this61));
                } else {
                  _this61.syncErrorThrowable = true;
                  _this61.destination = new SafeSubscriber(_assertThisInitialized(_this61), destinationOrNext);
                }

                break;
              }

            default:
              _this61.syncErrorThrowable = true;
              _this61.destination = new SafeSubscriber(_assertThisInitialized(_this61), destinationOrNext, error, complete);
              break;
          }

          return _this61;
        }

        _createClass2(Subscriber, [{
          key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__["rxSubscriber"],
          value: function value() {
            return this;
          }
        }, {
          key: "next",
          value: function next(value) {
            if (!this.isStopped) {
              this._next(value);
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              this.isStopped = true;

              this._error(err);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            if (!this.isStopped) {
              this.isStopped = true;

              this._complete();
            }
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            if (this.closed) {
              return;
            }

            this.isStopped = true;

            _get(_getPrototypeOf(Subscriber.prototype), "unsubscribe", this).call(this);
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.destination.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.destination.error(err);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.destination.complete();
            this.unsubscribe();
          }
        }, {
          key: "_unsubscribeAndRecycle",
          value: function _unsubscribeAndRecycle() {
            var _parentOrParents = this._parentOrParents;
            this._parentOrParents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parentOrParents = _parentOrParents;
            return this;
          }
        }], [{
          key: "create",
          value: function create(next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
          }
        }]);

        return Subscriber;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"]);

      var SafeSubscriber = /*#__PURE__*/function (_Subscriber) {
        _inherits(SafeSubscriber, _Subscriber);

        var _super41 = _createSuper(SafeSubscriber);

        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
          var _this62;

          _classCallCheck(this, SafeSubscriber);

          _this62 = _super41.call(this);
          _this62._parentSubscriber = _parentSubscriber;
          var next;

          var context = _assertThisInitialized(_this62);

          if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(observerOrNext)) {
            next = observerOrNext;
          } else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;

            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"]) {
              context = Object.create(observerOrNext);

              if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(context.unsubscribe)) {
                _this62.add(context.unsubscribe.bind(context));
              }

              context.unsubscribe = _this62.unsubscribe.bind(_assertThisInitialized(_this62));
            }
          }

          _this62._context = context;
          _this62._next = next;
          _this62._error = error;
          _this62._complete = complete;
          return _this62;
        }

        _createClass2(SafeSubscriber, [{
          key: "next",
          value: function next(value) {
            if (!this.isStopped && this._next) {
              var _parentSubscriber = this._parentSubscriber;

              if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
              } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
              }
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling;

              if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(this._error, err);

                  this.unsubscribe();
                } else {
                  this.__tryOrSetError(_parentSubscriber, this._error, err);

                  this.unsubscribe();
                }
              } else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();

                if (useDeprecatedSynchronousErrorHandling) {
                  throw err;
                }

                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
              } else {
                if (useDeprecatedSynchronousErrorHandling) {
                  _parentSubscriber.syncErrorValue = err;
                  _parentSubscriber.syncErrorThrown = true;
                } else {
                  Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
                }

                this.unsubscribe();
              }
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            var _this63 = this;

            if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;

              if (this._complete) {
                var wrappedComplete = function wrappedComplete() {
                  return _this63._complete.call(_this63._context);
                };

                if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(wrappedComplete);

                  this.unsubscribe();
                } else {
                  this.__tryOrSetError(_parentSubscriber, wrappedComplete);

                  this.unsubscribe();
                }
              } else {
                this.unsubscribe();
              }
            }
          }
        }, {
          key: "__tryOrUnsub",
          value: function __tryOrUnsub(fn, value) {
            try {
              fn.call(this._context, value);
            } catch (err) {
              this.unsubscribe();

              if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                throw err;
              } else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
              }
            }
          }
        }, {
          key: "__tryOrSetError",
          value: function __tryOrSetError(parent, fn, value) {
            if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
              throw new Error('bad call');
            }

            try {
              fn.call(this._context, value);
            } catch (err) {
              if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
              } else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
                return true;
              }
            }

            return false;
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;

            _parentSubscriber.unsubscribe();
          }
        }]);

        return SafeSubscriber;
      }(Subscriber); //# sourceMappingURL=Subscriber.js.map

      /***/

    },

    /***/
    "7ve7":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/Action.js ***!
      \*****************************************************************/

    /*! exports provided: Action */

    /***/
    function ve7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Action", function () {
        return Action;
      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");

      var Action = /*#__PURE__*/function (_Subscription__WEBPAC2) {
        _inherits(Action, _Subscription__WEBPAC2);

        var _super42 = _createSuper(Action);

        function Action(scheduler, work) {
          _classCallCheck(this, Action);

          return _super42.call(this);
        }

        _createClass2(Action, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this;
          }
        }]);

        return Action;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]); //# sourceMappingURL=Action.js.map

      /***/

    },

    /***/
    "7wxJ":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/combineAll.js ***!
      \*********************************************************************/

    /*! exports provided: combineAll */

    /***/
    function wxJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineAll", function () {
        return combineAll;
      });
      /* harmony import */


      var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/combineLatest */
      "itXk");

      function combineAll(project) {
        return function (source) {
          return source.lift(new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__["CombineLatestOperator"](project));
        };
      } //# sourceMappingURL=combineAll.js.map

      /***/

    },

    /***/
    "8LU1":
    /*!********************************************************!*\
      !*** ./node_modules/@angular/cdk/fesm2015/coercion.js ***!
      \********************************************************/

    /*! exports provided: _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray */

    /***/
    function LU1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_isNumberValue", function () {
        return _isNumberValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceArray", function () {
        return coerceArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceBooleanProperty", function () {
        return coerceBooleanProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceCssPixelValue", function () {
        return coerceCssPixelValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceElement", function () {
        return coerceElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceNumberProperty", function () {
        return coerceNumberProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "coerceStringArray", function () {
        return coerceStringArray;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Coerces a data-bound value (typically a string) to a boolean. */


      function coerceBooleanProperty(value) {
        return value != null && "".concat(value) !== 'false';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function coerceNumberProperty(value) {
        var fallbackValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return _isNumberValue(value) ? Number(value) : fallbackValue;
      }
      /**
       * Whether the provided value is considered a number.
       * @docs-private
       */


      function _isNumberValue(value) {
        // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
        // and other non-number values as NaN, where Number just uses 0) but it considers the string
        // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
        return !isNaN(parseFloat(value)) && !isNaN(Number(value));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function coerceArray(value) {
        return Array.isArray(value) ? value : [value];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Coerces a value to a CSS pixel value. */


      function coerceCssPixelValue(value) {
        if (value == null) {
          return '';
        }

        return typeof value === 'string' ? value : "".concat(value, "px");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Coerces an ElementRef or an Element into an element.
       * Useful for APIs that can accept either a ref or the native element itself.
       */


      function coerceElement(elementOrRef) {
        return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] ? elementOrRef.nativeElement : elementOrRef;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Coerces a value to an array of trimmed non-empty strings.
       * Any input that is not an array, `null` or `undefined` will be turned into a string
       * via `toString()` and subsequently split with the given separator.
       * `null` and `undefined` will result in an empty array.
       * This results in the following outcomes:
       * - `null` -&gt; `[]`
       * - `[null]` -&gt; `["null"]`
       * - `["a", "b ", " "]` -&gt; `["a", "b"]`
       * - `[1, [2, 3]]` -&gt; `["1", "2,3"]`
       * - `[{ a: 0 }]` -&gt; `["[object Object]"]`
       * - `{ a: 0 }` -&gt; `["[object", "Object]"]`
       *
       * Useful for defining CSS classes or table columns.
       * @param value the value to coerce into an array of strings
       * @param separator split-separator if value isn't an array
       */


      function coerceStringArray(value) {
        var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\s+/;
        var result = [];

        if (value != null) {
          var sourceValues = Array.isArray(value) ? value : "".concat(value).split(separator);

          var _iterator3 = _createForOfIteratorHelper(sourceValues),
              _step2;

          try {
            for (_iterator3.s(); !(_step2 = _iterator3.n()).done;) {
              var sourceValue = _step2.value;
              var trimmedString = "".concat(sourceValue).trim();

              if (trimmedString) {
                result.push(trimmedString);
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      //# sourceMappingURL=coercion.js.map

      /***/

    },

    /***/
    "8Qeq":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/canReportError.js ***!
      \********************************************************************/

    /*! exports provided: canReportError */

    /***/
    function Qeq(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "canReportError", function () {
        return canReportError;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function canReportError(observer) {
        while (observer) {
          var _observer = observer,
              closed = _observer.closed,
              destination = _observer.destination,
              isStopped = _observer.isStopped;

          if (closed || isStopped) {
            return false;
          } else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            observer = destination;
          } else {
            observer = null;
          }
        }

        return true;
      } //# sourceMappingURL=canReportError.js.map

      /***/

    },

    /***/
    "9M8c":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js ***!
      \**********************************************************************/

    /*! exports provided: bufferCount */

    /***/
    function M8c(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bufferCount", function () {
        return bufferCount;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function bufferCount(bufferSize) {
        var startBufferEvery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return function bufferCountOperatorFunction(source) {
          return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
        };
      }

      var BufferCountOperator = /*#__PURE__*/function () {
        function BufferCountOperator(bufferSize, startBufferEvery) {
          _classCallCheck(this, BufferCountOperator);

          this.bufferSize = bufferSize;
          this.startBufferEvery = startBufferEvery;

          if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
          } else {
            this.subscriberClass = BufferSkipCountSubscriber;
          }
        }

        _createClass2(BufferCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
          }
        }]);

        return BufferCountOperator;
      }();

      var BufferCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_9) {
        _inherits(BufferCountSubscriber, _Subscriber__WEBPACK_9);

        var _super43 = _createSuper(BufferCountSubscriber);

        function BufferCountSubscriber(destination, bufferSize) {
          var _this64;

          _classCallCheck(this, BufferCountSubscriber);

          _this64 = _super43.call(this, destination);
          _this64.bufferSize = bufferSize;
          _this64.buffer = [];
          return _this64;
        }

        _createClass2(BufferCountSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var buffer = this.buffer;
            buffer.push(value);

            if (buffer.length == this.bufferSize) {
              this.destination.next(buffer);
              this.buffer = [];
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var buffer = this.buffer;

            if (buffer.length > 0) {
              this.destination.next(buffer);
            }

            _get(_getPrototypeOf(BufferCountSubscriber.prototype), "_complete", this).call(this);
          }
        }]);

        return BufferCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var BufferSkipCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_10) {
        _inherits(BufferSkipCountSubscriber, _Subscriber__WEBPACK_10);

        var _super44 = _createSuper(BufferSkipCountSubscriber);

        function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
          var _this65;

          _classCallCheck(this, BufferSkipCountSubscriber);

          _this65 = _super44.call(this, destination);
          _this65.bufferSize = bufferSize;
          _this65.startBufferEvery = startBufferEvery;
          _this65.buffers = [];
          _this65.count = 0;
          return _this65;
        }

        _createClass2(BufferSkipCountSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var bufferSize = this.bufferSize,
                startBufferEvery = this.startBufferEvery,
                buffers = this.buffers,
                count = this.count;
            this.count++;

            if (count % startBufferEvery === 0) {
              buffers.push([]);
            }

            for (var i = buffers.length; i--;) {
              var buffer = buffers[i];
              buffer.push(value);

              if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
              }
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var buffers = this.buffers,
                destination = this.destination;

            while (buffers.length > 0) {
              var buffer = buffers.shift();

              if (buffer.length > 0) {
                destination.next(buffer);
              }
            }

            _get(_getPrototypeOf(BufferSkipCountSubscriber.prototype), "_complete", this).call(this);
          }
        }]);

        return BufferSkipCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=bufferCount.js.map

      /***/

    },

    /***/
    "9ihq":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/elementAt.js ***!
      \********************************************************************/

    /*! exports provided: elementAt */

    /***/
    function ihq(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "elementAt", function () {
        return elementAt;
      });
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      "4I5i");
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./filter */
      "pLZG");
      /* harmony import */


      var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./throwIfEmpty */
      "XDbj");
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      "xbPD");
      /* harmony import */


      var _take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./take */
      "IzEk");

      function elementAt(index, defaultValue) {
        if (index < 0) {
          throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]();
        }

        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
            return i === index;
          }), Object(_take__WEBPACK_IMPORTED_MODULE_4__["take"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__["throwIfEmpty"])(function () {
            return new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]();
          }));
        };
      } //# sourceMappingURL=elementAt.js.map

      /***/

    },

    /***/
    "9ppp":
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js ***!
      \*****************************************************************************/

    /*! exports provided: ObjectUnsubscribedError */

    /***/
    function ppp(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function () {
        return ObjectUnsubscribedError;
      });

      var ObjectUnsubscribedErrorImpl = function () {
        function ObjectUnsubscribedErrorImpl() {
          Error.call(this);
          this.message = 'object unsubscribed';
          this.name = 'ObjectUnsubscribedError';
          return this;
        }

        ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
        return ObjectUnsubscribedErrorImpl;
      }();

      var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl; //# sourceMappingURL=ObjectUnsubscribedError.js.map

      /***/
    },

    /***/
    "A3iJ":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/partition.js ***!
      \********************************************************************/

    /*! exports provided: partition */

    /***/
    function A3iJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "partition", function () {
        return partition;
      });
      /* harmony import */


      var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/not */
      "F97/");
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./filter */
      "pLZG");

      function partition(predicate, thisArg) {
        return function (source) {
          return [Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(predicate, thisArg)(source), Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(source)];
        };
      } //# sourceMappingURL=partition.js.map

      /***/

    },

    /***/
    "BFxc":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/takeLast.js ***!
      \*******************************************************************/

    /*! exports provided: takeLast */

    /***/
    function BFxc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "takeLast", function () {
        return takeLast;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      "4I5i");
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/empty */
      "EY2u");

      function takeLast(count) {
        return function takeLastOperatorFunction(source) {
          if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
          } else {
            return source.lift(new TakeLastOperator(count));
          }
        };
      }

      var TakeLastOperator = /*#__PURE__*/function () {
        function TakeLastOperator(total) {
          _classCallCheck(this, TakeLastOperator);

          this.total = total;

          if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
          }
        }

        _createClass2(TakeLastOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
          }
        }]);

        return TakeLastOperator;
      }();

      var TakeLastSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_11) {
        _inherits(TakeLastSubscriber, _Subscriber__WEBPACK_11);

        var _super45 = _createSuper(TakeLastSubscriber);

        function TakeLastSubscriber(destination, total) {
          var _this66;

          _classCallCheck(this, TakeLastSubscriber);

          _this66 = _super45.call(this, destination);
          _this66.total = total;
          _this66.ring = new Array();
          _this66.count = 0;
          return _this66;
        }

        _createClass2(TakeLastSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;

            if (ring.length < total) {
              ring.push(value);
            } else {
              var index = count % total;
              ring[index] = value;
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var destination = this.destination;
            var count = this.count;

            if (count > 0) {
              var total = this.count >= this.total ? this.total : this.count;
              var ring = this.ring;

              for (var i = 0; i < total; i++) {
                var idx = count++ % total;
                destination.next(ring[idx]);
              }
            }

            destination.complete();
          }
        }]);

        return TakeLastSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=takeLast.js.map

      /***/

    },

    /***/
    "CMyj":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isIterable.js ***!
      \****************************************************************/

    /*! exports provided: isIterable */

    /***/
    function CMyj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isIterable", function () {
        return isIterable;
      });
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/iterator */
      "Lhse");

      function isIterable(input) {
        return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]] === 'function';
      } //# sourceMappingURL=isIterable.js.map

      /***/

    },

    /***/
    "CRDf":
    /*!***************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js ***!
      \***************************************************************************/

    /*! exports provided: subscribeToObservable */

    /***/
    function CRDf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeToObservable", function () {
        return subscribeToObservable;
      });
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/observable */
      "kJWO");

      var subscribeToObservable = function subscribeToObservable(obj) {
        return function (subscriber) {
          var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]]();

          if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
          } else {
            return obs.subscribe(subscriber);
          }
        };
      }; //# sourceMappingURL=subscribeToObservable.js.map

      /***/

    },

    /***/
    "Cfvw":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/from.js ***!
      \****************************************************************/

    /*! exports provided: from */

    /***/
    function Cfvw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "from", function () {
        return from;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeTo */
      "SeVD");
      /* harmony import */


      var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduled/scheduled */
      "7HRe");

      function from(input, scheduler) {
        if (!scheduler) {
          if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
            return input;
          }

          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(input));
        } else {
          return Object(_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__["scheduled"])(input, scheduler);
        }
      } //# sourceMappingURL=from.js.map

      /***/

    },

    /***/
    "CqXF":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mapTo.js ***!
      \****************************************************************/

    /*! exports provided: mapTo */

    /***/
    function CqXF(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mapTo", function () {
        return mapTo;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function mapTo(value) {
        return function (source) {
          return source.lift(new MapToOperator(value));
        };
      }

      var MapToOperator = /*#__PURE__*/function () {
        function MapToOperator(value) {
          _classCallCheck(this, MapToOperator);

          this.value = value;
        }

        _createClass2(MapToOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new MapToSubscriber(subscriber, this.value));
          }
        }]);

        return MapToOperator;
      }();

      var MapToSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_12) {
        _inherits(MapToSubscriber, _Subscriber__WEBPACK_12);

        var _super46 = _createSuper(MapToSubscriber);

        function MapToSubscriber(destination, value) {
          var _this67;

          _classCallCheck(this, MapToSubscriber);

          _this67 = _super46.call(this, destination);
          _this67.value = value;
          return _this67;
        }

        _createClass2(MapToSubscriber, [{
          key: "_next",
          value: function _next(x) {
            this.destination.next(this.value);
          }
        }]);

        return MapToSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=mapTo.js.map

      /***/

    },

    /***/
    "D0XW":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
      \****************************************************************/

    /*! exports provided: asyncScheduler, async */

    /***/
    function D0XW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asyncScheduler", function () {
        return asyncScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "async", function () {
        return async;
      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      "3N8a");
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsyncScheduler */
      "IjjT");

      var asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"](_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]);
      var async = asyncScheduler; //# sourceMappingURL=async.js.map

      /***/
    },

    /***/
    "DH7j":
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isArray.js ***!
      \*************************************************************/

    /*! exports provided: isArray */

    /***/
    function DH7j(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isArray", function () {
        return isArray;
      });

      var isArray = function () {
        return Array.isArray || function (x) {
          return x && typeof x.length === 'number';
        };
      }(); //# sourceMappingURL=isArray.js.map

      /***/

    },

    /***/
    "EQ5u":
    /*!*********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js ***!
      \*********************************************************************************/

    /*! exports provided: ConnectableObservable, connectableObservableDescriptor */

    /***/
    function EQ5u(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function () {
        return ConnectableObservable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "connectableObservableDescriptor", function () {
        return connectableObservableDescriptor;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _operators_refCount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../operators/refCount */
      "x+ZX");

      var ConnectableObservable = /*#__PURE__*/function (_Observable__WEBPACK_) {
        _inherits(ConnectableObservable, _Observable__WEBPACK_);

        var _super47 = _createSuper(ConnectableObservable);

        function ConnectableObservable(source, subjectFactory) {
          var _this68;

          _classCallCheck(this, ConnectableObservable);

          _this68 = _super47.call(this);
          _this68.source = source;
          _this68.subjectFactory = subjectFactory;
          _this68._refCount = 0;
          _this68._isComplete = false;
          return _this68;
        }

        _createClass2(ConnectableObservable, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            return this.getSubject().subscribe(subscriber);
          }
        }, {
          key: "getSubject",
          value: function getSubject() {
            var subject = this._subject;

            if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
            }

            return this._subject;
          }
        }, {
          key: "connect",
          value: function connect() {
            var connection = this._connection;

            if (!connection) {
              this._isComplete = false;
              connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"]();
              connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

              if (connection.closed) {
                this._connection = null;
                connection = _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
              }
            }

            return connection;
          }
        }, {
          key: "refCount",
          value: function refCount() {
            return Object(_operators_refCount__WEBPACK_IMPORTED_MODULE_4__["refCount"])()(this);
          }
        }]);

        return ConnectableObservable;
      }(_Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]);

      var connectableObservableDescriptor = function () {
        var connectableProto = ConnectableObservable.prototype;
        return {
          operator: {
            value: null
          },
          _refCount: {
            value: 0,
            writable: true
          },
          _subject: {
            value: null,
            writable: true
          },
          _connection: {
            value: null,
            writable: true
          },
          _subscribe: {
            value: connectableProto._subscribe
          },
          _isComplete: {
            value: connectableProto._isComplete,
            writable: true
          },
          getSubject: {
            value: connectableProto.getSubject
          },
          connect: {
            value: connectableProto.connect
          },
          refCount: {
            value: connectableProto.refCount
          }
        };
      }();

      var ConnectableSubscriber = /*#__PURE__*/function (_Subject__WEBPACK_IMP2) {
        _inherits(ConnectableSubscriber, _Subject__WEBPACK_IMP2);

        var _super48 = _createSuper(ConnectableSubscriber);

        function ConnectableSubscriber(destination, connectable) {
          var _this69;

          _classCallCheck(this, ConnectableSubscriber);

          _this69 = _super48.call(this, destination);
          _this69.connectable = connectable;
          return _this69;
        }

        _createClass2(ConnectableSubscriber, [{
          key: "_error",
          value: function _error(err) {
            this._unsubscribe();

            _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_error", this).call(this, err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.connectable._isComplete = true;

            this._unsubscribe();

            _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (connectable) {
              this.connectable = null;
              var connection = connectable._connection;
              connectable._refCount = 0;
              connectable._subject = null;
              connectable._connection = null;

              if (connection) {
                connection.unsubscribe();
              }
            }
          }
        }]);

        return ConnectableSubscriber;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__["SubjectSubscriber"]);

      var RefCountOperator = /*#__PURE__*/function () {
        function RefCountOperator(connectable) {
          _classCallCheck(this, RefCountOperator);

          this.connectable = connectable;
        }

        _createClass2(RefCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);

            if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
            }

            return subscription;
          }
        }]);

        return RefCountOperator;
      }();

      var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_13) {
        _inherits(RefCountSubscriber, _Subscriber__WEBPACK_13);

        var _super49 = _createSuper(RefCountSubscriber);

        function RefCountSubscriber(destination, connectable) {
          var _this70;

          _classCallCheck(this, RefCountSubscriber);

          _this70 = _super49.call(this, destination);
          _this70.connectable = connectable;
          return _this70;
        }

        _createClass2(RefCountSubscriber, [{
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (!connectable) {
              this.connection = null;
              return;
            }

            this.connectable = null;
            var refCount = connectable._refCount;

            if (refCount <= 0) {
              this.connection = null;
              return;
            }

            connectable._refCount = refCount - 1;

            if (refCount > 1) {
              this.connection = null;
              return;
            }

            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;

            if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
            }
          }
        }]);

        return RefCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]); //# sourceMappingURL=ConnectableObservable.js.map

      /***/

    },

    /***/
    "EY2u":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/empty.js ***!
      \*****************************************************************/

    /*! exports provided: EMPTY, empty */

    /***/
    function EY2u(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EMPTY", function () {
        return EMPTY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "empty", function () {
        return empty;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      var EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        return subscriber.complete();
      });

      function empty(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
      }

      function emptyScheduled(scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          return scheduler.schedule(function () {
            return subscriber.complete();
          });
        });
      } //# sourceMappingURL=empty.js.map

      /***/

    },

    /***/
    "F97/":
    /*!*********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/not.js ***!
      \*********************************************************/

    /*! exports provided: not */

    /***/
    function F97(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "not", function () {
        return not;
      });

      function not(pred, thisArg) {
        function notPred() {
          return !notPred.pred.apply(notPred.thisArg, arguments);
        }

        notPred.pred = pred;
        notPred.thisArg = thisArg;
        return notPred;
      } //# sourceMappingURL=not.js.map

      /***/

    },

    /***/
    "FD9M":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js ***!
      \***********************************************************************/

    /*! exports provided: bufferToggle */

    /***/
    function FD9M(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bufferToggle", function () {
        return bufferToggle;
      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");

      function bufferToggle(openings, closingSelector) {
        return function bufferToggleOperatorFunction(source) {
          return source.lift(new BufferToggleOperator(openings, closingSelector));
        };
      }

      var BufferToggleOperator = /*#__PURE__*/function () {
        function BufferToggleOperator(openings, closingSelector) {
          _classCallCheck(this, BufferToggleOperator);

          this.openings = openings;
          this.closingSelector = closingSelector;
        }

        _createClass2(BufferToggleOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
          }
        }]);

        return BufferToggleOperator;
      }();

      var BufferToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB) {
        _inherits(BufferToggleSubscriber, _OuterSubscriber__WEB);

        var _super50 = _createSuper(BufferToggleSubscriber);

        function BufferToggleSubscriber(destination, openings, closingSelector) {
          var _this71;

          _classCallCheck(this, BufferToggleSubscriber);

          _this71 = _super50.call(this, destination);
          _this71.closingSelector = closingSelector;
          _this71.contexts = [];

          _this71.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this71), openings));

          return _this71;
        }

        _createClass2(BufferToggleSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var contexts = this.contexts;
            var len = contexts.length;

            for (var i = 0; i < len; i++) {
              contexts[i].buffer.push(value);
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var contexts = this.contexts;

            while (contexts.length > 0) {
              var context = contexts.shift();
              context.subscription.unsubscribe();
              context.buffer = null;
              context.subscription = null;
            }

            this.contexts = null;

            _get(_getPrototypeOf(BufferToggleSubscriber.prototype), "_error", this).call(this, err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var contexts = this.contexts;

            while (contexts.length > 0) {
              var context = contexts.shift();
              this.destination.next(context.buffer);
              context.subscription.unsubscribe();
              context.buffer = null;
              context.subscription = null;
            }

            this.contexts = null;

            _get(_getPrototypeOf(BufferToggleSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(innerSub) {
            this.closeBuffer(innerSub.context);
          }
        }, {
          key: "openBuffer",
          value: function openBuffer(value) {
            try {
              var closingSelector = this.closingSelector;
              var closingNotifier = closingSelector.call(this, value);

              if (closingNotifier) {
                this.trySubscribe(closingNotifier);
              }
            } catch (err) {
              this._error(err);
            }
          }
        }, {
          key: "closeBuffer",
          value: function closeBuffer(context) {
            var contexts = this.contexts;

            if (contexts && context) {
              var buffer = context.buffer,
                  subscription = context.subscription;
              this.destination.next(buffer);
              contexts.splice(contexts.indexOf(context), 1);
              this.remove(subscription);
              subscription.unsubscribe();
            }
          }
        }, {
          key: "trySubscribe",
          value: function trySubscribe(closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
            var context = {
              buffer: buffer,
              subscription: subscription
            };
            contexts.push(context);
            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, closingNotifier, context);

            if (!innerSubscription || innerSubscription.closed) {
              this.closeBuffer(context);
            } else {
              innerSubscription.context = context;
              this.add(innerSubscription);
              subscription.add(innerSubscription);
            }
          }
        }]);

        return BufferToggleSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=bufferToggle.js.map

      /***/

    },

    /***/
    "FKr1":
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js ***!
      \**********************************************************************/

    /*! exports provided: AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, ShowOnDirtyErrorStateMatcher, VERSION, _MatOptgroupBase, _MatOptionBase, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, ɵ0, ɵangular_material_src_material_core_core_a */

    /***/
    function FKr1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationCurves", function () {
        return AnimationCurves;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationDurations", function () {
        return AnimationDurations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DateAdapter", function () {
        return DateAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () {
        return ErrorStateMatcher;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MATERIAL_SANITY_CHECKS", function () {
        return MATERIAL_SANITY_CHECKS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_DATE_FORMATS", function () {
        return MAT_DATE_FORMATS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE", function () {
        return MAT_DATE_LOCALE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_FACTORY", function () {
        return MAT_DATE_LOCALE_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_NATIVE_DATE_FORMATS", function () {
        return MAT_NATIVE_DATE_FORMATS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_OPTGROUP", function () {
        return MAT_OPTGROUP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_OPTION_PARENT_COMPONENT", function () {
        return MAT_OPTION_PARENT_COMPONENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_RIPPLE_GLOBAL_OPTIONS", function () {
        return MAT_RIPPLE_GLOBAL_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatCommonModule", function () {
        return MatCommonModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatLine", function () {
        return MatLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatLineModule", function () {
        return MatLineModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatNativeDateModule", function () {
        return MatNativeDateModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatOptgroup", function () {
        return MatOptgroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatOption", function () {
        return MatOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatOptionModule", function () {
        return MatOptionModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatOptionSelectionChange", function () {
        return MatOptionSelectionChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatPseudoCheckbox", function () {
        return MatPseudoCheckbox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatPseudoCheckboxModule", function () {
        return MatPseudoCheckboxModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatRipple", function () {
        return MatRipple;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatRippleModule", function () {
        return MatRippleModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NativeDateAdapter", function () {
        return NativeDateAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NativeDateModule", function () {
        return NativeDateModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RippleRef", function () {
        return RippleRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RippleRenderer", function () {
        return RippleRenderer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function () {
        return ShowOnDirtyErrorStateMatcher;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_MatOptgroupBase", function () {
        return _MatOptgroupBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_MatOptionBase", function () {
        return _MatOptionBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_countGroupLabelsBeforeOption", function () {
        return _countGroupLabelsBeforeOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_getOptionScrollPosition", function () {
        return _getOptionScrollPosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultRippleAnimationConfig", function () {
        return defaultRippleAnimationConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinColor", function () {
        return mixinColor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinDisableRipple", function () {
        return mixinDisableRipple;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinDisabled", function () {
        return mixinDisabled;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinErrorState", function () {
        return mixinErrorState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinInitialized", function () {
        return mixinInitialized;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function () {
        return mixinTabIndex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setLines", function () {
        return setLines;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵ0", function () {
        return ɵ0$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_material_src_material_core_core_a", function () {
        return MATERIAL_SANITY_CHECKS_FACTORY;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "u47x");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "cH1L");
      /* harmony import */


      var _angular_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk */
      "xz+E");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      "R1ws");
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      "FtGj");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Current version of Angular Material. */


      var _c0 = ["*", [["mat-option"], ["ng-container"]]];
      var _c1 = ["*", "mat-option, ng-container"];

      function MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "mat-pseudo-checkbox", 4);
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("state", ctx_r0.selected ? "checked" : "unchecked")("disabled", ctx_r0.disabled);
        }
      }

      function MatOption_span_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("(", ctx_r1.group.label, ")");
        }
      }

      var _c2 = ["*"];
      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('11.2.5');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @docs-private */

      var AnimationCurves = function AnimationCurves() {
        _classCallCheck(this, AnimationCurves);
      };

      AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
      AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
      AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
      AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
      /** @docs-private */

      var AnimationDurations = function AnimationDurations() {
        _classCallCheck(this, AnimationDurations);
      };

      AnimationDurations.COMPLEX = '375ms';
      AnimationDurations.ENTERING = '225ms';
      AnimationDurations.EXITING = '195ms';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Private version constant to circumvent test/build issues,
      // i.e. avoid core to depend on the @angular/material primary entry-point
      // Can be removed once the Material primary entry-point no longer
      // re-exports all secondary entry-points

      var VERSION$1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('11.2.5');
      /** @docs-private */

      function MATERIAL_SANITY_CHECKS_FACTORY() {
        return true;
      }
      /** Injection token that configures whether the Material sanity checks are enabled. */


      var MATERIAL_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-sanity-checks', {
        providedIn: 'root',
        factory: MATERIAL_SANITY_CHECKS_FACTORY
      });
      /**
       * Module that captures anything that should be loaded and/or run for *all* Angular Material
       * components. This includes Bidi, etc.
       *
       * This module should be imported to each top-level component module (e.g., MatTabsModule).
       */

      var MatCommonModule = /*#__PURE__*/function () {
        function MatCommonModule(highContrastModeDetector, sanityChecks, document) {
          _classCallCheck(this, MatCommonModule);

          /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */
          this._hasDoneGlobalChecks = false;
          this._document = document; // While A11yModule also does this, we repeat it here to avoid importing A11yModule
          // in MatCommonModule.

          highContrastModeDetector._applyBodyHighContrastModeCssClasses(); // Note that `_sanityChecks` is typed to `any`, because AoT
          // throws an error if we use the `SanityChecks` type directly.


          this._sanityChecks = sanityChecks;

          if (!this._hasDoneGlobalChecks) {
            this._checkDoctypeIsDefined();

            this._checkThemeIsPresent();

            this._checkCdkVersionMatch();

            this._hasDoneGlobalChecks = true;
          }
        }
        /** Use defaultView of injected document if available or fallback to global window reference */


        _createClass2(MatCommonModule, [{
          key: "_getWindow",
          value: function _getWindow() {
            var win = this._document.defaultView || window;
            return typeof win === 'object' && win ? win : null;
          }
          /** Whether any sanity checks are enabled. */

        }, {
          key: "_checksAreEnabled",
          value: function _checksAreEnabled() {
            // TODO(crisbeto): we can't use `ngDevMode` here yet, because ViewEngine apps might not support
            // it. Since these checks can have performance implications and they aren't tree shakeable
            // in their current form, we can leave the `isDevMode` check in for now.
            // tslint:disable-next-line:ban
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && !this._isTestEnv();
          }
          /** Whether the code is running in tests. */

        }, {
          key: "_isTestEnv",
          value: function _isTestEnv() {
            var window = this._getWindow();

            return window && (window.__karma__ || window.jasmine);
          }
        }, {
          key: "_checkDoctypeIsDefined",
          value: function _checkDoctypeIsDefined() {
            var isEnabled = this._checksAreEnabled() && (this._sanityChecks === true || this._sanityChecks.doctype);

            if (isEnabled && !this._document.doctype) {
              console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');
            }
          }
        }, {
          key: "_checkThemeIsPresent",
          value: function _checkThemeIsPresent() {
            // We need to assert that the `body` is defined, because these checks run very early
            // and the `body` won't be defined if the consumer put their scripts in the `head`.
            var isDisabled = !this._checksAreEnabled() || this._sanityChecks === false || !this._sanityChecks.theme;

            if (isDisabled || !this._document.body || typeof getComputedStyle !== 'function') {
              return;
            }

            var testElement = this._document.createElement('div');

            testElement.classList.add('mat-theme-loaded-marker');

            this._document.body.appendChild(testElement);

            var computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in
            // Firefox, the computed style is null if an application is running inside of a hidden iframe.
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

            if (computedStyle && computedStyle.display !== 'none') {
              console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');
            }

            this._document.body.removeChild(testElement);
          }
          /** Checks whether the material version matches the cdk version */

        }, {
          key: "_checkCdkVersionMatch",
          value: function _checkCdkVersionMatch() {
            var isEnabled = this._checksAreEnabled() && (this._sanityChecks === true || this._sanityChecks.version);

            if (isEnabled && VERSION$1.full !== _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full) {
              console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' + 'the Angular CDK version (' + _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full + ').\n' + 'Please ensure the versions of these two packages exactly match.');
            }
          }
        }]);

        return MatCommonModule;
      }();

      MatCommonModule.ɵfac = function MatCommonModule_Factory(t) {
        return new (t || MatCommonModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["HighContrastModeDetector"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MATERIAL_SANITY_CHECKS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]));
      };

      MatCommonModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatCommonModule
      });
      MatCommonModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]]
      });

      MatCommonModule.ctorParameters = function () {
        return [{
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["HighContrastModeDetector"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MATERIAL_SANITY_CHECKS]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatCommonModule, {
          imports: function imports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]];
          },
          exports: function exports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatCommonModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]],
            exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]]
          }]
        }], function () {
          return [{
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["HighContrastModeDetector"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MATERIAL_SANITY_CHECKS]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Mixin to augment a directive with a `disabled` property. */


      function mixinDisabled(base) {
        return /*#__PURE__*/function (_base) {
          _inherits(_class, _base);

          var _super51 = _createSuper(_class);

          function _class() {
            var _this72;

            _classCallCheck(this, _class);

            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = arguments[_key8];
            }

            _this72 = _super51.call.apply(_super51, [this].concat(args));
            _this72._disabled = false;
            return _this72;
          }

          _createClass2(_class, [{
            key: "disabled",
            get: function get() {
              return this._disabled;
            },
            set: function set(value) {
              this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
            }
          }]);

          return _class;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Mixin to augment a directive with a `color` property. */


      function mixinColor(base, defaultColor) {
        return /*#__PURE__*/function (_base2) {
          _inherits(_class2, _base2);

          var _super52 = _createSuper(_class2);

          function _class2() {
            var _this73;

            _classCallCheck(this, _class2);

            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
              args[_key9] = arguments[_key9];
            }

            _this73 = _super52.call.apply(_super52, [this].concat(args));
            _this73.defaultColor = defaultColor; // Set the default color that can be specified from the mixin.

            _this73.color = defaultColor;
            return _this73;
          }

          _createClass2(_class2, [{
            key: "color",
            get: function get() {
              return this._color;
            },
            set: function set(value) {
              var colorPalette = value || this.defaultColor;

              if (colorPalette !== this._color) {
                if (this._color) {
                  this._elementRef.nativeElement.classList.remove("mat-".concat(this._color));
                }

                if (colorPalette) {
                  this._elementRef.nativeElement.classList.add("mat-".concat(colorPalette));
                }

                this._color = colorPalette;
              }
            }
          }]);

          return _class2;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Mixin to augment a directive with a `disableRipple` property. */


      function mixinDisableRipple(base) {
        var Mixin = /*#__PURE__*/function (_base3) {
          _inherits(Mixin, _base3);

          var _super53 = _createSuper(Mixin);

          function Mixin() {
            var _this74;

            _classCallCheck(this, Mixin);

            for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
              args[_key10] = arguments[_key10];
            }

            _this74 = _super53.call.apply(_super53, [this].concat(args));
            _this74._disableRipple = false;
            return _this74;
          }
          /** Whether the ripple effect is disabled or not. */


          _createClass2(Mixin, [{
            key: "disableRipple",
            get: function get() {
              return this._disableRipple;
            },
            set: function set(value) {
              this._disableRipple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
            }
          }]);

          return Mixin;
        }(base); // Since we don't directly extend from `base` with it's original types, and we instruct
        // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
        // This is a limitation in TS as abstract classes cannot be typed properly dynamically.


        return Mixin;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Mixin to augment a directive with a `tabIndex` property. */


      function mixinTabIndex(base) {
        var defaultTabIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
        // but given we `extend` it from another class, we can assume a constructor being accessible.
        var Mixin = /*#__PURE__*/function (_base4) {
          _inherits(Mixin, _base4);

          var _super54 = _createSuper(Mixin);

          function Mixin() {
            var _this75;

            _classCallCheck(this, Mixin);

            for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
              args[_key11] = arguments[_key11];
            }

            _this75 = _super54.call.apply(_super54, [this].concat(args));
            _this75._tabIndex = defaultTabIndex;
            _this75.defaultTabIndex = defaultTabIndex;
            return _this75;
          }

          _createClass2(Mixin, [{
            key: "tabIndex",
            get: function get() {
              return this.disabled ? -1 : this._tabIndex;
            },
            set: function set(value) {
              // If the specified tabIndex value is null or undefined, fall back to the default value.
              this._tabIndex = value != null ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value) : this.defaultTabIndex;
            }
          }]);

          return Mixin;
        }(base); // Since we don't directly extend from `base` with it's original types, and we instruct
        // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
        // This is a limitation in TS as abstract classes cannot be typed properly dynamically.


        return Mixin;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Mixin to augment a directive with updateErrorState method.
       * For component with `errorState` and need to update `errorState`.
       */


      function mixinErrorState(base) {
        return /*#__PURE__*/function (_base5) {
          _inherits(_class3, _base5);

          var _super55 = _createSuper(_class3);

          function _class3() {
            var _this76;

            _classCallCheck(this, _class3);

            for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
              args[_key12] = arguments[_key12];
            }

            _this76 = _super55.call.apply(_super55, [this].concat(args));
            /** Whether the component is in an error state. */

            _this76.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */

            _this76.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
            return _this76;
          }

          _createClass2(_class3, [{
            key: "updateErrorState",
            value: function updateErrorState() {
              var oldState = this.errorState;
              var parent = this._parentFormGroup || this._parentForm;
              var matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
              var control = this.ngControl ? this.ngControl.control : null;
              var newState = matcher.isErrorState(control, parent);

              if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
              }
            }
          }]);

          return _class3;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */


      function mixinInitialized(base) {
        return /*#__PURE__*/function (_base6) {
          _inherits(_class4, _base6);

          var _super56 = _createSuper(_class4);

          function _class4() {
            var _this77;

            _classCallCheck(this, _class4);

            for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
              args[_key13] = arguments[_key13];
            }

            _this77 = _super56.call.apply(_super56, [this].concat(args));
            /** Whether this directive has been marked as initialized. */

            _this77._isInitialized = false;
            /**
             * List of subscribers that subscribed before the directive was initialized. Should be notified
             * during _markInitialized. Set to null after pending subscribers are notified, and should
             * not expect to be populated after.
             */

            _this77._pendingSubscribers = [];
            /**
             * Observable stream that emits when the directive initializes. If already initialized, the
             * subscriber is stored to be notified once _markInitialized is called.
             */

            _this77.initialized = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"](function (subscriber) {
              // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
              // when _markInitialized is called.
              if (_this77._isInitialized) {
                _this77._notifySubscriber(subscriber);
              } else {
                _this77._pendingSubscribers.push(subscriber);
              }
            });
            return _this77;
          }
          /**
           * Marks the state as initialized and notifies pending subscribers. Should be called at the end
           * of ngOnInit.
           * @docs-private
           */


          _createClass2(_class4, [{
            key: "_markInitialized",
            value: function _markInitialized() {
              if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');
              }

              this._isInitialized = true;

              this._pendingSubscribers.forEach(this._notifySubscriber);

              this._pendingSubscribers = null;
            }
            /** Emits and completes the subscriber stream (should only emit once). */

          }, {
            key: "_notifySubscriber",
            value: function _notifySubscriber(subscriber) {
              subscriber.next();
              subscriber.complete();
            }
          }]);

          return _class4;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** InjectionToken for datepicker that can be used to override default locale code. */


      var MAT_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_DATE_LOCALE', {
        providedIn: 'root',
        factory: MAT_DATE_LOCALE_FACTORY
      });
      /** @docs-private */

      function MAT_DATE_LOCALE_FACTORY() {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]);
      }
      /** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */


      var DateAdapter = /*#__PURE__*/function () {
        function DateAdapter() {
          _classCallCheck(this, DateAdapter);

          this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
          /** A stream that emits when the locale changes. */

          this.localeChanges = this._localeChanges;
        }
        /**
         * Given a potential date object, returns that same date object if it is
         * a valid date, or `null` if it's not a valid date.
         * @param obj The object to check.
         * @returns A date or `null`.
         */


        _createClass2(DateAdapter, [{
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;
          }
          /**
           * Attempts to deserialize a value to a valid date object. This is different from parsing in that
           * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
           * string). The default implementation does not allow any deserialization, it simply checks that
           * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
           * method on all of its `@Input()` properties that accept dates. It is therefore possible to
           * support passing values from your backend directly to these properties by overriding this method
           * to also deserialize the format used by your backend.
           * @param value The value to be deserialized into a date object.
           * @returns The deserialized date object, either a valid date, null if the value can be
           *     deserialized into a null date (e.g. the empty string), or an invalid date.
           */

        }, {
          key: "deserialize",
          value: function deserialize(value) {
            if (value == null || this.isDateInstance(value) && this.isValid(value)) {
              return value;
            }

            return this.invalid();
          }
          /**
           * Sets the locale used for all dates.
           * @param locale The new locale.
           */

        }, {
          key: "setLocale",
          value: function setLocale(locale) {
            this.locale = locale;

            this._localeChanges.next();
          }
          /**
           * Compares two dates.
           * @param first The first date to compare.
           * @param second The second date to compare.
           * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
           *     a number greater than 0 if the first date is later.
           */

        }, {
          key: "compareDate",
          value: function compareDate(first, second) {
            return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
          }
          /**
           * Checks if two dates are equal.
           * @param first The first date to check.
           * @param second The second date to check.
           * @returns Whether the two dates are equal.
           *     Null dates are considered equal to other null dates.
           */

        }, {
          key: "sameDate",
          value: function sameDate(first, second) {
            if (first && second) {
              var firstValid = this.isValid(first);
              var secondValid = this.isValid(second);

              if (firstValid && secondValid) {
                return !this.compareDate(first, second);
              }

              return firstValid == secondValid;
            }

            return first == second;
          }
          /**
           * Clamp the given date between min and max dates.
           * @param date The date to clamp.
           * @param min The minimum value to allow. If null or omitted no min is enforced.
           * @param max The maximum value to allow. If null or omitted no max is enforced.
           * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
           *     otherwise `date`.
           */

        }, {
          key: "clampDate",
          value: function clampDate(date, min, max) {
            if (min && this.compareDate(date, min) < 0) {
              return min;
            }

            if (max && this.compareDate(date, max) > 0) {
              return max;
            }

            return date;
          }
        }]);

        return DateAdapter;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MAT_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-date-formats');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO(mmalerba): Remove when we no longer support safari 9.

      /** Whether the browser supports the Intl API. */

      var SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
      // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
      // the consumer is providing a polyfilled `Map`. See:
      // https://github.com/Microsoft/ChakraCore/issues/3189
      // https://github.com/angular/components/issues/15687

      try {
        SUPPORTS_INTL_API = typeof Intl != 'undefined';
      } catch (_a) {
        SUPPORTS_INTL_API = false;
      }
      /** The default month names to use if Intl API is not available. */


      var DEFAULT_MONTH_NAMES = {
        'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
      };

      var ɵ0 = function ɵ0(i) {
        return String(i + 1);
      };
      /** The default date names to use if Intl API is not available. */


      var DEFAULT_DATE_NAMES = range(31, ɵ0);
      /** The default day of the week names to use if Intl API is not available. */

      var DEFAULT_DAY_OF_WEEK_NAMES = {
        'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
      };
      /**
       * Matches strings that have the form of a valid RFC 3339 string
       * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
       * because the regex will match strings an with out of bounds month, date, etc.
       */

      var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
      /** Creates an array and fills it with values. */

      function range(length, valueFunction) {
        var valuesArray = Array(length);

        for (var i = 0; i < length; i++) {
          valuesArray[i] = valueFunction(i);
        }

        return valuesArray;
      }
      /** Adapts the native JS Date for use with cdk-based components that work with dates. */


      var NativeDateAdapter = /*#__PURE__*/function (_DateAdapter) {
        _inherits(NativeDateAdapter, _DateAdapter);

        var _super57 = _createSuper(NativeDateAdapter);

        function NativeDateAdapter(matDateLocale, platform) {
          var _thisSuper, _this78;

          _classCallCheck(this, NativeDateAdapter);

          _this78 = _super57.call(this);
          /**
           * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
           * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
           * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
           * will produce `'8/13/1800'`.
           *
           * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
           * getting the string representation of a Date object from its utc representation. We're keeping
           * it here for sometime, just for precaution, in case we decide to revert some of these changes
           * though.
           */

          _this78.useUtcForDisplay = true;

          _get((_thisSuper = _assertThisInitialized(_this78), _getPrototypeOf(NativeDateAdapter.prototype)), "setLocale", _thisSuper).call(_thisSuper, matDateLocale); // IE does its own time zone correction, so we disable this on IE.


          _this78.useUtcForDisplay = !platform.TRIDENT;
          _this78._clampDate = platform.TRIDENT || platform.EDGE;
          return _this78;
        }

        _createClass2(NativeDateAdapter, [{
          key: "getYear",
          value: function getYear(date) {
            return date.getFullYear();
          }
        }, {
          key: "getMonth",
          value: function getMonth(date) {
            return date.getMonth();
          }
        }, {
          key: "getDate",
          value: function getDate(date) {
            return date.getDate();
          }
        }, {
          key: "getDayOfWeek",
          value: function getDayOfWeek(date) {
            return date.getDay();
          }
        }, {
          key: "getMonthNames",
          value: function getMonthNames(style) {
            var _this79 = this;

            if (SUPPORTS_INTL_API) {
              var dtf = new Intl.DateTimeFormat(this.locale, {
                month: style,
                timeZone: 'utc'
              });
              return range(12, function (i) {
                return _this79._stripDirectionalityCharacters(_this79._format(dtf, new Date(2017, i, 1)));
              });
            }

            return DEFAULT_MONTH_NAMES[style];
          }
        }, {
          key: "getDateNames",
          value: function getDateNames() {
            var _this80 = this;

            if (SUPPORTS_INTL_API) {
              var dtf = new Intl.DateTimeFormat(this.locale, {
                day: 'numeric',
                timeZone: 'utc'
              });
              return range(31, function (i) {
                return _this80._stripDirectionalityCharacters(_this80._format(dtf, new Date(2017, 0, i + 1)));
              });
            }

            return DEFAULT_DATE_NAMES;
          }
        }, {
          key: "getDayOfWeekNames",
          value: function getDayOfWeekNames(style) {
            var _this81 = this;

            if (SUPPORTS_INTL_API) {
              var dtf = new Intl.DateTimeFormat(this.locale, {
                weekday: style,
                timeZone: 'utc'
              });
              return range(7, function (i) {
                return _this81._stripDirectionalityCharacters(_this81._format(dtf, new Date(2017, 0, i + 1)));
              });
            }

            return DEFAULT_DAY_OF_WEEK_NAMES[style];
          }
        }, {
          key: "getYearName",
          value: function getYearName(date) {
            if (SUPPORTS_INTL_API) {
              var dtf = new Intl.DateTimeFormat(this.locale, {
                year: 'numeric',
                timeZone: 'utc'
              });
              return this._stripDirectionalityCharacters(this._format(dtf, date));
            }

            return String(this.getYear(date));
          }
        }, {
          key: "getFirstDayOfWeek",
          value: function getFirstDayOfWeek() {
            // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
            return 0;
          }
        }, {
          key: "getNumDaysInMonth",
          value: function getNumDaysInMonth(date) {
            return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
          }
        }, {
          key: "clone",
          value: function clone(date) {
            return new Date(date.getTime());
          }
        }, {
          key: "createDate",
          value: function createDate(year, month, date) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              // Check for invalid month and date (except upper bound on date which we have to check after
              // creating the Date).
              if (month < 0 || month > 11) {
                throw Error("Invalid month index \"".concat(month, "\". Month index has to be between 0 and 11."));
              }

              if (date < 1) {
                throw Error("Invalid date \"".concat(date, "\". Date has to be greater than 0."));
              }
            }

            var result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow


            if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw Error("Invalid date \"".concat(date, "\" for month with index \"").concat(month, "\"."));
            }

            return result;
          }
        }, {
          key: "today",
          value: function today() {
            return new Date();
          }
        }, {
          key: "parse",
          value: function parse(value) {
            // We have no way using the native JS Date to set the parse format or locale, so we ignore these
            // parameters.
            if (typeof value == 'number') {
              return new Date(value);
            }

            return value ? new Date(Date.parse(value)) : null;
          }
        }, {
          key: "format",
          value: function format(date, displayFormat) {
            if (!this.isValid(date)) {
              throw Error('NativeDateAdapter: Cannot format invalid date.');
            }

            if (SUPPORTS_INTL_API) {
              // On IE and Edge the i18n API will throw a hard error that can crash the entire app
              // if we attempt to format a date whose year is less than 1 or greater than 9999.
              if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                date = this.clone(date);
                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
              }

              displayFormat = Object.assign(Object.assign({}, displayFormat), {
                timeZone: 'utc'
              });
              var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
              return this._stripDirectionalityCharacters(this._format(dtf, date));
            }

            return this._stripDirectionalityCharacters(date.toDateString());
          }
        }, {
          key: "addCalendarYears",
          value: function addCalendarYears(date, years) {
            return this.addCalendarMonths(date, years * 12);
          }
        }, {
          key: "addCalendarMonths",
          value: function addCalendarMonths(date, months) {
            var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new
            // month. In this case we want to go to the last day of the desired month.
            // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
            // guarantee this.


            if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
              newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
            }

            return newDate;
          }
        }, {
          key: "addCalendarDays",
          value: function addCalendarDays(date, days) {
            return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
          }
        }, {
          key: "toIso8601",
          value: function toIso8601(date) {
            return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
          }
          /**
           * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
           * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
           * invalid date for all other values.
           */

        }, {
          key: "deserialize",
          value: function deserialize(value) {
            if (typeof value === 'string') {
              if (!value) {
                return null;
              } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
              // string is the right format first.


              if (ISO_8601_REGEX.test(value)) {
                var date = new Date(value);

                if (this.isValid(date)) {
                  return date;
                }
              }
            }

            return _get(_getPrototypeOf(NativeDateAdapter.prototype), "deserialize", this).call(this, value);
          }
        }, {
          key: "isDateInstance",
          value: function isDateInstance(obj) {
            return obj instanceof Date;
          }
        }, {
          key: "isValid",
          value: function isValid(date) {
            return !isNaN(date.getTime());
          }
        }, {
          key: "invalid",
          value: function invalid() {
            return new Date(NaN);
          }
          /** Creates a date but allows the month and date to overflow. */

        }, {
          key: "_createDateWithOverflow",
          value: function _createDateWithOverflow(year, month, date) {
            // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.
            // To work around this we use `setFullYear` and `setHours` instead.
            var d = new Date();
            d.setFullYear(year, month, date);
            d.setHours(0, 0, 0, 0);
            return d;
          }
          /**
           * Pads a number to make it two digits.
           * @param n The number to pad.
           * @returns The padded number.
           */

        }, {
          key: "_2digit",
          value: function _2digit(n) {
            return ('00' + n).slice(-2);
          }
          /**
           * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
           * other browsers do not. We remove them to make output consistent and because they interfere with
           * date parsing.
           * @param str The string to strip direction characters from.
           * @returns The stripped string.
           */

        }, {
          key: "_stripDirectionalityCharacters",
          value: function _stripDirectionalityCharacters(str) {
            return str.replace(/[\u200e\u200f]/g, '');
          }
          /**
           * When converting Date object to string, javascript built-in functions may return wrong
           * results because it applies its internal DST rules. The DST rules around the world change
           * very frequently, and the current valid rule is not always valid in previous years though.
           * We work around this problem building a new Date object which has its internal UTC
           * representation with the local date and time.
           * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have
           *    timeZone set to 'utc' to work fine.
           * @param date Date from which we want to get the string representation according to dtf
           * @returns A Date object with its UTC representation based on the passed in date info
           */

        }, {
          key: "_format",
          value: function _format(dtf, date) {
            // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.
            // To work around this we use `setUTCFullYear` and `setUTCHours` instead.
            var d = new Date();
            d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            return dtf.format(d);
          }
        }]);

        return NativeDateAdapter;
      }(DateAdapter);

      NativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {
        return new (t || NativeDateAdapter)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MAT_DATE_LOCALE, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]));
      };

      NativeDateAdapter.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: NativeDateAdapter,
        factory: NativeDateAdapter.ɵfac
      });

      NativeDateAdapter.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_DATE_LOCALE]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NativeDateAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_DATE_LOCALE]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MAT_NATIVE_DATE_FORMATS = {
        parse: {
          dateInput: null
        },
        display: {
          dateInput: {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric'
          },
          monthYearLabel: {
            year: 'numeric',
            month: 'short'
          },
          dateA11yLabel: {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          },
          monthYearA11yLabel: {
            year: 'numeric',
            month: 'long'
          }
        }
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var NativeDateModule = function NativeDateModule() {
        _classCallCheck(this, NativeDateModule);
      };

      NativeDateModule.ɵfac = function NativeDateModule_Factory(t) {
        return new (t || NativeDateModule)();
      };

      NativeDateModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: NativeDateModule
      });
      NativeDateModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: DateAdapter,
          useClass: NativeDateAdapter
        }],
        imports: [[_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](NativeDateModule, {
          imports: function imports() {
            return [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NativeDateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]],
            providers: [{
              provide: DateAdapter,
              useClass: NativeDateAdapter
            }]
          }]
        }], null, null);
      })();

      var ɵ0$1 = MAT_NATIVE_DATE_FORMATS;

      var MatNativeDateModule = function MatNativeDateModule() {
        _classCallCheck(this, MatNativeDateModule);
      };

      MatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {
        return new (t || MatNativeDateModule)();
      };

      MatNativeDateModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatNativeDateModule
      });
      MatNativeDateModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: MAT_DATE_FORMATS,
          useValue: ɵ0$1
        }],
        imports: [[NativeDateModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatNativeDateModule, {
          imports: [NativeDateModule]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatNativeDateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [NativeDateModule],
            providers: [{
              provide: MAT_DATE_FORMATS,
              useValue: ɵ0$1
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Error state matcher that matches when a control is invalid and dirty. */


      var ShowOnDirtyErrorStateMatcher = /*#__PURE__*/function () {
        function ShowOnDirtyErrorStateMatcher() {
          _classCallCheck(this, ShowOnDirtyErrorStateMatcher);
        }

        _createClass2(ShowOnDirtyErrorStateMatcher, [{
          key: "isErrorState",
          value: function isErrorState(control, form) {
            return !!(control && control.invalid && (control.dirty || form && form.submitted));
          }
        }]);

        return ShowOnDirtyErrorStateMatcher;
      }();

      ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {
        return new (t || ShowOnDirtyErrorStateMatcher)();
      };

      ShowOnDirtyErrorStateMatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: ShowOnDirtyErrorStateMatcher,
        factory: ShowOnDirtyErrorStateMatcher.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ShowOnDirtyErrorStateMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], null, null);
      })();
      /** Provider that defines how form controls behave with regards to displaying error messages. */


      var ErrorStateMatcher = /*#__PURE__*/function () {
        function ErrorStateMatcher() {
          _classCallCheck(this, ErrorStateMatcher);
        }

        _createClass2(ErrorStateMatcher, [{
          key: "isErrorState",
          value: function isErrorState(control, form) {
            return !!(control && control.invalid && (control.touched || form && form.submitted));
          }
        }]);

        return ErrorStateMatcher;
      }();

      ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {
        return new (t || ErrorStateMatcher)();
      };

      ErrorStateMatcher.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ErrorStateMatcher_Factory() {
          return new ErrorStateMatcher();
        },
        token: ErrorStateMatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ErrorStateMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Shared directive to count lines inside a text area, such as a list item.
       * Line elements can be extracted with a @ContentChildren(MatLine) query, then
       * counted by checking the query list's length.
       */


      var MatLine = function MatLine() {
        _classCallCheck(this, MatLine);
      };

      MatLine.ɵfac = function MatLine_Factory(t) {
        return new (t || MatLine)();
      };

      MatLine.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatLine,
        selectors: [["", "mat-line", ""], ["", "matLine", ""]],
        hostAttrs: [1, "mat-line"]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatLine, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-line], [matLine]',
            host: {
              'class': 'mat-line'
            }
          }]
        }], null, null);
      })();
      /**
       * Helper that takes a query list of lines and sets the correct class on the host.
       * @docs-private
       */


      function setLines(lines, element) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mat';
        // Note: doesn't need to unsubscribe, because `changes`
        // gets completed by Angular when the view is destroyed.
        lines.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["startWith"])(lines)).subscribe(function (_ref4) {
          var length = _ref4.length;
          setClass(element, "".concat(prefix, "-2-line"), false);
          setClass(element, "".concat(prefix, "-3-line"), false);
          setClass(element, "".concat(prefix, "-multi-line"), false);

          if (length === 2 || length === 3) {
            setClass(element, "".concat(prefix, "-").concat(length, "-line"), true);
          } else if (length > 3) {
            setClass(element, "".concat(prefix, "-multi-line"), true);
          }
        });
      }
      /** Adds or removes a class from an element. */


      function setClass(element, className, isAdd) {
        var classList = element.nativeElement.classList;
        isAdd ? classList.add(className) : classList.remove(className);
      }

      var MatLineModule = function MatLineModule() {
        _classCallCheck(this, MatLineModule);
      };

      MatLineModule.ɵfac = function MatLineModule_Factory(t) {
        return new (t || MatLineModule)();
      };

      MatLineModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatLineModule
      });
      MatLineModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[MatCommonModule], MatCommonModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatLineModule, {
          declarations: [MatLine],
          imports: [MatCommonModule],
          exports: [MatLine, MatCommonModule]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatLineModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [MatCommonModule],
            exports: [MatLine, MatCommonModule],
            declarations: [MatLine]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Reference to a previously launched ripple element.
       */


      var RippleRef = /*#__PURE__*/function () {
        function RippleRef(_renderer,
        /** Reference to the ripple HTML element. */
        element,
        /** Ripple configuration used for the ripple. */
        config) {
          _classCallCheck(this, RippleRef);

          this._renderer = _renderer;
          this.element = element;
          this.config = config;
          /** Current state of the ripple. */

          this.state = 3
          /* HIDDEN */
          ;
        }
        /** Fades out the ripple element. */


        _createClass2(RippleRef, [{
          key: "fadeOut",
          value: function fadeOut() {
            this._renderer.fadeOutRipple(this);
          }
        }]);

        return RippleRef;
      }();
      /**
       * Default ripple animation configuration for ripples without an explicit
       * animation config specified.
       */


      var defaultRippleAnimationConfig = {
        enterDuration: 450,
        exitDuration: 400
      };
      /**
       * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
       * events to avoid synthetic mouse events.
       */

      var ignoreMouseEventsTimeout = 800;
      /** Options that apply to all the event listeners that are bound by the ripple renderer. */

      var passiveEventOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["normalizePassiveListenerOptions"])({
        passive: true
      });
      /** Events that signal that the pointer is down. */

      var pointerDownEvents = ['mousedown', 'touchstart'];
      /** Events that signal that the pointer is up. */

      var pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
      /**
       * Helper service that performs DOM manipulations. Not intended to be used outside this module.
       * The constructor takes a reference to the ripple directive's host element and a map of DOM
       * event handlers to be installed on the element that triggers ripple animations.
       * This will eventually become a custom renderer once Angular support exists.
       * @docs-private
       */

      var RippleRenderer = /*#__PURE__*/function () {
        function RippleRenderer(_target, _ngZone, elementOrElementRef, platform) {
          _classCallCheck(this, RippleRenderer);

          this._target = _target;
          this._ngZone = _ngZone;
          /** Whether the pointer is currently down or not. */

          this._isPointerDown = false;
          /** Set of currently active ripple references. */

          this._activeRipples = new Set();
          /** Whether pointer-up event listeners have been registered. */

          this._pointerUpEventsRegistered = false; // Only do anything if we're on the browser.

          if (platform.isBrowser) {
            this._containerElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceElement"])(elementOrElementRef);
          }
        }
        /**
         * Fades in a ripple at the given coordinates.
         * @param x Coordinate within the element, along the X axis at which to start the ripple.
         * @param y Coordinate within the element, along the Y axis at which to start the ripple.
         * @param config Extra ripple options.
         */


        _createClass2(RippleRenderer, [{
          key: "fadeInRipple",
          value: function fadeInRipple(x, y) {
            var _this82 = this;

            var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();

            var animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);

            if (config.centered) {
              x = containerRect.left + containerRect.width / 2;
              y = containerRect.top + containerRect.height / 2;
            }

            var radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
            var offsetX = x - containerRect.left;
            var offsetY = y - containerRect.top;
            var duration = animationConfig.enterDuration;
            var ripple = document.createElement('div');
            ripple.classList.add('mat-ripple-element');
            ripple.style.left = "".concat(offsetX - radius, "px");
            ripple.style.top = "".concat(offsetY - radius, "px");
            ripple.style.height = "".concat(radius * 2, "px");
            ripple.style.width = "".concat(radius * 2, "px"); // If a custom color has been specified, set it as inline style. If no color is
            // set, the default color will be applied through the ripple theme styles.

            if (config.color != null) {
              ripple.style.backgroundColor = config.color;
            }

            ripple.style.transitionDuration = "".concat(duration, "ms");

            this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created
            // ripple elements. This is critical because then the `scale` would not animate properly.


            enforceStyleRecalculation(ripple);
            ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.

            var rippleRef = new RippleRef(this, ripple, config);
            rippleRef.state = 0
            /* FADING_IN */
            ; // Add the ripple reference to the list of all active ripples.

            this._activeRipples.add(rippleRef);

            if (!config.persistent) {
              this._mostRecentTransientRipple = rippleRef;
            } // Wait for the ripple element to be completely faded in.
            // Once it's faded in, the ripple can be hidden immediately if the mouse is released.


            this._runTimeoutOutsideZone(function () {
              var isMostRecentTransientRipple = rippleRef === _this82._mostRecentTransientRipple;
              rippleRef.state = 1
              /* VISIBLE */
              ; // When the timer runs out while the user has kept their pointer down, we want to
              // keep only the persistent ripples and the latest transient ripple. We do this,
              // because we don't want stacked transient ripples to appear after their enter
              // animation has finished.

              if (!config.persistent && (!isMostRecentTransientRipple || !_this82._isPointerDown)) {
                rippleRef.fadeOut();
              }
            }, duration);

            return rippleRef;
          }
          /** Fades out a ripple reference. */

        }, {
          key: "fadeOutRipple",
          value: function fadeOutRipple(rippleRef) {
            var wasActive = this._activeRipples["delete"](rippleRef);

            if (rippleRef === this._mostRecentTransientRipple) {
              this._mostRecentTransientRipple = null;
            } // Clear out the cached bounding rect if we have no more ripples.


            if (!this._activeRipples.size) {
              this._containerRect = null;
            } // For ripples that are not active anymore, don't re-run the fade-out animation.


            if (!wasActive) {
              return;
            }

            var rippleEl = rippleRef.element;
            var animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);
            rippleEl.style.transitionDuration = "".concat(animationConfig.exitDuration, "ms");
            rippleEl.style.opacity = '0';
            rippleRef.state = 2
            /* FADING_OUT */
            ; // Once the ripple faded out, the ripple can be safely removed from the DOM.

            this._runTimeoutOutsideZone(function () {
              rippleRef.state = 3
              /* HIDDEN */
              ;
              rippleEl.parentNode.removeChild(rippleEl);
            }, animationConfig.exitDuration);
          }
          /** Fades out all currently active ripples. */

        }, {
          key: "fadeOutAll",
          value: function fadeOutAll() {
            this._activeRipples.forEach(function (ripple) {
              return ripple.fadeOut();
            });
          }
          /** Sets up the trigger event listeners */

        }, {
          key: "setupTriggerEvents",
          value: function setupTriggerEvents(elementOrElementRef) {
            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceElement"])(elementOrElementRef);

            if (!element || element === this._triggerElement) {
              return;
            } // Remove all previously registered event listeners from the trigger element.


            this._removeTriggerEvents();

            this._triggerElement = element;

            this._registerEvents(pointerDownEvents);
          }
          /**
           * Handles all registered events.
           * @docs-private
           */

        }, {
          key: "handleEvent",
          value: function handleEvent(event) {
            if (event.type === 'mousedown') {
              this._onMousedown(event);
            } else if (event.type === 'touchstart') {
              this._onTouchStart(event);
            } else {
              this._onPointerUp();
            } // If pointer-up events haven't been registered yet, do so now.
            // We do this on-demand in order to reduce the total number of event listeners
            // registered by the ripples, which speeds up the rendering time for large UIs.


            if (!this._pointerUpEventsRegistered) {
              this._registerEvents(pointerUpEvents);

              this._pointerUpEventsRegistered = true;
            }
          }
          /** Function being called whenever the trigger is being pressed using mouse. */

        }, {
          key: "_onMousedown",
          value: function _onMousedown(event) {
            // Screen readers will fire fake mouse events for space/enter. Skip launching a
            // ripple in this case for consistency with the non-screen-reader experience.
            var isFakeMousedown = Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["isFakeMousedownFromScreenReader"])(event);
            var isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;

            if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
              this._isPointerDown = true;
              this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
            }
          }
          /** Function being called whenever the trigger is being pressed using touch. */

        }, {
          key: "_onTouchStart",
          value: function _onTouchStart(event) {
            if (!this._target.rippleDisabled && !Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["isFakeTouchstartFromScreenReader"])(event)) {
              // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
              // events will launch a second ripple if we don't ignore mouse events for a specific
              // time after a touchstart event.
              this._lastTouchStartEvent = Date.now();
              this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put
              // their finger down, but used another finger to tap the element again.

              var touches = event.changedTouches;

              for (var i = 0; i < touches.length; i++) {
                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
              }
            }
          }
          /** Function being called whenever the trigger is being released. */

        }, {
          key: "_onPointerUp",
          value: function _onPointerUp() {
            if (!this._isPointerDown) {
              return;
            }

            this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.

            this._activeRipples.forEach(function (ripple) {
              // By default, only ripples that are completely visible will fade out on pointer release.
              // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.
              var isVisible = ripple.state === 1
              /* VISIBLE */
              || ripple.config.terminateOnPointerUp && ripple.state === 0
              /* FADING_IN */
              ;

              if (!ripple.config.persistent && isVisible) {
                ripple.fadeOut();
              }
            });
          }
          /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */

        }, {
          key: "_runTimeoutOutsideZone",
          value: function _runTimeoutOutsideZone(fn) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this._ngZone.runOutsideAngular(function () {
              return setTimeout(fn, delay);
            });
          }
          /** Registers event listeners for a given list of events. */

        }, {
          key: "_registerEvents",
          value: function _registerEvents(eventTypes) {
            var _this83 = this;

            this._ngZone.runOutsideAngular(function () {
              eventTypes.forEach(function (type) {
                _this83._triggerElement.addEventListener(type, _this83, passiveEventOptions);
              });
            });
          }
          /** Removes previously registered event listeners from the trigger element. */

        }, {
          key: "_removeTriggerEvents",
          value: function _removeTriggerEvents() {
            var _this84 = this;

            if (this._triggerElement) {
              pointerDownEvents.forEach(function (type) {
                _this84._triggerElement.removeEventListener(type, _this84, passiveEventOptions);
              });

              if (this._pointerUpEventsRegistered) {
                pointerUpEvents.forEach(function (type) {
                  _this84._triggerElement.removeEventListener(type, _this84, passiveEventOptions);
                });
              }
            }
          }
        }]);

        return RippleRenderer;
      }();
      /** Enforces a style recalculation of a DOM element by computing its styles. */


      function enforceStyleRecalculation(element) {
        // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
        // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
        // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
        window.getComputedStyle(element).getPropertyValue('opacity');
      }
      /**
       * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
       */


      function distanceToFurthestCorner(x, y, rect) {
        var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
        var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
        return Math.sqrt(distX * distX + distY * distY);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Injection token that can be used to specify the global ripple options. */


      var MAT_RIPPLE_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-ripple-global-options');

      var MatRipple = /*#__PURE__*/function () {
        function MatRipple(_elementRef, ngZone, platform, globalOptions, _animationMode) {
          _classCallCheck(this, MatRipple);

          this._elementRef = _elementRef;
          this._animationMode = _animationMode;
          /**
           * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
           * will be the distance from the center of the ripple to the furthest corner of the host element's
           * bounding rectangle.
           */

          this.radius = 0;
          this._disabled = false;
          /** Whether ripple directive is initialized and the input bindings are set. */

          this._isInitialized = false;
          this._globalOptions = globalOptions || {};
          this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);
        }
        /**
         * Whether click events will not trigger the ripple. Ripples can be still launched manually
         * by using the `launch()` method.
         */


        _createClass2(MatRipple, [{
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = value;

            this._setupTriggerEventsIfEnabled();
          }
          /**
           * The element that triggers the ripple when click events are received.
           * Defaults to the directive's host element.
           */

        }, {
          key: "trigger",
          get: function get() {
            return this._trigger || this._elementRef.nativeElement;
          },
          set: function set(trigger) {
            this._trigger = trigger;

            this._setupTriggerEventsIfEnabled();
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._isInitialized = true;

            this._setupTriggerEventsIfEnabled();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._rippleRenderer._removeTriggerEvents();
          }
          /** Fades out all currently showing ripple elements. */

        }, {
          key: "fadeOutAll",
          value: function fadeOutAll() {
            this._rippleRenderer.fadeOutAll();
          }
          /**
           * Ripple configuration from the directive's input values.
           * @docs-private Implemented as part of RippleTarget
           */

        }, {
          key: "rippleConfig",
          get: function get() {
            return {
              centered: this.centered,
              radius: this.radius,
              color: this.color,
              animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), this._animationMode === 'NoopAnimations' ? {
                enterDuration: 0,
                exitDuration: 0
              } : {}), this.animation),
              terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
            };
          }
          /**
           * Whether ripples on pointer-down are disabled or not.
           * @docs-private Implemented as part of RippleTarget
           */

        }, {
          key: "rippleDisabled",
          get: function get() {
            return this.disabled || !!this._globalOptions.disabled;
          }
          /** Sets up the trigger event listeners if ripples are enabled. */

        }, {
          key: "_setupTriggerEventsIfEnabled",
          value: function _setupTriggerEventsIfEnabled() {
            if (!this.disabled && this._isInitialized) {
              this._rippleRenderer.setupTriggerEvents(this.trigger);
            }
          }
          /** Launches a manual ripple at the specified coordinated or just by the ripple config. */

        }, {
          key: "launch",
          value: function launch(configOrX) {
            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var config = arguments.length > 2 ? arguments[2] : undefined;

            if (typeof configOrX === 'number') {
              return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));
            } else {
              return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));
            }
          }
        }]);

        return MatRipple;
      }();

      MatRipple.ɵfac = function MatRipple_Factory(t) {
        return new (t || MatRipple)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_RIPPLE_GLOBAL_OPTIONS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"], 8));
      };

      MatRipple.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: MatRipple,
        selectors: [["", "mat-ripple", ""], ["", "matRipple", ""]],
        hostAttrs: [1, "mat-ripple"],
        hostVars: 2,
        hostBindings: function MatRipple_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-ripple-unbounded", ctx.unbounded);
          }
        },
        inputs: {
          radius: ["matRippleRadius", "radius"],
          disabled: ["matRippleDisabled", "disabled"],
          trigger: ["matRippleTrigger", "trigger"],
          color: ["matRippleColor", "color"],
          unbounded: ["matRippleUnbounded", "unbounded"],
          centered: ["matRippleCentered", "centered"],
          animation: ["matRippleAnimation", "animation"]
        },
        exportAs: ["matRipple"]
      });

      MatRipple.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_RIPPLE_GLOBAL_OPTIONS]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
          }]
        }];
      };

      MatRipple.propDecorators = {
        color: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleColor']
        }],
        unbounded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleUnbounded']
        }],
        centered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleCentered']
        }],
        radius: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleRadius']
        }],
        animation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleAnimation']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleDisabled']
        }],
        trigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['matRippleTrigger']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatRipple, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[mat-ripple], [matRipple]',
            exportAs: 'matRipple',
            host: {
              'class': 'mat-ripple',
              '[class.mat-ripple-unbounded]': 'unbounded'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_RIPPLE_GLOBAL_OPTIONS]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
            }]
          }];
        }, {
          radius: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleRadius']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleDisabled']
          }],
          trigger: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleTrigger']
          }],
          color: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleColor']
          }],
          unbounded: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleUnbounded']
          }],
          centered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleCentered']
          }],
          animation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['matRippleAnimation']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatRippleModule = function MatRippleModule() {
        _classCallCheck(this, MatRippleModule);
      };

      MatRippleModule.ɵfac = function MatRippleModule_Factory(t) {
        return new (t || MatRippleModule)();
      };

      MatRippleModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatRippleModule
      });
      MatRippleModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]], MatCommonModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatRippleModule, {
          declarations: function declarations() {
            return [MatRipple];
          },
          imports: function imports() {
            return [MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]];
          },
          exports: function exports() {
            return [MatRipple, MatCommonModule];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatRippleModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["PlatformModule"]],
            exports: [MatRipple, MatCommonModule],
            declarations: [MatRipple]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Component that shows a simplified checkbox without including any kind of "real" checkbox.
       * Meant to be used when the checkbox is purely decorative and a large number of them will be
       * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
       * Note that theming is meant to be handled by the parent element, e.g.
       * `mat-primary .mat-pseudo-checkbox`.
       *
       * Note that this component will be completely invisible to screen-reader users. This is *not*
       * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
       * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
       * of more complex components that appropriately handle selected / checked state.
       * @docs-private
       */


      var MatPseudoCheckbox = function MatPseudoCheckbox(_animationMode) {
        _classCallCheck(this, MatPseudoCheckbox);

        this._animationMode = _animationMode;
        /** Display state of the checkbox. */

        this.state = 'unchecked';
        /** Whether the checkbox is disabled. */

        this.disabled = false;
      };

      MatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) {
        return new (t || MatPseudoCheckbox)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"], 8));
      };

      MatPseudoCheckbox.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatPseudoCheckbox,
        selectors: [["mat-pseudo-checkbox"]],
        hostAttrs: [1, "mat-pseudo-checkbox"],
        hostVars: 8,
        hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-pseudo-checkbox-indeterminate", ctx.state === "indeterminate")("mat-pseudo-checkbox-checked", ctx.state === "checked")("mat-pseudo-checkbox-disabled", ctx.disabled)("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          }
        },
        inputs: {
          state: "state",
          disabled: "disabled"
        },
        decls: 0,
        vars: 0,
        template: function MatPseudoCheckbox_Template(rf, ctx) {},
        styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      MatPseudoCheckbox.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
          }]
        }];
      };

      MatPseudoCheckbox.propDecorators = {
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatPseudoCheckbox, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            selector: 'mat-pseudo-checkbox',
            template: '',
            host: {
              'class': 'mat-pseudo-checkbox',
              '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
              '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
              '[class.mat-pseudo-checkbox-disabled]': 'disabled',
              '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"'
            },
            styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"]
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
            }]
          }];
        }, {
          state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatPseudoCheckboxModule = function MatPseudoCheckboxModule() {
        _classCallCheck(this, MatPseudoCheckboxModule);
      };

      MatPseudoCheckboxModule.ɵfac = function MatPseudoCheckboxModule_Factory(t) {
        return new (t || MatPseudoCheckboxModule)();
      };

      MatPseudoCheckboxModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatPseudoCheckboxModule
      });
      MatPseudoCheckboxModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[MatCommonModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatPseudoCheckboxModule, {
          declarations: [MatPseudoCheckbox],
          imports: [MatCommonModule],
          exports: [MatPseudoCheckbox]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatPseudoCheckboxModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [MatCommonModule],
            exports: [MatPseudoCheckbox],
            declarations: [MatPseudoCheckbox]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection token used to provide the parent component to options.
       */


      var MAT_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_OPTION_PARENT_COMPONENT');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Notes on the accessibility pattern used for `mat-optgroup`.
      // The option group has two different "modes": regular and inert. The regular mode uses the
      // recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
      // pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete
      // under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
      // there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
      // VoiceOver on Safari won't read it out.
      // We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are
      // removed from the group, and we get the screen reader to read out the group label by mirroring it
      // inside an invisible element in the option. This is sub-optimal, because the screen reader will
      // repeat the group label on each navigation, whereas the default pattern only reads the group when
      // the user enters a new group. The following alternate approaches were considered:
      // 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
      //    when the text will be read out so sometimes it comes in too late or never if the user
      //    navigates quickly.
      // 2. `<mat-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
      //    won't read out the description at all.
      // 3. `<mat-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
      //     doesn't read out the text at all. Furthermore, on
      // Boilerplate for applying mixins to MatOptgroup.

      /** @docs-private */

      var MatOptgroupBase = function MatOptgroupBase() {
        _classCallCheck(this, MatOptgroupBase);
      };

      var _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase); // Counter for unique group ids.


      var _uniqueOptgroupIdCounter = 0;

      var _MatOptgroupBase = /*#__PURE__*/function (_MatOptgroupMixinBase2) {
        _inherits(_MatOptgroupBase, _MatOptgroupMixinBase2);

        var _super58 = _createSuper(_MatOptgroupBase);

        function _MatOptgroupBase(parent) {
          var _this85;

          _classCallCheck(this, _MatOptgroupBase);

          var _a;

          _this85 = _super58.call(this);
          /** Unique id for the underlying label. */

          _this85._labelId = "mat-optgroup-label-".concat(_uniqueOptgroupIdCounter++);
          _this85._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;
          return _this85;
        }

        return _MatOptgroupBase;
      }(_MatOptgroupMixinBase);

      _MatOptgroupBase.ɵfac = function _MatOptgroupBase_Factory(t) {
        return new (t || _MatOptgroupBase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTION_PARENT_COMPONENT, 8));
      };

      _MatOptgroupBase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _MatOptgroupBase,
        inputs: {
          label: "label"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      _MatOptgroupBase.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_OPTION_PARENT_COMPONENT]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }];
      };

      _MatOptgroupBase.propDecorators = {
        label: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatOptgroupBase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_OPTION_PARENT_COMPONENT]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }];
        }, {
          label: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * Injection token that can be used to reference instances of `MatOptgroup`. It serves as
       * alternative token to the actual `MatOptgroup` class which could cause unnecessary
       * retention of the class and its component metadata.
       */


      var MAT_OPTGROUP = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MatOptgroup');
      /**
       * Component that is used to group instances of `mat-option`.
       */

      var MatOptgroup = /*#__PURE__*/function (_MatOptgroupBase2) {
        _inherits(MatOptgroup, _MatOptgroupBase2);

        var _super59 = _createSuper(MatOptgroup);

        function MatOptgroup() {
          _classCallCheck(this, MatOptgroup);

          return _super59.apply(this, arguments);
        }

        return MatOptgroup;
      }(_MatOptgroupBase);

      MatOptgroup.ɵfac = function MatOptgroup_Factory(t) {
        return ɵMatOptgroup_BaseFactory(t || MatOptgroup);
      };

      MatOptgroup.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatOptgroup,
        selectors: [["mat-optgroup"]],
        hostAttrs: [1, "mat-optgroup"],
        hostVars: 5,
        hostBindings: function MatOptgroup_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", ctx._inert ? null : "group")("aria-disabled", ctx._inert ? null : ctx.disabled.toString())("aria-labelledby", ctx._inert ? null : ctx._labelId);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-optgroup-disabled", ctx.disabled);
          }
        },
        inputs: {
          disabled: "disabled"
        },
        exportAs: ["matOptgroup"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: MAT_OPTGROUP,
          useExisting: MatOptgroup
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c1,
        decls: 4,
        vars: 2,
        consts: [["aria-hidden", "true", 1, "mat-optgroup-label", 3, "id"]],
        template: function MatOptgroup_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 1);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx._labelId);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx.label, " ");
          }
        },
        styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      var ɵMatOptgroup_BaseFactory = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatOptgroup);

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatOptgroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-optgroup',
            exportAs: 'matOptgroup',
            template: "<span class=\"mat-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }} <ng-content></ng-content></span>\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            inputs: ['disabled'],
            host: {
              'class': 'mat-optgroup',
              '[attr.role]': '_inert ? null : "group"',
              '[attr.aria-disabled]': '_inert ? null : disabled.toString()',
              '[attr.aria-labelledby]': '_inert ? null : _labelId',
              '[class.mat-optgroup-disabled]': 'disabled'
            },
            providers: [{
              provide: MAT_OPTGROUP,
              useExisting: MatOptgroup
            }],
            styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Option IDs need to be unique across components, so this counter exists outside of
       * the component definition.
       */


      var _uniqueIdCounter = 0;
      /** Event object emitted by MatOption when selected or deselected. */

      var MatOptionSelectionChange = function MatOptionSelectionChange(
      /** Reference to the option that emitted the event. */
      source) {
        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _classCallCheck(this, MatOptionSelectionChange);

        this.source = source;
        this.isUserInput = isUserInput;
      };

      var _MatOptionBase = /*#__PURE__*/function () {
        function _MatOptionBase(_element, _changeDetectorRef, _parent, group) {
          _classCallCheck(this, _MatOptionBase);

          this._element = _element;
          this._changeDetectorRef = _changeDetectorRef;
          this._parent = _parent;
          this.group = group;
          this._selected = false;
          this._active = false;
          this._disabled = false;
          this._mostRecentViewValue = '';
          /** The unique ID of the option. */

          this.id = "mat-option-".concat(_uniqueIdCounter++);
          /** Event emitted when the option is selected or deselected. */
          // tslint:disable-next-line:no-output-on-prefix

          this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the state of the option changes and any parents have to be notified. */

          this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        }
        /** Whether the wrapping component is in multiple selection mode. */


        _createClass2(_MatOptionBase, [{
          key: "multiple",
          get: function get() {
            return this._parent && this._parent.multiple;
          }
          /** Whether or not the option is currently selected. */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /** Whether the option is disabled. */

        }, {
          key: "disabled",
          get: function get() {
            return this.group && this.group.disabled || this._disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /** Whether ripples for the option are disabled. */

        }, {
          key: "disableRipple",
          get: function get() {
            return this._parent && this._parent.disableRipple;
          }
          /**
           * Whether or not the option is currently active and ready to be selected.
           * An active option displays styles as if it is focused, but the
           * focus is actually retained somewhere else. This comes in handy
           * for components like autocomplete where focus must remain on the input.
           */

        }, {
          key: "active",
          get: function get() {
            return this._active;
          }
          /**
           * The displayed value of the option. It is necessary to show the selected option in the
           * select's trigger.
           */

        }, {
          key: "viewValue",
          get: function get() {
            // TODO(kara): Add input property alternative for node envs.
            return (this._getHostElement().textContent || '').trim();
          }
          /** Selects the option. */

        }, {
          key: "select",
          value: function select() {
            if (!this._selected) {
              this._selected = true;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent();
            }
          }
          /** Deselects the option. */

        }, {
          key: "deselect",
          value: function deselect() {
            if (this._selected) {
              this._selected = false;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent();
            }
          }
          /** Sets focus onto this option. */

        }, {
          key: "focus",
          value: function focus(_origin, options) {
            // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
            // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
            var element = this._getHostElement();

            if (typeof element.focus === 'function') {
              element.focus(options);
            }
          }
          /**
           * This method sets display styles on the option to make it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           */

        }, {
          key: "setActiveStyles",
          value: function setActiveStyles() {
            if (!this._active) {
              this._active = true;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * This method removes display styles on the option that made it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           */

        }, {
          key: "setInactiveStyles",
          value: function setInactiveStyles() {
            if (this._active) {
              this._active = false;

              this._changeDetectorRef.markForCheck();
            }
          }
          /** Gets the label to be used when determining whether the option should be focused. */

        }, {
          key: "getLabel",
          value: function getLabel() {
            return this.viewValue;
          }
          /** Ensures the option is selected when activated from the keyboard. */

        }, {
          key: "_handleKeydown",
          value: function _handleKeydown(event) {
            if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]) && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["hasModifierKey"])(event)) {
              this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.


              event.preventDefault();
            }
          }
          /**
           * `Selects the option while indicating the selection came from the user. Used to
           * determine if the select's view -> model callback should be invoked.`
           */

        }, {
          key: "_selectViaInteraction",
          value: function _selectViaInteraction() {
            if (!this.disabled) {
              this._selected = this.multiple ? !this._selected : true;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent(true);
            }
          }
          /**
           * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
           * attribute from single-selection, unselected options. Including the `aria-selected="false"`
           * attributes adds a significant amount of noise to screen-reader users without providing useful
           * information.
           */

        }, {
          key: "_getAriaSelected",
          value: function _getAriaSelected() {
            return this.selected || (this.multiple ? false : null);
          }
          /** Returns the correct tabindex for the option depending on disabled state. */

        }, {
          key: "_getTabIndex",
          value: function _getTabIndex() {
            return this.disabled ? '-1' : '0';
          }
          /** Gets the host DOM element. */

        }, {
          key: "_getHostElement",
          value: function _getHostElement() {
            return this._element.nativeElement;
          }
        }, {
          key: "ngAfterViewChecked",
          value: function ngAfterViewChecked() {
            // Since parent components could be using the option's label to display the selected values
            // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
            // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
            // relatively cheap, however we still limit them only to selected options in order to avoid
            // hitting the DOM too often.
            if (this._selected) {
              var viewValue = this.viewValue;

              if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;

                this._stateChanges.next();
              }
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._stateChanges.complete();
          }
          /** Emits the selection change event. */

        }, {
          key: "_emitSelectionChangeEvent",
          value: function _emitSelectionChangeEvent() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
          }
        }]);

        return _MatOptionBase;
      }();

      _MatOptionBase.ɵfac = function _MatOptionBase_Factory(t) {
        return new (t || _MatOptionBase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](undefined), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatOptgroupBase));
      };

      _MatOptionBase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _MatOptionBase,
        inputs: {
          id: "id",
          disabled: "disabled",
          value: "value"
        },
        outputs: {
          onSelectionChange: "onSelectionChange"
        }
      });

      _MatOptionBase.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: undefined
        }, {
          type: _MatOptgroupBase
        }];
      };

      _MatOptionBase.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        onSelectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatOptionBase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }, {
            type: undefined
          }, {
            type: _MatOptgroupBase
          }];
        }, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          onSelectionChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * Single option inside of a `<mat-select>` element.
       */


      var MatOption = /*#__PURE__*/function (_MatOptionBase2) {
        _inherits(MatOption, _MatOptionBase2);

        var _super60 = _createSuper(MatOption);

        function MatOption(element, changeDetectorRef, parent, group) {
          _classCallCheck(this, MatOption);

          return _super60.call(this, element, changeDetectorRef, parent, group);
        }

        return MatOption;
      }(_MatOptionBase);

      MatOption.ɵfac = function MatOption_Factory(t) {
        return new (t || MatOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTION_PARENT_COMPONENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTGROUP, 8));
      };

      MatOption.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatOption,
        selectors: [["mat-option"]],
        hostAttrs: ["role", "option", 1, "mat-option", "mat-focus-indicator"],
        hostVars: 12,
        hostBindings: function MatOption_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MatOption_click_HostBindingHandler() {
              return ctx._selectViaInteraction();
            })("keydown", function MatOption_keydown_HostBindingHandler($event) {
              return ctx._handleKeydown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx._getTabIndex())("aria-selected", ctx._getAriaSelected())("aria-disabled", ctx.disabled.toString());

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-selected", ctx.selected)("mat-option-multiple", ctx.multiple)("mat-active", ctx.active)("mat-option-disabled", ctx.disabled);
          }
        },
        exportAs: ["matOption"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c2,
        decls: 5,
        vars: 4,
        consts: [["class", "mat-option-pseudo-checkbox", 3, "state", "disabled", 4, "ngIf"], [1, "mat-option-text"], ["class", "cdk-visually-hidden", 4, "ngIf"], ["mat-ripple", "", 1, "mat-option-ripple", 3, "matRippleTrigger", "matRippleDisabled"], [1, "mat-option-pseudo-checkbox", 3, "state", "disabled"], [1, "cdk-visually-hidden"]],
        template: function MatOption_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, "mat-pseudo-checkbox", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, MatOption_span_3_Template, 2, 1, "span", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 3);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.multiple);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.group && ctx.group._inert);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matRippleTrigger", ctx._getHostElement())("matRippleDisabled", ctx.disabled || ctx.disableRipple);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["NgIf"], MatRipple, MatPseudoCheckbox],
        styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"],
        encapsulation: 2,
        changeDetection: 0
      });

      MatOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_OPTION_PARENT_COMPONENT]
          }]
        }, {
          type: MatOptgroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_OPTGROUP]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-option',
            exportAs: 'matOption',
            host: {
              'role': 'option',
              '[attr.tabindex]': '_getTabIndex()',
              '[class.mat-selected]': 'selected',
              '[class.mat-option-multiple]': 'multiple',
              '[class.mat-active]': 'active',
              '[id]': 'id',
              '[attr.aria-selected]': '_getAriaSelected()',
              '[attr.aria-disabled]': 'disabled.toString()',
              '[class.mat-option-disabled]': 'disabled',
              '(click)': '_selectViaInteraction()',
              '(keydown)': '_handleKeydown($event)',
              'class': 'mat-option mat-focus-indicator'
            },
            template: "<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-option-pseudo-checkbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></mat-pseudo-checkbox>\n\n<span class=\"mat-option-text\"><ng-content></ng-content></span>\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._inert\">({{ group.label }})</span>\n\n<div class=\"mat-option-ripple\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\"\n     [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_OPTION_PARENT_COMPONENT]
            }]
          }, {
            type: MatOptgroup,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_OPTGROUP]
            }]
          }];
        }, null);
      })();
      /**
       * Counts the amount of option group labels that precede the specified option.
       * @param optionIndex Index of the option at which to start counting.
       * @param options Flat list of all of the options.
       * @param optionGroups Flat list of all of the option groups.
       * @docs-private
       */


      function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
        if (optionGroups.length) {
          var optionsArray = options.toArray();
          var groups = optionGroups.toArray();
          var groupCounter = 0;

          for (var i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
              groupCounter++;
            }
          }

          return groupCounter;
        }

        return 0;
      }
      /**
       * Determines the position to which to scroll a panel in order for an option to be into view.
       * @param optionOffset Offset of the option from the top of the panel.
       * @param optionHeight Height of the options.
       * @param currentScrollPosition Current scroll position of the panel.
       * @param panelHeight Height of the panel.
       * @docs-private
       */


      function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
        if (optionOffset < currentScrollPosition) {
          return optionOffset;
        }

        if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
          return Math.max(0, optionOffset - panelHeight + optionHeight);
        }

        return currentScrollPosition;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatOptionModule = function MatOptionModule() {
        _classCallCheck(this, MatOptionModule);
      };

      MatOptionModule.ɵfac = function MatOptionModule_Factory(t) {
        return new (t || MatOptionModule)();
      };

      MatOptionModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatOptionModule
      });
      MatOptionModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], MatCommonModule, MatPseudoCheckboxModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatOptionModule, {
          declarations: function declarations() {
            return [MatOption, MatOptgroup];
          },
          imports: function imports() {
            return [MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], MatCommonModule, MatPseudoCheckboxModule];
          },
          exports: function exports() {
            return [MatOption, MatOptgroup];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatOptionModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], MatCommonModule, MatPseudoCheckboxModule],
            exports: [MatOption, MatOptgroup],
            declarations: [MatOption, MatOptgroup]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=core.js.map

      /***/

    },

    /***/
    "FQpF":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/expand.js ***!
      \*****************************************************************/

    /*! exports provided: expand, ExpandOperator, ExpandSubscriber */

    /***/
    function FQpF(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "expand", function () {
        return expand;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpandOperator", function () {
        return ExpandOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExpandSubscriber", function () {
        return ExpandSubscriber;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function expand(project) {
        var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
        var scheduler = arguments.length > 2 ? arguments[2] : undefined;
        concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
        return function (source) {
          return source.lift(new ExpandOperator(project, concurrent, scheduler));
        };
      }

      var ExpandOperator = /*#__PURE__*/function () {
        function ExpandOperator(project, concurrent, scheduler) {
          _classCallCheck(this, ExpandOperator);

          this.project = project;
          this.concurrent = concurrent;
          this.scheduler = scheduler;
        }

        _createClass2(ExpandOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
          }
        }]);

        return ExpandOperator;
      }();

      var ExpandSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP7) {
        _inherits(ExpandSubscriber, _innerSubscribe__WEBP7);

        var _super61 = _createSuper(ExpandSubscriber);

        function ExpandSubscriber(destination, project, concurrent, scheduler) {
          var _this86;

          _classCallCheck(this, ExpandSubscriber);

          _this86 = _super61.call(this, destination);
          _this86.project = project;
          _this86.concurrent = concurrent;
          _this86.scheduler = scheduler;
          _this86.index = 0;
          _this86.active = 0;
          _this86.hasCompleted = false;

          if (concurrent < Number.POSITIVE_INFINITY) {
            _this86.buffer = [];
          }

          return _this86;
        }

        _createClass2(ExpandSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var destination = this.destination;

            if (destination.closed) {
              this._complete();

              return;
            }

            var index = this.index++;

            if (this.active < this.concurrent) {
              destination.next(value);

              try {
                var project = this.project;
                var result = project(value, index);

                if (!this.scheduler) {
                  this.subscribeToProjection(result, value, index);
                } else {
                  var state = {
                    subscriber: this,
                    result: result,
                    value: value,
                    index: index
                  };
                  var _destination = this.destination;

                  _destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
              } catch (e) {
                destination.error(e);
              }
            } else {
              this.buffer.push(value);
            }
          }
        }, {
          key: "subscribeToProjection",
          value: function subscribeToProjection(result, value, index) {
            this.active++;
            var destination = this.destination;
            destination.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(result, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this)));
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (this.hasCompleted && this.active === 0) {
              this.destination.complete();
            }

            this.unsubscribe();
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this._next(innerValue);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            var buffer = this.buffer;
            this.active--;

            if (buffer && buffer.length > 0) {
              this._next(buffer.shift());
            }

            if (this.hasCompleted && this.active === 0) {
              this.destination.complete();
            }
          }
        }], [{
          key: "dispatch",
          value: function dispatch(arg) {
            var subscriber = arg.subscriber,
                result = arg.result,
                value = arg.value,
                index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
          }
        }]);

        return ExpandSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=expand.js.map

      /***/

    },

    /***/
    "FZB8":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/min.js ***!
      \**************************************************************/

    /*! exports provided: min */

    /***/
    function FZB8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "min", function () {
        return min;
      });
      /* harmony import */


      var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./reduce */
      "128B");

      function min(comparer) {
        var min = typeof comparer === 'function' ? function (x, y) {
          return comparer(x, y) < 0 ? x : y;
        } : function (x, y) {
          return x < y ? x : y;
        };
        return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(min);
      } //# sourceMappingURL=min.js.map

      /***/

    },

    /***/
    "FtGj":
    /*!*********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/keycodes.js ***!
      \*********************************************************************/

    /*! exports provided: A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey */

    /***/
    function FtGj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "A", function () {
        return A;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ALT", function () {
        return ALT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function () {
        return APOSTROPHE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AT_SIGN", function () {
        return AT_SIGN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "B", function () {
        return B;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BACKSLASH", function () {
        return BACKSLASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BACKSPACE", function () {
        return BACKSPACE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "C", function () {
        return C;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function () {
        return CAPS_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function () {
        return CLOSE_SQUARE_BRACKET;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "COMMA", function () {
        return COMMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function () {
        return CONTEXT_MENU;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CONTROL", function () {
        return CONTROL;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "D", function () {
        return D;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DASH", function () {
        return DASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DELETE", function () {
        return DELETE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function () {
        return DOWN_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "E", function () {
        return E;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EIGHT", function () {
        return EIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "END", function () {
        return END;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ENTER", function () {
        return ENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EQUALS", function () {
        return EQUALS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ESCAPE", function () {
        return ESCAPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F", function () {
        return F;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F1", function () {
        return F1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F10", function () {
        return F10;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F11", function () {
        return F11;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F12", function () {
        return F12;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F2", function () {
        return F2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F3", function () {
        return F3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F4", function () {
        return F4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F5", function () {
        return F5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F6", function () {
        return F6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F7", function () {
        return F7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F8", function () {
        return F8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F9", function () {
        return F9;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function () {
        return FF_EQUALS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_MINUS", function () {
        return FF_MINUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_MUTE", function () {
        return FF_MUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function () {
        return FF_SEMICOLON;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function () {
        return FF_VOLUME_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function () {
        return FF_VOLUME_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function () {
        return FIRST_MEDIA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FIVE", function () {
        return FIVE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FOUR", function () {
        return FOUR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "G", function () {
        return G;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "H", function () {
        return H;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOME", function () {
        return HOME;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "I", function () {
        return I;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "INSERT", function () {
        return INSERT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "J", function () {
        return J;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "K", function () {
        return K;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "L", function () {
        return L;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function () {
        return LAST_MEDIA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function () {
        return LEFT_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "M", function () {
        return M;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function () {
        return MAC_ENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_META", function () {
        return MAC_META;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function () {
        return MAC_WK_CMD_LEFT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function () {
        return MAC_WK_CMD_RIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "META", function () {
        return META;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MUTE", function () {
        return MUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "N", function () {
        return N;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NINE", function () {
        return NINE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function () {
        return NUMPAD_DIVIDE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function () {
        return NUMPAD_EIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function () {
        return NUMPAD_FIVE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function () {
        return NUMPAD_FOUR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function () {
        return NUMPAD_MINUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function () {
        return NUMPAD_MULTIPLY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function () {
        return NUMPAD_NINE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function () {
        return NUMPAD_ONE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function () {
        return NUMPAD_PERIOD;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function () {
        return NUMPAD_PLUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function () {
        return NUMPAD_SEVEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function () {
        return NUMPAD_SIX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function () {
        return NUMPAD_THREE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function () {
        return NUMPAD_TWO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function () {
        return NUMPAD_ZERO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function () {
        return NUM_CENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function () {
        return NUM_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "O", function () {
        return O;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ONE", function () {
        return ONE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function () {
        return OPEN_SQUARE_BRACKET;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "P", function () {
        return P;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function () {
        return PAGE_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAGE_UP", function () {
        return PAGE_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAUSE", function () {
        return PAUSE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function () {
        return PLUS_SIGN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function () {
        return PRINT_SCREEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Q", function () {
        return Q;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function () {
        return QUESTION_MARK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R", function () {
        return R;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function () {
        return RIGHT_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "S", function () {
        return S;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function () {
        return SCROLL_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SEMICOLON", function () {
        return SEMICOLON;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SEVEN", function () {
        return SEVEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SHIFT", function () {
        return SHIFT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function () {
        return SINGLE_QUOTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SIX", function () {
        return SIX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SLASH", function () {
        return SLASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SPACE", function () {
        return SPACE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "T", function () {
        return T;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TAB", function () {
        return TAB;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "THREE", function () {
        return THREE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TILDE", function () {
        return TILDE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TWO", function () {
        return TWO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "U", function () {
        return U;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UP_ARROW", function () {
        return UP_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "V", function () {
        return V;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function () {
        return VOLUME_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function () {
        return VOLUME_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "W", function () {
        return W;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "X", function () {
        return X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Y", function () {
        return Y;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Z", function () {
        return Z;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ZERO", function () {
        return ZERO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hasModifierKey", function () {
        return hasModifierKey;
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MAC_ENTER = 3;
      var BACKSPACE = 8;
      var TAB = 9;
      var NUM_CENTER = 12;
      var ENTER = 13;
      var SHIFT = 16;
      var CONTROL = 17;
      var ALT = 18;
      var PAUSE = 19;
      var CAPS_LOCK = 20;
      var ESCAPE = 27;
      var SPACE = 32;
      var PAGE_UP = 33;
      var PAGE_DOWN = 34;
      var END = 35;
      var HOME = 36;
      var LEFT_ARROW = 37;
      var UP_ARROW = 38;
      var RIGHT_ARROW = 39;
      var DOWN_ARROW = 40;
      var PLUS_SIGN = 43;
      var PRINT_SCREEN = 44;
      var INSERT = 45;
      var DELETE = 46;
      var ZERO = 48;
      var ONE = 49;
      var TWO = 50;
      var THREE = 51;
      var FOUR = 52;
      var FIVE = 53;
      var SIX = 54;
      var SEVEN = 55;
      var EIGHT = 56;
      var NINE = 57;
      var FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

      var FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

      var QUESTION_MARK = 63;
      var AT_SIGN = 64;
      var A = 65;
      var B = 66;
      var C = 67;
      var D = 68;
      var E = 69;
      var F = 70;
      var G = 71;
      var H = 72;
      var I = 73;
      var J = 74;
      var K = 75;
      var L = 76;
      var M = 77;
      var N = 78;
      var O = 79;
      var P = 80;
      var Q = 81;
      var R = 82;
      var S = 83;
      var T = 84;
      var U = 85;
      var V = 86;
      var W = 87;
      var X = 88;
      var Y = 89;
      var Z = 90;
      var META = 91; // WIN_KEY_LEFT

      var MAC_WK_CMD_LEFT = 91;
      var MAC_WK_CMD_RIGHT = 93;
      var CONTEXT_MENU = 93;
      var NUMPAD_ZERO = 96;
      var NUMPAD_ONE = 97;
      var NUMPAD_TWO = 98;
      var NUMPAD_THREE = 99;
      var NUMPAD_FOUR = 100;
      var NUMPAD_FIVE = 101;
      var NUMPAD_SIX = 102;
      var NUMPAD_SEVEN = 103;
      var NUMPAD_EIGHT = 104;
      var NUMPAD_NINE = 105;
      var NUMPAD_MULTIPLY = 106;
      var NUMPAD_PLUS = 107;
      var NUMPAD_MINUS = 109;
      var NUMPAD_PERIOD = 110;
      var NUMPAD_DIVIDE = 111;
      var F1 = 112;
      var F2 = 113;
      var F3 = 114;
      var F4 = 115;
      var F5 = 116;
      var F6 = 117;
      var F7 = 118;
      var F8 = 119;
      var F9 = 120;
      var F10 = 121;
      var F11 = 122;
      var F12 = 123;
      var NUM_LOCK = 144;
      var SCROLL_LOCK = 145;
      var FIRST_MEDIA = 166;
      var FF_MINUS = 173;
      var MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

      var VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

      var VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

      var FF_MUTE = 181;
      var FF_VOLUME_DOWN = 182;
      var LAST_MEDIA = 183;
      var FF_VOLUME_UP = 183;
      var SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

      var EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

      var COMMA = 188;
      var DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

      var SLASH = 191;
      var APOSTROPHE = 192;
      var TILDE = 192;
      var OPEN_SQUARE_BRACKET = 219;
      var BACKSLASH = 220;
      var CLOSE_SQUARE_BRACKET = 221;
      var SINGLE_QUOTE = 222;
      var MAC_META = 224;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Checks whether a modifier key is pressed.
       * @param event Event to be checked.
       */

      function hasModifierKey(event) {
        for (var _len14 = arguments.length, modifiers = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
          modifiers[_key14 - 1] = arguments[_key14];
        }

        if (modifiers.length) {
          return modifiers.some(function (modifier) {
            return event[modifier];
          });
        }

        return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=keycodes.js.map

      /***/

    },

    /***/
    "GJmQ":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js ***!
      \********************************************************************/

    /*! exports provided: takeWhile */

    /***/
    function GJmQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "takeWhile", function () {
        return takeWhile;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function takeWhile(predicate) {
        var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return function (source) {
          return source.lift(new TakeWhileOperator(predicate, inclusive));
        };
      }

      var TakeWhileOperator = /*#__PURE__*/function () {
        function TakeWhileOperator(predicate, inclusive) {
          _classCallCheck(this, TakeWhileOperator);

          this.predicate = predicate;
          this.inclusive = inclusive;
        }

        _createClass2(TakeWhileOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
          }
        }]);

        return TakeWhileOperator;
      }();

      var TakeWhileSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_14) {
        _inherits(TakeWhileSubscriber, _Subscriber__WEBPACK_14);

        var _super62 = _createSuper(TakeWhileSubscriber);

        function TakeWhileSubscriber(destination, predicate, inclusive) {
          var _this87;

          _classCallCheck(this, TakeWhileSubscriber);

          _this87 = _super62.call(this, destination);
          _this87.predicate = predicate;
          _this87.inclusive = inclusive;
          _this87.index = 0;
          return _this87;
        }

        _createClass2(TakeWhileSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var destination = this.destination;
            var result;

            try {
              result = this.predicate(value, this.index++);
            } catch (err) {
              destination.error(err);
              return;
            }

            this.nextOrComplete(value, result);
          }
        }, {
          key: "nextOrComplete",
          value: function nextOrComplete(value, predicateResult) {
            var destination = this.destination;

            if (Boolean(predicateResult)) {
              destination.next(value);
            } else {
              if (this.inclusive) {
                destination.next(value);
              }

              destination.complete();
            }
          }
        }]);

        return TakeWhileSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=takeWhile.js.map

      /***/

    },

    /***/
    "GU7r":
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/observers.js ***!
      \**********************************************************************/

    /*! exports provided: CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule */

    /***/
    function GU7r(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkObserveContent", function () {
        return CdkObserveContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContentObserver", function () {
        return ContentObserver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MutationObserverFactory", function () {
        return MutationObserverFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ObserversModule", function () {
        return ObserversModule;
      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
       * @docs-private
       */


      var MutationObserverFactory = /*#__PURE__*/function () {
        function MutationObserverFactory() {
          _classCallCheck(this, MutationObserverFactory);
        }

        _createClass2(MutationObserverFactory, [{
          key: "create",
          value: function create(callback) {
            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
          }
        }]);

        return MutationObserverFactory;
      }();

      MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {
        return new (t || MutationObserverFactory)();
      };

      MutationObserverFactory.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function MutationObserverFactory_Factory() {
          return new MutationObserverFactory();
        },
        token: MutationObserverFactory,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MutationObserverFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /** An injectable service that allows watching elements for changes to their content. */


      var ContentObserver = /*#__PURE__*/function () {
        function ContentObserver(_mutationObserverFactory) {
          _classCallCheck(this, ContentObserver);

          this._mutationObserverFactory = _mutationObserverFactory;
          /** Keeps track of the existing MutationObservers so they can be reused. */

          this._observedElements = new Map();
        }

        _createClass2(ContentObserver, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this88 = this;

            this._observedElements.forEach(function (_, element) {
              return _this88._cleanupObserver(element);
            });
          }
        }, {
          key: "observe",
          value: function observe(elementOrRef) {
            var _this89 = this;

            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceElement"])(elementOrRef);
            return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](function (observer) {
              var stream = _this89._observeElement(element);

              var subscription = stream.subscribe(observer);
              return function () {
                subscription.unsubscribe();

                _this89._unobserveElement(element);
              };
            });
          }
          /**
           * Observes the given element by using the existing MutationObserver if available, or creating a
           * new one if not.
           */

        }, {
          key: "_observeElement",
          value: function _observeElement(element) {
            if (!this._observedElements.has(element)) {
              var stream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();

              var observer = this._mutationObserverFactory.create(function (mutations) {
                return stream.next(mutations);
              });

              if (observer) {
                observer.observe(element, {
                  characterData: true,
                  childList: true,
                  subtree: true
                });
              }

              this._observedElements.set(element, {
                observer: observer,
                stream: stream,
                count: 1
              });
            } else {
              this._observedElements.get(element).count++;
            }

            return this._observedElements.get(element).stream;
          }
          /**
           * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
           * observing this element.
           */

        }, {
          key: "_unobserveElement",
          value: function _unobserveElement(element) {
            if (this._observedElements.has(element)) {
              this._observedElements.get(element).count--;

              if (!this._observedElements.get(element).count) {
                this._cleanupObserver(element);
              }
            }
          }
          /** Clean up the underlying MutationObserver for the specified element. */

        }, {
          key: "_cleanupObserver",
          value: function _cleanupObserver(element) {
            if (this._observedElements.has(element)) {
              var _this$_observedElemen = this._observedElements.get(element),
                  observer = _this$_observedElemen.observer,
                  stream = _this$_observedElemen.stream;

              if (observer) {
                observer.disconnect();
              }

              stream.complete();

              this._observedElements["delete"](element);
            }
          }
        }]);

        return ContentObserver;
      }();

      ContentObserver.ɵfac = function ContentObserver_Factory(t) {
        return new (t || ContentObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](MutationObserverFactory));
      };

      ContentObserver.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function ContentObserver_Factory() {
          return new ContentObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MutationObserverFactory));
        },
        token: ContentObserver,
        providedIn: "root"
      });

      ContentObserver.ctorParameters = function () {
        return [{
          type: MutationObserverFactory
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ContentObserver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: MutationObserverFactory
          }];
        }, null);
      })();
      /**
       * Directive that triggers a callback whenever the content of
       * its associated element has changed.
       */


      var CdkObserveContent = /*#__PURE__*/function () {
        function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
          _classCallCheck(this, CdkObserveContent);

          this._contentObserver = _contentObserver;
          this._elementRef = _elementRef;
          this._ngZone = _ngZone;
          /** Event emitted for each change in the element's content. */

          this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this._disabled = false;
          this._currentSubscription = null;
        }
        /**
         * Whether observing content is disabled. This option can be used
         * to disconnect the underlying MutationObserver until it is needed.
         */


        _createClass2(CdkObserveContent, [{
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
            this._disabled ? this._unsubscribe() : this._subscribe();
          }
          /** Debounce interval for emitting the changes. */

        }, {
          key: "debounce",
          get: function get() {
            return this._debounce;
          },
          set: function set(value) {
            this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);

            this._subscribe();
          }
        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            if (!this._currentSubscription && !this.disabled) {
              this._subscribe();
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._unsubscribe();
          }
        }, {
          key: "_subscribe",
          value: function _subscribe() {
            var _this90 = this;

            this._unsubscribe();

            var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
            // Consider brining it back inside the zone next time we're making breaking changes.
            // Bringing it back inside can cause things like infinite change detection loops and changed
            // after checked errors if people's code isn't handling it properly.


            this._ngZone.runOutsideAngular(function () {
              _this90._currentSubscription = (_this90.debounce ? stream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(_this90.debounce)) : stream).subscribe(_this90.event);
            });
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var _a;

            (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
          }
        }]);

        return CdkObserveContent;
      }();

      CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {
        return new (t || CdkObserveContent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      CdkObserveContent.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: CdkObserveContent,
        selectors: [["", "cdkObserveContent", ""]],
        inputs: {
          disabled: ["cdkObserveContentDisabled", "disabled"],
          debounce: "debounce"
        },
        outputs: {
          event: "cdkObserveContent"
        },
        exportAs: ["cdkObserveContent"]
      });

      CdkObserveContent.ctorParameters = function () {
        return [{
          type: ContentObserver
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      CdkObserveContent.propDecorators = {
        event: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
          args: ['cdkObserveContent']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkObserveContentDisabled']
        }],
        debounce: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkObserveContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[cdkObserveContent]',
            exportAs: 'cdkObserveContent'
          }]
        }], function () {
          return [{
            type: ContentObserver
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, {
          event: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['cdkObserveContent']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['cdkObserveContentDisabled']
          }],
          debounce: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();

      var ObserversModule = function ObserversModule() {
        _classCallCheck(this, ObserversModule);
      };

      ObserversModule.ɵfac = function ObserversModule_Factory(t) {
        return new (t || ObserversModule)();
      };

      ObserversModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: ObserversModule
      });
      ObserversModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: [MutationObserverFactory]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](ObserversModule, {
          declarations: [CdkObserveContent],
          exports: [CdkObserveContent]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ObserversModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            exports: [CdkObserveContent],
            declarations: [CdkObserveContent],
            providers: [MutationObserverFactory]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=observers.js.map

      /***/

    },

    /***/
    "Gi4w":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/every.js ***!
      \****************************************************************/

    /*! exports provided: every */

    /***/
    function Gi4w(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "every", function () {
        return every;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function every(predicate, thisArg) {
        return function (source) {
          return source.lift(new EveryOperator(predicate, thisArg, source));
        };
      }

      var EveryOperator = /*#__PURE__*/function () {
        function EveryOperator(predicate, thisArg, source) {
          _classCallCheck(this, EveryOperator);

          this.predicate = predicate;
          this.thisArg = thisArg;
          this.source = source;
        }

        _createClass2(EveryOperator, [{
          key: "call",
          value: function call(observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
          }
        }]);

        return EveryOperator;
      }();

      var EverySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_15) {
        _inherits(EverySubscriber, _Subscriber__WEBPACK_15);

        var _super63 = _createSuper(EverySubscriber);

        function EverySubscriber(destination, predicate, thisArg, source) {
          var _this91;

          _classCallCheck(this, EverySubscriber);

          _this91 = _super63.call(this, destination);
          _this91.predicate = predicate;
          _this91.thisArg = thisArg;
          _this91.source = source;
          _this91.index = 0;
          _this91.thisArg = thisArg || _assertThisInitialized(_this91);
          return _this91;
        }

        _createClass2(EverySubscriber, [{
          key: "notifyComplete",
          value: function notifyComplete(everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var result = false;

            try {
              result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            if (!result) {
              this.notifyComplete(false);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.notifyComplete(true);
          }
        }]);

        return EverySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=every.js.map

      /***/

    },

    /***/
    "GjHo":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/zip.js ***!
      \**************************************************************/

    /*! exports provided: zip */

    /***/
    function GjHo(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "zip", function () {
        return zip;
      });
      /* harmony import */


      var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/zip */
      "1uah");

      function zip() {
        for (var _len15 = arguments.length, observables = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
          observables[_key15] = arguments[_key15];
        }

        return function zipOperatorFunction(source) {
          return source.lift.call(Object(_observable_zip__WEBPACK_IMPORTED_MODULE_0__["zip"]).apply(void 0, [source].concat(observables)));
        };
      } //# sourceMappingURL=zip.js.map

      /***/

    },

    /***/
    "Gqsl":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js ***!
      \*********************************************************************/

    /*! exports provided: repeatWhen */

    /***/
    function Gqsl(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "repeatWhen", function () {
        return repeatWhen;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function repeatWhen(notifier) {
        return function (source) {
          return source.lift(new RepeatWhenOperator(notifier));
        };
      }

      var RepeatWhenOperator = /*#__PURE__*/function () {
        function RepeatWhenOperator(notifier) {
          _classCallCheck(this, RepeatWhenOperator);

          this.notifier = notifier;
        }

        _createClass2(RepeatWhenOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
          }
        }]);

        return RepeatWhenOperator;
      }();

      var RepeatWhenSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP8) {
        _inherits(RepeatWhenSubscriber, _innerSubscribe__WEBP8);

        var _super64 = _createSuper(RepeatWhenSubscriber);

        function RepeatWhenSubscriber(destination, notifier, source) {
          var _this92;

          _classCallCheck(this, RepeatWhenSubscriber);

          _this92 = _super64.call(this, destination);
          _this92.notifier = notifier;
          _this92.source = source;
          _this92.sourceIsBeingSubscribedTo = true;
          return _this92;
        }

        _createClass2(RepeatWhenSubscriber, [{
          key: "notifyNext",
          value: function notifyNext() {
            this.sourceIsBeingSubscribedTo = true;
            this.source.subscribe(this);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            if (this.sourceIsBeingSubscribedTo === false) {
              return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            this.sourceIsBeingSubscribedTo = false;

            if (!this.isStopped) {
              if (!this.retries) {
                this.subscribeToRetries();
              }

              if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
              }

              this._unsubscribeAndRecycle();

              this.notifications.next(undefined);
            }
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var notifications = this.notifications,
                retriesSubscription = this.retriesSubscription;

            if (notifications) {
              notifications.unsubscribe();
              this.notifications = undefined;
            }

            if (retriesSubscription) {
              retriesSubscription.unsubscribe();
              this.retriesSubscription = undefined;
            }

            this.retries = undefined;
          }
        }, {
          key: "_unsubscribeAndRecycle",
          value: function _unsubscribeAndRecycle() {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;

            _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "_unsubscribeAndRecycle", this).call(this);

            this._unsubscribe = _unsubscribe;
            return this;
          }
        }, {
          key: "subscribeToRetries",
          value: function subscribeToRetries() {
            this.notifications = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
            var retries;

            try {
              var notifier = this.notifier;
              retries = notifier(this.notifications);
            } catch (e) {
              return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
            }

            this.retries = retries;
            this.retriesSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["innerSubscribe"])(retries, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleInnerSubscriber"](this));
          }
        }]);

        return RepeatWhenSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleOuterSubscriber"]); //# sourceMappingURL=repeatWhen.js.map

      /***/

    },

    /***/
    "GyhO":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/concat.js ***!
      \******************************************************************/

    /*! exports provided: concat */

    /***/
    function GyhO(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "concat", function () {
        return concat;
      });
      /* harmony import */


      var _of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./of */
      "LRne");
      /* harmony import */


      var _operators_concatAll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../operators/concatAll */
      "0EUg");

      function concat() {
        return Object(_operators_concatAll__WEBPACK_IMPORTED_MODULE_1__["concatAll"])()(Object(_of__WEBPACK_IMPORTED_MODULE_0__["of"]).apply(void 0, arguments));
      } //# sourceMappingURL=concat.js.map

      /***/

    },

    /***/
    "HDdC":
    /*!***********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Observable.js ***!
      \***********************************************************/

    /*! exports provided: Observable */

    /***/
    function HDdC(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Observable", function () {
        return Observable;
      });
      /* harmony import */


      var _util_canReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./util/canReportError */
      "8Qeq");
      /* harmony import */


      var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/toSubscriber */
      "WyKG");
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./symbol/observable */
      "kJWO");
      /* harmony import */


      var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/pipe */
      "mCNh");
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./config */
      "2fFW");

      var Observable = /*#__PURE__*/function () {
        function Observable(subscribe) {
          _classCallCheck(this, Observable);

          this._isScalar = false;

          if (subscribe) {
            this._subscribe = subscribe;
          }
        }

        _createClass2(Observable, [{
          key: "lift",
          value: function lift(operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
          }
        }, {
          key: "subscribe",
          value: function subscribe(observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = Object(_util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__["toSubscriber"])(observerOrNext, error, complete);

            if (operator) {
              sink.add(operator.call(sink, this.source));
            } else {
              sink.add(this.source || _config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
            }

            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;

                if (sink.syncErrorThrown) {
                  throw sink.syncErrorValue;
                }
              }
            }

            return sink;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(sink) {
            try {
              return this._subscribe(sink);
            } catch (err) {
              if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
              }

              if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_0__["canReportError"])(sink)) {
                sink.error(err);
              } else {
                console.warn(err);
              }
            }
          }
        }, {
          key: "forEach",
          value: function forEach(next, promiseCtor) {
            var _this93 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this93.subscribe(function (value) {
                try {
                  next(value);
                } catch (err) {
                  reject(err);

                  if (subscription) {
                    subscription.unsubscribe();
                  }
                }
              }, reject, resolve);
            });
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
          }
        }, {
          key: _symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"],
          value: function value() {
            return this;
          }
        }, {
          key: "pipe",
          value: function pipe() {
            for (var _len16 = arguments.length, operations = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
              operations[_key16] = arguments[_key16];
            }

            if (operations.length === 0) {
              return this;
            }

            return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipeFromArray"])(operations)(this);
          }
        }, {
          key: "toPromise",
          value: function toPromise(promiseCtor) {
            var _this94 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var value;

              _this94.subscribe(function (x) {
                return value = x;
              }, function (err) {
                return reject(err);
              }, function () {
                return resolve(value);
              });
            });
          }
        }]);

        return Observable;
      }();

      Observable.create = function (subscribe) {
        return new Observable(subscribe);
      };

      function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
          promiseCtor = _config__WEBPACK_IMPORTED_MODULE_4__["config"].Promise || Promise;
        }

        if (!promiseCtor) {
          throw new Error('no Promise impl found');
        }

        return promiseCtor;
      } //# sourceMappingURL=Observable.js.map

      /***/

    },

    /***/
    "Hh5Z":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js ***!
      \*************************************************************************/

    /*! exports provided: QueueScheduler */

    /***/
    function Hh5Z(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "QueueScheduler", function () {
        return QueueScheduler;
      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      "IjjT");

      var QueueScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP) {
        _inherits(QueueScheduler, _AsyncScheduler__WEBP);

        var _super65 = _createSuper(QueueScheduler);

        function QueueScheduler() {
          _classCallCheck(this, QueueScheduler);

          return _super65.apply(this, arguments);
        }

        return QueueScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=QueueScheduler.js.map

      /***/

    },

    /***/
    "Hkhx":
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js ***!
      \*****************************************************************************/

    /*! exports provided: onErrorResumeNext */

    /***/
    function Hkhx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
        return onErrorResumeNext;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./from */
      "Cfvw");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./empty */
      "EY2u");

      function onErrorResumeNext() {
        for (var _len17 = arguments.length, sources = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
          sources[_key17] = arguments[_key17];
        }

        if (sources.length === 0) {
          return _empty__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
        }

        var first = sources[0],
            remainder = sources.slice(1);

        if (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(first)) {
          return onErrorResumeNext.apply(void 0, _toConsumableArray(first));
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var subNext = function subNext() {
            return subscriber.add(onErrorResumeNext.apply(void 0, _toConsumableArray(remainder)).subscribe(subscriber));
          };

          return Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(first).subscribe({
            next: function next(value) {
              subscriber.next(value);
            },
            error: subNext,
            complete: subNext
          });
        });
      } //# sourceMappingURL=onErrorResumeNext.js.map

      /***/

    },

    /***/
    "HrJb":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/count.js ***!
      \****************************************************************/

    /*! exports provided: count */

    /***/
    function HrJb(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "count", function () {
        return count;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function count(predicate) {
        return function (source) {
          return source.lift(new CountOperator(predicate, source));
        };
      }

      var CountOperator = /*#__PURE__*/function () {
        function CountOperator(predicate, source) {
          _classCallCheck(this, CountOperator);

          this.predicate = predicate;
          this.source = source;
        }

        _createClass2(CountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
          }
        }]);

        return CountOperator;
      }();

      var CountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_16) {
        _inherits(CountSubscriber, _Subscriber__WEBPACK_16);

        var _super66 = _createSuper(CountSubscriber);

        function CountSubscriber(destination, predicate, source) {
          var _this95;

          _classCallCheck(this, CountSubscriber);

          _this95 = _super66.call(this, destination);
          _this95.predicate = predicate;
          _this95.source = source;
          _this95.count = 0;
          _this95.index = 0;
          return _this95;
        }

        _createClass2(CountSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.predicate) {
              this._tryPredicate(value);
            } else {
              this.count++;
            }
          }
        }, {
          key: "_tryPredicate",
          value: function _tryPredicate(value) {
            var result;

            try {
              result = this.predicate(value, this.index++, this.source);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            if (result) {
              this.count++;
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.destination.next(this.count);
            this.destination.complete();
          }
        }]);

        return CountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=count.js.map

      /***/

    },

    /***/
    "I55L":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js ***!
      \*****************************************************************/

    /*! exports provided: isArrayLike */

    /***/
    function I55L(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isArrayLike", function () {
        return isArrayLike;
      });

      var isArrayLike = function isArrayLike(x) {
        return x && typeof x.length === 'number' && typeof x !== 'function';
      }; //# sourceMappingURL=isArrayLike.js.map

      /***/

    },

    /***/
    "IAdc":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/toArray.js ***!
      \******************************************************************/

    /*! exports provided: toArray */

    /***/
    function IAdc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toArray", function () {
        return toArray;
      });
      /* harmony import */


      var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./reduce */
      "128B");

      function toArrayReducer(arr, item, index) {
        if (index === 0) {
          return [item];
        }

        arr.push(item);
        return arr;
      }

      function toArray() {
        return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(toArrayReducer, []);
      } //# sourceMappingURL=toArray.js.map

      /***/

    },

    /***/
    "IjjT":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js ***!
      \*************************************************************************/

    /*! exports provided: AsyncScheduler */

    /***/
    function IjjT(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsyncScheduler", function () {
        return AsyncScheduler;
      });
      /* harmony import */


      var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Scheduler */
      "Y/cZ");

      var AsyncScheduler = /*#__PURE__*/function (_Scheduler__WEBPACK_I) {
        _inherits(AsyncScheduler, _Scheduler__WEBPACK_I);

        var _super67 = _createSuper(AsyncScheduler);

        function AsyncScheduler(SchedulerAction) {
          var _this96;

          var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"].now;

          _classCallCheck(this, AsyncScheduler);

          _this96 = _super67.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _assertThisInitialized(_this96)) {
              return AsyncScheduler.delegate.now();
            } else {
              return now();
            }
          });
          _this96.actions = [];
          _this96.active = false;
          _this96.scheduled = undefined;
          return _this96;
        }

        _createClass2(AsyncScheduler, [{
          key: "schedule",
          value: function schedule(work) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var state = arguments.length > 2 ? arguments[2] : undefined;

            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
              return AsyncScheduler.delegate.schedule(work, delay, state);
            } else {
              return _get(_getPrototypeOf(AsyncScheduler.prototype), "schedule", this).call(this, work, delay, state);
            }
          }
        }, {
          key: "flush",
          value: function flush(action) {
            var actions = this.actions;

            if (this.active) {
              actions.push(action);
              return;
            }

            var error;
            this.active = true;

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (action = actions.shift());

            this.active = false;

            if (error) {
              while (action = actions.shift()) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return AsyncScheduler;
      }(_Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"]); //# sourceMappingURL=AsyncScheduler.js.map

      /***/

    },

    /***/
    "IzEk":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/take.js ***!
      \***************************************************************/

    /*! exports provided: take */

    /***/
    function IzEk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "take", function () {
        return take;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      "4I5i");
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/empty */
      "EY2u");

      function take(count) {
        return function (source) {
          if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
          } else {
            return source.lift(new TakeOperator(count));
          }
        };
      }

      var TakeOperator = /*#__PURE__*/function () {
        function TakeOperator(total) {
          _classCallCheck(this, TakeOperator);

          this.total = total;

          if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
          }
        }

        _createClass2(TakeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TakeSubscriber(subscriber, this.total));
          }
        }]);

        return TakeOperator;
      }();

      var TakeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_17) {
        _inherits(TakeSubscriber, _Subscriber__WEBPACK_17);

        var _super68 = _createSuper(TakeSubscriber);

        function TakeSubscriber(destination, total) {
          var _this97;

          _classCallCheck(this, TakeSubscriber);

          _this97 = _super68.call(this, destination);
          _this97.total = total;
          _this97.count = 0;
          return _this97;
        }

        _createClass2(TakeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var total = this.total;
            var count = ++this.count;

            if (count <= total) {
              this.destination.next(value);

              if (count === total) {
                this.destination.complete();
                this.unsubscribe();
              }
            }
          }
        }]);

        return TakeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=take.js.map

      /***/

    },

    /***/
    "JIr8":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/catchError.js ***!
      \*********************************************************************/

    /*! exports provided: catchError */

    /***/
    function JIr8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "catchError", function () {
        return catchError;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function catchError(selector) {
        return function catchErrorOperatorFunction(source) {
          var operator = new CatchOperator(selector);
          var caught = source.lift(operator);
          return operator.caught = caught;
        };
      }

      var CatchOperator = /*#__PURE__*/function () {
        function CatchOperator(selector) {
          _classCallCheck(this, CatchOperator);

          this.selector = selector;
        }

        _createClass2(CatchOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
          }
        }]);

        return CatchOperator;
      }();

      var CatchSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP9) {
        _inherits(CatchSubscriber, _innerSubscribe__WEBP9);

        var _super69 = _createSuper(CatchSubscriber);

        function CatchSubscriber(destination, selector, caught) {
          var _this98;

          _classCallCheck(this, CatchSubscriber);

          _this98 = _super69.call(this, destination);
          _this98.selector = selector;
          _this98.caught = caught;
          return _this98;
        }

        _createClass2(CatchSubscriber, [{
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var result;

              try {
                result = this.selector(err, this.caught);
              } catch (err2) {
                _get(_getPrototypeOf(CatchSubscriber.prototype), "error", this).call(this, err2);

                return;
              }

              this._unsubscribeAndRecycle();

              var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this);
              this.add(innerSubscriber);
              var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(result, innerSubscriber);

              if (innerSubscription !== innerSubscriber) {
                this.add(innerSubscription);
              }
            }
          }
        }]);

        return CatchSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=catchError.js.map

      /***/

    },

    /***/
    "JX91":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/startWith.js ***!
      \********************************************************************/

    /*! exports provided: startWith */

    /***/
    function JX91(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "startWith", function () {
        return startWith;
      });
      /* harmony import */


      var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/concat */
      "GyhO");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function startWith() {
        for (var _len18 = arguments.length, array = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
          array[_key18] = arguments[_key18];
        }

        var scheduler = array[array.length - 1];

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(scheduler)) {
          array.pop();
          return function (source) {
            return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source, scheduler);
          };
        } else {
          return function (source) {
            return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source);
          };
        }
      } //# sourceMappingURL=startWith.js.map

      /***/

    },

    /***/
    "JmF6":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/zipAll.js ***!
      \*****************************************************************/

    /*! exports provided: zipAll */

    /***/
    function JmF6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "zipAll", function () {
        return zipAll;
      });
      /* harmony import */


      var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/zip */
      "1uah");

      function zipAll(project) {
        return function (source) {
          return source.lift(new _observable_zip__WEBPACK_IMPORTED_MODULE_0__["ZipOperator"](project));
        };
      } //# sourceMappingURL=zipAll.js.map

      /***/

    },

    /***/
    "K7De":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/findIndex.js ***!
      \********************************************************************/

    /*! exports provided: findIndex */

    /***/
    function K7De(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findIndex", function () {
        return findIndex;
      });
      /* harmony import */


      var _operators_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../operators/find */
      "cBqT");

      function findIndex(predicate, thisArg) {
        return function (source) {
          return source.lift(new _operators_find__WEBPACK_IMPORTED_MODULE_0__["FindValueOperator"](predicate, source, true, thisArg));
        };
      } //# sourceMappingURL=findIndex.js.map

      /***/

    },

    /***/
    "Kj3r":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js ***!
      \***********************************************************************/

    /*! exports provided: debounceTime */

    /***/
    function Kj3r(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "debounceTime", function () {
        return debounceTime;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");

      function debounceTime(dueTime) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        return function (source) {
          return source.lift(new DebounceTimeOperator(dueTime, scheduler));
        };
      }

      var DebounceTimeOperator = /*#__PURE__*/function () {
        function DebounceTimeOperator(dueTime, scheduler) {
          _classCallCheck(this, DebounceTimeOperator);

          this.dueTime = dueTime;
          this.scheduler = scheduler;
        }

        _createClass2(DebounceTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
          }
        }]);

        return DebounceTimeOperator;
      }();

      var DebounceTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_18) {
        _inherits(DebounceTimeSubscriber, _Subscriber__WEBPACK_18);

        var _super70 = _createSuper(DebounceTimeSubscriber);

        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
          var _this99;

          _classCallCheck(this, DebounceTimeSubscriber);

          _this99 = _super70.call(this, destination);
          _this99.dueTime = dueTime;
          _this99.scheduler = scheduler;
          _this99.debouncedSubscription = null;
          _this99.lastValue = null;
          _this99.hasValue = false;
          return _this99;
        }

        _createClass2(DebounceTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.debouncedNext();
            this.destination.complete();
          }
        }, {
          key: "debouncedNext",
          value: function debouncedNext() {
            this.clearDebounce();

            if (this.hasValue) {
              var lastValue = this.lastValue;
              this.lastValue = null;
              this.hasValue = false;
              this.destination.next(lastValue);
            }
          }
        }, {
          key: "clearDebounce",
          value: function clearDebounce() {
            var debouncedSubscription = this.debouncedSubscription;

            if (debouncedSubscription !== null) {
              this.remove(debouncedSubscription);
              debouncedSubscription.unsubscribe();
              this.debouncedSubscription = null;
            }
          }
        }]);

        return DebounceTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      function dispatchNext(subscriber) {
        subscriber.debouncedNext();
      } //# sourceMappingURL=debounceTime.js.map

      /***/

    },

    /***/
    "Kqap":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/scan.js ***!
      \***************************************************************/

    /*! exports provided: scan */

    /***/
    function Kqap(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scan", function () {
        return scan;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function scan(accumulator, seed) {
        var hasSeed = false;

        if (arguments.length >= 2) {
          hasSeed = true;
        }

        return function scanOperatorFunction(source) {
          return source.lift(new ScanOperator(accumulator, seed, hasSeed));
        };
      }

      var ScanOperator = /*#__PURE__*/function () {
        function ScanOperator(accumulator, seed) {
          var hasSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          _classCallCheck(this, ScanOperator);

          this.accumulator = accumulator;
          this.seed = seed;
          this.hasSeed = hasSeed;
        }

        _createClass2(ScanOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
          }
        }]);

        return ScanOperator;
      }();

      var ScanSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_19) {
        _inherits(ScanSubscriber, _Subscriber__WEBPACK_19);

        var _super71 = _createSuper(ScanSubscriber);

        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
          var _this100;

          _classCallCheck(this, ScanSubscriber);

          _this100 = _super71.call(this, destination);
          _this100.accumulator = accumulator;
          _this100._seed = _seed;
          _this100.hasSeed = hasSeed;
          _this100.index = 0;
          return _this100;
        }

        _createClass2(ScanSubscriber, [{
          key: "seed",
          get: function get() {
            return this._seed;
          },
          set: function set(value) {
            this.hasSeed = true;
            this._seed = value;
          }
        }, {
          key: "_next",
          value: function _next(value) {
            if (!this.hasSeed) {
              this.seed = value;
              this.destination.next(value);
            } else {
              return this._tryNext(value);
            }
          }
        }, {
          key: "_tryNext",
          value: function _tryNext(value) {
            var index = this.index++;
            var result;

            try {
              result = this.accumulator(this.seed, value, index);
            } catch (err) {
              this.destination.error(err);
            }

            this.seed = result;
            this.destination.next(result);
          }
        }]);

        return ScanSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=scan.js.map

      /***/

    },

    /***/
    "KqfI":
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/noop.js ***!
      \**********************************************************/

    /*! exports provided: noop */

    /***/
    function KqfI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "noop", function () {
        return noop;
      });

      function noop() {} //# sourceMappingURL=noop.js.map

      /***/

    },

    /***/
    "LRne":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/of.js ***!
      \**************************************************************/

    /*! exports provided: of */

    /***/
    function LRne(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "of", function () {
        return of;
      });
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./fromArray */
      "yCtX");
      /* harmony import */


      var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduled/scheduleArray */
      "jZKg");

      function of() {
        for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
          args[_key19] = arguments[_key19];
        }

        var scheduler = args[args.length - 1];

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(scheduler)) {
          args.pop();
          return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(args, scheduler);
        } else {
          return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(args);
        }
      } //# sourceMappingURL=of.js.map

      /***/

    },

    /***/
    "Lhse":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/iterator.js ***!
      \****************************************************************/

    /*! exports provided: getSymbolIterator, iterator, $$iterator */

    /***/
    function Lhse(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getSymbolIterator", function () {
        return getSymbolIterator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "iterator", function () {
        return iterator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "$$iterator", function () {
        return $$iterator;
      });

      function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
        }

        return Symbol.iterator;
      }

      var iterator = getSymbolIterator();
      var $$iterator = iterator; //# sourceMappingURL=iterator.js.map

      /***/
    },

    /***/
    "MBAA":
    /*!***************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js ***!
      \***************************************************************************/

    /*! exports provided: scheduleIterable */

    /***/
    function MBAA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scheduleIterable", function () {
        return scheduleIterable;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../symbol/iterator */
      "Lhse");

      function scheduleIterable(input, scheduler) {
        if (!input) {
          throw new Error('Iterable cannot be null');
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          var iterator;
          sub.add(function () {
            if (iterator && typeof iterator["return"] === 'function') {
              iterator["return"]();
            }
          });
          sub.add(scheduler.schedule(function () {
            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__["iterator"]]();
            sub.add(scheduler.schedule(function () {
              if (subscriber.closed) {
                return;
              }

              var value;
              var done;

              try {
                var result = iterator.next();
                value = result.value;
                done = result.done;
              } catch (err) {
                subscriber.error(err);
                return;
              }

              if (done) {
                subscriber.complete();
              } else {
                subscriber.next(value);
                this.schedule();
              }
            }));
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleIterable.js.map

      /***/

    },

    /***/
    "MtjB":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js ***!
      \********************************************************************/

    /*! exports provided: retryWhen */

    /***/
    function MtjB(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "retryWhen", function () {
        return retryWhen;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function retryWhen(notifier) {
        return function (source) {
          return source.lift(new RetryWhenOperator(notifier, source));
        };
      }

      var RetryWhenOperator = /*#__PURE__*/function () {
        function RetryWhenOperator(notifier, source) {
          _classCallCheck(this, RetryWhenOperator);

          this.notifier = notifier;
          this.source = source;
        }

        _createClass2(RetryWhenOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
          }
        }]);

        return RetryWhenOperator;
      }();

      var RetryWhenSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP10) {
        _inherits(RetryWhenSubscriber, _innerSubscribe__WEBP10);

        var _super72 = _createSuper(RetryWhenSubscriber);

        function RetryWhenSubscriber(destination, notifier, source) {
          var _this101;

          _classCallCheck(this, RetryWhenSubscriber);

          _this101 = _super72.call(this, destination);
          _this101.notifier = notifier;
          _this101.source = source;
          return _this101;
        }

        _createClass2(RetryWhenSubscriber, [{
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var errors = this.errors;
              var retries = this.retries;
              var retriesSubscription = this.retriesSubscription;

              if (!retries) {
                errors = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();

                try {
                  var notifier = this.notifier;
                  retries = notifier(errors);
                } catch (e) {
                  return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), "error", this).call(this, e);
                }

                retriesSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["innerSubscribe"])(retries, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleInnerSubscriber"](this));
              } else {
                this.errors = undefined;
                this.retriesSubscription = undefined;
              }

              this._unsubscribeAndRecycle();

              this.errors = errors;
              this.retries = retries;
              this.retriesSubscription = retriesSubscription;
              errors.next(err);
            }
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var errors = this.errors,
                retriesSubscription = this.retriesSubscription;

            if (errors) {
              errors.unsubscribe();
              this.errors = undefined;
            }

            if (retriesSubscription) {
              retriesSubscription.unsubscribe();
              this.retriesSubscription = undefined;
            }

            this.retries = undefined;
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;

            this._unsubscribeAndRecycle();

            this._unsubscribe = _unsubscribe;
            this.source.subscribe(this);
          }
        }]);

        return RetryWhenSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleOuterSubscriber"]); //# sourceMappingURL=retryWhen.js.map

      /***/

    },

    /***/
    "NHP+":
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/AsyncSubject.js ***!
      \*************************************************************/

    /*! exports provided: AsyncSubject */

    /***/
    function NHP(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsyncSubject", function () {
        return AsyncSubject;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subject */
      "XNiG");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Subscription */
      "quSY");

      var AsyncSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP3) {
        _inherits(AsyncSubject, _Subject__WEBPACK_IMP3);

        var _super73 = _createSuper(AsyncSubject);

        function AsyncSubject() {
          var _this102;

          _classCallCheck(this, AsyncSubject);

          _this102 = _super73.apply(this, arguments);
          _this102.value = null;
          _this102.hasNext = false;
          _this102.hasCompleted = false;
          return _this102;
        }

        _createClass2(AsyncSubject, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            if (this.hasError) {
              subscriber.error(this.thrownError);
              return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
            } else if (this.hasCompleted && this.hasNext) {
              subscriber.next(this.value);
              subscriber.complete();
              return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
            }

            return _get(_getPrototypeOf(AsyncSubject.prototype), "_subscribe", this).call(this, subscriber);
          }
        }, {
          key: "next",
          value: function next(value) {
            if (!this.hasCompleted) {
              this.value = value;
              this.hasNext = true;
            }
          }
        }, {
          key: "error",
          value: function error(_error2) {
            if (!this.hasCompleted) {
              _get(_getPrototypeOf(AsyncSubject.prototype), "error", this).call(this, _error2);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            this.hasCompleted = true;

            if (this.hasNext) {
              _get(_getPrototypeOf(AsyncSubject.prototype), "next", this).call(this, this.value);
            }

            _get(_getPrototypeOf(AsyncSubject.prototype), "complete", this).call(this);
          }
        }]);

        return AsyncSubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]); //# sourceMappingURL=AsyncSubject.js.map

      /***/

    },

    /***/
    "NJ4a":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/hostReportError.js ***!
      \*********************************************************************/

    /*! exports provided: hostReportError */

    /***/
    function NJ4a(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hostReportError", function () {
        return hostReportError;
      });

      function hostReportError(err) {
        setTimeout(function () {
          throw err;
        }, 0);
      } //# sourceMappingURL=hostReportError.js.map

      /***/

    },

    /***/
    "NJ9Y":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/last.js ***!
      \***************************************************************/

    /*! exports provided: last */

    /***/
    function NJ9Y(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "last", function () {
        return last;
      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/EmptyError */
      "sVev");
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./filter */
      "pLZG");
      /* harmony import */


      var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./takeLast */
      "BFxc");
      /* harmony import */


      var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./throwIfEmpty */
      "XDbj");
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      "xbPD");
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/identity */
      "SpAZ");

      function last(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
            return predicate(v, i, source);
          }) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_takeLast__WEBPACK_IMPORTED_MODULE_2__["takeLast"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__["throwIfEmpty"])(function () {
            return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
          }));
        };
      } //# sourceMappingURL=last.js.map

      /***/

    },

    /***/
    "NNCq":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/range.js ***!
      \*****************************************************************/

    /*! exports provided: range, dispatch */

    /***/
    function NNCq(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "range", function () {
        return range;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dispatch", function () {
        return dispatch;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      function range() {
        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;
        var scheduler = arguments.length > 2 ? arguments[2] : undefined;
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          if (count === undefined) {
            count = start;
            start = 0;
          }

          var index = 0;
          var current = start;

          if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
              index: index,
              count: count,
              start: start,
              subscriber: subscriber
            });
          } else {
            do {
              if (index++ >= count) {
                subscriber.complete();
                break;
              }

              subscriber.next(current++);

              if (subscriber.closed) {
                break;
              }
            } while (true);
          }

          return undefined;
        });
      }

      function dispatch(state) {
        var start = state.start,
            index = state.index,
            count = state.count,
            subscriber = state.subscriber;

        if (index >= count) {
          subscriber.complete();
          return;
        }

        subscriber.next(start);

        if (subscriber.closed) {
          return;
        }

        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
      } //# sourceMappingURL=range.js.map

      /***/

    },

    /***/
    "NXyV":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/defer.js ***!
      \*****************************************************************/

    /*! exports provided: defer */

    /***/
    function NXyV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defer", function () {
        return defer;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./from */
      "Cfvw");
      /* harmony import */


      var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./empty */
      "EY2u");

      function defer(observableFactory) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var input;

          try {
            input = observableFactory();
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          var source = input ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(input) : Object(_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
          return source.subscribe(subscriber);
        });
      } //# sourceMappingURL=defer.js.map

      /***/

    },

    /***/
    "NfdI":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/publish.js ***!
      \******************************************************************/

    /*! exports provided: publish */

    /***/
    function NfdI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "publish", function () {
        return publish;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./multicast */
      "oB13");

      function publish(selector) {
        return selector ? Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(function () {
          return new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        }, selector) : Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]());
      } //# sourceMappingURL=publish.js.map

      /***/

    },

    /***/
    "Nv8m":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/race.js ***!
      \****************************************************************/

    /*! exports provided: race, RaceOperator, RaceSubscriber */

    /***/
    function Nv8m(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "race", function () {
        return race;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RaceOperator", function () {
        return RaceOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RaceSubscriber", function () {
        return RaceSubscriber;
      });
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./fromArray */
      "yCtX");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");

      function race() {
        for (var _len20 = arguments.length, observables = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
          observables[_key20] = arguments[_key20];
        }

        if (observables.length === 1) {
          if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
            observables = observables[0];
          } else {
            return observables[0];
          }
        }

        return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(observables, undefined).lift(new RaceOperator());
      }

      var RaceOperator = /*#__PURE__*/function () {
        function RaceOperator() {
          _classCallCheck(this, RaceOperator);
        }

        _createClass2(RaceOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new RaceSubscriber(subscriber));
          }
        }]);

        return RaceOperator;
      }();

      var RaceSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB2) {
        _inherits(RaceSubscriber, _OuterSubscriber__WEB2);

        var _super74 = _createSuper(RaceSubscriber);

        function RaceSubscriber(destination) {
          var _this103;

          _classCallCheck(this, RaceSubscriber);

          _this103 = _super74.call(this, destination);
          _this103.hasFirst = false;
          _this103.observables = [];
          _this103.subscriptions = [];
          return _this103;
        }

        _createClass2(RaceSubscriber, [{
          key: "_next",
          value: function _next(observable) {
            this.observables.push(observable);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var observables = this.observables;
            var len = observables.length;

            if (len === 0) {
              this.destination.complete();
            } else {
              for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, undefined, i);

                if (this.subscriptions) {
                  this.subscriptions.push(subscription);
                }

                this.add(subscription);
              }

              this.observables = null;
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, outerIndex) {
            if (!this.hasFirst) {
              this.hasFirst = true;

              for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                  var subscription = this.subscriptions[i];
                  subscription.unsubscribe();
                  this.remove(subscription);
                }
              }

              this.subscriptions = null;
            }

            this.destination.next(innerValue);
          }
        }]);

        return RaceSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=race.js.map

      /***/

    },

    /***/
    "O4y0":
    /*!*********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js ***!
      \*********************************************************************************/

    /*! exports provided: SubscribeOnObservable */

    /***/
    function O4y0(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SubscribeOnObservable", function () {
        return SubscribeOnObservable;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/asap */
      "7Hc7");
      /* harmony import */


      var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isNumeric */
      "Y7HM");

      var SubscribeOnObservable = /*#__PURE__*/function (_Observable__WEBPACK_2) {
        _inherits(SubscribeOnObservable, _Observable__WEBPACK_2);

        var _super75 = _createSuper(SubscribeOnObservable);

        function SubscribeOnObservable(source) {
          var _this104;

          var delayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];

          _classCallCheck(this, SubscribeOnObservable);

          _this104 = _super75.call(this);
          _this104.source = source;
          _this104.delayTime = delayTime;
          _this104.scheduler = scheduler;

          if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(delayTime) || delayTime < 0) {
            _this104.delayTime = 0;
          }

          if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this104.scheduler = _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];
          }

          return _this104;
        }

        _createClass2(SubscribeOnObservable, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var delay = this.delayTime;
            var source = this.source;
            var scheduler = this.scheduler;
            return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
              source: source,
              subscriber: subscriber
            });
          }
        }], [{
          key: "create",
          value: function create(source) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];
            return new SubscribeOnObservable(source, delay, scheduler);
          }
        }, {
          key: "dispatch",
          value: function dispatch(arg) {
            var source = arg.source,
                subscriber = arg.subscriber;
            return this.add(source.subscribe(subscriber));
          }
        }]);

        return SubscribeOnObservable;
      }(_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]); //# sourceMappingURL=SubscribeOnObservable.js.map

      /***/

    },

    /***/
    "OQgR":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/groupBy.js ***!
      \******************************************************************/

    /*! exports provided: groupBy, GroupedObservable */

    /***/
    function OQgR(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "groupBy", function () {
        return groupBy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "GroupedObservable", function () {
        return GroupedObservable;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");

      function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
        return function (source) {
          return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
        };
      }

      var GroupByOperator = /*#__PURE__*/function () {
        function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
          _classCallCheck(this, GroupByOperator);

          this.keySelector = keySelector;
          this.elementSelector = elementSelector;
          this.durationSelector = durationSelector;
          this.subjectSelector = subjectSelector;
        }

        _createClass2(GroupByOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
          }
        }]);

        return GroupByOperator;
      }();

      var GroupBySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_20) {
        _inherits(GroupBySubscriber, _Subscriber__WEBPACK_20);

        var _super76 = _createSuper(GroupBySubscriber);

        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
          var _this105;

          _classCallCheck(this, GroupBySubscriber);

          _this105 = _super76.call(this, destination);
          _this105.keySelector = keySelector;
          _this105.elementSelector = elementSelector;
          _this105.durationSelector = durationSelector;
          _this105.subjectSelector = subjectSelector;
          _this105.groups = null;
          _this105.attemptedToUnsubscribe = false;
          _this105.count = 0;
          return _this105;
        }

        _createClass2(GroupBySubscriber, [{
          key: "_next",
          value: function _next(value) {
            var key;

            try {
              key = this.keySelector(value);
            } catch (err) {
              this.error(err);
              return;
            }

            this._group(value, key);
          }
        }, {
          key: "_group",
          value: function _group(value, key) {
            var groups = this.groups;

            if (!groups) {
              groups = this.groups = new Map();
            }

            var group = groups.get(key);
            var element;

            if (this.elementSelector) {
              try {
                element = this.elementSelector(value);
              } catch (err) {
                this.error(err);
              }
            } else {
              element = value;
            }

            if (!group) {
              group = this.subjectSelector ? this.subjectSelector() : new _Subject__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
              groups.set(key, group);
              var groupedObservable = new GroupedObservable(key, group, this);
              this.destination.next(groupedObservable);

              if (this.durationSelector) {
                var duration;

                try {
                  duration = this.durationSelector(new GroupedObservable(key, group));
                } catch (err) {
                  this.error(err);
                  return;
                }

                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
              }
            }

            if (!group.closed) {
              group.next(element);
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var groups = this.groups;

            if (groups) {
              groups.forEach(function (group, key) {
                group.error(err);
              });
              groups.clear();
            }

            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var groups = this.groups;

            if (groups) {
              groups.forEach(function (group, key) {
                group.complete();
              });
              groups.clear();
            }

            this.destination.complete();
          }
        }, {
          key: "removeGroup",
          value: function removeGroup(key) {
            this.groups["delete"](key);
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            if (!this.closed) {
              this.attemptedToUnsubscribe = true;

              if (this.count === 0) {
                _get(_getPrototypeOf(GroupBySubscriber.prototype), "unsubscribe", this).call(this);
              }
            }
          }
        }]);

        return GroupBySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_21) {
        _inherits(GroupDurationSubscriber, _Subscriber__WEBPACK_21);

        var _super77 = _createSuper(GroupDurationSubscriber);

        function GroupDurationSubscriber(key, group, parent) {
          var _this106;

          _classCallCheck(this, GroupDurationSubscriber);

          _this106 = _super77.call(this, group);
          _this106.key = key;
          _this106.group = group;
          _this106.parent = parent;
          return _this106;
        }

        _createClass2(GroupDurationSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.complete();
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var parent = this.parent,
                key = this.key;
            this.key = this.parent = null;

            if (parent) {
              parent.removeGroup(key);
            }
          }
        }]);

        return GroupDurationSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var GroupedObservable = /*#__PURE__*/function (_Observable__WEBPACK_3) {
        _inherits(GroupedObservable, _Observable__WEBPACK_3);

        var _super78 = _createSuper(GroupedObservable);

        function GroupedObservable(key, groupSubject, refCountSubscription) {
          var _this107;

          _classCallCheck(this, GroupedObservable);

          _this107 = _super78.call(this);
          _this107.key = key;
          _this107.groupSubject = groupSubject;
          _this107.refCountSubscription = refCountSubscription;
          return _this107;
        }

        _createClass2(GroupedObservable, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            var refCountSubscription = this.refCountSubscription,
                groupSubject = this.groupSubject;

            if (refCountSubscription && !refCountSubscription.closed) {
              subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }

            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
          }
        }]);

        return GroupedObservable;
      }(_Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]);

      var InnerRefCountSubscription = /*#__PURE__*/function (_Subscription__WEBPAC3) {
        _inherits(InnerRefCountSubscription, _Subscription__WEBPAC3);

        var _super79 = _createSuper(InnerRefCountSubscription);

        function InnerRefCountSubscription(parent) {
          var _this108;

          _classCallCheck(this, InnerRefCountSubscription);

          _this108 = _super79.call(this);
          _this108.parent = parent;
          parent.count++;
          return _this108;
        }

        _createClass2(InnerRefCountSubscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            var parent = this.parent;

            if (!parent.closed && !this.closed) {
              _get(_getPrototypeOf(InnerRefCountSubscription.prototype), "unsubscribe", this).call(this);

              parent.count -= 1;

              if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
              }
            }
          }
        }]);

        return InnerRefCountSubscription;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]); //# sourceMappingURL=groupBy.js.map

      /***/

    },

    /***/
    "OsX3":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js ***!
      \*********************************************************************/

    /*! exports provided: bufferTime */

    /***/
    function OsX3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bufferTime", function () {
        return bufferTime;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function bufferTime(bufferTimeSpan) {
        var length = arguments.length;
        var scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(arguments[arguments.length - 1])) {
          scheduler = arguments[arguments.length - 1];
          length--;
        }

        var bufferCreationInterval = null;

        if (length >= 2) {
          bufferCreationInterval = arguments[1];
        }

        var maxBufferSize = Number.POSITIVE_INFINITY;

        if (length >= 3) {
          maxBufferSize = arguments[2];
        }

        return function bufferTimeOperatorFunction(source) {
          return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
        };
      }

      var BufferTimeOperator = /*#__PURE__*/function () {
        function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
          _classCallCheck(this, BufferTimeOperator);

          this.bufferTimeSpan = bufferTimeSpan;
          this.bufferCreationInterval = bufferCreationInterval;
          this.maxBufferSize = maxBufferSize;
          this.scheduler = scheduler;
        }

        _createClass2(BufferTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
          }
        }]);

        return BufferTimeOperator;
      }();

      var Context = function Context() {
        _classCallCheck(this, Context);

        this.buffer = [];
      };

      var BufferTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_22) {
        _inherits(BufferTimeSubscriber, _Subscriber__WEBPACK_22);

        var _super80 = _createSuper(BufferTimeSubscriber);

        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
          var _this109;

          _classCallCheck(this, BufferTimeSubscriber);

          _this109 = _super80.call(this, destination);
          _this109.bufferTimeSpan = bufferTimeSpan;
          _this109.bufferCreationInterval = bufferCreationInterval;
          _this109.maxBufferSize = maxBufferSize;
          _this109.scheduler = scheduler;
          _this109.contexts = [];

          var context = _this109.openContext();

          _this109.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;

          if (_this109.timespanOnly) {
            var timeSpanOnlyState = {
              subscriber: _assertThisInitialized(_this109),
              context: context,
              bufferTimeSpan: bufferTimeSpan
            };

            _this109.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
          } else {
            var closeState = {
              subscriber: _assertThisInitialized(_this109),
              context: context
            };
            var creationState = {
              bufferTimeSpan: bufferTimeSpan,
              bufferCreationInterval: bufferCreationInterval,
              subscriber: _assertThisInitialized(_this109),
              scheduler: scheduler
            };

            _this109.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));

            _this109.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
          }

          return _this109;
        }

        _createClass2(BufferTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;

            for (var i = 0; i < len; i++) {
              var context = contexts[i];
              var buffer = context.buffer;
              buffer.push(value);

              if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context;
              }
            }

            if (filledBufferContext) {
              this.onBufferFull(filledBufferContext);
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.contexts.length = 0;

            _get(_getPrototypeOf(BufferTimeSubscriber.prototype), "_error", this).call(this, err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var contexts = this.contexts,
                destination = this.destination;

            while (contexts.length > 0) {
              var context = contexts.shift();
              destination.next(context.buffer);
            }

            _get(_getPrototypeOf(BufferTimeSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.contexts = null;
          }
        }, {
          key: "onBufferFull",
          value: function onBufferFull(context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);

            if (!this.closed && this.timespanOnly) {
              context = this.openContext();
              var bufferTimeSpan = this.bufferTimeSpan;
              var timeSpanOnlyState = {
                subscriber: this,
                context: context,
                bufferTimeSpan: bufferTimeSpan
              };
              this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
          }
        }, {
          key: "openContext",
          value: function openContext() {
            var context = new Context();
            this.contexts.push(context);
            return context;
          }
        }, {
          key: "closeContext",
          value: function closeContext(context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;

            if (spliceIndex >= 0) {
              contexts.splice(contexts.indexOf(context), 1);
            }
          }
        }]);

        return BufferTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

      function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;

        if (prevContext) {
          subscriber.closeContext(prevContext);
        }

        if (!subscriber.closed) {
          state.context = subscriber.openContext();
          state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
      }

      function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval,
            bufferTimeSpan = state.bufferTimeSpan,
            subscriber = state.subscriber,
            scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;

        if (!subscriber.closed) {
          subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
            subscriber: subscriber,
            context: context
          }));
          action.schedule(state, bufferCreationInterval);
        }
      }

      function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber,
            context = arg.context;
        subscriber.closeContext(context);
      } //# sourceMappingURL=bufferTime.js.map

      /***/

    },

    /***/
    "PZkE":
    /*!**********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js ***!
      \**********************************************************************************/

    /*! exports provided: distinctUntilKeyChanged */

    /***/
    function PZkE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function () {
        return distinctUntilKeyChanged;
      });
      /* harmony import */


      var _distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./distinctUntilChanged */
      "/uUt");

      function distinctUntilKeyChanged(key, compare) {
        return Object(_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__["distinctUntilChanged"])(function (x, y) {
          return compare ? compare(x[key], y[key]) : x[key] === y[key];
        });
      } //# sourceMappingURL=distinctUntilKeyChanged.js.map

      /***/

    },

    /***/
    "PfrF":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js ***!
      \*********************************************************************/

    /*! exports provided: bufferWhen */

    /***/
    function PfrF(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bufferWhen", function () {
        return bufferWhen;
      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function bufferWhen(closingSelector) {
        return function (source) {
          return source.lift(new BufferWhenOperator(closingSelector));
        };
      }

      var BufferWhenOperator = /*#__PURE__*/function () {
        function BufferWhenOperator(closingSelector) {
          _classCallCheck(this, BufferWhenOperator);

          this.closingSelector = closingSelector;
        }

        _createClass2(BufferWhenOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
          }
        }]);

        return BufferWhenOperator;
      }();

      var BufferWhenSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP11) {
        _inherits(BufferWhenSubscriber, _innerSubscribe__WEBP11);

        var _super81 = _createSuper(BufferWhenSubscriber);

        function BufferWhenSubscriber(destination, closingSelector) {
          var _this110;

          _classCallCheck(this, BufferWhenSubscriber);

          _this110 = _super81.call(this, destination);
          _this110.closingSelector = closingSelector;
          _this110.subscribing = false;

          _this110.openBuffer();

          return _this110;
        }

        _createClass2(BufferWhenSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.buffer.push(value);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var buffer = this.buffer;

            if (buffer) {
              this.destination.next(buffer);
            }

            _get(_getPrototypeOf(BufferWhenSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.buffer = undefined;
            this.subscribing = false;
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.openBuffer();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            if (this.subscribing) {
              this.complete();
            } else {
              this.openBuffer();
            }
          }
        }, {
          key: "openBuffer",
          value: function openBuffer() {
            var closingSubscription = this.closingSubscription;

            if (closingSubscription) {
              this.remove(closingSubscription);
              closingSubscription.unsubscribe();
            }

            var buffer = this.buffer;

            if (this.buffer) {
              this.destination.next(buffer);
            }

            this.buffer = [];
            var closingNotifier;

            try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector();
            } catch (err) {
              return this.error(err);
            }

            closingSubscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["innerSubscribe"])(closingNotifier, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleInnerSubscriber"](this)));
            this.subscribing = false;
          }
        }]);

        return BufferWhenSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleOuterSubscriber"]); //# sourceMappingURL=bufferWhen.js.map

      /***/

    },

    /***/
    "PqYM":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/timer.js ***!
      \*****************************************************************/

    /*! exports provided: timer */

    /***/
    function PqYM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "timer", function () {
        return timer;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isNumeric */
      "Y7HM");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function timer() {
        var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var periodOrScheduler = arguments.length > 1 ? arguments[1] : undefined;
        var scheduler = arguments.length > 2 ? arguments[2] : undefined;
        var period = -1;

        if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(periodOrScheduler)) {
          period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
        } else if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(periodOrScheduler)) {
          scheduler = periodOrScheduler;
        }

        if (!Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(scheduler)) {
          scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var due = Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(dueTime) ? dueTime : +dueTime - scheduler.now();
          return scheduler.schedule(dispatch, due, {
            index: 0,
            period: period,
            subscriber: subscriber
          });
        });
      }

      function dispatch(state) {
        var index = state.index,
            period = state.period,
            subscriber = state.subscriber;
        subscriber.next(index);

        if (subscriber.closed) {
          return;
        } else if (period === -1) {
          return subscriber.complete();
        }

        state.index = index + 1;
        this.schedule(state, period);
      } //# sourceMappingURL=timer.js.map

      /***/

    },

    /***/
    "Pz8W":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js ***!
      \*********************************************************************/

    /*! exports provided: AsapAction */

    /***/
    function Pz8W(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsapAction", function () {
        return AsapAction;
      });
      /* harmony import */


      var _util_Immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/Immediate */
      "c7jc");
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsyncAction */
      "3N8a");

      var AsapAction = /*#__PURE__*/function (_AsyncAction__WEBPACK) {
        _inherits(AsapAction, _AsyncAction__WEBPACK);

        var _super82 = _createSuper(AsapAction);

        function AsapAction(scheduler, work) {
          var _this111;

          _classCallCheck(this, AsapAction);

          _this111 = _super82.call(this, scheduler, work);
          _this111.scheduler = scheduler;
          _this111.work = work;
          return _this111;
        }

        _createClass2(AsapAction, [{
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0) {
              return _get(_getPrototypeOf(AsapAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].setImmediate(scheduler.flush.bind(scheduler, null)));
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(AsapAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
            }

            if (scheduler.actions.length === 0) {
              _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].clearImmediate(id);

              scheduler.scheduled = undefined;
            }

            return undefined;
          }
        }]);

        return AsapAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"]); //# sourceMappingURL=AsapAction.js.map

      /***/

    },

    /***/
    "QIAL":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js ***!
      \*************************************************************************/

    /*! exports provided: isInteropObservable */

    /***/
    function QIAL(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isInteropObservable", function () {
        return isInteropObservable;
      });
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/observable */
      "kJWO");

      function isInteropObservable(input) {
        return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]] === 'function';
      } //# sourceMappingURL=isInteropObservable.js.map

      /***/

    },

    /***/
    "Qn8I":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/using.js ***!
      \*****************************************************************/

    /*! exports provided: using */

    /***/
    function Qn8I(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "using", function () {
        return using;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./from */
      "Cfvw");
      /* harmony import */


      var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./empty */
      "EY2u");

      function using(resourceFactory, observableFactory) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var resource;

          try {
            resource = resourceFactory();
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          var result;

          try {
            result = observableFactory(resource);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          var source = result ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(result) : _empty__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
          var subscription = source.subscribe(subscriber);
          return function () {
            subscription.unsubscribe();

            if (resource) {
              resource.unsubscribe();
            }
          };
        });
      } //# sourceMappingURL=using.js.map

      /***/

    },

    /***/
    "QqCr":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js ***!
      \************************************************************************/

    /*! exports provided: bindCallback */

    /***/
    function QqCr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bindCallback", function () {
        return bindCallback;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../AsyncSubject */
      "NHP+");
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/map */
      "lJxs");
      /* harmony import */


      var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/canReportError */
      "8Qeq");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function bindCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
          if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_5__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
          } else {
            return function () {
              return bindCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
                return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_4__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
              }));
            };
          }
        }

        return function () {
          for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
            args[_key21] = arguments[_key21];
          }

          var context = this;
          var subject;
          var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler
          };
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            if (!scheduler) {
              if (!subject) {
                subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

                var handler = function handler() {
                  for (var _len22 = arguments.length, innerArgs = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
                    innerArgs[_key22] = arguments[_key22];
                  }

                  subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                  subject.complete();
                };

                try {
                  callbackFunc.apply(context, [].concat(args, [handler]));
                } catch (err) {
                  if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                    subject.error(err);
                  } else {
                    console.warn(err);
                  }
                }
              }

              return subject.subscribe(subscriber);
            } else {
              var state = {
                args: args,
                subscriber: subscriber,
                params: params
              };
              return scheduler.schedule(dispatch, 0, state);
            }
          });
        };
      }

      function dispatch(state) {
        var _this112 = this;

        var self = this;
        var args = state.args,
            subscriber = state.subscriber,
            params = state.params;
        var callbackFunc = params.callbackFunc,
            context = params.context,
            scheduler = params.scheduler;
        var subject = params.subject;

        if (!subject) {
          subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

          var handler = function handler() {
            for (var _len23 = arguments.length, innerArgs = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
              innerArgs[_key23] = arguments[_key23];
            }

            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;

            _this112.add(scheduler.schedule(dispatchNext, 0, {
              value: value,
              subject: subject
            }));
          };

          try {
            callbackFunc.apply(context, [].concat(_toConsumableArray(args), [handler]));
          } catch (err) {
            subject.error(err);
          }
        }

        this.add(subject.subscribe(subscriber));
      }

      function dispatchNext(state) {
        var value = state.value,
            subject = state.subject;
        subject.next(value);
        subject.complete();
      }

      function dispatchError(state) {
        var err = state.err,
            subject = state.subject;
        subject.error(err);
      } //# sourceMappingURL=bindCallback.js.map

      /***/

    },

    /***/
    "R0Ic":
    /*!******************************************************************************!*\
      !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js ***!
      \******************************************************************************/

    /*! exports provided: AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵAnimationGroupPlayer, ɵPRE_STYLE */

    /***/
    function R0Ic(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function () {
        return AUTO_STYLE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationBuilder", function () {
        return AnimationBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationFactory", function () {
        return AnimationFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NoopAnimationPlayer", function () {
        return NoopAnimationPlayer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "animate", function () {
        return animate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "animateChild", function () {
        return animateChild;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "animation", function () {
        return animation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "group", function () {
        return group;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keyframes", function () {
        return keyframes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "query", function () {
        return query;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sequence", function () {
        return sequence;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "stagger", function () {
        return stagger;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "state", function () {
        return state;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "style", function () {
        return style;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "transition", function () {
        return transition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "trigger", function () {
        return trigger;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "useAnimation", function () {
        return useAnimation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimationGroupPlayer", function () {
        return AnimationGroupPlayer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵPRE_STYLE", function () {
        return ɵPRE_STYLE;
      });
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * An injectable service that produces an animation sequence programmatically within an
       * Angular component or directive.
       * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
       *
       * @usageNotes
       *
       * To use this service, add it to your component or directive as a dependency.
       * The service is instantiated along with your component.
       *
       * Apps do not typically need to create their own animation players, but if you
       * do need to, follow these steps:
       *
       * 1. Use the `build()` method to create a programmatic animation using the
       * `animate()` function. The method returns an `AnimationFactory` instance.
       *
       * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
       *
       * 3. Use the player object to control the animation programmatically.
       *
       * For example:
       *
       * ```ts
       * // import the service from BrowserAnimationsModule
       * import {AnimationBuilder} from '@angular/animations';
       * // require the service as a dependency
       * class MyCmp {
       *   constructor(private _builder: AnimationBuilder) {}
       *
       *   makeAnimation(element: any) {
       *     // first define a reusable animation
       *     const myAnimation = this._builder.build([
       *       style({ width: 0 }),
       *       animate(1000, style({ width: '100px' }))
       *     ]);
       *
       *     // use the returned factory object to create a player
       *     const player = myAnimation.create(element);
       *
       *     player.play();
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var AnimationBuilder = function AnimationBuilder() {
        _classCallCheck(this, AnimationBuilder);
      };
      /**
       * A factory object returned from the `AnimationBuilder`.`build()` method.
       *
       * @publicApi
       */


      var AnimationFactory = function AnimationFactory() {
        _classCallCheck(this, AnimationFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Specifies automatic styling.
       *
       * @publicApi
       */


      var AUTO_STYLE = '*';
      /**
       * Creates a named animation trigger, containing a  list of `state()`
       * and `transition()` entries to be evaluated when the expression
       * bound to the trigger changes.
       *
       * @param name An identifying string.
       * @param definitions  An animation definition object, containing an array of `state()`
       * and `transition()` declarations.
       *
       * @return An object that encapsulates the trigger data.
       *
       * @usageNotes
       * Define an animation trigger in the `animations` section of `@Component` metadata.
       * In the template, reference the trigger by name and bind it to a trigger expression that
       * evaluates to a defined animation state, using the following format:
       *
       * `[@triggerName]="expression"`
       *
       * Animation trigger bindings convert all values to strings, and then match the
       * previous and current values against any linked transitions.
       * Booleans can be specified as `1` or `true` and `0` or `false`.
       *
       * ### Usage Example
       *
       * The following example creates an animation trigger reference based on the provided
       * name value.
       * The provided animation value is expected to be an array consisting of state and
       * transition declarations.
       *
       * ```typescript
       * @Component({
       *   selector: "my-component",
       *   templateUrl: "my-component-tpl.html",
       *   animations: [
       *     trigger("myAnimationTrigger", [
       *       state(...),
       *       state(...),
       *       transition(...),
       *       transition(...)
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   myStatusExp = "something";
       * }
       * ```
       *
       * The template associated with this component makes use of the defined trigger
       * by binding to an element within its template code.
       *
       * ```html
       * <!-- somewhere inside of my-component-tpl.html -->
       * <div [@myAnimationTrigger]="myStatusExp">...</div>
       * ```
       *
       * ### Using an inline function
       * The `transition` animation method also supports reading an inline function which can decide
       * if its associated animation should be run.
       *
       * ```typescript
       * // this method is run each time the `myAnimationTrigger` trigger value changes.
       * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
       string]: any}): boolean {
       *   // notice that `element` and `params` are also available here
       *   return toState == 'yes-please-animate';
       * }
       *
       * @Component({
       *   selector: 'my-component',
       *   templateUrl: 'my-component-tpl.html',
       *   animations: [
       *     trigger('myAnimationTrigger', [
       *       transition(myInlineMatcherFn, [
       *         // the animation sequence code
       *       ]),
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   myStatusExp = "yes-please-animate";
       * }
       * ```
       *
       * ### Disabling Animations
       * When true, the special animation control binding `@.disabled` binding prevents
       * all animations from rendering.
       * Place the  `@.disabled` binding on an element to disable
       * animations on the element itself, as well as any inner animation triggers
       * within the element.
       *
       * The following example shows how to use this feature:
       *
       * ```typescript
       * @Component({
       *   selector: 'my-component',
       *   template: `
       *     <div [@.disabled]="isDisabled">
       *       <div [@childAnimation]="exp"></div>
       *     </div>
       *   `,
       *   animations: [
       *     trigger("childAnimation", [
       *       // ...
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   isDisabled = true;
       *   exp = '...';
       * }
       * ```
       *
       * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
       * along with any inner animations.
       *
       * ### Disable animations application-wide
       * When an area of the template is set to have animations disabled,
       * **all** inner components have their animations disabled as well.
       * This means that you can disable all animations for an app
       * by placing a host binding set on `@.disabled` on the topmost Angular component.
       *
       * ```typescript
       * import {Component, HostBinding} from '@angular/core';
       *
       * @Component({
       *   selector: 'app-component',
       *   templateUrl: 'app.component.html',
       * })
       * class AppComponent {
       *   @HostBinding('@.disabled')
       *   public animationsDisabled = true;
       * }
       * ```
       *
       * ### Overriding disablement of inner animations
       * Despite inner animations being disabled, a parent animation can `query()`
       * for inner elements located in disabled areas of the template and still animate
       * them if needed. This is also the case for when a sub animation is
       * queried by a parent and then later animated using `animateChild()`.
       *
       * ### Detecting when an animation is disabled
       * If a region of the DOM (or the entire application) has its animations disabled, the animation
       * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
       * an instance of an `AnimationEvent`. If animations are disabled,
       * the `.disabled` flag on the event is true.
       *
       * @publicApi
       */

      function trigger(name, definitions) {
        return {
          type: 7
          /* Trigger */
          ,
          name: name,
          definitions: definitions,
          options: {}
        };
      }
      /**
       * Defines an animation step that combines styling information with timing information.
       *
       * @param timings Sets `AnimateTimings` for the parent animation.
       * A string in the format "duration [delay] [easing]".
       *  - Duration and delay are expressed as a number and optional time unit,
       * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
       * The default unit is milliseconds.
       *  - The easing value controls how the animation accelerates and decelerates
       * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
       * `ease-in-out`, or a `cubic-bezier()` function call.
       * If not supplied, no easing is applied.
       *
       * For example, the string "1s 100ms ease-out" specifies a duration of
       * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
       * which decelerates near the end of the duration.
       * @param styles Sets AnimationStyles for the parent animation.
       * A function call to either `style()` or `keyframes()`
       * that returns a collection of CSS style entries to be applied to the parent animation.
       * When null, uses the styles from the destination state.
       * This is useful when describing an animation step that will complete an animation;
       * see "Animating to the final state" in `transitions()`.
       * @returns An object that encapsulates the animation step.
       *
       * @usageNotes
       * Call within an animation `sequence()`, `{@link animations/group group()}`, or
       * `transition()` call to specify an animation step
       * that applies given style data to the parent animation for a given amount of time.
       *
       * ### Syntax Examples
       * **Timing examples**
       *
       * The following examples show various `timings` specifications.
       * - `animate(500)` : Duration is 500 milliseconds.
       * - `animate("1s")` : Duration is 1000 milliseconds.
       * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
       * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
       * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
       * milliseconds, easing according to a bezier curve.
       *
       * **Style examples**
       *
       * The following example calls `style()` to set a single CSS style.
       * ```typescript
       * animate(500, style({ background: "red" }))
       * ```
       * The following example calls `keyframes()` to set a CSS style
       * to different values for successive keyframes.
       * ```typescript
       * animate(500, keyframes(
       *  [
       *   style({ background: "blue" }),
       *   style({ background: "red" })
       *  ])
       * ```
       *
       * @publicApi
       */


      function animate(timings) {
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 4
          /* Animate */
          ,
          styles: styles,
          timings: timings
        };
      }
      /**
       * @description Defines a list of animation steps to be run in parallel.
       *
       * @param steps An array of animation step objects.
       * - When steps are defined by `style()` or `animate()`
       * function calls, each call within the group is executed instantly.
       * - To specify offset styles to be applied at a later time, define steps with
       * `keyframes()`, or use `animate()` calls with a delay value.
       * For example:
       *
       * ```typescript
       * group([
       *   animate("1s", style({ background: "black" })),
       *   animate("2s", style({ color: "white" }))
       * ])
       * ```
       *
       * @param options An options object containing a delay and
       * developer-defined parameters that provide styling defaults and
       * can be overridden on invocation.
       *
       * @return An object that encapsulates the group data.
       *
       * @usageNotes
       * Grouped animations are useful when a series of styles must be
       * animated at different starting times and closed off at different ending times.
       *
       * When called within a `sequence()` or a
       * `transition()` call, does not continue to the next
       * instruction until all of the inner animation steps have completed.
       *
       * @publicApi
       */


      function group(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 3
          /* Group */
          ,
          steps: steps,
          options: options
        };
      }
      /**
       * Defines a list of animation steps to be run sequentially, one by one.
       *
       * @param steps An array of animation step objects.
       * - Steps defined by `style()` calls apply the styling data immediately.
       * - Steps defined by `animate()` calls apply the styling data over time
       *   as specified by the timing data.
       *
       * ```typescript
       * sequence([
       *   style({ opacity: 0 }),
       *   animate("1s", style({ opacity: 1 }))
       * ])
       * ```
       *
       * @param options An options object containing a delay and
       * developer-defined parameters that provide styling defaults and
       * can be overridden on invocation.
       *
       * @return An object that encapsulates the sequence data.
       *
       * @usageNotes
       * When you pass an array of steps to a
       * `transition()` call, the steps run sequentially by default.
       * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
       *parallel.
       *
       * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
       * execution continues to the next instruction only after each of the inner animation
       * steps have completed.
       *
       * @publicApi
       **/


      function sequence(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 2
          /* Sequence */
          ,
          steps: steps,
          options: options
        };
      }
      /**
       * Declares a key/value object containing CSS properties/styles that
       * can then be used for an animation `state`, within an animation `sequence`,
       * or as styling data for calls to `animate()` and `keyframes()`.
       *
       * @param tokens A set of CSS styles or HTML styles associated with an animation state.
       * The value can be any of the following:
       * - A key-value style pair associating a CSS property with a value.
       * - An array of key-value style pairs.
       * - An asterisk (*), to use auto-styling, where styles are derived from the element
       * being animated and applied to the animation when it starts.
       *
       * Auto-styling can be used to define a state that depends on layout or other
       * environmental factors.
       *
       * @return An object that encapsulates the style data.
       *
       * @usageNotes
       * The following examples create animation styles that collect a set of
       * CSS property values:
       *
       * ```typescript
       * // string values for CSS properties
       * style({ background: "red", color: "blue" })
       *
       * // numerical pixel values
       * style({ width: 100, height: 0 })
       * ```
       *
       * The following example uses auto-styling to allow a component to animate from
       * a height of 0 up to the height of the parent element:
       *
       * ```
       * style({ height: 0 }),
       * animate("1s", style({ height: "*" }))
       * ```
       *
       * @publicApi
       **/


      function style(tokens) {
        return {
          type: 6
          /* Style */
          ,
          styles: tokens,
          offset: null
        };
      }
      /**
       * Declares an animation state within a trigger attached to an element.
       *
       * @param name One or more names for the defined state in a comma-separated string.
       * The following reserved state names can be supplied to define a style for specific use
       * cases:
       *
       * - `void` You can associate styles with this name to be used when
       * the element is detached from the application. For example, when an `ngIf` evaluates
       * to false, the state of the associated element is void.
       *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
       * to be used as the fallback when the state that is being animated is not declared
       * within the trigger.
       *
       * @param styles A set of CSS styles associated with this state, created using the
       * `style()` function.
       * This set of styles persists on the element once the state has been reached.
       * @param options Parameters that can be passed to the state when it is invoked.
       * 0 or more key-value pairs.
       * @return An object that encapsulates the new state data.
       *
       * @usageNotes
       * Use the `trigger()` function to register states to an animation trigger.
       * Use the `transition()` function to animate between states.
       * When a state is active within a component, its associated styles persist on the element,
       * even when the animation ends.
       *
       * @publicApi
       **/


      function state(name, styles, options) {
        return {
          type: 0
          /* State */
          ,
          name: name,
          styles: styles,
          options: options
        };
      }
      /**
       * Defines a set of animation styles, associating each style with an optional `offset` value.
       *
       * @param steps A set of animation styles with optional offset data.
       * The optional `offset` value for a style specifies a percentage of the total animation
       * time at which that style is applied.
       * @returns An object that encapsulates the keyframes data.
       *
       * @usageNotes
       * Use with the `animate()` call. Instead of applying animations
       * from the current state
       * to the destination state, keyframes describe how each style entry is applied and at what point
       * within the animation arc.
       * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
       *
       * ### Usage
       *
       * In the following example, the offset values describe
       * when each `backgroundColor` value is applied. The color is red at the start, and changes to
       * blue when 20% of the total time has elapsed.
       *
       * ```typescript
       * // the provided offset values
       * animate("5s", keyframes([
       *   style({ backgroundColor: "red", offset: 0 }),
       *   style({ backgroundColor: "blue", offset: 0.2 }),
       *   style({ backgroundColor: "orange", offset: 0.3 }),
       *   style({ backgroundColor: "black", offset: 1 })
       * ]))
       * ```
       *
       * If there are no `offset` values specified in the style entries, the offsets
       * are calculated automatically.
       *
       * ```typescript
       * animate("5s", keyframes([
       *   style({ backgroundColor: "red" }) // offset = 0
       *   style({ backgroundColor: "blue" }) // offset = 0.33
       *   style({ backgroundColor: "orange" }) // offset = 0.66
       *   style({ backgroundColor: "black" }) // offset = 1
       * ]))
       *```
      
       * @publicApi
       */


      function keyframes(steps) {
        return {
          type: 5
          /* Keyframes */
          ,
          steps: steps
        };
      }
      /**
       * Declares an animation transition as a sequence of animation steps to run when a given
       * condition is satisfied. The condition is a Boolean expression or function that compares
       * the previous and current animation states, and returns true if this transition should occur.
       * When the state criteria of a defined transition are met, the associated animation is
       * triggered.
       *
       * @param stateChangeExpr A Boolean expression or function that compares the previous and current
       * animation states, and returns true if this transition should occur. Note that  "true" and "false"
       * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
       * animation trigger element.
       * The animation steps run when the expression evaluates to true.
       *
       * - A state-change string takes the form "state1 => state2", where each side is a defined animation
       * state, or an asterix (*) to refer to a dynamic start or end state.
       *   - The expression string can contain multiple comma-separated statements;
       * for example "state1 => state2, state3 => state4".
       *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
       * equivalent to  "void => *"  and "* => void".
       *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
       * increased or decreased in value.
       * - A function is executed each time a state change occurs in the animation trigger element.
       * The animation steps run when the function returns true.
       *
       * @param steps One or more animation objects, as returned by the `animate()` or
       * `sequence()` function, that form a transformation from one state to another.
       * A sequence is used by default when you pass an array.
       * @param options An options object that can contain a delay value for the start of the animation,
       * and additional developer-defined parameters. Provided values for additional parameters are used
       * as defaults, and override values can be passed to the caller on invocation.
       * @returns An object that encapsulates the transition data.
       *
       * @usageNotes
       * The template associated with a component binds an animation trigger to an element.
       *
       * ```HTML
       * <!-- somewhere inside of my-component-tpl.html -->
       * <div [@myAnimationTrigger]="myStatusExp">...</div>
       * ```
       *
       * All transitions are defined within an animation trigger,
       * along with named states that the transitions change to and from.
       *
       * ```typescript
       * trigger("myAnimationTrigger", [
       *  // define states
       *  state("on", style({ background: "green" })),
       *  state("off", style({ background: "grey" })),
       *  ...]
       * ```
       *
       * Note that when you call the `sequence()` function within a `{@link animations/group group()}`
       * or a `transition()` call, execution does not continue to the next instruction
       * until each of the inner animation steps have completed.
       *
       * ### Syntax examples
       *
       * The following examples define transitions between the two defined states (and default states),
       * using various options:
       *
       * ```typescript
       * // Transition occurs when the state value
       * // bound to "myAnimationTrigger" changes from "on" to "off"
       * transition("on => off", animate(500))
       * // Run the same animation for both directions
       * transition("on <=> off", animate(500))
       * // Define multiple state-change pairs separated by commas
       * transition("on => off, off => void", animate(500))
       * ```
       *
       * ### Special values for state-change expressions
       *
       * - Catch-all state change for when an element is inserted into the page and the
       * destination state is unknown:
       *
       * ```typescript
       * transition("void => *", [
       *  style({ opacity: 0 }),
       *  animate(500)
       *  ])
       * ```
       *
       * - Capture a state change between any states:
       *
       *  `transition("* => *", animate("1s 0s"))`
       *
       * - Entry and exit transitions:
       *
       * ```typescript
       * transition(":enter", [
       *   style({ opacity: 0 }),
       *   animate(500, style({ opacity: 1 }))
       *   ]),
       * transition(":leave", [
       *   animate(500, style({ opacity: 0 }))
       *   ])
       * ```
       *
       * - Use `:increment` and `:decrement` to initiate transitions:
       *
       * ```typescript
       * transition(":increment", group([
       *  query(':enter', [
       *     style({ left: '100%' }),
       *     animate('0.5s ease-out', style('*'))
       *   ]),
       *  query(':leave', [
       *     animate('0.5s ease-out', style({ left: '-100%' }))
       *  ])
       * ]))
       *
       * transition(":decrement", group([
       *  query(':enter', [
       *     style({ left: '100%' }),
       *     animate('0.5s ease-out', style('*'))
       *   ]),
       *  query(':leave', [
       *     animate('0.5s ease-out', style({ left: '-100%' }))
       *  ])
       * ]))
       * ```
       *
       * ### State-change functions
       *
       * Here is an example of a `fromState` specified as a state-change function that invokes an
       * animation when true:
       *
       * ```typescript
       * transition((fromState, toState) =>
       *  {
       *   return fromState == "off" && toState == "on";
       *  },
       *  animate("1s 0s"))
       * ```
       *
       * ### Animating to the final state
       *
       * If the final step in a transition is a call to `animate()` that uses a timing value
       * with no style data, that step is automatically considered the final animation arc,
       * for the element to reach the final state. Angular automatically adds or removes
       * CSS styles to ensure that the element is in the correct final state.
       *
       * The following example defines a transition that starts by hiding the element,
       * then makes sure that it animates properly to whatever state is currently active for trigger:
       *
       * ```typescript
       * transition("void => *", [
       *   style({ opacity: 0 }),
       *   animate(500)
       *  ])
       * ```
       * ### Boolean value matching
       * If a trigger binding value is a Boolean, it can be matched using a transition expression
       * that compares true and false or 1 and 0. For example:
       *
       * ```
       * // in the template
       * <div [@openClose]="open ? true : false">...</div>
       * // in the component metadata
       * trigger('openClose', [
       *   state('true', style({ height: '*' })),
       *   state('false', style({ height: '0px' })),
       *   transition('false <=> true', animate(500))
       * ])
       * ```
       *
       * @publicApi
       **/


      function transition(stateChangeExpr, steps) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return {
          type: 1
          /* Transition */
          ,
          expr: stateChangeExpr,
          animation: steps,
          options: options
        };
      }
      /**
       * Produces a reusable animation that can be invoked in another animation or sequence,
       * by calling the `useAnimation()` function.
       *
       * @param steps One or more animation objects, as returned by the `animate()`
       * or `sequence()` function, that form a transformation from one state to another.
       * A sequence is used by default when you pass an array.
       * @param options An options object that can contain a delay value for the start of the
       * animation, and additional developer-defined parameters.
       * Provided values for additional parameters are used as defaults,
       * and override values can be passed to the caller on invocation.
       * @returns An object that encapsulates the animation data.
       *
       * @usageNotes
       * The following example defines a reusable animation, providing some default parameter
       * values.
       *
       * ```typescript
       * var fadeAnimation = animation([
       *   style({ opacity: '{{ start }}' }),
       *   animate('{{ time }}',
       *   style({ opacity: '{{ end }}'}))
       *   ],
       *   { params: { time: '1000ms', start: 0, end: 1 }});
       * ```
       *
       * The following invokes the defined animation with a call to `useAnimation()`,
       * passing in override parameter values.
       *
       * ```js
       * useAnimation(fadeAnimation, {
       *   params: {
       *     time: '2s',
       *     start: 1,
       *     end: 0
       *   }
       * })
       * ```
       *
       * If any of the passed-in parameter values are missing from this call,
       * the default values are used. If one or more parameter values are missing before a step is
       * animated, `useAnimation()` throws an error.
       *
       * @publicApi
       */


      function animation(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 8
          /* Reference */
          ,
          animation: steps,
          options: options
        };
      }
      /**
       * Executes a queried inner animation element within an animation sequence.
       *
       * @param options An options object that can contain a delay value for the start of the
       * animation, and additional override values for developer-defined parameters.
       * @return An object that encapsulates the child animation data.
       *
       * @usageNotes
       * Each time an animation is triggered in Angular, the parent animation
       * has priority and any child animations are blocked. In order
       * for a child animation to run, the parent animation must query each of the elements
       * containing child animations, and run them using this function.
       *
       * Note that this feature is designed to be used with `query()` and it will only work
       * with animations that are assigned using the Angular animation library. CSS keyframes
       * and transitions are not handled by this API.
       *
       * @publicApi
       */


      function animateChild() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return {
          type: 9
          /* AnimateChild */
          ,
          options: options
        };
      }
      /**
       * Starts a reusable animation that is created using the `animation()` function.
       *
       * @param animation The reusable animation to start.
       * @param options An options object that can contain a delay value for the start of
       * the animation, and additional override values for developer-defined parameters.
       * @return An object that contains the animation parameters.
       *
       * @publicApi
       */


      function useAnimation(animation) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 10
          /* AnimateRef */
          ,
          animation: animation,
          options: options
        };
      }
      /**
       * Finds one or more inner elements within the current element that is
       * being animated within a sequence. Use with `animate()`.
       *
       * @param selector The element to query, or a set of elements that contain Angular-specific
       * characteristics, specified with one or more of the following tokens.
       *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
       *  - `query(":animating")` : Query all currently animating elements.
       *  - `query("@triggerName")` : Query elements that contain an animation trigger.
       *  - `query("@*")` : Query all elements that contain an animation triggers.
       *  - `query(":self")` : Include the current element into the animation sequence.
       *
       * @param animation One or more animation steps to apply to the queried element or elements.
       * An array is treated as an animation sequence.
       * @param options An options object. Use the 'limit' field to limit the total number of
       * items to collect.
       * @return An object that encapsulates the query data.
       *
       * @usageNotes
       * Tokens can be merged into a combined query selector string. For example:
       *
       * ```typescript
       *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
       * ```
       *
       * The `query()` function collects multiple elements and works internally by using
       * `element.querySelectorAll`. Use the `limit` field of an options object to limit
       * the total number of items to be collected. For example:
       *
       * ```js
       * query('div', [
       *   animate(...),
       *   animate(...)
       * ], { limit: 1 })
       * ```
       *
       * By default, throws an error when zero items are found. Set the
       * `optional` flag to ignore this error. For example:
       *
       * ```js
       * query('.some-element-that-may-not-be-there', [
       *   animate(...),
       *   animate(...)
       * ], { optional: true })
       * ```
       *
       * ### Usage Example
       *
       * The following example queries for inner elements and animates them
       * individually using `animate()`.
       *
       * ```typescript
       * @Component({
       *   selector: 'inner',
       *   template: `
       *     <div [@queryAnimation]="exp">
       *       <h1>Title</h1>
       *       <div class="content">
       *         Blah blah blah
       *       </div>
       *     </div>
       *   `,
       *   animations: [
       *    trigger('queryAnimation', [
       *      transition('* => goAnimate', [
       *        // hide the inner elements
       *        query('h1', style({ opacity: 0 })),
       *        query('.content', style({ opacity: 0 })),
       *
       *        // animate the inner elements in, one by one
       *        query('h1', animate(1000, style({ opacity: 1 }))),
       *        query('.content', animate(1000, style({ opacity: 1 }))),
       *      ])
       *    ])
       *  ]
       * })
       * class Cmp {
       *   exp = '';
       *
       *   goAnimate() {
       *     this.exp = 'goAnimate';
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      function query(selector, animation) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return {
          type: 11
          /* Query */
          ,
          selector: selector,
          animation: animation,
          options: options
        };
      }
      /**
       * Use within an animation `query()` call to issue a timing gap after
       * each queried item is animated.
       *
       * @param timings A delay value.
       * @param animation One ore more animation steps.
       * @returns An object that encapsulates the stagger data.
       *
       * @usageNotes
       * In the following example, a container element wraps a list of items stamped out
       * by an `ngFor`. The container element contains an animation trigger that will later be set
       * to query for each of the inner items.
       *
       * Each time items are added, the opacity fade-in animation runs,
       * and each removed item is faded out.
       * When either of these animations occur, the stagger effect is
       * applied after each item's animation is started.
       *
       * ```html
       * <!-- list.component.html -->
       * <button (click)="toggle()">Show / Hide Items</button>
       * <hr />
       * <div [@listAnimation]="items.length">
       *   <div *ngFor="let item of items">
       *     {{ item }}
       *   </div>
       * </div>
       * ```
       *
       * Here is the component code:
       *
       * ```typescript
       * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
       * @Component({
       *   templateUrl: 'list.component.html',
       *   animations: [
       *     trigger('listAnimation', [
       *     ...
       *     ])
       *   ]
       * })
       * class ListComponent {
       *   items = [];
       *
       *   showItems() {
       *     this.items = [0,1,2,3,4];
       *   }
       *
       *   hideItems() {
       *     this.items = [];
       *   }
       *
       *   toggle() {
       *     this.items.length ? this.hideItems() : this.showItems();
       *    }
       *  }
       * ```
       *
       * Here is the animation trigger code:
       *
       * ```typescript
       * trigger('listAnimation', [
       *   transition('* => *', [ // each time the binding value changes
       *     query(':leave', [
       *       stagger(100, [
       *         animate('0.5s', style({ opacity: 0 }))
       *       ])
       *     ]),
       *     query(':enter', [
       *       style({ opacity: 0 }),
       *       stagger(100, [
       *         animate('0.5s', style({ opacity: 1 }))
       *       ])
       *     ])
       *   ])
       * ])
       * ```
       *
       * @publicApi
       */


      function stagger(timings, animation) {
        return {
          type: 12
          /* Stagger */
          ,
          timings: timings,
          animation: animation
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function scheduleMicroTask(cb) {
        Promise.resolve(null).then(cb);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An empty programmatic controller for reusable animations.
       * Used internally when animations are disabled, to avoid
       * checking for the null case when an animation player is expected.
       *
       * @see `animate()`
       * @see `AnimationPlayer`
       * @see `GroupPlayer`
       *
       * @publicApi
       */


      var NoopAnimationPlayer = /*#__PURE__*/function () {
        function NoopAnimationPlayer() {
          var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, NoopAnimationPlayer);

          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._started = false;
          this._destroyed = false;
          this._finished = false;
          this._position = 0;
          this.parentPlayer = null;
          this.totalTime = duration + delay;
        }

        _createClass2(NoopAnimationPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "init",
          value: function init() {}
        }, {
          key: "play",
          value: function play() {
            if (!this.hasStarted()) {
              this._onStart();

              this.triggerMicrotask();
            }

            this._started = true;
          }
          /** @internal */

        }, {
          key: "triggerMicrotask",
          value: function triggerMicrotask() {
            var _this113 = this;

            scheduleMicroTask(function () {
              return _this113._onFinish();
            });
          }
        }, {
          key: "_onStart",
          value: function _onStart() {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });

            this._onStartFns = [];
          }
        }, {
          key: "pause",
          value: function pause() {}
        }, {
          key: "restart",
          value: function restart() {}
        }, {
          key: "finish",
          value: function finish() {
            this._onFinish();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              if (!this.hasStarted()) {
                this._onStart();
              }

              this.finish();

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "setPosition",
          value: function setPosition(position) {
            this._position = this.totalTime ? position * this.totalTime : 1;
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.totalTime ? this._position / this.totalTime : 1;
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return NoopAnimationPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A programmatic controller for a group of reusable animations.
       * Used internally to control animations.
       *
       * @see `AnimationPlayer`
       * @see `{@link animations/group group()}`
       *
       */


      var AnimationGroupPlayer = /*#__PURE__*/function () {
        function AnimationGroupPlayer(_players) {
          var _this114 = this;

          _classCallCheck(this, AnimationGroupPlayer);

          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this._onDestroyFns = [];
          this.parentPlayer = null;
          this.totalTime = 0;
          this.players = _players;
          var doneCount = 0;
          var destroyCount = 0;
          var startCount = 0;
          var total = this.players.length;

          if (total == 0) {
            scheduleMicroTask(function () {
              return _this114._onFinish();
            });
          } else {
            this.players.forEach(function (player) {
              player.onDone(function () {
                if (++doneCount == total) {
                  _this114._onFinish();
                }
              });
              player.onDestroy(function () {
                if (++destroyCount == total) {
                  _this114._onDestroy();
                }
              });
              player.onStart(function () {
                if (++startCount == total) {
                  _this114._onStart();
                }
              });
            });
          }

          this.totalTime = this.players.reduce(function (time, player) {
            return Math.max(time, player.totalTime);
          }, 0);
        }

        _createClass2(AnimationGroupPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "init",
          value: function init() {
            this.players.forEach(function (player) {
              return player.init();
            });
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "_onStart",
          value: function _onStart() {
            if (!this.hasStarted()) {
              this._started = true;

              this._onStartFns.forEach(function (fn) {
                return fn();
              });

              this._onStartFns = [];
            }
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "play",
          value: function play() {
            if (!this.parentPlayer) {
              this.init();
            }

            this._onStart();

            this.players.forEach(function (player) {
              return player.play();
            });
          }
        }, {
          key: "pause",
          value: function pause() {
            this.players.forEach(function (player) {
              return player.pause();
            });
          }
        }, {
          key: "restart",
          value: function restart() {
            this.players.forEach(function (player) {
              return player.restart();
            });
          }
        }, {
          key: "finish",
          value: function finish() {
            this._onFinish();

            this.players.forEach(function (player) {
              return player.finish();
            });
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._onDestroy();
          }
        }, {
          key: "_onDestroy",
          value: function _onDestroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              this._onFinish();

              this.players.forEach(function (player) {
                return player.destroy();
              });

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "reset",
          value: function reset() {
            this.players.forEach(function (player) {
              return player.reset();
            });
            this._destroyed = false;
            this._finished = false;
            this._started = false;
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            var timeAtPosition = p * this.totalTime;
            this.players.forEach(function (player) {
              var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
              player.setPosition(position);
            });
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            var longestPlayer = this.players.reduce(function (longestSoFar, player) {
              var newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
              return newPlayerIsLongest ? player : longestSoFar;
            }, null);
            return longestPlayer != null ? longestPlayer.getPosition() : 0;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            this.players.forEach(function (player) {
              if (player.beforeDestroy) {
                player.beforeDestroy();
              }
            });
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return AnimationGroupPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵPRE_STYLE = '!';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=animations.js.map

      /***/
    },

    /***/
    "R1ws":
    /*!************************************************************************************!*\
      !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/animations.js ***!
      \************************************************************************************/

    /*! exports provided: ANIMATION_MODULE_TYPE, BrowserAnimationsModule, NoopAnimationsModule, ɵAnimationRenderer, ɵAnimationRendererFactory, ɵBrowserAnimationBuilder, ɵBrowserAnimationFactory, ɵInjectableAnimationEngine, ɵangular_packages_platform_browser_animations_animations_a, ɵangular_packages_platform_browser_animations_animations_b, ɵangular_packages_platform_browser_animations_animations_c, ɵangular_packages_platform_browser_animations_animations_d, ɵangular_packages_platform_browser_animations_animations_e, ɵangular_packages_platform_browser_animations_animations_f */

    /***/
    function R1ws(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ANIMATION_MODULE_TYPE", function () {
        return ANIMATION_MODULE_TYPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BrowserAnimationsModule", function () {
        return BrowserAnimationsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NoopAnimationsModule", function () {
        return NoopAnimationsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimationRenderer", function () {
        return AnimationRenderer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimationRendererFactory", function () {
        return AnimationRendererFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBrowserAnimationBuilder", function () {
        return BrowserAnimationBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBrowserAnimationFactory", function () {
        return BrowserAnimationFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵInjectableAnimationEngine", function () {
        return InjectableAnimationEngine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_a", function () {
        return instantiateSupportedAnimationDriver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_b", function () {
        return instantiateDefaultStyleNormalizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_c", function () {
        return instantiateRendererFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_d", function () {
        return BROWSER_ANIMATIONS_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_e", function () {
        return BROWSER_NOOP_ANIMATIONS_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_f", function () {
        return BaseAnimationRenderer;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/platform-browser */
      "jhN1");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/animations */
      "R0Ic");
      /* harmony import */


      var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/animations/browser */
      "t9l1");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BrowserAnimationBuilder = /*#__PURE__*/function (_angular_animations__) {
        _inherits(BrowserAnimationBuilder, _angular_animations__);

        var _super83 = _createSuper(BrowserAnimationBuilder);

        function BrowserAnimationBuilder(rootRenderer, doc) {
          var _this115;

          _classCallCheck(this, BrowserAnimationBuilder);

          _this115 = _super83.call(this);
          _this115._nextAnimationId = 0;
          var typeData = {
            id: '0',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [],
            data: {
              animation: []
            }
          };
          _this115._renderer = rootRenderer.createRenderer(doc.body, typeData);
          return _this115;
        }

        _createClass2(BrowserAnimationBuilder, [{
          key: "build",
          value: function build(animation) {
            var id = this._nextAnimationId.toString();

            this._nextAnimationId++;
            var entry = Array.isArray(animation) ? Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["sequence"])(animation) : animation;
            issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
            return new BrowserAnimationFactory(id, this._renderer);
          }
        }]);

        return BrowserAnimationBuilder;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationBuilder"]);

      BrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) {
        return new (t || BrowserAnimationBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]));
      };

      BrowserAnimationBuilder.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: BrowserAnimationBuilder,
        factory: BrowserAnimationBuilder.ɵfac
      });

      BrowserAnimationBuilder.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserAnimationBuilder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();

      var BrowserAnimationFactory = /*#__PURE__*/function (_angular_animations__2) {
        _inherits(BrowserAnimationFactory, _angular_animations__2);

        var _super84 = _createSuper(BrowserAnimationFactory);

        function BrowserAnimationFactory(_id, _renderer) {
          var _this116;

          _classCallCheck(this, BrowserAnimationFactory);

          _this116 = _super84.call(this);
          _this116._id = _id;
          _this116._renderer = _renderer;
          return _this116;
        }

        _createClass2(BrowserAnimationFactory, [{
          key: "create",
          value: function create(element, options) {
            return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
          }
        }]);

        return BrowserAnimationFactory;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationFactory"]);

      var RendererAnimationPlayer = /*#__PURE__*/function () {
        function RendererAnimationPlayer(id, element, options, _renderer) {
          _classCallCheck(this, RendererAnimationPlayer);

          this.id = id;
          this.element = element;
          this._renderer = _renderer;
          this.parentPlayer = null;
          this._started = false;
          this.totalTime = 0;

          this._command('create', options);
        }

        _createClass2(RendererAnimationPlayer, [{
          key: "_listen",
          value: function _listen(eventName, callback) {
            return this._renderer.listen(this.element, "@@".concat(this.id, ":").concat(eventName), callback);
          }
        }, {
          key: "_command",
          value: function _command(command) {
            for (var _len24 = arguments.length, args = new Array(_len24 > 1 ? _len24 - 1 : 0), _key24 = 1; _key24 < _len24; _key24++) {
              args[_key24 - 1] = arguments[_key24];
            }

            return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._listen('done', fn);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._listen('start', fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._listen('destroy', fn);
          }
        }, {
          key: "init",
          value: function init() {
            this._command('init');
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "play",
          value: function play() {
            this._command('play');

            this._started = true;
          }
        }, {
          key: "pause",
          value: function pause() {
            this._command('pause');
          }
        }, {
          key: "restart",
          value: function restart() {
            this._command('restart');
          }
        }, {
          key: "finish",
          value: function finish() {
            this._command('finish');
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._command('destroy');
          }
        }, {
          key: "reset",
          value: function reset() {
            this._command('reset');
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            this._command('setPosition', p);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            var _a, _b;

            return (_b = (_a = this._renderer.engine.players[+this.id]) === null || _a === void 0 ? void 0 : _a.getPosition()) !== null && _b !== void 0 ? _b : 0;
          }
        }]);

        return RendererAnimationPlayer;
      }();

      function issueAnimationCommand(renderer, element, id, command, args) {
        return renderer.setProperty(element, "@@".concat(id, ":").concat(command), args);
      }

      var ANIMATION_PREFIX = '@';
      var DISABLE_ANIMATIONS_FLAG = '@.disabled';

      var AnimationRendererFactory = /*#__PURE__*/function () {
        function AnimationRendererFactory(delegate, engine, _zone) {
          _classCallCheck(this, AnimationRendererFactory);

          this.delegate = delegate;
          this.engine = engine;
          this._zone = _zone;
          this._currentId = 0;
          this._microtaskId = 1;
          this._animationCallbacksBuffer = [];
          this._rendererCache = new Map();
          this._cdRecurDepth = 0;
          this.promise = Promise.resolve(0);

          engine.onRemovalComplete = function (element, delegate) {
            // Note: if an component element has a leave animation, and the component
            // a host leave animation, the view engine will call `removeChild` for the parent
            // component renderer as well as for the child component renderer.
            // Therefore, we need to check if we already removed the element.
            if (delegate && delegate.parentNode(element)) {
              delegate.removeChild(element.parentNode, element);
            }
          };
        }

        _createClass2(AnimationRendererFactory, [{
          key: "createRenderer",
          value: function createRenderer(hostElement, type) {
            var _this117 = this;

            var EMPTY_NAMESPACE_ID = ''; // cache the delegates to find out which cached delegate can
            // be used by which cached renderer

            var delegate = this.delegate.createRenderer(hostElement, type);

            if (!hostElement || !type || !type.data || !type.data['animation']) {
              var renderer = this._rendererCache.get(delegate);

              if (!renderer) {
                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine); // only cache this result when the base renderer is used

                this._rendererCache.set(delegate, renderer);
              }

              return renderer;
            }

            var componentId = type.id;
            var namespaceId = type.id + '-' + this._currentId;
            this._currentId++;
            this.engine.register(namespaceId, hostElement);

            var registerTrigger = function registerTrigger(trigger) {
              if (Array.isArray(trigger)) {
                trigger.forEach(registerTrigger);
              } else {
                _this117.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
              }
            };

            var animationTriggers = type.data['animation'];
            animationTriggers.forEach(registerTrigger);
            return new AnimationRenderer(this, namespaceId, delegate, this.engine);
          }
        }, {
          key: "begin",
          value: function begin() {
            this._cdRecurDepth++;

            if (this.delegate.begin) {
              this.delegate.begin();
            }
          }
        }, {
          key: "_scheduleCountTask",
          value: function _scheduleCountTask() {
            var _this118 = this;

            // always use promise to schedule microtask instead of use Zone
            this.promise.then(function () {
              _this118._microtaskId++;
            });
          }
          /** @internal */

        }, {
          key: "scheduleListenerCallback",
          value: function scheduleListenerCallback(count, fn, data) {
            var _this119 = this;

            if (count >= 0 && count < this._microtaskId) {
              this._zone.run(function () {
                return fn(data);
              });

              return;
            }

            if (this._animationCallbacksBuffer.length == 0) {
              Promise.resolve(null).then(function () {
                _this119._zone.run(function () {
                  _this119._animationCallbacksBuffer.forEach(function (tuple) {
                    var _tuple = _slicedToArray(tuple, 2),
                        fn = _tuple[0],
                        data = _tuple[1];

                    fn(data);
                  });

                  _this119._animationCallbacksBuffer = [];
                });
              });
            }

            this._animationCallbacksBuffer.push([fn, data]);
          }
        }, {
          key: "end",
          value: function end() {
            var _this120 = this;

            this._cdRecurDepth--; // this is to prevent animations from running twice when an inner
            // component does CD when a parent component instead has inserted it

            if (this._cdRecurDepth == 0) {
              this._zone.runOutsideAngular(function () {
                _this120._scheduleCountTask();

                _this120.engine.flush(_this120._microtaskId);
              });
            }

            if (this.delegate.end) {
              this.delegate.end();
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            return this.engine.whenRenderingDone();
          }
        }]);

        return AnimationRendererFactory;
      }();

      AnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) {
        return new (t || AnimationRendererFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      };

      AnimationRendererFactory.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: AnimationRendererFactory,
        factory: AnimationRendererFactory.ɵfac
      });

      AnimationRendererFactory.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AnimationRendererFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }];
        }, null);
      })();

      var BaseAnimationRenderer = /*#__PURE__*/function () {
        function BaseAnimationRenderer(namespaceId, delegate, engine) {
          _classCallCheck(this, BaseAnimationRenderer);

          this.namespaceId = namespaceId;
          this.delegate = delegate;
          this.engine = engine;
          this.destroyNode = this.delegate.destroyNode ? function (n) {
            return delegate.destroyNode(n);
          } : null;
        }

        _createClass2(BaseAnimationRenderer, [{
          key: "data",
          get: function get() {
            return this.delegate.data;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.engine.destroy(this.namespaceId, this.delegate);
            this.delegate.destroy();
          }
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            return this.delegate.createElement(name, namespace);
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            return this.delegate.createComment(value);
          }
        }, {
          key: "createText",
          value: function createText(value) {
            return this.delegate.createText(value);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            this.delegate.appendChild(parent, newChild);
            this.engine.onInsert(this.namespaceId, newChild, parent, false);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            var isMove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            this.delegate.insertBefore(parent, newChild, refChild); // If `isMove` true than we should animate this insert.

            this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild, isHostElement) {
            this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            return this.delegate.selectRootElement(selectorOrNode, preserveContent);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.delegate.parentNode(node);
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            this.delegate.setAttribute(el, name, value, namespace);
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            this.delegate.removeAttribute(el, name, namespace);
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            this.delegate.addClass(el, name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            this.delegate.removeClass(el, name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            this.delegate.setStyle(el, style, value, flags);
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            this.delegate.removeStyle(el, style, flags);
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
              this.disableAnimations(el, !!value);
            } else {
              this.delegate.setProperty(el, name, value);
            }
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            this.delegate.setValue(node, value);
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            return this.delegate.listen(target, eventName, callback);
          }
        }, {
          key: "disableAnimations",
          value: function disableAnimations(element, value) {
            this.engine.disableAnimations(element, value);
          }
        }]);

        return BaseAnimationRenderer;
      }();

      var AnimationRenderer = /*#__PURE__*/function (_BaseAnimationRendere) {
        _inherits(AnimationRenderer, _BaseAnimationRendere);

        var _super85 = _createSuper(AnimationRenderer);

        function AnimationRenderer(factory, namespaceId, delegate, engine) {
          var _this121;

          _classCallCheck(this, AnimationRenderer);

          _this121 = _super85.call(this, namespaceId, delegate, engine);
          _this121.factory = factory;
          _this121.namespaceId = namespaceId;
          return _this121;
        }

        _createClass2(AnimationRenderer, [{
          key: "setProperty",
          value: function setProperty(el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX) {
              if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
                value = value === undefined ? true : !!value;
                this.disableAnimations(el, value);
              } else {
                this.engine.process(this.namespaceId, el, name.substr(1), value);
              }
            } else {
              this.delegate.setProperty(el, name, value);
            }
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            var _this122 = this;

            if (eventName.charAt(0) == ANIMATION_PREFIX) {
              var element = resolveElementFromTarget(target);
              var name = eventName.substr(1);
              var phase = ''; // @listener.phase is for trigger animation callbacks
              // @@listener is for animation builder callbacks

              if (name.charAt(0) != ANIMATION_PREFIX) {
                var _parseTriggerCallback = parseTriggerCallbackName(name);

                var _parseTriggerCallback2 = _slicedToArray(_parseTriggerCallback, 2);

                name = _parseTriggerCallback2[0];
                phase = _parseTriggerCallback2[1];
              }

              return this.engine.listen(this.namespaceId, element, name, phase, function (event) {
                var countId = event['_data'] || -1;

                _this122.factory.scheduleListenerCallback(countId, callback, event);
              });
            }

            return this.delegate.listen(target, eventName, callback);
          }
        }]);

        return AnimationRenderer;
      }(BaseAnimationRenderer);

      function resolveElementFromTarget(target) {
        switch (target) {
          case 'body':
            return document.body;

          case 'document':
            return document;

          case 'window':
            return window;

          default:
            return target;
        }
      }

      function parseTriggerCallbackName(triggerName) {
        var dotIndex = triggerName.indexOf('.');
        var trigger = triggerName.substring(0, dotIndex);
        var phase = triggerName.substr(dotIndex + 1);
        return [trigger, phase];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var InjectableAnimationEngine = /*#__PURE__*/function (_angular_animations_b) {
        _inherits(InjectableAnimationEngine, _angular_animations_b);

        var _super86 = _createSuper(InjectableAnimationEngine);

        function InjectableAnimationEngine(doc, driver, normalizer) {
          _classCallCheck(this, InjectableAnimationEngine);

          return _super86.call(this, doc.body, driver, normalizer);
        }

        return InjectableAnimationEngine;
      }(_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]);

      InjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) {
        return new (t || InjectableAnimationEngine)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]));
      };

      InjectableAnimationEngine.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: InjectableAnimationEngine,
        factory: InjectableAnimationEngine.ɵfac
      });

      InjectableAnimationEngine.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
          }]
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"]
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InjectableAnimationEngine, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
            }]
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"]
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]
          }];
        }, null);
      })();

      function instantiateSupportedAnimationDriver() {
        return Object(_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵsupportsWebAnimations"])() ? new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsDriver"]() : new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵCssKeyframesDriver"]();
      }

      function instantiateDefaultStyleNormalizer() {
        return new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsStyleNormalizer"]();
      }

      function instantiateRendererFactory(renderer, engine, zone) {
        return new AnimationRendererFactory(renderer, engine, zone);
      }
      /**
       * @publicApi
       */


      var ANIMATION_MODULE_TYPE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('AnimationModuleType');
      var SHARED_ANIMATION_PROVIDERS = [{
        provide: _angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationBuilder"],
        useClass: BrowserAnimationBuilder
      }, {
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"],
        useFactory: instantiateDefaultStyleNormalizer
      }, {
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"],
        useClass: InjectableAnimationEngine
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"],
        useFactory: instantiateRendererFactory,
        deps: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["ɵDomRendererFactory2"], _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]]
      }];
      /**
       * Separate providers from the actual module so that we can do a local modification in Google3 to
       * include them in the BrowserModule.
       */

      var BROWSER_ANIMATIONS_PROVIDERS = [{
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"],
        useFactory: instantiateSupportedAnimationDriver
      }, {
        provide: ANIMATION_MODULE_TYPE,
        useValue: 'BrowserAnimations'
      }].concat(SHARED_ANIMATION_PROVIDERS);
      /**
       * Separate providers from the actual module so that we can do a local modification in Google3 to
       * include them in the BrowserTestingModule.
       */

      var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"],
        useClass: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵNoopAnimationDriver"]
      }, {
        provide: ANIMATION_MODULE_TYPE,
        useValue: 'NoopAnimations'
      }].concat(SHARED_ANIMATION_PROVIDERS);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
       * for use with animations. See [Animations](guide/animations).
       * @publicApi
       */

      var BrowserAnimationsModule = function BrowserAnimationsModule() {
        _classCallCheck(this, BrowserAnimationsModule);
      };

      BrowserAnimationsModule.ɵfac = function BrowserAnimationsModule_Factory(t) {
        return new (t || BrowserAnimationsModule)();
      };

      BrowserAnimationsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: BrowserAnimationsModule
      });
      BrowserAnimationsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: BROWSER_ANIMATIONS_PROVIDERS,
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](BrowserAnimationsModule, {
          exports: function exports() {
            return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserAnimationsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]],
            providers: BROWSER_ANIMATIONS_PROVIDERS
          }]
        }], null, null);
      })();
      /**
       * A null player that must be imported to allow disabling of animations.
       * @publicApi
       */


      var NoopAnimationsModule = function NoopAnimationsModule() {
        _classCallCheck(this, NoopAnimationsModule);
      };

      NoopAnimationsModule.ɵfac = function NoopAnimationsModule_Factory(t) {
        return new (t || NoopAnimationsModule)();
      };

      NoopAnimationsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: NoopAnimationsModule
      });
      NoopAnimationsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](NoopAnimationsModule, {
          exports: function exports() {
            return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NoopAnimationsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]],
            providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=animations.js.map

      /***/

    },

    /***/
    "RUbi":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js ***!
      \************************************************************************/

    /*! exports provided: AsapScheduler */

    /***/
    function RUbi(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsapScheduler", function () {
        return AsapScheduler;
      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      "IjjT");

      var AsapScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP2) {
        _inherits(AsapScheduler, _AsyncScheduler__WEBP2);

        var _super87 = _createSuper(AsapScheduler);

        function AsapScheduler() {
          _classCallCheck(this, AsapScheduler);

          return _super87.apply(this, arguments);
        }

        _createClass2(AsapScheduler, [{
          key: "flush",
          value: function flush(action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (++index < count && (action = actions.shift()));

            this.active = false;

            if (error) {
              while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return AsapScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=AsapScheduler.js.map

      /***/

    },

    /***/
    "SeVD":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js ***!
      \*****************************************************************/

    /*! exports provided: subscribeTo */

    /***/
    function SeVD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeTo", function () {
        return subscribeTo;
      });
      /* harmony import */


      var _subscribeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./subscribeToArray */
      "ngJS");
      /* harmony import */


      var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./subscribeToPromise */
      "a7t3");
      /* harmony import */


      var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./subscribeToIterable */
      "pLzU");
      /* harmony import */


      var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./subscribeToObservable */
      "CRDf");
      /* harmony import */


      var _isArrayLike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./isArrayLike */
      "I55L");
      /* harmony import */


      var _isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./isPromise */
      "c2HN");
      /* harmony import */


      var _isObject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./isObject */
      "XoHu");
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../symbol/iterator */
      "Lhse");
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../symbol/observable */
      "kJWO");

      var subscribeTo = function subscribeTo(result) {
        if (!!result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__["observable"]] === 'function') {
          return Object(_subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__["subscribeToObservable"])(result);
        } else if (Object(_isArrayLike__WEBPACK_IMPORTED_MODULE_4__["isArrayLike"])(result)) {
          return Object(_subscribeToArray__WEBPACK_IMPORTED_MODULE_0__["subscribeToArray"])(result);
        } else if (Object(_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(result)) {
          return Object(_subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__["subscribeToPromise"])(result);
        } else if (!!result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_7__["iterator"]] === 'function') {
          return Object(_subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__["subscribeToIterable"])(result);
        } else {
          var value = Object(_isObject__WEBPACK_IMPORTED_MODULE_6__["isObject"])(result) ? 'an invalid object' : "'".concat(result, "'");
          var msg = "You provided ".concat(value, " where a stream was expected.") + ' You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
        }
      }; //# sourceMappingURL=subscribeTo.js.map

      /***/

    },

    /***/
    "SpAZ":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/identity.js ***!
      \**************************************************************/

    /*! exports provided: identity */

    /***/
    function SpAZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "identity", function () {
        return identity;
      });

      function identity(x) {
        return x;
      } //# sourceMappingURL=identity.js.map

      /***/

    },

    /***/
    "SxV6":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/first.js ***!
      \****************************************************************/

    /*! exports provided: first */

    /***/
    function SxV6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "first", function () {
        return first;
      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/EmptyError */
      "sVev");
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./filter */
      "pLZG");
      /* harmony import */


      var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./take */
      "IzEk");
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      "xbPD");
      /* harmony import */


      var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./throwIfEmpty */
      "XDbj");
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/identity */
      "SpAZ");

      function first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
            return predicate(v, i, source);
          }) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_take__WEBPACK_IMPORTED_MODULE_2__["take"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__["throwIfEmpty"])(function () {
            return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
          }));
        };
      } //# sourceMappingURL=first.js.map

      /***/

    },

    /***/
    "UGaM":
    /*!**************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js ***!
      \**************************************************************************/

    /*! exports provided: publishBehavior */

    /***/
    function UGaM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "publishBehavior", function () {
        return publishBehavior;
      });
      /* harmony import */


      var _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../BehaviorSubject */
      "2Vo4");
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./multicast */
      "oB13");

      function publishBehavior(value) {
        return function (source) {
          return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__["BehaviorSubject"](value))(source);
        };
      } //# sourceMappingURL=publishBehavior.js.map

      /***/

    },

    /***/
    "UHp3":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/windowTime.js ***!
      \*********************************************************************/

    /*! exports provided: windowTime */

    /***/
    function UHp3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "windowTime", function () {
        return windowTime;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_isNumeric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/isNumeric */
      "Y7HM");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function windowTime(windowTimeSpan) {
        var scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        var windowCreationInterval = null;
        var maxWindowSize = Number.POSITIVE_INFINITY;

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[3])) {
          scheduler = arguments[3];
        }

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[2])) {
          scheduler = arguments[2];
        } else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[2])) {
          maxWindowSize = Number(arguments[2]);
        }

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[1])) {
          scheduler = arguments[1];
        } else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[1])) {
          windowCreationInterval = Number(arguments[1]);
        }

        return function windowTimeOperatorFunction(source) {
          return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
        };
      }

      var WindowTimeOperator = /*#__PURE__*/function () {
        function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
          _classCallCheck(this, WindowTimeOperator);

          this.windowTimeSpan = windowTimeSpan;
          this.windowCreationInterval = windowCreationInterval;
          this.maxWindowSize = maxWindowSize;
          this.scheduler = scheduler;
        }

        _createClass2(WindowTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
          }
        }]);

        return WindowTimeOperator;
      }();

      var CountedSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP4) {
        _inherits(CountedSubject, _Subject__WEBPACK_IMP4);

        var _super88 = _createSuper(CountedSubject);

        function CountedSubject() {
          var _this123;

          _classCallCheck(this, CountedSubject);

          _this123 = _super88.apply(this, arguments);
          _this123._numberOfNextedValues = 0;
          return _this123;
        }

        _createClass2(CountedSubject, [{
          key: "next",
          value: function next(value) {
            this._numberOfNextedValues++;

            _get(_getPrototypeOf(CountedSubject.prototype), "next", this).call(this, value);
          }
        }, {
          key: "numberOfNextedValues",
          get: function get() {
            return this._numberOfNextedValues;
          }
        }]);

        return CountedSubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]);

      var WindowTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_23) {
        _inherits(WindowTimeSubscriber, _Subscriber__WEBPACK_23);

        var _super89 = _createSuper(WindowTimeSubscriber);

        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
          var _this124;

          _classCallCheck(this, WindowTimeSubscriber);

          _this124 = _super89.call(this, destination);
          _this124.destination = destination;
          _this124.windowTimeSpan = windowTimeSpan;
          _this124.windowCreationInterval = windowCreationInterval;
          _this124.maxWindowSize = maxWindowSize;
          _this124.scheduler = scheduler;
          _this124.windows = [];

          var window = _this124.openWindow();

          if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = {
              subscriber: _assertThisInitialized(_this124),
              window: window,
              context: null
            };
            var creationState = {
              windowTimeSpan: windowTimeSpan,
              windowCreationInterval: windowCreationInterval,
              subscriber: _assertThisInitialized(_this124),
              scheduler: scheduler
            };

            _this124.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));

            _this124.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
          } else {
            var timeSpanOnlyState = {
              subscriber: _assertThisInitialized(_this124),
              window: window,
              windowTimeSpan: windowTimeSpan
            };

            _this124.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
          }

          return _this124;
        }

        _createClass2(WindowTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var windows = this.windows;
            var len = windows.length;

            for (var i = 0; i < len; i++) {
              var _window = windows[i];

              if (!_window.closed) {
                _window.next(value);

                if (_window.numberOfNextedValues >= this.maxWindowSize) {
                  this.closeWindow(_window);
                }
              }
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var windows = this.windows;

            while (windows.length > 0) {
              windows.shift().error(err);
            }

            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var windows = this.windows;

            while (windows.length > 0) {
              var _window2 = windows.shift();

              if (!_window2.closed) {
                _window2.complete();
              }
            }

            this.destination.complete();
          }
        }, {
          key: "openWindow",
          value: function openWindow() {
            var window = new CountedSubject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
          }
        }, {
          key: "closeWindow",
          value: function closeWindow(window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
          }
        }]);

        return WindowTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

      function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber,
            windowTimeSpan = state.windowTimeSpan,
            window = state.window;

        if (window) {
          subscriber.closeWindow(window);
        }

        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
      }

      function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan,
            subscriber = state.subscriber,
            scheduler = state.scheduler,
            windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = {
          action: action,
          subscription: null
        };
        var timeSpanState = {
          subscriber: subscriber,
          window: window,
          context: context
        };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
      }

      function dispatchWindowClose(state) {
        var subscriber = state.subscriber,
            window = state.window,
            context = state.context;

        if (context && context.action && context.subscription) {
          context.action.remove(context.subscription);
        }

        subscriber.closeWindow(window);
      } //# sourceMappingURL=windowTime.js.map

      /***/

    },

    /***/
    "UXbc":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js ***!
      \*********************************************************************/

    /*! exports provided: mergeMapTo */

    /***/
    function UXbc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeMapTo", function () {
        return mergeMapTo;
      });
      /* harmony import */


      var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeMap */
      "5+tZ");

      function mergeMapTo(innerObservable, resultSelector) {
        var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

        if (typeof resultSelector === 'function') {
          return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(function () {
            return innerObservable;
          }, resultSelector, concurrent);
        }

        if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
        }

        return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(function () {
          return innerObservable;
        }, concurrent);
      } //# sourceMappingURL=mergeMapTo.js.map

      /***/

    },

    /***/
    "UXun":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js ***!
      \**********************************************************************/

    /*! exports provided: shareReplay */

    /***/
    function UXun(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "shareReplay", function () {
        return shareReplay;
      });
      /* harmony import */


      var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../ReplaySubject */
      "jtHE");

      function shareReplay(configOrBufferSize, windowTime, scheduler) {
        var config;

        if (configOrBufferSize && typeof configOrBufferSize === 'object') {
          config = configOrBufferSize;
        } else {
          config = {
            bufferSize: configOrBufferSize,
            windowTime: windowTime,
            refCount: false,
            scheduler: scheduler
          };
        }

        return function (source) {
          return source.lift(shareReplayOperator(config));
        };
      }

      function shareReplayOperator(_ref5) {
        var _ref5$bufferSize = _ref5.bufferSize,
            bufferSize = _ref5$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref5$bufferSize,
            _ref5$windowTime = _ref5.windowTime,
            windowTime = _ref5$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref5$windowTime,
            useRefCount = _ref5.refCount,
            scheduler = _ref5.scheduler;
        var subject;
        var refCount = 0;
        var subscription;
        var hasError = false;
        var isComplete = false;
        return function shareReplayOperation(source) {
          refCount++;
          var innerSub;

          if (!subject || hasError) {
            hasError = false;
            subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
            innerSub = subject.subscribe(this);
            subscription = source.subscribe({
              next: function next(value) {
                subject.next(value);
              },
              error: function error(err) {
                hasError = true;
                subject.error(err);
              },
              complete: function complete() {
                isComplete = true;
                subscription = undefined;
                subject.complete();
              }
            });

            if (isComplete) {
              subscription = undefined;
            }
          } else {
            innerSub = subject.subscribe(this);
          }

          this.add(function () {
            refCount--;
            innerSub.unsubscribe();
            innerSub = undefined;

            if (subscription && !isComplete && useRefCount && refCount === 0) {
              subscription.unsubscribe();
              subscription = undefined;
              subject = undefined;
            }
          });
        };
      } //# sourceMappingURL=shareReplay.js.map

      /***/

    },

    /***/
    "VRyK":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/merge.js ***!
      \*****************************************************************/

    /*! exports provided: merge */

    /***/
    function VRyK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "merge", function () {
        return merge;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");
      /* harmony import */


      var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/mergeAll */
      "bHdf");
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./fromArray */
      "yCtX");

      function merge() {
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;

        for (var _len25 = arguments.length, observables = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
          observables[_key25] = arguments[_key25];
        }

        var last = observables[observables.length - 1];

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(last)) {
          scheduler = observables.pop();

          if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
          }
        } else if (typeof last === 'number') {
          concurrent = observables.pop();
        }

        if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
          return observables[0];
        }

        return Object(_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__["mergeAll"])(concurrent)(Object(_fromArray__WEBPACK_IMPORTED_MODULE_3__["fromArray"])(observables, scheduler));
      } //# sourceMappingURL=merge.js.map

      /***/

    },

    /***/
    "Vpsf":
    /*!*******************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js ***!
      \*******************************************************************************/

    /*! exports provided: AnimationFrameAction */

    /***/
    function Vpsf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationFrameAction", function () {
        return AnimationFrameAction;
      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      "3N8a");

      var AnimationFrameAction = /*#__PURE__*/function (_AsyncAction__WEBPACK2) {
        _inherits(AnimationFrameAction, _AsyncAction__WEBPACK2);

        var _super90 = _createSuper(AnimationFrameAction);

        function AnimationFrameAction(scheduler, work) {
          var _this125;

          _classCallCheck(this, AnimationFrameAction);

          _this125 = _super90.call(this, scheduler, work);
          _this125.scheduler = scheduler;
          _this125.work = work;
          return _this125;
        }

        _createClass2(AnimationFrameAction, [{
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0) {
              return _get(_getPrototypeOf(AnimationFrameAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
              return scheduler.flush(null);
            }));
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(AnimationFrameAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
            }

            if (scheduler.actions.length === 0) {
              cancelAnimationFrame(id);
              scheduler.scheduled = undefined;
            }

            return undefined;
          }
        }]);

        return AnimationFrameAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=AnimationFrameAction.js.map

      /***/

    },

    /***/
    "WMd4":
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Notification.js ***!
      \*************************************************************/

    /*! exports provided: NotificationKind, Notification */

    /***/
    function WMd4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NotificationKind", function () {
        return NotificationKind;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Notification", function () {
        return Notification;
      });
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./observable/empty */
      "EY2u");
      /* harmony import */


      var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./observable/of */
      "LRne");
      /* harmony import */


      var _observable_throwError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./observable/throwError */
      "z6cu");

      var NotificationKind;

      (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
      })(NotificationKind || (NotificationKind = {}));

      var Notification = /*#__PURE__*/function () {
        function Notification(kind, value, error) {
          _classCallCheck(this, Notification);

          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
        }

        _createClass2(Notification, [{
          key: "observe",
          value: function observe(observer) {
            switch (this.kind) {
              case 'N':
                return observer.next && observer.next(this.value);

              case 'E':
                return observer.error && observer.error(this.error);

              case 'C':
                return observer.complete && observer.complete();
            }
          }
        }, {
          key: "do",
          value: function _do(next, error, complete) {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return next && next(this.value);

              case 'E':
                return error && error(this.error);

              case 'C':
                return complete && complete();
            }
          }
        }, {
          key: "accept",
          value: function accept(nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
              return this.observe(nextOrObserver);
            } else {
              return this["do"](nextOrObserver, error, complete);
            }
          }
        }, {
          key: "toObservable",
          value: function toObservable() {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"])(this.value);

              case 'E':
                return Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_2__["throwError"])(this.error);

              case 'C':
                return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_0__["empty"])();
            }

            throw new Error('unexpected notification kind value');
          }
        }], [{
          key: "createNext",
          value: function createNext(value) {
            if (typeof value !== 'undefined') {
              return new Notification('N', value);
            }

            return Notification.undefinedValueNotification;
          }
        }, {
          key: "createError",
          value: function createError(err) {
            return new Notification('E', undefined, err);
          }
        }, {
          key: "createComplete",
          value: function createComplete() {
            return Notification.completeNotification;
          }
        }]);

        return Notification;
      }();

      Notification.completeNotification = new Notification('C');
      Notification.undefinedValueNotification = new Notification('N', undefined); //# sourceMappingURL=Notification.js.map

      /***/
    },

    /***/
    "WPMC":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/generate.js ***!
      \********************************************************************/

    /*! exports provided: generate */

    /***/
    function WPMC(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "generate", function () {
        return generate;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      "SpAZ");
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");

      function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
        var resultSelector;
        var initialState;

        if (arguments.length == 1) {
          var options = initialStateOrOptions;
          initialState = options.initialState;
          condition = options.condition;
          iterate = options.iterate;
          resultSelector = options.resultSelector || _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
          scheduler = options.scheduler;
        } else if (resultSelectorOrObservable === undefined || Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(resultSelectorOrObservable)) {
          initialState = initialStateOrOptions;
          resultSelector = _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
          scheduler = resultSelectorOrObservable;
        } else {
          initialState = initialStateOrOptions;
          resultSelector = resultSelectorOrObservable;
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var state = initialState;

          if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
              subscriber: subscriber,
              iterate: iterate,
              condition: condition,
              resultSelector: resultSelector,
              state: state
            });
          }

          do {
            if (condition) {
              var conditionResult = void 0;

              try {
                conditionResult = condition(state);
              } catch (err) {
                subscriber.error(err);
                return undefined;
              }

              if (!conditionResult) {
                subscriber.complete();
                break;
              }
            }

            var value = void 0;

            try {
              value = resultSelector(state);
            } catch (err) {
              subscriber.error(err);
              return undefined;
            }

            subscriber.next(value);

            if (subscriber.closed) {
              break;
            }

            try {
              state = iterate(state);
            } catch (err) {
              subscriber.error(err);
              return undefined;
            }
          } while (true);

          return undefined;
        });
      }

      function dispatch(state) {
        var subscriber = state.subscriber,
            condition = state.condition;

        if (subscriber.closed) {
          return undefined;
        }

        if (state.needIterate) {
          try {
            state.state = state.iterate(state.state);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }
        } else {
          state.needIterate = true;
        }

        if (condition) {
          var conditionResult;

          try {
            conditionResult = condition(state.state);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          if (!conditionResult) {
            subscriber.complete();
            return undefined;
          }

          if (subscriber.closed) {
            return undefined;
          }
        }

        var value;

        try {
          value = state.resultSelector(state.state);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        if (subscriber.closed) {
          return undefined;
        }

        subscriber.next(value);

        if (subscriber.closed) {
          return undefined;
        }

        return this.schedule(state);
      } //# sourceMappingURL=generate.js.map

      /***/

    },

    /***/
    "WyKG":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js ***!
      \******************************************************************/

    /*! exports provided: toSubscriber */

    /***/
    function WyKG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toSubscriber", function () {
        return toSubscriber;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../symbol/rxSubscriber */
      "2QA8");
      /* harmony import */


      var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Observer */
      "gRHU");

      function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
          if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            return nextOrObserver;
          }

          if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]) {
            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]();
          }
        }

        if (!nextOrObserver && !error && !complete) {
          return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](_Observer__WEBPACK_IMPORTED_MODULE_2__["empty"]);
        }

        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](nextOrObserver, error, complete);
      } //# sourceMappingURL=toSubscriber.js.map

      /***/

    },

    /***/
    "XDbj":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js ***!
      \***********************************************************************/

    /*! exports provided: throwIfEmpty */

    /***/
    function XDbj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function () {
        return throwIfEmpty;
      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/EmptyError */
      "sVev");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function throwIfEmpty() {
        var errorFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultErrorFactory;
        return function (source) {
          return source.lift(new ThrowIfEmptyOperator(errorFactory));
        };
      }

      var ThrowIfEmptyOperator = /*#__PURE__*/function () {
        function ThrowIfEmptyOperator(errorFactory) {
          _classCallCheck(this, ThrowIfEmptyOperator);

          this.errorFactory = errorFactory;
        }

        _createClass2(ThrowIfEmptyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
          }
        }]);

        return ThrowIfEmptyOperator;
      }();

      var ThrowIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_24) {
        _inherits(ThrowIfEmptySubscriber, _Subscriber__WEBPACK_24);

        var _super91 = _createSuper(ThrowIfEmptySubscriber);

        function ThrowIfEmptySubscriber(destination, errorFactory) {
          var _this126;

          _classCallCheck(this, ThrowIfEmptySubscriber);

          _this126 = _super91.call(this, destination);
          _this126.errorFactory = errorFactory;
          _this126.hasValue = false;
          return _this126;
        }

        _createClass2(ThrowIfEmptySubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.hasValue = true;
            this.destination.next(value);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (!this.hasValue) {
              var err;

              try {
                err = this.errorFactory();
              } catch (e) {
                err = e;
              }

              this.destination.error(err);
            } else {
              return this.destination.complete();
            }
          }
        }]);

        return ThrowIfEmptySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

      function defaultErrorFactory() {
        return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
      } //# sourceMappingURL=throwIfEmpty.js.map

      /***/

    },

    /***/
    "XNiG":
    /*!********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subject.js ***!
      \********************************************************/

    /*! exports provided: SubjectSubscriber, Subject, AnonymousSubject */

    /***/
    function XNiG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SubjectSubscriber", function () {
        return SubjectSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Subject", function () {
        return Subject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnonymousSubject", function () {
        return AnonymousSubject;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Observable */
      "HDdC");
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Subscriber */
      "7o/Q");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./Subscription */
      "quSY");
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      "9ppp");
      /* harmony import */


      var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./SubjectSubscription */
      "Ylt2");
      /* harmony import */


      var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../internal/symbol/rxSubscriber */
      "2QA8");

      var SubjectSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_25) {
        _inherits(SubjectSubscriber, _Subscriber__WEBPACK_25);

        var _super92 = _createSuper(SubjectSubscriber);

        function SubjectSubscriber(destination) {
          var _this127;

          _classCallCheck(this, SubjectSubscriber);

          _this127 = _super92.call(this, destination);
          _this127.destination = destination;
          return _this127;
        }

        return SubjectSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

      var Subject = /*#__PURE__*/function (_Observable__WEBPACK_4) {
        _inherits(Subject, _Observable__WEBPACK_4);

        var _super93 = _createSuper(Subject);

        function Subject() {
          var _this128;

          _classCallCheck(this, Subject);

          _this128 = _super93.call(this);
          _this128.observers = [];
          _this128.closed = false;
          _this128.isStopped = false;
          _this128.hasError = false;
          _this128.thrownError = null;
          return _this128;
        }

        _createClass2(Subject, [{
          key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__["rxSubscriber"],
          value: function value() {
            return new SubjectSubscriber(this);
          }
        }, {
          key: "lift",
          value: function lift(operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
          }
        }, {
          key: "next",
          value: function next(value) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            if (!this.isStopped) {
              var observers = this.observers;
              var len = observers.length;
              var copy = observers.slice();

              for (var i = 0; i < len; i++) {
                copy[i].next(value);
              }
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].error(err);
            }

            this.observers.length = 0;
          }
        }, {
          key: "complete",
          value: function complete() {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].complete();
            }

            this.observers.length = 0;
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            } else {
              return _get(_getPrototypeOf(Subject.prototype), "_trySubscribe", this).call(this, subscriber);
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            } else if (this.hasError) {
              subscriber.error(this.thrownError);
              return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            } else if (this.isStopped) {
              subscriber.complete();
              return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            } else {
              this.observers.push(subscriber);
              return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__["SubjectSubscription"](this, subscriber);
            }
          }
        }, {
          key: "asObservable",
          value: function asObservable() {
            var observable = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]();
            observable.source = this;
            return observable;
          }
        }]);

        return Subject;
      }(_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]);

      Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
      };

      var AnonymousSubject = /*#__PURE__*/function (_Subject) {
        _inherits(AnonymousSubject, _Subject);

        var _super94 = _createSuper(AnonymousSubject);

        function AnonymousSubject(destination, source) {
          var _this129;

          _classCallCheck(this, AnonymousSubject);

          _this129 = _super94.call(this);
          _this129.destination = destination;
          _this129.source = source;
          return _this129;
        }

        _createClass2(AnonymousSubject, [{
          key: "next",
          value: function next(value) {
            var destination = this.destination;

            if (destination && destination.next) {
              destination.next(value);
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            var destination = this.destination;

            if (destination && destination.error) {
              this.destination.error(err);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            var destination = this.destination;

            if (destination && destination.complete) {
              this.destination.complete();
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var source = this.source;

            if (source) {
              return this.source.subscribe(subscriber);
            } else {
              return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            }
          }
        }]);

        return AnonymousSubject;
      }(Subject); //# sourceMappingURL=Subject.js.map

      /***/

    },

    /***/
    "Xa2L":
    /*!**********************************************************************************!*\
      !*** ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js ***!
      \**********************************************************************************/

    /*! exports provided: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner */

    /***/
    function Xa2L(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS", function () {
        return MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY", function () {
        return MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatProgressSpinner", function () {
        return MatProgressSpinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerModule", function () {
        return MatProgressSpinnerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatSpinner", function () {
        return MatSpinner;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/core */
      "FKr1");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      "R1ws");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Base reference size of the spinner.
       * @docs-private
       */


      function MatProgressSpinner__svg_circle_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "circle", 3);
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("animation-name", "mat-progress-spinner-stroke-rotate-" + ctx_r0._spinnerAnimationLabel)("stroke-dashoffset", ctx_r0._getStrokeDashOffset(), "px")("stroke-dasharray", ctx_r0._getStrokeCircumference(), "px")("stroke-width", ctx_r0._getCircleStrokeWidth(), "%");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("r", ctx_r0._getCircleRadius());
        }
      }

      function MatProgressSpinner__svg_circle_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "circle", 3);
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("stroke-dashoffset", ctx_r1._getStrokeDashOffset(), "px")("stroke-dasharray", ctx_r1._getStrokeCircumference(), "px")("stroke-width", ctx_r1._getCircleStrokeWidth(), "%");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("r", ctx_r1._getCircleRadius());
        }
      }

      function MatSpinner__svg_circle_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "circle", 3);
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("animation-name", "mat-progress-spinner-stroke-rotate-" + ctx_r0._spinnerAnimationLabel)("stroke-dashoffset", ctx_r0._getStrokeDashOffset(), "px")("stroke-dasharray", ctx_r0._getStrokeCircumference(), "px")("stroke-width", ctx_r0._getCircleStrokeWidth(), "%");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("r", ctx_r0._getCircleRadius());
        }
      }

      function MatSpinner__svg_circle_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "circle", 3);
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("stroke-dashoffset", ctx_r1._getStrokeDashOffset(), "px")("stroke-dasharray", ctx_r1._getStrokeCircumference(), "px")("stroke-width", ctx_r1._getCircleStrokeWidth(), "%");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("r", ctx_r1._getCircleRadius());
        }
      }

      var _c0 = ".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\n";
      var BASE_SIZE = 100;
      /**
       * Base reference stroke width of the spinner.
       * @docs-private
       */

      var BASE_STROKE_WIDTH = 10; // Boilerplate for applying mixins to MatProgressSpinner.

      /** @docs-private */

      var MatProgressSpinnerBase = function MatProgressSpinnerBase(_elementRef) {
        _classCallCheck(this, MatProgressSpinnerBase);

        this._elementRef = _elementRef;
      };

      var _MatProgressSpinnerMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinColor"])(MatProgressSpinnerBase, 'primary');
      /** Injection token to be used to override the default options for `mat-progress-spinner`. */


      var MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-progress-spinner-default-options', {
        providedIn: 'root',
        factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY
      });
      /** @docs-private */

      function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {
        return {
          diameter: BASE_SIZE
        };
      } // .0001 percentage difference is necessary in order to avoid unwanted animation frames
      // for example because the animation duration is 4 seconds, .1% accounts to 4ms
      // which are enough to see the flicker described in
      // https://github.com/angular/components/issues/8984


      var INDETERMINATE_ANIMATION_TEMPLATE = "\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n";
      /**
       * `<mat-progress-spinner>` component.
       */

      var MatProgressSpinner = /*#__PURE__*/function (_MatProgressSpinnerMi) {
        _inherits(MatProgressSpinner, _MatProgressSpinnerMi);

        var _super95 = _createSuper(MatProgressSpinner);

        function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {
          var _this130;

          _classCallCheck(this, MatProgressSpinner);

          _this130 = _super95.call(this, _elementRef);
          _this130._elementRef = _elementRef;
          _this130._document = _document;
          _this130._diameter = BASE_SIZE;
          _this130._value = 0;
          _this130._fallbackAnimation = false;
          /** Mode of the progress circle */

          _this130.mode = 'determinate';
          var trackedDiameters = MatProgressSpinner._diameters;
          _this130._spinnerAnimationLabel = _this130._getSpinnerAnimationLabel(); // The base size is already inserted via the component's structural styles. We still
          // need to track it so we don't end up adding the same styles again.

          if (!trackedDiameters.has(_document.head)) {
            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));
          }

          _this130._fallbackAnimation = platform.EDGE || platform.TRIDENT;
          _this130._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;

          if (defaults) {
            if (defaults.diameter) {
              _this130.diameter = defaults.diameter;
            }

            if (defaults.strokeWidth) {
              _this130.strokeWidth = defaults.strokeWidth;
            }
          }

          return _this130;
        }
        /** The diameter of the progress spinner (will set width and height of svg). */


        _createClass2(MatProgressSpinner, [{
          key: "diameter",
          get: function get() {
            return this._diameter;
          },
          set: function set(size) {
            this._diameter = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(size);
            this._spinnerAnimationLabel = this._getSpinnerAnimationLabel(); // If this is set before `ngOnInit`, the style root may not have been resolved yet.

            if (!this._fallbackAnimation && this._styleRoot) {
              this._attachStyleNode();
            }
          }
          /** Stroke width of the progress spinner. */

        }, {
          key: "strokeWidth",
          get: function get() {
            return this._strokeWidth || this.diameter / 10;
          },
          set: function set(value) {
            this._strokeWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value);
          }
          /** Value of the progress circle. */

        }, {
          key: "value",
          get: function get() {
            return this.mode === 'determinate' ? this._value : 0;
          },
          set: function set(newValue) {
            this._value = Math.max(0, Math.min(100, Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(newValue)));
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var element = this._elementRef.nativeElement; // Note that we need to look up the root node in ngOnInit, rather than the constructor, because
            // Angular seems to create the element outside the shadow root and then moves it inside, if the
            // node is inside an `ngIf` and a ShadowDom-encapsulated component.

            this._styleRoot = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["_getShadowRoot"])(element) || this._document.head;

            this._attachStyleNode(); // On IE and Edge, we can't animate the `stroke-dashoffset`
            // reliably so we fall back to a non-spec animation.


            var animationClass = "mat-progress-spinner-indeterminate".concat(this._fallbackAnimation ? '-fallback' : '', "-animation");
            element.classList.add(animationClass);
          }
          /** The radius of the spinner, adjusted for stroke width. */

        }, {
          key: "_getCircleRadius",
          value: function _getCircleRadius() {
            return (this.diameter - BASE_STROKE_WIDTH) / 2;
          }
          /** The view box of the spinner's svg element. */

        }, {
          key: "_getViewBox",
          value: function _getViewBox() {
            var viewBox = this._getCircleRadius() * 2 + this.strokeWidth;
            return "0 0 ".concat(viewBox, " ").concat(viewBox);
          }
          /** The stroke circumference of the svg circle. */

        }, {
          key: "_getStrokeCircumference",
          value: function _getStrokeCircumference() {
            return 2 * Math.PI * this._getCircleRadius();
          }
          /** The dash offset of the svg circle. */

        }, {
          key: "_getStrokeDashOffset",
          value: function _getStrokeDashOffset() {
            if (this.mode === 'determinate') {
              return this._getStrokeCircumference() * (100 - this._value) / 100;
            } // In fallback mode set the circle to 80% and rotate it with CSS.


            if (this._fallbackAnimation && this.mode === 'indeterminate') {
              return this._getStrokeCircumference() * 0.2;
            }

            return null;
          }
          /** Stroke width of the circle in percent. */

        }, {
          key: "_getCircleStrokeWidth",
          value: function _getCircleStrokeWidth() {
            return this.strokeWidth / this.diameter * 100;
          }
          /** Dynamically generates a style tag containing the correct animation for this diameter. */

        }, {
          key: "_attachStyleNode",
          value: function _attachStyleNode() {
            var styleRoot = this._styleRoot;
            var currentDiameter = this._diameter;
            var diameters = MatProgressSpinner._diameters;
            var diametersForElement = diameters.get(styleRoot);

            if (!diametersForElement || !diametersForElement.has(currentDiameter)) {
              var styleTag = this._document.createElement('style');

              styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);
              styleTag.textContent = this._getAnimationText();
              styleRoot.appendChild(styleTag);

              if (!diametersForElement) {
                diametersForElement = new Set();
                diameters.set(styleRoot, diametersForElement);
              }

              diametersForElement.add(currentDiameter);
            }
          }
          /** Generates animation styles adjusted for the spinner's diameter. */

        }, {
          key: "_getAnimationText",
          value: function _getAnimationText() {
            var strokeCircumference = this._getStrokeCircumference();

            return INDETERMINATE_ANIMATION_TEMPLATE // Animation should begin at 5% and end at 80%
            .replace(/START_VALUE/g, "".concat(0.95 * strokeCircumference)).replace(/END_VALUE/g, "".concat(0.2 * strokeCircumference)).replace(/DIAMETER/g, "".concat(this._spinnerAnimationLabel));
          }
          /** Returns the circle diameter formatted for use with the animation-name CSS property. */

        }, {
          key: "_getSpinnerAnimationLabel",
          value: function _getSpinnerAnimationLabel() {
            // The string of a float point number will include a period ‘.’ character,
            // which is not valid for a CSS animation-name.
            return this.diameter.toString().replace('.', '_');
          }
        }]);

        return MatProgressSpinner;
      }(_MatProgressSpinnerMixinBase);

      MatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {
        return new (t || MatProgressSpinner)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));
      };

      MatProgressSpinner.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatProgressSpinner,
        selectors: [["mat-progress-spinner"]],
        hostAttrs: ["role", "progressbar", 1, "mat-progress-spinner"],
        hostVars: 10,
        hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-valuemin", ctx.mode === "determinate" ? 0 : null)("aria-valuemax", ctx.mode === "determinate" ? 100 : null)("aria-valuenow", ctx.mode === "determinate" ? ctx.value : null)("mode", ctx.mode);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.diameter, "px")("height", ctx.diameter, "px");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_mat-animation-noopable", ctx._noopAnimations);
          }
        },
        inputs: {
          color: "color",
          mode: "mode",
          diameter: "diameter",
          strokeWidth: "strokeWidth",
          value: "value"
        },
        exportAs: ["matProgressSpinner"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 3,
        vars: 8,
        consts: [["preserveAspectRatio", "xMidYMid meet", "focusable", "false", 3, "ngSwitch"], ["cx", "50%", "cy", "50%", 3, "animation-name", "stroke-dashoffset", "stroke-dasharray", "stroke-width", 4, "ngSwitchCase"], ["cx", "50%", "cy", "50%", 3, "stroke-dashoffset", "stroke-dasharray", "stroke-width", 4, "ngSwitchCase"], ["cx", "50%", "cy", "50%"]],
        template: function MatProgressSpinner_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, MatProgressSpinner__svg_circle_1_Template, 1, 9, "circle", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, MatProgressSpinner__svg_circle_2_Template, 1, 7, "circle", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.diameter, "px")("height", ctx.diameter, "px");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", ctx.mode === "indeterminate");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("viewBox", ctx._getViewBox());

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", false);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitch"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchCase"]],
        styles: [_c0],
        encapsulation: 2,
        changeDetection: 0
      });
      /**
       * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).
       * We need to keep track of which elements the diameters were attached to, because for
       * elements in the Shadow DOM the style tags are attached to the shadow root, rather
       * than the document head.
       */

      MatProgressSpinner._diameters = new WeakMap();

      MatProgressSpinner.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]
          }]
        }];
      };

      MatProgressSpinner.propDecorators = {
        diameter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        strokeWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        mode: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatProgressSpinner, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-progress-spinner',
            exportAs: 'matProgressSpinner',
            host: {
              'role': 'progressbar',
              'class': 'mat-progress-spinner',
              '[class._mat-animation-noopable]': "_noopAnimations",
              '[style.width.px]': 'diameter',
              '[style.height.px]': 'diameter',
              '[attr.aria-valuemin]': 'mode === "determinate" ? 0 : null',
              '[attr.aria-valuemax]': 'mode === "determinate" ? 100 : null',
              '[attr.aria-valuenow]': 'mode === "determinate" ? value : null',
              '[attr.mode]': 'mode'
            },
            inputs: ['color'],
            template: "<!--\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\n  center. The center of the circle will remain at the center of the mat-progress-spinner\n  element containing the SVG. `focusable=\"false\"` prevents IE from allowing the user to\n  tab into the SVG element.\n-->\n\n<svg\n  [style.width.px]=\"diameter\"\n  [style.height.px]=\"diameter\"\n  [attr.viewBox]=\"_getViewBox()\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  focusable=\"false\"\n  [ngSwitch]=\"mode === 'indeterminate'\">\n\n  <!--\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\n    for a split second and then removing it when switching between modes, but it's hard to know\n    for how long to hide the element and it can cause the UI to blink.\n  -->\n  <circle\n    *ngSwitchCase=\"true\"\n    cx=\"50%\"\n    cy=\"50%\"\n    [attr.r]=\"_getCircleRadius()\"\n    [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\"\n    [style.stroke-dashoffset.px]=\"_getStrokeDashOffset()\"\n    [style.stroke-dasharray.px]=\"_getStrokeCircumference()\"\n    [style.stroke-width.%]=\"_getCircleStrokeWidth()\"></circle>\n\n  <circle\n    *ngSwitchCase=\"false\"\n    cx=\"50%\"\n    cy=\"50%\"\n    [attr.r]=\"_getCircleRadius()\"\n    [style.stroke-dashoffset.px]=\"_getStrokeDashOffset()\"\n    [style.stroke-dasharray.px]=\"_getStrokeCircumference()\"\n    [style.stroke-width.%]=\"_getCircleStrokeWidth()\"></circle>\n</svg>\n",
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]
            }]
          }];
        }, {
          mode: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          diameter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          strokeWidth: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * `<mat-spinner>` component.
       *
       * This is a component definition to be used as a convenience reference to create an
       * indeterminate `<mat-progress-spinner>` instance.
       */


      var MatSpinner = /*#__PURE__*/function (_MatProgressSpinner) {
        _inherits(MatSpinner, _MatProgressSpinner);

        var _super96 = _createSuper(MatSpinner);

        function MatSpinner(elementRef, platform, document, animationMode, defaults) {
          var _this131;

          _classCallCheck(this, MatSpinner);

          _this131 = _super96.call(this, elementRef, platform, document, animationMode, defaults);
          _this131.mode = 'indeterminate';
          return _this131;
        }

        return MatSpinner;
      }(MatProgressSpinner);

      MatSpinner.ɵfac = function MatSpinner_Factory(t) {
        return new (t || MatSpinner)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));
      };

      MatSpinner.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MatSpinner,
        selectors: [["mat-spinner"]],
        hostAttrs: ["role", "progressbar", "mode", "indeterminate", 1, "mat-spinner", "mat-progress-spinner"],
        hostVars: 6,
        hostBindings: function MatSpinner_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.diameter, "px")("height", ctx.diameter, "px");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_mat-animation-noopable", ctx._noopAnimations);
          }
        },
        inputs: {
          color: "color"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 3,
        vars: 8,
        consts: [["preserveAspectRatio", "xMidYMid meet", "focusable", "false", 3, "ngSwitch"], ["cx", "50%", "cy", "50%", 3, "animation-name", "stroke-dashoffset", "stroke-dasharray", "stroke-width", 4, "ngSwitchCase"], ["cx", "50%", "cy", "50%", 3, "stroke-dashoffset", "stroke-dasharray", "stroke-width", 4, "ngSwitchCase"], ["cx", "50%", "cy", "50%"]],
        template: function MatSpinner_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, MatSpinner__svg_circle_1_Template, 1, 9, "circle", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, MatSpinner__svg_circle_2_Template, 1, 7, "circle", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.diameter, "px")("height", ctx.diameter, "px");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", ctx.mode === "indeterminate");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("viewBox", ctx._getViewBox());

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", false);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitch"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchCase"]],
        styles: [_c0],
        encapsulation: 2,
        changeDetection: 0
      });

      MatSpinner.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatSpinner, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'mat-spinner',
            host: {
              'role': 'progressbar',
              'mode': 'indeterminate',
              'class': 'mat-spinner mat-progress-spinner',
              '[class._mat-animation-noopable]': "_noopAnimations",
              '[style.width.px]': 'diameter',
              '[style.height.px]': 'diameter'
            },
            inputs: ['color'],
            template: "<!--\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\n  center. The center of the circle will remain at the center of the mat-progress-spinner\n  element containing the SVG. `focusable=\"false\"` prevents IE from allowing the user to\n  tab into the SVG element.\n-->\n\n<svg\n  [style.width.px]=\"diameter\"\n  [style.height.px]=\"diameter\"\n  [attr.viewBox]=\"_getViewBox()\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  focusable=\"false\"\n  [ngSwitch]=\"mode === 'indeterminate'\">\n\n  <!--\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\n    for a split second and then removing it when switching between modes, but it's hard to know\n    for how long to hide the element and it can cause the UI to blink.\n  -->\n  <circle\n    *ngSwitchCase=\"true\"\n    cx=\"50%\"\n    cy=\"50%\"\n    [attr.r]=\"_getCircleRadius()\"\n    [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\"\n    [style.stroke-dashoffset.px]=\"_getStrokeDashOffset()\"\n    [style.stroke-dasharray.px]=\"_getStrokeCircumference()\"\n    [style.stroke-width.%]=\"_getCircleStrokeWidth()\"></circle>\n\n  <circle\n    *ngSwitchCase=\"false\"\n    cx=\"50%\"\n    cy=\"50%\"\n    [attr.r]=\"_getCircleRadius()\"\n    [style.stroke-dashoffset.px]=\"_getStrokeDashOffset()\"\n    [style.stroke-dasharray.px]=\"_getStrokeCircumference()\"\n    [style.stroke-width.%]=\"_getCircleStrokeWidth()\"></circle>\n</svg>\n",
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var MatProgressSpinnerModule = function MatProgressSpinnerModule() {
        _classCallCheck(this, MatProgressSpinnerModule);
      };

      MatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) {
        return new (t || MatProgressSpinnerModule)();
      };

      MatProgressSpinnerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MatProgressSpinnerModule
      });
      MatProgressSpinnerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MatProgressSpinnerModule, {
          declarations: function declarations() {
            return [MatProgressSpinner, MatSpinner];
          },
          imports: function imports() {
            return [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]];
          },
          exports: function exports() {
            return [MatProgressSpinner, MatSpinner, _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MatProgressSpinnerModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
            exports: [MatProgressSpinner, MatSpinner, _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
            declarations: [MatProgressSpinner, MatSpinner]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=progress-spinner.js.map

      /***/

    },

    /***/
    "XoHu":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isObject.js ***!
      \**************************************************************/

    /*! exports provided: isObject */

    /***/
    function XoHu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isObject", function () {
        return isObject;
      });

      function isObject(x) {
        return x !== null && typeof x === 'object';
      } //# sourceMappingURL=isObject.js.map

      /***/

    },

    /***/
    "XqQ8":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js ***!
      \*********************************************************************/

    /*! exports provided: exhaustMap */

    /***/
    function XqQ8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "exhaustMap", function () {
        return exhaustMap;
      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./map */
      "lJxs");
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/from */
      "Cfvw");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function exhaustMap(project, resultSelector) {
        if (resultSelector) {
          return function (source) {
            return source.pipe(exhaustMap(function (a, i) {
              return Object(_observable_from__WEBPACK_IMPORTED_MODULE_1__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(function (b, ii) {
                return resultSelector(a, b, i, ii);
              }));
            }));
          };
        }

        return function (source) {
          return source.lift(new ExhaustMapOperator(project));
        };
      }

      var ExhaustMapOperator = /*#__PURE__*/function () {
        function ExhaustMapOperator(project) {
          _classCallCheck(this, ExhaustMapOperator);

          this.project = project;
        }

        _createClass2(ExhaustMapOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
          }
        }]);

        return ExhaustMapOperator;
      }();

      var ExhaustMapSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP12) {
        _inherits(ExhaustMapSubscriber, _innerSubscribe__WEBP12);

        var _super97 = _createSuper(ExhaustMapSubscriber);

        function ExhaustMapSubscriber(destination, project) {
          var _this132;

          _classCallCheck(this, ExhaustMapSubscriber);

          _this132 = _super97.call(this, destination);
          _this132.project = project;
          _this132.hasSubscription = false;
          _this132.hasCompleted = false;
          _this132.index = 0;
          return _this132;
        }

        _createClass2(ExhaustMapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (!this.hasSubscription) {
              this.tryNext(value);
            }
          }
        }, {
          key: "tryNext",
          value: function tryNext(value) {
            var result;
            var index = this.index++;

            try {
              result = this.project(value, index);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.hasSubscription = true;

            this._innerSub(result);
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(result) {
            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleInnerSubscriber"](this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["innerSubscribe"])(result, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (!this.hasSubscription) {
              this.destination.complete();
            }

            this.unsubscribe();
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(err) {
            this.destination.error(err);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.hasSubscription = false;

            if (this.hasCompleted) {
              this.destination.complete();
            }
          }
        }]);

        return ExhaustMapSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleOuterSubscriber"]); //# sourceMappingURL=exhaustMap.js.map

      /***/

    },

    /***/
    "Y/cZ":
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Scheduler.js ***!
      \**********************************************************/

    /*! exports provided: Scheduler */

    /***/
    function YCZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Scheduler", function () {
        return Scheduler;
      });

      var Scheduler = /*#__PURE__*/function () {
        function Scheduler(SchedulerAction) {
          var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Scheduler.now;

          _classCallCheck(this, Scheduler);

          this.SchedulerAction = SchedulerAction;
          this.now = now;
        }

        _createClass2(Scheduler, [{
          key: "schedule",
          value: function schedule(work) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var state = arguments.length > 2 ? arguments[2] : undefined;
            return new this.SchedulerAction(this, work).schedule(state, delay);
          }
        }]);

        return Scheduler;
      }();

      Scheduler.now = function () {
        return Date.now();
      }; //# sourceMappingURL=Scheduler.js.map

      /***/

    },

    /***/
    "Y6u4":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js ***!
      \******************************************************************/

    /*! exports provided: TimeoutError */

    /***/
    function Y6u4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeoutError", function () {
        return TimeoutError;
      });

      var TimeoutErrorImpl = function () {
        function TimeoutErrorImpl() {
          Error.call(this);
          this.message = 'Timeout has occurred';
          this.name = 'TimeoutError';
          return this;
        }

        TimeoutErrorImpl.prototype = Object.create(Error.prototype);
        return TimeoutErrorImpl;
      }();

      var TimeoutError = TimeoutErrorImpl; //# sourceMappingURL=TimeoutError.js.map

      /***/
    },

    /***/
    "Y6wi":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/switchAll.js ***!
      \********************************************************************/

    /*! exports provided: switchAll */

    /***/
    function Y6wi(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "switchAll", function () {
        return switchAll;
      });
      /* harmony import */


      var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./switchMap */
      "eIep");
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      "SpAZ");

      function switchAll() {
        return Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"]);
      } //# sourceMappingURL=switchAll.js.map

      /***/

    },

    /***/
    "Y7HM":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js ***!
      \***************************************************************/

    /*! exports provided: isNumeric */

    /***/
    function Y7HM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNumeric", function () {
        return isNumeric;
      });
      /* harmony import */


      var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./isArray */
      "DH7j");

      function isNumeric(val) {
        return !Object(_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(val) && val - parseFloat(val) + 1 >= 0;
      } //# sourceMappingURL=isNumeric.js.map

      /***/

    },

    /***/
    "Ylt2":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js ***!
      \********************************************************************/

    /*! exports provided: SubjectSubscription */

    /***/
    function Ylt2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SubjectSubscription", function () {
        return SubjectSubscription;
      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscription */
      "quSY");

      var SubjectSubscription = /*#__PURE__*/function (_Subscription__WEBPAC4) {
        _inherits(SubjectSubscription, _Subscription__WEBPAC4);

        var _super98 = _createSuper(SubjectSubscription);

        function SubjectSubscription(subject, subscriber) {
          var _this133;

          _classCallCheck(this, SubjectSubscription);

          _this133 = _super98.call(this);
          _this133.subject = subject;
          _this133.subscriber = subscriber;
          _this133.closed = false;
          return _this133;
        }

        _createClass2(SubjectSubscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            if (this.closed) {
              return;
            }

            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;

            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
              return;
            }

            var subscriberIndex = observers.indexOf(this.subscriber);

            if (subscriberIndex !== -1) {
              observers.splice(subscriberIndex, 1);
            }
          }
        }]);

        return SubjectSubscription;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]); //# sourceMappingURL=SubjectSubscription.js.map

      /***/

    },

    /***/
    "YuR2":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js ***!
      \**********************************************************************/

    /*! exports provided: QueueAction */

    /***/
    function YuR2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "QueueAction", function () {
        return QueueAction;
      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      "3N8a");

      var QueueAction = /*#__PURE__*/function (_AsyncAction__WEBPACK3) {
        _inherits(QueueAction, _AsyncAction__WEBPACK3);

        var _super99 = _createSuper(QueueAction);

        function QueueAction(scheduler, work) {
          var _this134;

          _classCallCheck(this, QueueAction);

          _this134 = _super99.call(this, scheduler, work);
          _this134.scheduler = scheduler;
          _this134.work = work;
          return _this134;
        }

        _createClass2(QueueAction, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (delay > 0) {
              return _get(_getPrototypeOf(QueueAction.prototype), "schedule", this).call(this, state, delay);
            }

            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
          }
        }, {
          key: "execute",
          value: function execute(state, delay) {
            return delay > 0 || this.closed ? _get(_getPrototypeOf(QueueAction.prototype), "execute", this).call(this, state, delay) : this._execute(state, delay);
          }
        }, {
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(QueueAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            return scheduler.flush(this);
          }
        }]);

        return QueueAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=QueueAction.js.map

      /***/

    },

    /***/
    "ZUHj":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js ***!
      \***********************************************************************/

    /*! exports provided: subscribeToResult */

    /***/
    function ZUHj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeToResult", function () {
        return subscribeToResult;
      });
      /* harmony import */


      var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../InnerSubscriber */
      "51Dv");
      /* harmony import */


      var _subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./subscribeTo */
      "SeVD");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var innerSubscriber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__["InnerSubscriber"](outerSubscriber, outerValue, outerIndex);

        if (innerSubscriber.closed) {
          return undefined;
        }

        if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]) {
          return result.subscribe(innerSubscriber);
        }

        return Object(_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(result)(innerSubscriber);
      } //# sourceMappingURL=subscribeToResult.js.map

      /***/

    },

    /***/
    "Zy1z":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js ***!
      \*******************************************************************/

    /*! exports provided: pairwise */

    /***/
    function Zy1z(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pairwise", function () {
        return pairwise;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function pairwise() {
        return function (source) {
          return source.lift(new PairwiseOperator());
        };
      }

      var PairwiseOperator = /*#__PURE__*/function () {
        function PairwiseOperator() {
          _classCallCheck(this, PairwiseOperator);
        }

        _createClass2(PairwiseOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new PairwiseSubscriber(subscriber));
          }
        }]);

        return PairwiseOperator;
      }();

      var PairwiseSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_26) {
        _inherits(PairwiseSubscriber, _Subscriber__WEBPACK_26);

        var _super100 = _createSuper(PairwiseSubscriber);

        function PairwiseSubscriber(destination) {
          var _this135;

          _classCallCheck(this, PairwiseSubscriber);

          _this135 = _super100.call(this, destination);
          _this135.hasPrev = false;
          return _this135;
        }

        _createClass2(PairwiseSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var pair;

            if (this.hasPrev) {
              pair = [this.prev, value];
            } else {
              this.hasPrev = true;
            }

            this.prev = value;

            if (pair) {
              this.destination.next(pair);
            }
          }
        }]);

        return PairwiseSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=pairwise.js.map

      /***/

    },

    /***/
    "Zyez":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js ***!
      \************************************************************************/

    /*! exports provided: sequenceEqual, SequenceEqualOperator, SequenceEqualSubscriber */

    /***/
    function Zyez(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sequenceEqual", function () {
        return sequenceEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SequenceEqualOperator", function () {
        return SequenceEqualOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SequenceEqualSubscriber", function () {
        return SequenceEqualSubscriber;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function sequenceEqual(compareTo, comparator) {
        return function (source) {
          return source.lift(new SequenceEqualOperator(compareTo, comparator));
        };
      }

      var SequenceEqualOperator = /*#__PURE__*/function () {
        function SequenceEqualOperator(compareTo, comparator) {
          _classCallCheck(this, SequenceEqualOperator);

          this.compareTo = compareTo;
          this.comparator = comparator;
        }

        _createClass2(SequenceEqualOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
          }
        }]);

        return SequenceEqualOperator;
      }();

      var SequenceEqualSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_27) {
        _inherits(SequenceEqualSubscriber, _Subscriber__WEBPACK_27);

        var _super101 = _createSuper(SequenceEqualSubscriber);

        function SequenceEqualSubscriber(destination, compareTo, comparator) {
          var _this136;

          _classCallCheck(this, SequenceEqualSubscriber);

          _this136 = _super101.call(this, destination);
          _this136.compareTo = compareTo;
          _this136.comparator = comparator;
          _this136._a = [];
          _this136._b = [];
          _this136._oneComplete = false;

          _this136.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _assertThisInitialized(_this136))));

          return _this136;
        }

        _createClass2(SequenceEqualSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this._oneComplete && this._b.length === 0) {
              this.emit(false);
            } else {
              this._a.push(value);

              this.checkValues();
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (this._oneComplete) {
              this.emit(this._a.length === 0 && this._b.length === 0);
            } else {
              this._oneComplete = true;
            }

            this.unsubscribe();
          }
        }, {
          key: "checkValues",
          value: function checkValues() {
            var _a = this._a,
                _b = this._b,
                comparator = this.comparator;

            while (_a.length > 0 && _b.length > 0) {
              var a = _a.shift();

              var b = _b.shift();

              var areEqual = false;

              try {
                areEqual = comparator ? comparator(a, b) : a === b;
              } catch (e) {
                this.destination.error(e);
              }

              if (!areEqual) {
                this.emit(false);
              }
            }
          }
        }, {
          key: "emit",
          value: function emit(value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
          }
        }, {
          key: "nextB",
          value: function nextB(value) {
            if (this._oneComplete && this._a.length === 0) {
              this.emit(false);
            } else {
              this._b.push(value);

              this.checkValues();
            }
          }
        }, {
          key: "completeB",
          value: function completeB() {
            if (this._oneComplete) {
              this.emit(this._a.length === 0 && this._b.length === 0);
            } else {
              this._oneComplete = true;
            }
          }
        }]);

        return SequenceEqualSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var SequenceEqualCompareToSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_28) {
        _inherits(SequenceEqualCompareToSubscriber, _Subscriber__WEBPACK_28);

        var _super102 = _createSuper(SequenceEqualCompareToSubscriber);

        function SequenceEqualCompareToSubscriber(destination, parent) {
          var _this137;

          _classCallCheck(this, SequenceEqualCompareToSubscriber);

          _this137 = _super102.call(this, destination);
          _this137.parent = parent;
          return _this137;
        }

        _createClass2(SequenceEqualCompareToSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.nextB(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.parent.error(err);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.completeB();
            this.unsubscribe();
          }
        }]);

        return SequenceEqualCompareToSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=sequenceEqual.js.map

      /***/

    },

    /***/
    "a7t3":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js ***!
      \************************************************************************/

    /*! exports provided: subscribeToPromise */

    /***/
    function a7t3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeToPromise", function () {
        return subscribeToPromise;
      });
      /* harmony import */


      var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./hostReportError */
      "NJ4a");

      var subscribeToPromise = function subscribeToPromise(promise) {
        return function (subscriber) {
          promise.then(function (value) {
            if (!subscriber.closed) {
              subscriber.next(value);
              subscriber.complete();
            }
          }, function (err) {
            return subscriber.error(err);
          }).then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__["hostReportError"]);
          return subscriber;
        };
      }; //# sourceMappingURL=subscribeToPromise.js.map

      /***/

    },

    /***/
    "aGrj":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js ***!
      \**********************************************************************/

    /*! exports provided: switchMapTo */

    /***/
    function aGrj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "switchMapTo", function () {
        return switchMapTo;
      });
      /* harmony import */


      var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./switchMap */
      "eIep");

      function switchMapTo(innerObservable, resultSelector) {
        return resultSelector ? Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(function () {
          return innerObservable;
        }, resultSelector) : Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(function () {
          return innerObservable;
        });
      } //# sourceMappingURL=switchMapTo.js.map

      /***/

    },

    /***/
    "bHdf":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js ***!
      \*******************************************************************/

    /*! exports provided: mergeAll */

    /***/
    function bHdf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeAll", function () {
        return mergeAll;
      });
      /* harmony import */


      var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeMap */
      "5+tZ");
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      "SpAZ");

      function mergeAll() {
        var concurrent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
        return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"], concurrent);
      } //# sourceMappingURL=mergeAll.js.map

      /***/

    },

    /***/
    "bOdf":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMap.js ***!
      \********************************************************************/

    /*! exports provided: concatMap */

    /***/
    function bOdf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "concatMap", function () {
        return concatMap;
      });
      /* harmony import */


      var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeMap */
      "5+tZ");

      function concatMap(project, resultSelector) {
        return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(project, resultSelector, 1);
      } //# sourceMappingURL=concatMap.js.map

      /***/

    },

    /***/
    "c2HN":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isPromise.js ***!
      \***************************************************************/

    /*! exports provided: isPromise */

    /***/
    function c2HN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPromise", function () {
        return isPromise;
      });

      function isPromise(value) {
        return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
      } //# sourceMappingURL=isPromise.js.map

      /***/

    },

    /***/
    "c6ID":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/sample.js ***!
      \*****************************************************************/

    /*! exports provided: sample */

    /***/
    function c6ID(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sample", function () {
        return sample;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function sample(notifier) {
        return function (source) {
          return source.lift(new SampleOperator(notifier));
        };
      }

      var SampleOperator = /*#__PURE__*/function () {
        function SampleOperator(notifier) {
          _classCallCheck(this, SampleOperator);

          this.notifier = notifier;
        }

        _createClass2(SampleOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var sampleSubscriber = new SampleSubscriber(subscriber);
            var subscription = source.subscribe(sampleSubscriber);
            subscription.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(this.notifier, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](sampleSubscriber)));
            return subscription;
          }
        }]);

        return SampleOperator;
      }();

      var SampleSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP13) {
        _inherits(SampleSubscriber, _innerSubscribe__WEBP13);

        var _super103 = _createSuper(SampleSubscriber);

        function SampleSubscriber() {
          var _this138;

          _classCallCheck(this, SampleSubscriber);

          _this138 = _super103.apply(this, arguments);
          _this138.hasValue = false;
          return _this138;
        }

        _createClass2(SampleSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.value = value;
            this.hasValue = true;
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.emitValue();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.emitValue();
          }
        }, {
          key: "emitValue",
          value: function emitValue() {
            if (this.hasValue) {
              this.hasValue = false;
              this.destination.next(this.value);
            }
          }
        }]);

        return SampleSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=sample.js.map

      /***/

    },

    /***/
    "c7jc":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/Immediate.js ***!
      \***************************************************************/

    /*! exports provided: Immediate, TestTools */

    /***/
    function c7jc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Immediate", function () {
        return Immediate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TestTools", function () {
        return TestTools;
      });

      var nextHandle = 1;

      var RESOLVED = function () {
        return Promise.resolve();
      }();

      var activeHandles = {};

      function findAndClearHandle(handle) {
        if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
        }

        return false;
      }

      var Immediate = {
        setImmediate: function setImmediate(cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          RESOLVED.then(function () {
            return findAndClearHandle(handle) && cb();
          });
          return handle;
        },
        clearImmediate: function clearImmediate(handle) {
          findAndClearHandle(handle);
        }
      };
      var TestTools = {
        pending: function pending() {
          return Object.keys(activeHandles).length;
        }
      }; //# sourceMappingURL=Immediate.js.map

      /***/
    },

    /***/
    "cBqT":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/find.js ***!
      \***************************************************************/

    /*! exports provided: find, FindValueOperator, FindValueSubscriber */

    /***/
    function cBqT(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "find", function () {
        return find;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FindValueOperator", function () {
        return FindValueOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FindValueSubscriber", function () {
        return FindValueSubscriber;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function find(predicate, thisArg) {
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate is not a function');
        }

        return function (source) {
          return source.lift(new FindValueOperator(predicate, source, false, thisArg));
        };
      }

      var FindValueOperator = /*#__PURE__*/function () {
        function FindValueOperator(predicate, source, yieldIndex, thisArg) {
          _classCallCheck(this, FindValueOperator);

          this.predicate = predicate;
          this.source = source;
          this.yieldIndex = yieldIndex;
          this.thisArg = thisArg;
        }

        _createClass2(FindValueOperator, [{
          key: "call",
          value: function call(observer, source) {
            return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
          }
        }]);

        return FindValueOperator;
      }();

      var FindValueSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_29) {
        _inherits(FindValueSubscriber, _Subscriber__WEBPACK_29);

        var _super104 = _createSuper(FindValueSubscriber);

        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
          var _this139;

          _classCallCheck(this, FindValueSubscriber);

          _this139 = _super104.call(this, destination);
          _this139.predicate = predicate;
          _this139.source = source;
          _this139.yieldIndex = yieldIndex;
          _this139.thisArg = thisArg;
          _this139.index = 0;
          return _this139;
        }

        _createClass2(FindValueSubscriber, [{
          key: "notifyComplete",
          value: function notifyComplete(value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.unsubscribe();
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var predicate = this.predicate,
                thisArg = this.thisArg;
            var index = this.index++;

            try {
              var result = predicate.call(thisArg || this, value, index, this.source);

              if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
              }
            } catch (err) {
              this.destination.error(err);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
          }
        }]);

        return FindValueSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=find.js.map

      /***/

    },

    /***/
    "cH1L":
    /*!*****************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js ***!
      \*****************************************************************/

    /*! exports provided: BidiModule, DIR_DOCUMENT, Dir, Directionality, ɵangular_material_src_cdk_bidi_bidi_a */

    /***/
    function cH1L(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BidiModule", function () {
        return BidiModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DIR_DOCUMENT", function () {
        return DIR_DOCUMENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Dir", function () {
        return Dir;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Directionality", function () {
        return Directionality;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_material_src_cdk_bidi_bidi_a", function () {
        return DIR_DOCUMENT_FACTORY;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection token used to inject the document into Directionality.
       * This is used so that the value can be faked in tests.
       *
       * We can't use the real document in tests because changing the real `dir` causes geometry-based
       * tests in Safari to fail.
       *
       * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
       * themselves use things like `querySelector` in test code.
       *
       * This token is defined in a separate file from Directionality as a workaround for
       * https://github.com/angular/angular/issues/22559
       *
       * @docs-private
       */


      var DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('cdk-dir-doc', {
        providedIn: 'root',
        factory: DIR_DOCUMENT_FACTORY
      });
      /** @docs-private */

      function DIR_DOCUMENT_FACTORY() {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The directionality (LTR / RTL) context for the application (or a subtree of it).
       * Exposes the current direction and a stream of direction changes.
       */


      var Directionality = /*#__PURE__*/function () {
        function Directionality(_document) {
          _classCallCheck(this, Directionality);

          /** The current 'ltr' or 'rtl' value. */
          this.value = 'ltr';
          /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();

          if (_document) {
            // TODO: handle 'auto' value -
            // We still need to account for dir="auto".
            // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
            // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
            var bodyDir = _document.body ? _document.body.dir : null;
            var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
            var value = bodyDir || htmlDir;
            this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';
          }
        }

        _createClass2(Directionality, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.change.complete();
          }
        }]);

        return Directionality;
      }();

      Directionality.ɵfac = function Directionality_Factory(t) {
        return new (t || Directionality)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DIR_DOCUMENT, 8));
      };

      Directionality.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function Directionality_Factory() {
          return new Directionality(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DIR_DOCUMENT, 8));
        },
        token: Directionality,
        providedIn: "root"
      });

      Directionality.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [DIR_DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Directionality, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [DIR_DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Directive to listen for changes of direction of part of the DOM.
       *
       * Provides itself as Directionality such that descendant directives only need to ever inject
       * Directionality to get the closest direction.
       */


      var Dir = /*#__PURE__*/function () {
        function Dir() {
          _classCallCheck(this, Dir);

          /** Normalized direction that accounts for invalid/unsupported values. */
          this._dir = 'ltr';
          /** Whether the `value` has been set to its initial value. */

          this._isInitialized = false;
          /** Event emitted when the direction changes. */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        }
        /** @docs-private */


        _createClass2(Dir, [{
          key: "dir",
          get: function get() {
            return this._dir;
          },
          set: function set(value) {
            var old = this._dir;
            var normalizedValue = value ? value.toLowerCase() : value;
            this._rawDir = value;
            this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';

            if (old !== this._dir && this._isInitialized) {
              this.change.emit(this._dir);
            }
          }
          /** Current layout direction of the element. */

        }, {
          key: "value",
          get: function get() {
            return this.dir;
          }
          /** Initialize once default value has been set. */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this._isInitialized = true;
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.change.complete();
          }
        }]);

        return Dir;
      }();

      Dir.ɵfac = function Dir_Factory(t) {
        return new (t || Dir)();
      };

      Dir.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: Dir,
        selectors: [["", "dir", ""]],
        hostVars: 1,
        hostBindings: function Dir_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("dir", ctx._rawDir);
          }
        },
        inputs: {
          dir: "dir"
        },
        outputs: {
          change: "dirChange"
        },
        exportAs: ["dir"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: Directionality,
          useExisting: Dir
        }])]
      });
      Dir.propDecorators = {
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['dirChange']
        }],
        dir: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Dir, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[dir]',
            providers: [{
              provide: Directionality,
              useExisting: Dir
            }],
            host: {
              '[attr.dir]': '_rawDir'
            },
            exportAs: 'dir'
          }]
        }], function () {
          return [];
        }, {
          change: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['dirChange']
          }],
          dir: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BidiModule = function BidiModule() {
        _classCallCheck(this, BidiModule);
      };

      BidiModule.ɵfac = function BidiModule_Factory(t) {
        return new (t || BidiModule)();
      };

      BidiModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: BidiModule
      });
      BidiModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](BidiModule, {
          declarations: [Dir],
          exports: [Dir]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BidiModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            exports: [Dir],
            declarations: [Dir]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=bidi.js.map

      /***/

    },

    /***/
    "coGc":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js ***!
      \********************************************************************/

    /*! exports provided: delayWhen */

    /***/
    function coGc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "delayWhen", function () {
        return delayWhen;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");

      function delayWhen(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
          return function (source) {
            return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
          };
        }

        return function (source) {
          return source.lift(new DelayWhenOperator(delayDurationSelector));
        };
      }

      var DelayWhenOperator = /*#__PURE__*/function () {
        function DelayWhenOperator(delayDurationSelector) {
          _classCallCheck(this, DelayWhenOperator);

          this.delayDurationSelector = delayDurationSelector;
        }

        _createClass2(DelayWhenOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
          }
        }]);

        return DelayWhenOperator;
      }();

      var DelayWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB3) {
        _inherits(DelayWhenSubscriber, _OuterSubscriber__WEB3);

        var _super105 = _createSuper(DelayWhenSubscriber);

        function DelayWhenSubscriber(destination, delayDurationSelector) {
          var _this140;

          _classCallCheck(this, DelayWhenSubscriber);

          _this140 = _super105.call(this, destination);
          _this140.delayDurationSelector = delayDurationSelector;
          _this140.completed = false;
          _this140.delayNotifierSubscriptions = [];
          _this140.index = 0;
          return _this140;
        }

        _createClass2(DelayWhenSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
          }
        }, {
          key: "notifyError",
          value: function notifyError(error, innerSub) {
            this._error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(innerSub) {
            var value = this.removeSubscription(innerSub);

            if (value) {
              this.destination.next(value);
            }

            this.tryComplete();
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var index = this.index++;

            try {
              var delayNotifier = this.delayDurationSelector(value, index);

              if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
              }
            } catch (err) {
              this.destination.error(err);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.completed = true;
            this.tryComplete();
            this.unsubscribe();
          }
        }, {
          key: "removeSubscription",
          value: function removeSubscription(subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);

            if (subscriptionIdx !== -1) {
              this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            }

            return subscription.outerValue;
          }
        }, {
          key: "tryDelay",
          value: function tryDelay(delayNotifier, value) {
            var notifierSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, delayNotifier, value);

            if (notifierSubscription && !notifierSubscription.closed) {
              var destination = this.destination;
              destination.add(notifierSubscription);
              this.delayNotifierSubscriptions.push(notifierSubscription);
            }
          }
        }, {
          key: "tryComplete",
          value: function tryComplete() {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
              this.destination.complete();
            }
          }
        }]);

        return DelayWhenSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]);

      var SubscriptionDelayObservable = /*#__PURE__*/function (_Observable__WEBPACK_5) {
        _inherits(SubscriptionDelayObservable, _Observable__WEBPACK_5);

        var _super106 = _createSuper(SubscriptionDelayObservable);

        function SubscriptionDelayObservable(source, subscriptionDelay) {
          var _this141;

          _classCallCheck(this, SubscriptionDelayObservable);

          _this141 = _super106.call(this);
          _this141.source = source;
          _this141.subscriptionDelay = subscriptionDelay;
          return _this141;
        }

        _createClass2(SubscriptionDelayObservable, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
          }
        }]);

        return SubscriptionDelayObservable;
      }(_Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]);

      var SubscriptionDelaySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_30) {
        _inherits(SubscriptionDelaySubscriber, _Subscriber__WEBPACK_30);

        var _super107 = _createSuper(SubscriptionDelaySubscriber);

        function SubscriptionDelaySubscriber(parent, source) {
          var _this142;

          _classCallCheck(this, SubscriptionDelaySubscriber);

          _this142 = _super107.call(this);
          _this142.parent = parent;
          _this142.source = source;
          _this142.sourceSubscribed = false;
          return _this142;
        }

        _createClass2(SubscriptionDelaySubscriber, [{
          key: "_next",
          value: function _next(unused) {
            this.subscribeToSource();
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.unsubscribe();
            this.parent.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.unsubscribe();
            this.subscribeToSource();
          }
        }, {
          key: "subscribeToSource",
          value: function subscribeToSource() {
            if (!this.sourceSubscribed) {
              this.sourceSubscribed = true;
              this.unsubscribe();
              this.source.subscribe(this.parent);
            }
          }
        }]);

        return SubscriptionDelaySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=delayWhen.js.map

      /***/

    },

    /***/
    "cp0P":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js ***!
      \********************************************************************/

    /*! exports provided: forkJoin */

    /***/
    function cp0P(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "forkJoin", function () {
        return forkJoin;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/map */
      "lJxs");
      /* harmony import */


      var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/isObject */
      "XoHu");
      /* harmony import */


      var _from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./from */
      "Cfvw");

      function forkJoin() {
        for (var _len26 = arguments.length, sources = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
          sources[_key26] = arguments[_key26];
        }

        if (sources.length === 1) {
          var first = sources[0];

          if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(first)) {
            return forkJoinInternal(first, null);
          }

          if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_3__["isObject"])(first) && Object.getPrototypeOf(first) === Object.prototype) {
            var keys = Object.keys(first);
            return forkJoinInternal(keys.map(function (key) {
              return first[key];
            }), keys);
          }
        }

        if (typeof sources[sources.length - 1] === 'function') {
          var resultSelector = sources.pop();
          sources = sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(sources[0]) ? sources[0] : sources;
          return forkJoinInternal(sources, null).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
            return resultSelector.apply(void 0, _toConsumableArray(args));
          }));
        }

        return forkJoinInternal(sources, null);
      }

      function forkJoinInternal(sources, keys) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var len = sources.length;

          if (len === 0) {
            subscriber.complete();
            return;
          }

          var values = new Array(len);
          var completed = 0;
          var emitted = 0;

          var _loop = function _loop(i) {
            var source = Object(_from__WEBPACK_IMPORTED_MODULE_4__["from"])(sources[i]);
            var hasValue = false;
            subscriber.add(source.subscribe({
              next: function next(value) {
                if (!hasValue) {
                  hasValue = true;
                  emitted++;
                }

                values[i] = value;
              },
              error: function error(err) {
                return subscriber.error(err);
              },
              complete: function complete() {
                completed++;

                if (completed === len || !hasValue) {
                  if (emitted === len) {
                    subscriber.next(keys ? keys.reduce(function (result, key, i) {
                      return result[key] = values[i], result;
                    }, {}) : values);
                  }

                  subscriber.complete();
                }
              }
            }));
          };

          for (var i = 0; i < len; i++) {
            _loop(i);
          }
        });
      } //# sourceMappingURL=forkJoin.js.map

      /***/

    },

    /***/
    "cx9U":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/single.js ***!
      \*****************************************************************/

    /*! exports provided: single */

    /***/
    function cx9U(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "single", function () {
        return single;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/EmptyError */
      "sVev");

      function single(predicate) {
        return function (source) {
          return source.lift(new SingleOperator(predicate, source));
        };
      }

      var SingleOperator = /*#__PURE__*/function () {
        function SingleOperator(predicate, source) {
          _classCallCheck(this, SingleOperator);

          this.predicate = predicate;
          this.source = source;
        }

        _createClass2(SingleOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
          }
        }]);

        return SingleOperator;
      }();

      var SingleSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_31) {
        _inherits(SingleSubscriber, _Subscriber__WEBPACK_31);

        var _super108 = _createSuper(SingleSubscriber);

        function SingleSubscriber(destination, predicate, source) {
          var _this143;

          _classCallCheck(this, SingleSubscriber);

          _this143 = _super108.call(this, destination);
          _this143.predicate = predicate;
          _this143.source = source;
          _this143.seenValue = false;
          _this143.index = 0;
          return _this143;
        }

        _createClass2(SingleSubscriber, [{
          key: "applySingleValue",
          value: function applySingleValue(value) {
            if (this.seenValue) {
              this.destination.error('Sequence contains more than one element');
            } else {
              this.seenValue = true;
              this.singleValue = value;
            }
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var index = this.index++;

            if (this.predicate) {
              this.tryNext(value, index);
            } else {
              this.applySingleValue(value);
            }
          }
        }, {
          key: "tryNext",
          value: function tryNext(value, index) {
            try {
              if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
              }
            } catch (err) {
              this.destination.error(err);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var destination = this.destination;

            if (this.index > 0) {
              destination.next(this.seenValue ? this.singleValue : undefined);
              destination.complete();
            } else {
              destination.error(new _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__["EmptyError"]());
            }
          }
        }]);

        return SingleSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=single.js.map

      /***/

    },

    /***/
    "dkDA":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/materialize.js ***!
      \**********************************************************************/

    /*! exports provided: materialize */

    /***/
    function dkDA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "materialize", function () {
        return materialize;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Notification */
      "WMd4");

      function materialize() {
        return function materializeOperatorFunction(source) {
          return source.lift(new MaterializeOperator());
        };
      }

      var MaterializeOperator = /*#__PURE__*/function () {
        function MaterializeOperator() {
          _classCallCheck(this, MaterializeOperator);
        }

        _createClass2(MaterializeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new MaterializeSubscriber(subscriber));
          }
        }]);

        return MaterializeOperator;
      }();

      var MaterializeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_32) {
        _inherits(MaterializeSubscriber, _Subscriber__WEBPACK_32);

        var _super109 = _createSuper(MaterializeSubscriber);

        function MaterializeSubscriber(destination) {
          _classCallCheck(this, MaterializeSubscriber);

          return _super109.call(this, destination);
        }

        _createClass2(MaterializeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var destination = this.destination;
            destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
            destination.complete();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var destination = this.destination;
            destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
            destination.complete();
          }
        }]);

        return MaterializeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=materialize.js.map

      /***/

    },

    /***/
    "eIep":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js ***!
      \********************************************************************/

    /*! exports provided: switchMap */

    /***/
    function eIep(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "switchMap", function () {
        return switchMap;
      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./map */
      "lJxs");
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/from */
      "Cfvw");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function switchMap(project, resultSelector) {
        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(switchMap(function (a, i) {
              return Object(_observable_from__WEBPACK_IMPORTED_MODULE_1__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(function (b, ii) {
                return resultSelector(a, b, i, ii);
              }));
            }));
          };
        }

        return function (source) {
          return source.lift(new SwitchMapOperator(project));
        };
      }

      var SwitchMapOperator = /*#__PURE__*/function () {
        function SwitchMapOperator(project) {
          _classCallCheck(this, SwitchMapOperator);

          this.project = project;
        }

        _createClass2(SwitchMapOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
          }
        }]);

        return SwitchMapOperator;
      }();

      var SwitchMapSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP14) {
        _inherits(SwitchMapSubscriber, _innerSubscribe__WEBP14);

        var _super110 = _createSuper(SwitchMapSubscriber);

        function SwitchMapSubscriber(destination, project) {
          var _this144;

          _classCallCheck(this, SwitchMapSubscriber);

          _this144 = _super110.call(this, destination);
          _this144.project = project;
          _this144.index = 0;
          return _this144;
        }

        _createClass2(SwitchMapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;
            var index = this.index++;

            try {
              result = this.project(value, index);
            } catch (error) {
              this.destination.error(error);
              return;
            }

            this._innerSub(result);
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(result) {
            var innerSubscription = this.innerSubscription;

            if (innerSubscription) {
              innerSubscription.unsubscribe();
            }

            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleInnerSubscriber"](this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            this.innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["innerSubscribe"])(result, innerSubscriber);

            if (this.innerSubscription !== innerSubscriber) {
              destination.add(this.innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var innerSubscription = this.innerSubscription;

            if (!innerSubscription || innerSubscription.closed) {
              _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
            }

            this.unsubscribe();
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.innerSubscription = undefined;
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.innerSubscription = undefined;

            if (this.isStopped) {
              _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }]);

        return SwitchMapSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleOuterSubscriber"]); //# sourceMappingURL=switchMap.js.map

      /***/

    },

    /***/
    "eNwd":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js ***!
      \*************************************************************************/

    /*! exports provided: animationFrameScheduler, animationFrame */

    /***/
    function eNwd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function () {
        return animationFrameScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "animationFrame", function () {
        return animationFrame;
      });
      /* harmony import */


      var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AnimationFrameAction */
      "Vpsf");
      /* harmony import */


      var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AnimationFrameScheduler */
      "znLP");

      var animationFrameScheduler = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__["AnimationFrameScheduler"](_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__["AnimationFrameAction"]);
      var animationFrame = animationFrameScheduler; //# sourceMappingURL=animationFrame.js.map

      /***/
    },

    /***/
    "f29J":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concat.js ***!
      \*****************************************************************/

    /*! exports provided: concat */

    /***/
    function f29J(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "concat", function () {
        return concat;
      });
      /* harmony import */


      var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/concat */
      "GyhO");

      function concat() {
        for (var _len27 = arguments.length, observables = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
          observables[_key27] = arguments[_key27];
        }

        return function (source) {
          return source.lift.call(Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"]).apply(void 0, [source].concat(observables)));
        };
      } //# sourceMappingURL=concat.js.map

      /***/

    },

    /***/
    "fFD9":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js ***!
      \************************************************************************/

    /*! exports provided: combineLatest */

    /***/
    function fFD9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
        return combineLatest;
      });
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/combineLatest */
      "itXk");
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/from */
      "Cfvw");

      var none = {};

      function combineLatest() {
        for (var _len28 = arguments.length, observables = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
          observables[_key28] = arguments[_key28];
        }

        var project = null;

        if (typeof observables[observables.length - 1] === 'function') {
          project = observables.pop();
        }

        if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
          observables = observables[0].slice();
        }

        return function (source) {
          return source.lift.call(Object(_observable_from__WEBPACK_IMPORTED_MODULE_2__["from"])([source].concat(_toConsumableArray(observables))), new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__["CombineLatestOperator"](project));
        };
      } //# sourceMappingURL=combineLatest.js.map

      /***/

    },

    /***/
    "fXoL":
    /*!******************************************************************!*\
      !*** ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js ***!
      \******************************************************************/

    /*! exports provided: ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactoryResolver, ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, Directive, ElementRef, EmbeddedViewRef, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, ReflectiveInjector, ReflectiveKey, Renderer2, RendererFactory2, RendererStyleFlags2, ResolvedReflectiveFactory, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation, ViewRef, WrappedValue, asNativeElements, assertPlatform, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getPlatform, inject, isDevMode, platformCore, resolveForwardRef, setTestabilityGetter, ɵ0, ɵALLOW_MULTIPLE_PLATFORMS, ɵAPP_ID_RANDOM_PROVIDER, ɵCREATE_ATTRIBUTE_DECORATOR__POST_R3__, ɵChangeDetectorStatus, ɵCodegenComponentFactoryResolver, ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, ɵCompiler_compileModuleAsync__POST_R3__, ɵCompiler_compileModuleSync__POST_R3__, ɵComponentFactory, ɵConsole, ɵDEFAULT_LOCALE_ID, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵINJECTOR_IMPL__POST_R3__, ɵINJECTOR_SCOPE, ɵLifecycleHooksFeature, ɵLocaleDataIndex, ɵNG_COMP_DEF, ɵNG_DIR_DEF, ɵNG_ELEMENT_ID, ɵNG_INJ_DEF, ɵNG_MOD_DEF, ɵNG_PIPE_DEF, ɵNG_PROV_DEF, ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ɵNO_CHANGE, ɵNgModuleFactory, ɵNoopNgZone, ɵReflectionCapabilities, ɵRender3ComponentFactory, ɵRender3ComponentRef, ɵRender3NgModuleRef, ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, ɵSWITCH_COMPILE_COMPONENT__POST_R3__, ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, ɵSWITCH_COMPILE_NGMODULE__POST_R3__, ɵSWITCH_COMPILE_PIPE__POST_R3__, ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, ɵSWITCH_IVY_ENABLED__POST_R3__, ɵSWITCH_RENDERER2_FACTORY__POST_R3__, ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, ɵ_sanitizeHtml, ɵ_sanitizeUrl, ɵallowSanitizationBypassAndThrow, ɵand, ɵangular_packages_core_core_a, ɵangular_packages_core_core_b, ɵangular_packages_core_core_ba, ɵangular_packages_core_core_bb, ɵangular_packages_core_core_bc, ɵangular_packages_core_core_bd, ɵangular_packages_core_core_be, ɵangular_packages_core_core_bf, ɵangular_packages_core_core_bg, ɵangular_packages_core_core_bh, ɵangular_packages_core_core_bi, ɵangular_packages_core_core_bj, ɵangular_packages_core_core_bl, ɵangular_packages_core_core_bm, ɵangular_packages_core_core_bn, ɵangular_packages_core_core_bo, ɵangular_packages_core_core_bp, ɵangular_packages_core_core_bq, ɵangular_packages_core_core_br, ɵangular_packages_core_core_bs, ɵangular_packages_core_core_bv, ɵangular_packages_core_core_bw, ɵangular_packages_core_core_bx, ɵangular_packages_core_core_bz, ɵangular_packages_core_core_c, ɵangular_packages_core_core_cb, ɵangular_packages_core_core_cc, ɵangular_packages_core_core_d, ɵangular_packages_core_core_e, ɵangular_packages_core_core_f, ɵangular_packages_core_core_g, ɵangular_packages_core_core_h, ɵangular_packages_core_core_i, ɵangular_packages_core_core_j, ɵangular_packages_core_core_k, ɵangular_packages_core_core_l, ɵangular_packages_core_core_m, ɵangular_packages_core_core_n, ɵangular_packages_core_core_o, ɵangular_packages_core_core_p, ɵangular_packages_core_core_q, ɵangular_packages_core_core_r, ɵangular_packages_core_core_s, ɵangular_packages_core_core_t, ɵangular_packages_core_core_u, ɵangular_packages_core_core_v, ɵangular_packages_core_core_w, ɵangular_packages_core_core_x, ɵangular_packages_core_core_y, ɵangular_packages_core_core_z, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl, ɵccf, ɵclearOverrides, ɵclearResolutionOfComponentResourcesQueue, ɵcmf, ɵcompileComponent, ɵcompileDirective, ɵcompileNgModule, ɵcompileNgModuleDefs, ɵcompileNgModuleFactory__POST_R3__, ɵcompilePipe, ɵcreateInjector, ɵcrt, ɵdefaultIterableDiffers, ɵdefaultKeyValueDiffers, ɵdetectChanges, ɵdevModeEqual, ɵdid, ɵeld, ɵfindLocaleData, ɵflushModuleScopingQueueAsMuchAsPossible, ɵgetComponentViewDefinitionFactory, ɵgetDebugNodeR2, ɵgetDebugNode__POST_R3__, ɵgetDirectives, ɵgetHostElement, ɵgetInjectableDef, ɵgetLContext, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵgetModuleFactory__POST_R3__, ɵgetSanitizationBypassType, ɵglobal, ɵinitServicesIfNeeded, ɵinlineInterpolate, ɵinterpolate, ɵisBoundToModule__POST_R3__, ɵisDefaultChangeDetectionStrategy, ɵisListLikeIterable, ɵisObservable, ɵisPromise, ɵisSubscribable, ɵivyEnabled, ɵmakeDecorator, ɵmarkDirty, ɵmod, ɵmpd, ɵncd, ɵnoSideEffects, ɵnov, ɵoverrideComponentView, ɵoverrideProvider, ɵpad, ɵpatchComponentDefWithScope, ɵpid, ɵpod, ɵppd, ɵprd, ɵpublishDefaultGlobalUtils, ɵpublishGlobalUtil, ɵqud, ɵregisterLocaleData, ɵregisterModuleFactory, ɵregisterNgModuleType, ɵrenderComponent, ɵresetCompiledComponents, ɵresetJitOptions, ɵresolveComponentResources, ɵsetClassMetadata, ɵsetCurrentInjector, ɵsetDocument, ɵsetLocaleId, ɵstore, ɵstringify, ɵted, ɵtransitiveScopesFor, ɵunregisterLocaleData, ɵunv, ɵunwrapSafeValue, ɵvid, ɵwhenRendered, ɵɵCopyDefinitionFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcontentQuery, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵenableBindings, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinjectPipeChangeDetectorRef, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵngDeclareComponent, ɵɵngDeclareDirective, ɵɵngDeclarePipe, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵviewQuery */

    /***/
    function fXoL(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ANALYZE_FOR_ENTRY_COMPONENTS", function () {
        return ANALYZE_FOR_ENTRY_COMPONENTS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APP_BOOTSTRAP_LISTENER", function () {
        return APP_BOOTSTRAP_LISTENER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APP_ID", function () {
        return APP_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APP_INITIALIZER", function () {
        return APP_INITIALIZER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApplicationInitStatus", function () {
        return ApplicationInitStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApplicationModule", function () {
        return ApplicationModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ApplicationRef", function () {
        return ApplicationRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Attribute", function () {
        return Attribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "COMPILER_OPTIONS", function () {
        return COMPILER_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function () {
        return CUSTOM_ELEMENTS_SCHEMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeDetectionStrategy", function () {
        return ChangeDetectionStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeDetectorRef", function () {
        return ChangeDetectorRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Compiler", function () {
        return Compiler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompilerFactory", function () {
        return CompilerFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Component", function () {
        return Component;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentFactory", function () {
        return ComponentFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentFactoryResolver", function () {
        return ComponentFactoryResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentRef", function () {
        return ComponentRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContentChild", function () {
        return ContentChild;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContentChildren", function () {
        return ContentChildren;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_CURRENCY_CODE", function () {
        return DEFAULT_CURRENCY_CODE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DebugElement", function () {
        return DebugElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DebugEventListener", function () {
        return DebugEventListener;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DebugNode", function () {
        return DebugNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DefaultIterableDiffer", function () {
        return DefaultIterableDiffer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Directive", function () {
        return Directive;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ElementRef", function () {
        return ElementRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmbeddedViewRef", function () {
        return EmbeddedViewRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ErrorHandler", function () {
        return ErrorHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventEmitter", function () {
        return EventEmitter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Host", function () {
        return Host;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HostBinding", function () {
        return HostBinding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HostListener", function () {
        return HostListener;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "INJECTOR", function () {
        return INJECTOR$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Inject", function () {
        return Inject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InjectFlags", function () {
        return InjectFlags;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Injectable", function () {
        return Injectable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InjectionToken", function () {
        return InjectionToken;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Injector", function () {
        return Injector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Input", function () {
        return Input;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IterableDiffers", function () {
        return IterableDiffers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KeyValueDiffers", function () {
        return KeyValueDiffers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LOCALE_ID", function () {
        return LOCALE_ID$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MissingTranslationStrategy", function () {
        return MissingTranslationStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModuleWithComponentFactories", function () {
        return ModuleWithComponentFactories;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function () {
        return NO_ERRORS_SCHEMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModule", function () {
        return NgModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModuleFactory", function () {
        return NgModuleFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModuleFactoryLoader", function () {
        return NgModuleFactoryLoader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgModuleRef", function () {
        return NgModuleRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgProbeToken", function () {
        return NgProbeToken;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgZone", function () {
        return NgZone;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Optional", function () {
        return Optional;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Output", function () {
        return Output;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PACKAGE_ROOT_URL", function () {
        return PACKAGE_ROOT_URL;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PLATFORM_ID", function () {
        return PLATFORM_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PLATFORM_INITIALIZER", function () {
        return PLATFORM_INITIALIZER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Pipe", function () {
        return Pipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PlatformRef", function () {
        return PlatformRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Query", function () {
        return Query;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "QueryList", function () {
        return QueryList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReflectiveInjector", function () {
        return ReflectiveInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReflectiveKey", function () {
        return ReflectiveKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Renderer2", function () {
        return Renderer2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RendererFactory2", function () {
        return RendererFactory2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RendererStyleFlags2", function () {
        return RendererStyleFlags2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ResolvedReflectiveFactory", function () {
        return ResolvedReflectiveFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Sanitizer", function () {
        return Sanitizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SecurityContext", function () {
        return SecurityContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Self", function () {
        return Self;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SimpleChange", function () {
        return SimpleChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SkipSelf", function () {
        return SkipSelf;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoader", function () {
        return SystemJsNgModuleLoader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoaderConfig", function () {
        return SystemJsNgModuleLoaderConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TRANSLATIONS", function () {
        return TRANSLATIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TRANSLATIONS_FORMAT", function () {
        return TRANSLATIONS_FORMAT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateRef", function () {
        return TemplateRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Testability", function () {
        return Testability;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TestabilityRegistry", function () {
        return TestabilityRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Type", function () {
        return Type;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Version", function () {
        return Version;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewChild", function () {
        return ViewChild;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewChildren", function () {
        return ViewChildren;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewContainerRef", function () {
        return ViewContainerRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewEncapsulation", function () {
        return ViewEncapsulation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewRef", function () {
        return ViewRef$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WrappedValue", function () {
        return WrappedValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asNativeElements", function () {
        return asNativeElements;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "assertPlatform", function () {
        return assertPlatform;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createPlatform", function () {
        return createPlatform;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createPlatformFactory", function () {
        return createPlatformFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defineInjectable", function () {
        return defineInjectable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "destroyPlatform", function () {
        return destroyPlatform;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableProdMode", function () {
        return enableProdMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "forwardRef", function () {
        return forwardRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getDebugNode", function () {
        return getDebugNode$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getModuleFactory", function () {
        return getModuleFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getPlatform", function () {
        return getPlatform;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "inject", function () {
        return inject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isDevMode", function () {
        return isDevMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "platformCore", function () {
        return platformCore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "resolveForwardRef", function () {
        return resolveForwardRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setTestabilityGetter", function () {
        return setTestabilityGetter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵ0", function () {
        return ɵ0$3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵALLOW_MULTIPLE_PLATFORMS", function () {
        return ALLOW_MULTIPLE_PLATFORMS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAPP_ID_RANDOM_PROVIDER", function () {
        return APP_ID_RANDOM_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCREATE_ATTRIBUTE_DECORATOR__POST_R3__", function () {
        return CREATE_ATTRIBUTE_DECORATOR__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵChangeDetectorStatus", function () {
        return ChangeDetectorStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCodegenComponentFactoryResolver", function () {
        return CodegenComponentFactoryResolver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__", function () {
        return Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__", function () {
        return Compiler_compileModuleAndAllComponentsSync__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAsync__POST_R3__", function () {
        return Compiler_compileModuleAsync__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleSync__POST_R3__", function () {
        return Compiler_compileModuleSync__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵComponentFactory", function () {
        return ComponentFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵConsole", function () {
        return Console;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDEFAULT_LOCALE_ID", function () {
        return DEFAULT_LOCALE_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵEMPTY_ARRAY", function () {
        return EMPTY_ARRAY$4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵEMPTY_MAP", function () {
        return EMPTY_MAP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_IMPL__POST_R3__", function () {
        return INJECTOR_IMPL__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_SCOPE", function () {
        return INJECTOR_SCOPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵLifecycleHooksFeature", function () {
        return LifecycleHooksFeature;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵLocaleDataIndex", function () {
        return LocaleDataIndex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_COMP_DEF", function () {
        return NG_COMP_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_DIR_DEF", function () {
        return NG_DIR_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_ELEMENT_ID", function () {
        return NG_ELEMENT_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_INJ_DEF", function () {
        return NG_INJ_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_MOD_DEF", function () {
        return NG_MOD_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_PIPE_DEF", function () {
        return NG_PIPE_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNG_PROV_DEF", function () {
        return NG_PROV_DEF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR", function () {
        return NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNO_CHANGE", function () {
        return NO_CHANGE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNgModuleFactory", function () {
        return NgModuleFactory$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNoopNgZone", function () {
        return NoopNgZone;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵReflectionCapabilities", function () {
        return ReflectionCapabilities;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentFactory", function () {
        return ComponentFactory$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentRef", function () {
        return ComponentRef$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵRender3NgModuleRef", function () {
        return NgModuleRef$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__", function () {
        return SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_COMPONENT__POST_R3__", function () {
        return SWITCH_COMPILE_COMPONENT__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__", function () {
        return SWITCH_COMPILE_DIRECTIVE__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__", function () {
        return SWITCH_COMPILE_INJECTABLE__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_NGMODULE__POST_R3__", function () {
        return SWITCH_COMPILE_NGMODULE__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_PIPE__POST_R3__", function () {
        return SWITCH_COMPILE_PIPE__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__", function () {
        return SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_IVY_ENABLED__POST_R3__", function () {
        return SWITCH_IVY_ENABLED__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_RENDERER2_FACTORY__POST_R3__", function () {
        return SWITCH_RENDERER2_FACTORY__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__", function () {
        return SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__", function () {
        return SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeHtml", function () {
        return _sanitizeHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeUrl", function () {
        return _sanitizeUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵallowSanitizationBypassAndThrow", function () {
        return allowSanitizationBypassAndThrow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵand", function () {
        return anchorDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_a", function () {
        return isForwardRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_b", function () {
        return injectInjectorOnly;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_ba", function () {
        return zoneSchedulerFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bb", function () {
        return USD_CURRENCY_CODE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bc", function () {
        return _def;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bd", function () {
        return DebugContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_be", function () {
        return NgOnChangesFeatureImpl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bf", function () {
        return SCHEDULER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bg", function () {
        return injectAttributeImpl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bh", function () {
        return getLView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bi", function () {
        return getBindingRoot;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bj", function () {
        return nextContextImpl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bl", function () {
        return pureFunction1Internal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bm", function () {
        return pureFunction2Internal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bn", function () {
        return pureFunction3Internal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bo", function () {
        return pureFunction4Internal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bp", function () {
        return pureFunctionVInternal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bq", function () {
        return getUrlSanitizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_br", function () {
        return makePropDecorator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bs", function () {
        return makeParamDecorator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bv", function () {
        return getClosureSafeProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bw", function () {
        return NullInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bx", function () {
        return getInjectImplementation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bz", function () {
        return getNativeByTNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_c", function () {
        return attachInjectFlag;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_cb", function () {
        return getRootContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_cc", function () {
        return i18nPostprocess;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_d", function () {
        return ReflectiveInjector_;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_e", function () {
        return ReflectiveDependency;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_f", function () {
        return resolveReflectiveProviders;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_g", function () {
        return _appIdRandomProviderFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_h", function () {
        return injectRenderer2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_i", function () {
        return injectElementRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_j", function () {
        return createElementRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_k", function () {
        return getModuleFactory__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_l", function () {
        return injectTemplateRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_m", function () {
        return createTemplateRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_n", function () {
        return injectViewContainerRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_o", function () {
        return DebugNode__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_p", function () {
        return DebugElement__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_q", function () {
        return getDebugNodeR2__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_r", function () {
        return injectChangeDetectorRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_s", function () {
        return DefaultIterableDifferFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_t", function () {
        return DefaultKeyValueDifferFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_u", function () {
        return defaultIterableDiffersFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_v", function () {
        return defaultKeyValueDiffersFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_w", function () {
        return _iterableDiffersFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_x", function () {
        return _keyValueDiffersFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_y", function () {
        return _localeFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_z", function () {
        return APPLICATION_MODULE_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustHtml", function () {
        return bypassSanitizationTrustHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustResourceUrl", function () {
        return bypassSanitizationTrustResourceUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustScript", function () {
        return bypassSanitizationTrustScript;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustStyle", function () {
        return bypassSanitizationTrustStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustUrl", function () {
        return bypassSanitizationTrustUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵccf", function () {
        return createComponentFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵclearOverrides", function () {
        return clearOverrides;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵclearResolutionOfComponentResourcesQueue", function () {
        return clearResolutionOfComponentResourcesQueue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcmf", function () {
        return createNgModuleFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompileComponent", function () {
        return compileComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompileDirective", function () {
        return compileDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompileNgModule", function () {
        return compileNgModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleDefs", function () {
        return compileNgModuleDefs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleFactory__POST_R3__", function () {
        return compileNgModuleFactory__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcompilePipe", function () {
        return compilePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcreateInjector", function () {
        return createInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcrt", function () {
        return createRendererType2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵdefaultIterableDiffers", function () {
        return defaultIterableDiffers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵdefaultKeyValueDiffers", function () {
        return defaultKeyValueDiffers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵdetectChanges", function () {
        return detectChanges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵdevModeEqual", function () {
        return devModeEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵdid", function () {
        return directiveDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵeld", function () {
        return elementDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵfindLocaleData", function () {
        return findLocaleData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵflushModuleScopingQueueAsMuchAsPossible", function () {
        return flushModuleScopingQueueAsMuchAsPossible;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetComponentViewDefinitionFactory", function () {
        return getComponentViewDefinitionFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetDebugNodeR2", function () {
        return getDebugNodeR2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetDebugNode__POST_R3__", function () {
        return getDebugNode__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetDirectives", function () {
        return getDirectives;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetHostElement", function () {
        return getHostElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetInjectableDef", function () {
        return getInjectableDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetLContext", function () {
        return getLContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetLocaleCurrencyCode", function () {
        return getLocaleCurrencyCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetLocalePluralCase", function () {
        return getLocalePluralCase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetModuleFactory__POST_R3__", function () {
        return getModuleFactory__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetSanitizationBypassType", function () {
        return getSanitizationBypassType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵglobal", function () {
        return _global;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵinitServicesIfNeeded", function () {
        return initServicesIfNeeded;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵinlineInterpolate", function () {
        return inlineInterpolate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵinterpolate", function () {
        return interpolate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisBoundToModule__POST_R3__", function () {
        return isBoundToModule__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisDefaultChangeDetectionStrategy", function () {
        return isDefaultChangeDetectionStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisListLikeIterable", function () {
        return isListLikeIterable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisObservable", function () {
        return isObservable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisPromise", function () {
        return isPromise;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵisSubscribable", function () {
        return isSubscribable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵivyEnabled", function () {
        return ivyEnabled;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmakeDecorator", function () {
        return makeDecorator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmarkDirty", function () {
        return markDirty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmod", function () {
        return moduleDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmpd", function () {
        return moduleProvideDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵncd", function () {
        return ngContentDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵnoSideEffects", function () {
        return noSideEffects;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵnov", function () {
        return nodeValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵoverrideComponentView", function () {
        return overrideComponentView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵoverrideProvider", function () {
        return overrideProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpad", function () {
        return pureArrayDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpatchComponentDefWithScope", function () {
        return patchComponentDefWithScope;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpid", function () {
        return pipeDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpod", function () {
        return pureObjectDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵppd", function () {
        return purePipeDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵprd", function () {
        return providerDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpublishDefaultGlobalUtils", function () {
        return publishDefaultGlobalUtils;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵpublishGlobalUtil", function () {
        return publishGlobalUtil;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵqud", function () {
        return queryDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵregisterLocaleData", function () {
        return registerLocaleData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵregisterModuleFactory", function () {
        return registerModuleFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵregisterNgModuleType", function () {
        return registerNgModuleType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵrenderComponent", function () {
        return renderComponent$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵresetCompiledComponents", function () {
        return resetCompiledComponents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵresetJitOptions", function () {
        return resetJitOptions;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵresolveComponentResources", function () {
        return resolveComponentResources;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsetClassMetadata", function () {
        return setClassMetadata;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsetCurrentInjector", function () {
        return setCurrentInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsetDocument", function () {
        return setDocument;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsetLocaleId", function () {
        return setLocaleId;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵstore", function () {
        return store;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵstringify", function () {
        return stringify;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵted", function () {
        return textDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵtransitiveScopesFor", function () {
        return transitiveScopesFor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵunregisterLocaleData", function () {
        return unregisterAllLocaleData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵunv", function () {
        return unwrapValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵunwrapSafeValue", function () {
        return unwrapSafeValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵvid", function () {
        return viewDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵwhenRendered", function () {
        return whenRendered;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵCopyDefinitionFeature", function () {
        return ɵɵCopyDefinitionFeature;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵInheritDefinitionFeature", function () {
        return ɵɵInheritDefinitionFeature;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵNgOnChangesFeature", function () {
        return ɵɵNgOnChangesFeature;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵProvidersFeature", function () {
        return ɵɵProvidersFeature;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵadvance", function () {
        return ɵɵadvance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattribute", function () {
        return ɵɵattribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate1", function () {
        return ɵɵattributeInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate2", function () {
        return ɵɵattributeInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate3", function () {
        return ɵɵattributeInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate4", function () {
        return ɵɵattributeInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate5", function () {
        return ɵɵattributeInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate6", function () {
        return ɵɵattributeInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate7", function () {
        return ɵɵattributeInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate8", function () {
        return ɵɵattributeInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolateV", function () {
        return ɵɵattributeInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMap", function () {
        return ɵɵclassMap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate1", function () {
        return ɵɵclassMapInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate2", function () {
        return ɵɵclassMapInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate3", function () {
        return ɵɵclassMapInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate4", function () {
        return ɵɵclassMapInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate5", function () {
        return ɵɵclassMapInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate6", function () {
        return ɵɵclassMapInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate7", function () {
        return ɵɵclassMapInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate8", function () {
        return ɵɵclassMapInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolateV", function () {
        return ɵɵclassMapInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵclassProp", function () {
        return ɵɵclassProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵcontentQuery", function () {
        return ɵɵcontentQuery;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefineComponent", function () {
        return ɵɵdefineComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefineDirective", function () {
        return ɵɵdefineDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjectable", function () {
        return ɵɵdefineInjectable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjector", function () {
        return ɵɵdefineInjector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefineNgModule", function () {
        return ɵɵdefineNgModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdefinePipe", function () {
        return ɵɵdefinePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdirectiveInject", function () {
        return ɵɵdirectiveInject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵdisableBindings", function () {
        return ɵɵdisableBindings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelement", function () {
        return ɵɵelement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelementContainer", function () {
        return ɵɵelementContainer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerEnd", function () {
        return ɵɵelementContainerEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerStart", function () {
        return ɵɵelementContainerStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelementEnd", function () {
        return ɵɵelementEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵelementStart", function () {
        return ɵɵelementStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵenableBindings", function () {
        return ɵɵenableBindings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵgetCurrentView", function () {
        return ɵɵgetCurrentView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵgetInheritedFactory", function () {
        return ɵɵgetInheritedFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵhostProperty", function () {
        return ɵɵhostProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18n", function () {
        return ɵɵi18n;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nApply", function () {
        return ɵɵi18nApply;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nAttributes", function () {
        return ɵɵi18nAttributes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nEnd", function () {
        return ɵɵi18nEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nExp", function () {
        return ɵɵi18nExp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nPostprocess", function () {
        return ɵɵi18nPostprocess;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵi18nStart", function () {
        return ɵɵi18nStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵinject", function () {
        return ɵɵinject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵinjectAttribute", function () {
        return ɵɵinjectAttribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵinjectPipeChangeDetectorRef", function () {
        return ɵɵinjectPipeChangeDetectorRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactory", function () {
        return ɵɵinvalidFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactoryDep", function () {
        return ɵɵinvalidFactoryDep;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵlistener", function () {
        return ɵɵlistener;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵloadQuery", function () {
        return ɵɵloadQuery;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceHTML", function () {
        return ɵɵnamespaceHTML;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceMathML", function () {
        return ɵɵnamespaceMathML;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceSVG", function () {
        return ɵɵnamespaceSVG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵnextContext", function () {
        return ɵɵnextContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵngDeclareComponent", function () {
        return ɵɵngDeclareComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵngDeclareDirective", function () {
        return ɵɵngDeclareDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵngDeclarePipe", function () {
        return ɵɵngDeclarePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipe", function () {
        return ɵɵpipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind1", function () {
        return ɵɵpipeBind1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind2", function () {
        return ɵɵpipeBind2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind3", function () {
        return ɵɵpipeBind3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind4", function () {
        return ɵɵpipeBind4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpipeBindV", function () {
        return ɵɵpipeBindV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵprojection", function () {
        return ɵɵprojection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵprojectionDef", function () {
        return ɵɵprojectionDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵproperty", function () {
        return ɵɵproperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate", function () {
        return ɵɵpropertyInterpolate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate1", function () {
        return ɵɵpropertyInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate2", function () {
        return ɵɵpropertyInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate3", function () {
        return ɵɵpropertyInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate4", function () {
        return ɵɵpropertyInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate5", function () {
        return ɵɵpropertyInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate6", function () {
        return ɵɵpropertyInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate7", function () {
        return ɵɵpropertyInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate8", function () {
        return ɵɵpropertyInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolateV", function () {
        return ɵɵpropertyInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction0", function () {
        return ɵɵpureFunction0;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction1", function () {
        return ɵɵpureFunction1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction2", function () {
        return ɵɵpureFunction2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction3", function () {
        return ɵɵpureFunction3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction4", function () {
        return ɵɵpureFunction4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction5", function () {
        return ɵɵpureFunction5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction6", function () {
        return ɵɵpureFunction6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction7", function () {
        return ɵɵpureFunction7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction8", function () {
        return ɵɵpureFunction8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵpureFunctionV", function () {
        return ɵɵpureFunctionV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵqueryRefresh", function () {
        return ɵɵqueryRefresh;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵreference", function () {
        return ɵɵreference;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵresolveBody", function () {
        return ɵɵresolveBody;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵresolveDocument", function () {
        return ɵɵresolveDocument;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵresolveWindow", function () {
        return ɵɵresolveWindow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵrestoreView", function () {
        return ɵɵrestoreView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeHtml", function () {
        return ɵɵsanitizeHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeResourceUrl", function () {
        return ɵɵsanitizeResourceUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeScript", function () {
        return ɵɵsanitizeScript;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeStyle", function () {
        return ɵɵsanitizeStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrl", function () {
        return ɵɵsanitizeUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrlOrResourceUrl", function () {
        return ɵɵsanitizeUrlOrResourceUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsetComponentScope", function () {
        return ɵɵsetComponentScope;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsetNgModuleScope", function () {
        return ɵɵsetNgModuleScope;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMap", function () {
        return ɵɵstyleMap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate1", function () {
        return ɵɵstyleMapInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate2", function () {
        return ɵɵstyleMapInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate3", function () {
        return ɵɵstyleMapInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate4", function () {
        return ɵɵstyleMapInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate5", function () {
        return ɵɵstyleMapInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate6", function () {
        return ɵɵstyleMapInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate7", function () {
        return ɵɵstyleMapInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate8", function () {
        return ɵɵstyleMapInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolateV", function () {
        return ɵɵstyleMapInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstyleProp", function () {
        return ɵɵstyleProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate1", function () {
        return ɵɵstylePropInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate2", function () {
        return ɵɵstylePropInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate3", function () {
        return ɵɵstylePropInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate4", function () {
        return ɵɵstylePropInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate5", function () {
        return ɵɵstylePropInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate6", function () {
        return ɵɵstylePropInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate7", function () {
        return ɵɵstylePropInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate8", function () {
        return ɵɵstylePropInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolateV", function () {
        return ɵɵstylePropInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsyntheticHostListener", function () {
        return ɵɵsyntheticHostListener;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵsyntheticHostProperty", function () {
        return ɵɵsyntheticHostProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtemplate", function () {
        return ɵɵtemplate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtemplateRefExtractor", function () {
        return ɵɵtemplateRefExtractor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtext", function () {
        return ɵɵtext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate", function () {
        return ɵɵtextInterpolate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate1", function () {
        return ɵɵtextInterpolate1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate2", function () {
        return ɵɵtextInterpolate2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate3", function () {
        return ɵɵtextInterpolate3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate4", function () {
        return ɵɵtextInterpolate4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate5", function () {
        return ɵɵtextInterpolate5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate6", function () {
        return ɵɵtextInterpolate6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate7", function () {
        return ɵɵtextInterpolate7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate8", function () {
        return ɵɵtextInterpolate8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolateV", function () {
        return ɵɵtextInterpolateV;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtrustConstantHtml", function () {
        return ɵɵtrustConstantHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵtrustConstantResourceUrl", function () {
        return ɵɵtrustConstantResourceUrl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵɵviewQuery", function () {
        return ɵɵviewQuery;
      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getClosureSafeProperty(objWithPropertyToExtract) {
        for (var key in objWithPropertyToExtract) {
          if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
            return key;
          }
        }

        throw Error('Could not find renamed property on target object.');
      }
      /**
       * Sets properties on a target object from a source object, but only if
       * the property doesn't already exist on the target object.
       * @param target The target to set properties on
       * @param source The source of the property keys and values to set
       */


      function fillProperties(target, source) {
        for (var key in source) {
          if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
            target[key] = source[key];
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }

        if (Array.isArray(token)) {
          return '[' + token.map(stringify).join(', ') + ']';
        }

        if (token == null) {
          return '' + token;
        }

        if (token.overriddenName) {
          return "".concat(token.overriddenName);
        }

        if (token.name) {
          return "".concat(token.name);
        }

        var res = token.toString();

        if (res == null) {
          return '' + res;
        }

        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      /**
       * Concatenates two strings with separator, allocating new strings only when necessary.
       *
       * @param before before string.
       * @param separator separator string.
       * @param after after string.
       * @returns concatenated string.
       */


      function concatStringsWithSpace(before, after) {
        return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var __forward_ref__ = getClosureSafeProperty({
        __forward_ref__: getClosureSafeProperty
      });
      /**
       * Allows to refer to references which are not yet defined.
       *
       * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
       * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
       * a query is not yet defined.
       *
       * @usageNotes
       * ### Example
       * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
       * @publicApi
       */


      function forwardRef(forwardRefFn) {
        forwardRefFn.__forward_ref__ = forwardRef;

        forwardRefFn.toString = function () {
          return stringify(this());
        };

        return forwardRefFn;
      }
      /**
       * Lazily retrieves the reference value from a forwardRef.
       *
       * Acts as the identity function when given a non-forward-ref value.
       *
       * @usageNotes
       * ### Example
       *
       * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
       *
       * @see `forwardRef`
       * @publicApi
       */


      function resolveForwardRef(type) {
        return isForwardRef(type) ? type() : type;
      }
      /** Checks whether a function is wrapped by a `forwardRef`. */


      function isForwardRef(fn) {
        return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Base URL for the error details page.
      // Keep this value in sync with a similar const in
      // `packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts`.


      var ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';

      var RuntimeError = /*#__PURE__*/function (_Error) {
        _inherits(RuntimeError, _Error);

        var _super111 = _createSuper(RuntimeError);

        function RuntimeError(code, message) {
          var _this145;

          _classCallCheck(this, RuntimeError);

          _this145 = _super111.call(this, formatRuntimeError(code, message));
          _this145.code = code;
          return _this145;
        }

        return RuntimeError;
      }( /*#__PURE__*/_wrapNativeSuper(Error)); // Contains a set of error messages that have details guides at angular.io.
      // Full list of available error guides can be found at https://angular.io/errors

      /* tslint:disable:no-toplevel-property-access */


      var RUNTIME_ERRORS_WITH_GUIDES = new Set(["100"
      /* EXPRESSION_CHANGED_AFTER_CHECKED */
      , "200"
      /* CYCLIC_DI_DEPENDENCY */
      , "201"
      /* PROVIDER_NOT_FOUND */
      , "300"
      /* MULTIPLE_COMPONENTS_MATCH */
      , "301"
      /* EXPORT_NOT_FOUND */
      , "302"
      /* PIPE_NOT_FOUND */
      ]);
      /* tslint:enable:no-toplevel-property-access */

      /** Called to format a runtime error */

      function formatRuntimeError(code, message) {
        var fullCode = code ? "NG0".concat(code, ": ") : '';
        var errorMessage = "".concat(fullCode).concat(message); // Some runtime errors are still thrown without `ngDevMode` (for example
        // `throwProviderNotFoundError`), so we add `ngDevMode` check here to avoid pulling
        // `RUNTIME_ERRORS_WITH_GUIDES` symbol into prod bundles.
        // TODO: revisit all instances where `RuntimeError` is thrown and see if `ngDevMode` can be added
        // there instead to tree-shake more devmode-only code (and eventually remove `ngDevMode` check
        // from this code).

        if (ngDevMode && RUNTIME_ERRORS_WITH_GUIDES.has(code)) {
          errorMessage = "".concat(errorMessage, ". Find more at ").concat(ERROR_DETAILS_PAGE_BASE_URL, "/NG0").concat(code);
        }

        return errorMessage;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used for stringify render output in Ivy.
       * Important! This function is very performance-sensitive and we should
       * be extra careful not to introduce megamorphic reads in it.
       * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.
       */


      function renderStringify(value) {
        if (typeof value === 'string') return value;
        if (value == null) return ''; // Use `String` so that it invokes the `toString` method of the value. Note that this
        // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).

        return String(value);
      }
      /**
       * Used to stringify a value so that it can be displayed in an error message.
       * Important! This function contains a megamorphic read and should only be
       * used for error messages.
       */


      function stringifyForError(value) {
        if (typeof value === 'function') return value.name || value.toString();

        if (typeof value === 'object' && value != null && typeof value.type === 'function') {
          return value.type.name || value.type.toString();
        }

        return renderStringify(value);
      }
      /** Called when directives inject each other (creating a circular dependency) */


      function throwCyclicDependencyError(token, path) {
        var depPath = path ? ". Dependency path: ".concat(path.join(' > '), " > ").concat(token) : '';
        throw new RuntimeError("200"
        /* CYCLIC_DI_DEPENDENCY */
        , "Circular dependency in DI detected for ".concat(token).concat(depPath));
      }

      function throwMixedMultiProviderError() {
        throw new Error("Cannot mix multi providers and regular providers");
      }

      function throwInvalidProviderError(ngModuleType, providers, provider) {
        var ngModuleDetail = '';

        if (ngModuleType && providers) {
          var providerDetail = providers.map(function (v) {
            return v == provider ? '?' + provider + '?' : '...';
          });
          ngModuleDetail = " - only instances of Provider and Type are allowed, got: [".concat(providerDetail.join(', '), "]");
        }

        throw new Error("Invalid provider for the NgModule '".concat(stringify(ngModuleType), "'") + ngModuleDetail);
      }
      /** Throws an error when a token is not found in DI. */


      function throwProviderNotFoundError(token, injectorName) {
        var injectorDetails = injectorName ? " in ".concat(injectorName) : '';
        throw new RuntimeError("201"
        /* PROVIDER_NOT_FOUND */
        , "No provider for ".concat(stringifyForError(token), " found").concat(injectorDetails));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function assertNumber(actual, msg) {
        if (!(typeof actual === 'number')) {
          throwError(msg, typeof actual, 'number', '===');
        }
      }

      function assertNumberInRange(actual, minInclusive, maxInclusive) {
        assertNumber(actual, 'Expected a number');
        assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
        assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
      }

      function assertString(actual, msg) {
        if (!(typeof actual === 'string')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
        }
      }

      function assertFunction(actual, msg) {
        if (!(typeof actual === 'function')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');
        }
      }

      function assertEqual(actual, expected, msg) {
        if (!(actual == expected)) {
          throwError(msg, actual, expected, '==');
        }
      }

      function assertNotEqual(actual, expected, msg) {
        if (!(actual != expected)) {
          throwError(msg, actual, expected, '!=');
        }
      }

      function assertSame(actual, expected, msg) {
        if (!(actual === expected)) {
          throwError(msg, actual, expected, '===');
        }
      }

      function assertNotSame(actual, expected, msg) {
        if (!(actual !== expected)) {
          throwError(msg, actual, expected, '!==');
        }
      }

      function assertLessThan(actual, expected, msg) {
        if (!(actual < expected)) {
          throwError(msg, actual, expected, '<');
        }
      }

      function assertLessThanOrEqual(actual, expected, msg) {
        if (!(actual <= expected)) {
          throwError(msg, actual, expected, '<=');
        }
      }

      function assertGreaterThan(actual, expected, msg) {
        if (!(actual > expected)) {
          throwError(msg, actual, expected, '>');
        }
      }

      function assertGreaterThanOrEqual(actual, expected, msg) {
        if (!(actual >= expected)) {
          throwError(msg, actual, expected, '>=');
        }
      }

      function assertNotDefined(actual, msg) {
        if (actual != null) {
          throwError(msg, actual, null, '==');
        }
      }

      function assertDefined(actual, msg) {
        if (actual == null) {
          throwError(msg, actual, null, '!=');
        }
      }

      function throwError(msg, actual, expected, comparison) {
        throw new Error("ASSERTION ERROR: ".concat(msg) + (comparison == null ? '' : " [Expected=> ".concat(expected, " ").concat(comparison, " ").concat(actual, " <=Actual]")));
      }

      function assertDomNode(node) {
        // If we're in a worker, `Node` will not be defined.
        if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {
          throwError("The provided value must be an instance of a DOM Node but got ".concat(stringify(node)));
        }
      }

      function assertIndexInRange(arr, index) {
        assertDefined(arr, 'Array must be defined.');
        var maxLen = arr.length;

        if (index < 0 || index >= maxLen) {
          throwError("Index expected to be less than ".concat(maxLen, " but got ").concat(index));
        }
      }

      function assertOneOf(value) {
        for (var _len29 = arguments.length, validValues = new Array(_len29 > 1 ? _len29 - 1 : 0), _key29 = 1; _key29 < _len29; _key29++) {
          validValues[_key29 - 1] = arguments[_key29];
        }

        if (validValues.indexOf(value) !== -1) return true;
        throwError("Expected value to be one of ".concat(JSON.stringify(validValues), " but was ").concat(JSON.stringify(value), "."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and
       * in which injectors (if any) it will be available.
       *
       * This should be assigned to a static `ɵprov` field on a type, which will then be an
       * `InjectableType`.
       *
       * Options:
       * * `providedIn` determines which injectors will include the injectable, by either associating it
       *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
       *   provided in the `'root'` injector, which will be the application-level injector in most apps.
       * * `factory` gives the zero argument function which will create an instance of the injectable.
       *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
       *
       * @codeGenApi
       * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
       */


      function ɵɵdefineInjectable(opts) {
        return {
          token: opts.token,
          providedIn: opts.providedIn || null,
          factory: opts.factory,
          value: undefined
        };
      }
      /**
       * @deprecated in v8, delete after v10. This API should be used only by generated code, and that
       * code should now use ɵɵdefineInjectable instead.
       * @publicApi
       */


      var defineInjectable = ɵɵdefineInjectable;
      /**
       * Construct an `InjectorDef` which configures an injector.
       *
       * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
       * `InjectorType`.
       *
       * Options:
       *
       * * `providers`: an optional array of providers to add to the injector. Each provider must
       *   either have a factory or point to a type which has a `ɵprov` static property (the
       *   type must be an `InjectableType`).
       * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
       *   whose providers will also be added to the injector. Locally provided types will override
       *   providers from imports.
       *
       * @codeGenApi
       */

      function ɵɵdefineInjector(options) {
        return {
          providers: options.providers || [],
          imports: options.imports || []
        };
      }
      /**
       * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
       * inherited value.
       *
       * @param type A type which may have its own (non-inherited) `ɵprov`.
       */


      function getInjectableDef(type) {
        return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
      }
      /**
       * Return definition only if it is defined directly on `type` and is not inherited from a base
       * class of `type`.
       */


      function getOwnDefinition(type, field) {
        return type.hasOwnProperty(field) ? type[field] : null;
      }
      /**
       * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
       *
       * @param type A type which may have `ɵprov`, via inheritance.
       *
       * @deprecated Will be removed in a future version of Angular, where an error will occur in the
       *     scenario if we find the `ɵprov` on an ancestor only.
       */


      function getInheritedInjectableDef(type) {
        var def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);

        if (def) {
          var typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it
          // ngDevMode &&

          console.warn("DEPRECATED: DI is instantiating a token \"".concat(typeName, "\" that inherits its @Injectable decorator but does not provide one itself.\n") + "This will become an error in a future version of Angular. Please add @Injectable() to the \"".concat(typeName, "\" class."));
          return def;
        } else {
          return null;
        }
      }
      /** Gets the name of a type, accounting for some cross-browser differences. */


      function getTypeName(type) {
        // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
        // it'll always return the name of the function itself, no matter how many other functions it
        // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
        // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
        // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
        // the issue by converting the function to a string and parsing its name out that way via a regex.
        if (type.hasOwnProperty('name')) {
          return type.name;
        }

        var match = ('' + type).match(/^function\s*([^\s(]+)/);
        return match === null ? '' : match[1];
      }
      /**
       * Read the injector def type in a way which is immune to accidentally reading inherited value.
       *
       * @param type type which may have an injector def (`ɵinj`)
       */


      function getInjectorDef(type) {
        return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
      }

      var NG_PROV_DEF = getClosureSafeProperty({
        ɵprov: getClosureSafeProperty
      });
      var NG_INJ_DEF = getClosureSafeProperty({
        ɵinj: getClosureSafeProperty
      }); // We need to keep these around so we can read off old defs if new defs are unavailable

      var NG_INJECTABLE_DEF = getClosureSafeProperty({
        ngInjectableDef: getClosureSafeProperty
      });
      var NG_INJECTOR_DEF = getClosureSafeProperty({
        ngInjectorDef: getClosureSafeProperty
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection flags for DI.
       *
       * @publicApi
       */

      var InjectFlags;

      (function (InjectFlags) {
        // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer
        // writes exports of it into ngfactory files.

        /** Check self and check parent injector if needed */
        InjectFlags[InjectFlags["Default"] = 0] = "Default";
        /**
         * Specifies that an injector should retrieve a dependency from any injector until reaching the
         * host element of the current component. (Only used with Element Injector)
         */

        InjectFlags[InjectFlags["Host"] = 1] = "Host";
        /** Don't ascend to ancestors of the node requesting injection. */

        InjectFlags[InjectFlags["Self"] = 2] = "Self";
        /** Skip the node that is requesting injection. */

        InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
        /** Inject `defaultValue` instead if token not found. */

        InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
      })(InjectFlags || (InjectFlags = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Current implementation of inject.
       *
       * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
       * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
       * way for two reasons:
       *  1. `Injector` should not depend on ivy logic.
       *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
       */


      var _injectImplementation;

      function getInjectImplementation() {
        return _injectImplementation;
      }
      /**
       * Sets the current inject implementation.
       */


      function setInjectImplementation(impl) {
        var previous = _injectImplementation;
        _injectImplementation = impl;
        return previous;
      }
      /**
       * Injects `root` tokens in limp mode.
       *
       * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
       * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
       * `InjectableDef`.
       */


      function injectRootLimpMode(token, notFoundValue, flags) {
        var injectableDef = getInjectableDef(token);

        if (injectableDef && injectableDef.providedIn == 'root') {
          return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;
        }

        if (flags & InjectFlags.Optional) return null;
        if (notFoundValue !== undefined) return notFoundValue;
        throwProviderNotFoundError(stringify(token), 'Injector');
      }
      /**
       * Assert that `_injectImplementation` is not `fn`.
       *
       * This is useful, to prevent infinite recursion.
       *
       * @param fn Function which it should not equal to
       */


      function assertInjectImplementationNotEqual(fn) {
        ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Convince closure compiler that the wrapped function has no side-effects.
       *
       * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
       * allow us to execute a function but have closure compiler mark the call as no-side-effects.
       * It is important that the return value for the `noSideEffects` function be assigned
       * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
       * compiler.
       */


      function noSideEffects(fn) {
        return {
          toString: fn
        }.toString();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The strategy that the default change detector uses to detect changes.
       * When set, takes effect the next time change detection is triggered.
       *
       * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
       *
       * @publicApi
       */


      var ChangeDetectionStrategy;

      (function (ChangeDetectionStrategy) {
        /**
         * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
         * until reactivated by setting the strategy to `Default` (`CheckAlways`).
         * Change detection can still be explicitly invoked.
         * This strategy applies to all child directives and cannot be overridden.
         */
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        /**
         * Use the default `CheckAlways` strategy, in which change detection is automatic until
         * explicitly deactivated.
         */

        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
      /**
       * Defines the possible states of the default change detector.
       * @see `ChangeDetectorRef`
       */


      var ChangeDetectorStatus;

      (function (ChangeDetectorStatus) {
        /**
         * A state in which, after calling `detectChanges()`, the change detector
         * state becomes `Checked`, and must be explicitly invoked or reactivated.
         */
        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
        /**
         * A state in which change detection is skipped until the change detector mode
         * becomes `CheckOnce`.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
        /**
         * A state in which change detection continues automatically until explicitly
         * deactivated.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
        /**
         * A state in which a change detector sub tree is not a part of the main tree and
         * should be skipped.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
        /**
         * Indicates that the change detector encountered an error checking a binding
         * or calling a directive lifecycle method and is now in an inconsistent state. Change
         * detectors in this state do not detect changes.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
        /**
         * Indicates that the change detector has been destroyed.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
      })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
      /**
       * Reports whether a given strategy is currently the default for change detection.
       * @param changeDetectionStrategy The strategy to check.
       * @returns True if the given strategy is the current default, false otherwise.
       * @see `ChangeDetectorStatus`
       * @see `ChangeDetectorRef`
       */


      function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
        return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines template and style encapsulation options available for Component's {@link Component}.
       *
       * See {@link Component#encapsulation encapsulation}.
       *
       * @usageNotes
       * ### Example
       *
       * {@example core/ts/metadata/encapsulation.ts region='longform'}
       *
       * @publicApi
       */


      var ViewEncapsulation;

      (function (ViewEncapsulation) {
        /**
         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
         * Element and pre-processing the style rules provided via {@link Component#styles styles} or
         * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
         * selectors.
         *
         * This is the default option.
         */
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

        /**
         * Don't provide any template or style encapsulation.
         */

        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        /**
         * Use Shadow DOM to encapsulate styles.
         *
         * For the DOM this means using modern [Shadow
         * DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) and
         * creating a ShadowRoot for Component's Host Element.
         */

        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation || (ViewEncapsulation = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var __globalThis = typeof globalThis !== 'undefined' && globalThis;

      var __window = typeof window !== 'undefined' && window;

      var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

      var __global = typeof global !== 'undefined' && global; // Always use __globalThis if available, which is the spec-defined global variable across all
      // environments, then fallback to __global first, because in Node tests both __global and
      // __window may be defined and _global should be __global in that case.


      var _global = __globalThis || __global || __window || __self;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function ngDevModeResetPerfCounters() {
        var locationString = typeof location !== 'undefined' ? location.toString() : '';
        var newCounters = {
          namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
          firstCreatePass: 0,
          tNode: 0,
          tView: 0,
          rendererCreateTextNode: 0,
          rendererSetText: 0,
          rendererCreateElement: 0,
          rendererAddEventListener: 0,
          rendererSetAttribute: 0,
          rendererRemoveAttribute: 0,
          rendererSetProperty: 0,
          rendererSetClassName: 0,
          rendererAddClass: 0,
          rendererRemoveClass: 0,
          rendererSetStyle: 0,
          rendererRemoveStyle: 0,
          rendererDestroy: 0,
          rendererDestroyNode: 0,
          rendererMoveNode: 0,
          rendererRemoveNode: 0,
          rendererAppendChild: 0,
          rendererInsertBefore: 0,
          rendererCreateComment: 0
        }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.

        var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
        _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
        return newCounters;
      }
      /**
       * This function checks to see if the `ngDevMode` has been set. If yes,
       * then we honor it, otherwise we default to dev mode with additional checks.
       *
       * The idea is that unless we are doing production build where we explicitly
       * set `ngDevMode == false` we should be helping the developer by providing
       * as much early warning and errors as possible.
       *
       * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
       * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
       * is defined for the entire instruction set.
       *
       * When checking `ngDevMode` on toplevel, always init it before referencing it
       * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
       *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
       *
       * Details on possible values for `ngDevMode` can be found on its docstring.
       *
       * NOTE:
       * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
       */


      function initNgDevMode() {
        // The below checks are to ensure that calling `initNgDevMode` multiple times does not
        // reset the counters.
        // If the `ngDevMode` is not an object, then it means we have not created the perf counters
        // yet.
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (typeof ngDevMode !== 'object') {
            ngDevModeResetPerfCounters();
          }

          return typeof ngDevMode !== 'undefined' && !!ngDevMode;
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file contains reuseable "empty" symbols that can be used as default return values
       * in different parts of the rendering code. Because the same symbols are returned, this
       * allows for identity checks against these values to be consistently used by the framework
       * code.
       */


      var EMPTY_OBJ = {};
      var EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in

      if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
        // These property accesses can be ignored because ngDevMode will be set to false
        // when optimizing code and the whole if statement will be dropped.
        // tslint:disable-next-line:no-toplevel-property-access
        Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access

        Object.freeze(EMPTY_ARRAY);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file contains reuseable "empty" symbols that can be used as default return values
       * in different parts of the rendering code. Because the same symbols are returned, this
       * allows for identity checks against these values to be consistently used by the framework
       * code.
       */


      var EMPTY_ARRAY$1 = []; // freezing the values prevents any code from accidentally inserting new values in

      if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
        // These property accesses can be ignored because ngDevMode will be set to false
        // when optimizing code and the whole if statement will be dropped.
        // tslint:disable-next-line:no-toplevel-property-access
        Object.freeze(EMPTY_ARRAY$1);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NG_COMP_DEF = getClosureSafeProperty({
        ɵcmp: getClosureSafeProperty
      });
      var NG_DIR_DEF = getClosureSafeProperty({
        ɵdir: getClosureSafeProperty
      });
      var NG_PIPE_DEF = getClosureSafeProperty({
        ɵpipe: getClosureSafeProperty
      });
      var NG_MOD_DEF = getClosureSafeProperty({
        ɵmod: getClosureSafeProperty
      });
      var NG_LOC_ID_DEF = getClosureSafeProperty({
        ɵloc: getClosureSafeProperty
      });
      var NG_FACTORY_DEF = getClosureSafeProperty({
        ɵfac: getClosureSafeProperty
      });
      /**
       * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
       * the key and the directive's unique ID as the value. This allows us to map directives to their
       * bloom filter bit for DI.
       */
      // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.

      var NG_ELEMENT_ID = getClosureSafeProperty({
        __NG_ELEMENT_ID__: getClosureSafeProperty
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var _renderCompCount = 0;
      /**
       * Create a component definition object.
       *
       *
       * # Example
       * ```
       * class MyDirective {
       *   // Generated by Angular Template Compiler
       *   // [Symbol] syntax will not be supported by TypeScript until v2.7
       *   static ɵcmp = defineComponent({
       *     ...
       *   });
       * }
       * ```
       * @codeGenApi
       */

      function ɵɵdefineComponent(componentDefinition) {
        return noSideEffects(function () {
          // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
          // See the `initNgDevMode` docstring for more information.
          (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
          var type = componentDefinition.type;
          var declaredInputs = {};
          var def = {
            type: type,
            providersResolver: null,
            decls: componentDefinition.decls,
            vars: componentDefinition.vars,
            factory: null,
            template: componentDefinition.template || null,
            consts: componentDefinition.consts || null,
            ngContentSelectors: componentDefinition.ngContentSelectors,
            hostBindings: componentDefinition.hostBindings || null,
            hostVars: componentDefinition.hostVars || 0,
            hostAttrs: componentDefinition.hostAttrs || null,
            contentQueries: componentDefinition.contentQueries || null,
            declaredInputs: declaredInputs,
            inputs: null,
            outputs: null,
            exportAs: componentDefinition.exportAs || null,
            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
            directiveDefs: null,
            pipeDefs: null,
            selectors: componentDefinition.selectors || EMPTY_ARRAY$1,
            viewQuery: componentDefinition.viewQuery || null,
            features: componentDefinition.features || null,
            data: componentDefinition.data || {},
            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used
            // directly in the next line. Also `None` should be 0 not 2.
            encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,
            id: 'c',
            styles: componentDefinition.styles || EMPTY_ARRAY$1,
            _: null,
            setInput: null,
            schemas: componentDefinition.schemas || null,
            tView: null
          };
          var directiveTypes = componentDefinition.directives;
          var feature = componentDefinition.features;
          var pipeTypes = componentDefinition.pipes;
          def.id += _renderCompCount++;
          def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(function (fn) {
            return fn(def);
          });
          def.directiveDefs = directiveTypes ? function () {
            return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef);
          } : null;
          def.pipeDefs = pipeTypes ? function () {
            return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef);
          } : null;
          return def;
        });
      }
      /**
       * Generated next to NgModules to monkey-patch directive and pipe references onto a component's
       * definition, when generating a direct reference in the component file would otherwise create an
       * import cycle.
       *
       * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.
       *
       * @codeGenApi
       */


      function ɵɵsetComponentScope(type, directives, pipes) {
        var def = type.ɵcmp;

        def.directiveDefs = function () {
          return directives.map(extractDirectiveDef);
        };

        def.pipeDefs = function () {
          return pipes.map(extractPipeDef);
        };
      }

      function extractDirectiveDef(type) {
        var def = getComponentDef(type) || getDirectiveDef(type);

        if (ngDevMode && !def) {
          throw new Error("'".concat(type.name, "' is neither 'ComponentType' or 'DirectiveType'."));
        }

        return def;
      }

      function extractPipeDef(type) {
        var def = getPipeDef(type);

        if (ngDevMode && !def) {
          throw new Error("'".concat(type.name, "' is not a 'PipeType'."));
        }

        return def;
      }

      var autoRegisterModuleById = {};
      /**
       * @codeGenApi
       */

      function ɵɵdefineNgModule(def) {
        var res = {
          type: def.type,
          bootstrap: def.bootstrap || EMPTY_ARRAY$1,
          declarations: def.declarations || EMPTY_ARRAY$1,
          imports: def.imports || EMPTY_ARRAY$1,
          exports: def.exports || EMPTY_ARRAY$1,
          transitiveCompileScopes: null,
          schemas: def.schemas || null,
          id: def.id || null
        };

        if (def.id != null) {
          noSideEffects(function () {
            autoRegisterModuleById[def.id] = def.type;
          });
        }

        return res;
      }
      /**
       * Adds the module metadata that is necessary to compute the module's transitive scope to an
       * existing module definition.
       *
       * Scope metadata of modules is not used in production builds, so calls to this function can be
       * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
       * to become eligible for tree-shaking as well.
       *
       * @codeGenApi
       */


      function ɵɵsetNgModuleScope(type, scope) {
        return noSideEffects(function () {
          var ngModuleDef = getNgModuleDef(type, true);
          ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY$1;
          ngModuleDef.imports = scope.imports || EMPTY_ARRAY$1;
          ngModuleDef.exports = scope.exports || EMPTY_ARRAY$1;
        });
      }
      /**
       * Inverts an inputs or outputs lookup such that the keys, which were the
       * minified keys, are part of the values, and the values are parsed so that
       * the publicName of the property is the new key
       *
       * e.g. for
       *
       * ```
       * class Comp {
       *   @Input()
       *   propName1: string;
       *
       *   @Input('publicName2')
       *   declaredPropName2: number;
       * }
       * ```
       *
       * will be serialized as
       *
       * ```
       * {
       *   propName1: 'propName1',
       *   declaredPropName2: ['publicName2', 'declaredPropName2'],
       * }
       * ```
       *
       * which is than translated by the minifier as:
       *
       * ```
       * {
       *   minifiedPropName1: 'propName1',
       *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
       * }
       * ```
       *
       * becomes: (public name => minifiedName)
       *
       * ```
       * {
       *  'propName1': 'minifiedPropName1',
       *  'publicName2': 'minifiedPropName2',
       * }
       * ```
       *
       * Optionally the function can take `secondary` which will result in: (public name => declared name)
       *
       * ```
       * {
       *  'propName1': 'propName1',
       *  'publicName2': 'declaredPropName2',
       * }
       * ```
       *
      
       */


      function invertObject(obj, secondary) {
        if (obj == null) return EMPTY_OBJ;
        var newLookup = {};

        for (var minifiedKey in obj) {
          if (obj.hasOwnProperty(minifiedKey)) {
            var publicName = obj[minifiedKey];
            var declaredName = publicName;

            if (Array.isArray(publicName)) {
              declaredName = publicName[1];
              publicName = publicName[0];
            }

            newLookup[publicName] = minifiedKey;

            if (secondary) {
              secondary[publicName] = declaredName;
            }
          }
        }

        return newLookup;
      }
      /**
       * Create a directive definition object.
       *
       * # Example
       * ```ts
       * class MyDirective {
       *   // Generated by Angular Template Compiler
       *   // [Symbol] syntax will not be supported by TypeScript until v2.7
       *   static ɵdir = ɵɵdefineDirective({
       *     ...
       *   });
       * }
       * ```
       *
       * @codeGenApi
       */


      var ɵɵdefineDirective = ɵɵdefineComponent;
      /**
       * Create a pipe definition object.
       *
       * # Example
       * ```
       * class MyPipe implements PipeTransform {
       *   // Generated by Angular Template Compiler
       *   static ɵpipe = definePipe({
       *     ...
       *   });
       * }
       * ```
       * @param pipeDef Pipe definition generated by the compiler
       *
       * @codeGenApi
       */

      function ɵɵdefinePipe(pipeDef) {
        return {
          type: pipeDef.type,
          name: pipeDef.name,
          factory: null,
          pure: pipeDef.pure !== false,
          onDestroy: pipeDef.type.prototype.ngOnDestroy || null
        };
      }
      /**
       * The following getter methods retrieve the definition from the type. Currently the retrieval
       * honors inheritance, but in the future we may change the rule to require that definitions are
       * explicit. This would require some sort of migration strategy.
       */


      function getComponentDef(type) {
        return type[NG_COMP_DEF] || null;
      }

      function getDirectiveDef(type) {
        return type[NG_DIR_DEF] || null;
      }

      function getPipeDef(type) {
        return type[NG_PIPE_DEF] || null;
      }

      function getNgModuleDef(type, throwNotFound) {
        var ngModuleDef = type[NG_MOD_DEF] || null;

        if (!ngModuleDef && throwNotFound === true) {
          throw new Error("Type ".concat(stringify(type), " does not have '\u0275mod' property."));
        }

        return ngModuleDef;
      }

      function getNgLocaleIdDef(type) {
        return type[NG_LOC_ID_DEF] || null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Below are constants for LView indices to help us look up LView members
      // without having to remember the specific indices.
      // Uglify will inline these when minifying so there shouldn't be a cost.


      var HOST = 0;
      var TVIEW = 1;
      var FLAGS = 2;
      var PARENT = 3;
      var NEXT = 4;
      var TRANSPLANTED_VIEWS_TO_REFRESH = 5;
      var T_HOST = 6;
      var CLEANUP = 7;
      var CONTEXT = 8;
      var INJECTOR = 9;
      var RENDERER_FACTORY = 10;
      var RENDERER = 11;
      var SANITIZER = 12;
      var CHILD_HEAD = 13;
      var CHILD_TAIL = 14; // FIXME(misko): Investigate if the three declarations aren't all same thing.

      var DECLARATION_VIEW = 15;
      var DECLARATION_COMPONENT_VIEW = 16;
      var DECLARATION_LCONTAINER = 17;
      var PREORDER_HOOK_FLAGS = 18;
      var QUERIES = 19;
      /**
       * Size of LView's header. Necessary to adjust for it when setting slots.
       *
       * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate
       * instruction index into `LView` index. All other indexes should be in the `LView` index space and
       * there should be no need to refer to `HEADER_OFFSET` anywhere else.
       */

      var HEADER_OFFSET = 20;
      /**
       * Converts `TViewType` into human readable text.
       * Make sure this matches with `TViewType`
       */

      var TViewTypeAsString = ['Root', 'Component', 'Embedded']; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Special location which allows easy identification of type. If we have an array which was
       * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
       * `LContainer`.
       */

      var TYPE = 1;
      /**
       * Below are constants for LContainer indices to help us look up LContainer members
       * without having to remember the specific indices.
       * Uglify will inline these when minifying so there shouldn't be a cost.
       */

      /**
       * Flag to signify that this `LContainer` may have transplanted views which need to be change
       * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
       *
       * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
       * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
       * that the `MOVED_VIEWS` are transplanted and on-push.
       */

      var HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
      // As we already have these constants in LView, we don't need to re-create them.
      // T_HOST is index 6
      // We already have this constants in LView, we don't need to re-create it.

      var NATIVE = 7;
      var VIEW_REFS = 8;
      var MOVED_VIEWS = 9;
      /**
       * Size of LContainer's header. Represents the index after which all views in the
       * container will be inserted. We need to keep a record of current views so we know
       * which views are already in the DOM (and don't need to be re-added) and so we can
       * remove views from the DOM when they are no longer required.
       */

      var CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$1 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * True if `value` is `LView`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */

      function isLView(value) {
        return Array.isArray(value) && typeof value[TYPE] === 'object';
      }
      /**
       * True if `value` is `LContainer`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function isLContainer(value) {
        return Array.isArray(value) && value[TYPE] === true;
      }

      function isContentQueryHost(tNode) {
        return (tNode.flags & 8
        /* hasContentQuery */
        ) !== 0;
      }

      function isComponentHost(tNode) {
        return (tNode.flags & 2
        /* isComponentHost */
        ) === 2
        /* isComponentHost */
        ;
      }

      function isDirectiveHost(tNode) {
        return (tNode.flags & 1
        /* isDirectiveHost */
        ) === 1
        /* isDirectiveHost */
        ;
      }

      function isComponentDef(def) {
        return def.template !== null;
      }

      function isRootView(target) {
        return (target[FLAGS] & 512
        /* IsRoot */
        ) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // [Assert functions do not constraint type when they are guarded by a truthy
      // expression.](https://github.com/microsoft/TypeScript/issues/37295)


      function assertTNodeForLView(tNode, lView) {
        assertTNodeForTView(tNode, lView[TVIEW]);
      }

      function assertTNodeForTView(tNode, tView) {
        assertTNode(tNode);
        tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');
      }

      function assertTNode(tNode) {
        assertDefined(tNode, 'TNode must be defined');

        if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {
          throwError('Not of type TNode, got: ' + tNode);
        }
      }

      function assertTIcu(tIcu) {
        assertDefined(tIcu, 'Expected TIcu to be defined');

        if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {
          throwError('Object is not of TIcu type.');
        }
      }

      function assertComponentType(actual) {
        var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.';

        if (!getComponentDef(actual)) {
          throwError(msg);
        }
      }

      function assertNgModuleType(actual) {
        var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.';

        if (!getNgModuleDef(actual)) {
          throwError(msg);
        }
      }

      function assertCurrentTNodeIsParent(isParent) {
        assertEqual(isParent, true, 'currentTNode should be a parent');
      }

      function assertHasParent(tNode) {
        assertDefined(tNode, 'currentTNode should exist!');
        assertDefined(tNode.parent, 'currentTNode should have a parent');
      }

      function assertDataNext(lView, index, arr) {
        if (arr == null) arr = lView;
        assertEqual(arr.length, index, "index ".concat(index, " expected to be at the end of arr (length ").concat(arr.length, ")"));
      }

      function assertLContainer(value) {
        assertDefined(value, 'LContainer must be defined');
        assertEqual(isLContainer(value), true, 'Expecting LContainer');
      }

      function assertLViewOrUndefined(value) {
        value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
      }

      function assertLView(value) {
        assertDefined(value, 'LView must be defined');
        assertEqual(isLView(value), true, 'Expecting LView');
      }

      function assertFirstCreatePass(tView, errMessage) {
        assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
      }

      function assertFirstUpdatePass(tView, errMessage) {
        assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
      }
      /**
       * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
       * an interface, so we can't do a direct instanceof check.
       */


      function assertDirectiveDef(obj) {
        if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
          throwError("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.");
        }
      }

      function assertIndexInDeclRange(lView, index) {
        var tView = lView[1];
        assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
      }

      function assertIndexInVarsRange(lView, index) {
        var tView = lView[1];
        assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);
      }

      function assertIndexInExpandoRange(lView, index) {
        var tView = lView[1];
        assertBetween(tView.expandoStartIndex, lView.length, index);
      }

      function assertBetween(lower, upper, index) {
        if (!(lower <= index && index < upper)) {
          throwError("Index out of range (expecting ".concat(lower, " <= ").concat(index, " < ").concat(upper, ")"));
        }
      }

      function assertProjectionSlots(lView, errMessage) {
        assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');
        assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');
      }

      function assertParentView(lView, errMessage) {
        assertDefined(lView, errMessage || 'Component views should always have a parent view (component\'s host view)');
      }
      /**
       * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a
       * NodeInjector data structure.
       *
       * @param lView `LView` which should be checked.
       * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.
       */


      function assertNodeInjector(lView, injectorIndex) {
        assertIndexInExpandoRange(lView, injectorIndex);
        assertIndexInExpandoRange(lView, injectorIndex + 8
        /* PARENT */
        );
        assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 8
        /* PARENT */
        ], 'injectorIndex should point to parent injector');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getFactoryDef(type, throwNotFound) {
        var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);

        if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
          throw new Error("Type ".concat(stringify(type), " does not have '\u0275fac' property."));
        }

        return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents a basic change from a previous to a new value for a single
       * property on a directive instance. Passed as a value in a
       * {@link SimpleChanges} object to the `ngOnChanges` hook.
       *
       * @see `OnChanges`
       *
       * @publicApi
       */


      var SimpleChange = /*#__PURE__*/function () {
        function SimpleChange(previousValue, currentValue, firstChange) {
          _classCallCheck(this, SimpleChange);

          this.previousValue = previousValue;
          this.currentValue = currentValue;
          this.firstChange = firstChange;
        }
        /**
         * Check whether the new value is the first value assigned.
         */


        _createClass2(SimpleChange, [{
          key: "isFirstChange",
          value: function isFirstChange() {
            return this.firstChange;
          }
        }]);

        return SimpleChange;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The NgOnChangesFeature decorates a component with support for the ngOnChanges
       * lifecycle hook, so it should be included in any component that implements
       * that hook.
       *
       * If the component or directive uses inheritance, the NgOnChangesFeature MUST
       * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
       * inherited properties will not be propagated to the ngOnChanges lifecycle
       * hook.
       *
       * Example usage:
       *
       * ```
       * static ɵcmp = defineComponent({
       *   ...
       *   inputs: {name: 'publicName'},
       *   features: [NgOnChangesFeature]
       * });
       * ```
       *
       * @codeGenApi
       */


      function ɵɵNgOnChangesFeature() {
        return NgOnChangesFeatureImpl;
      }

      function NgOnChangesFeatureImpl(definition) {
        if (definition.type.prototype.ngOnChanges) {
          definition.setInput = ngOnChangesSetInput;
        }

        return rememberChangeHistoryAndInvokeOnChangesHook;
      } // This option ensures that the ngOnChanges lifecycle hook will be inherited
      // from superclasses (in InheritDefinitionFeature).

      /** @nocollapse */
      // tslint:disable-next-line:no-toplevel-property-access


      ɵɵNgOnChangesFeature.ngInherit = true;
      /**
       * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
       * `ngOnChanges`.
       *
       * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
       * found it invokes `ngOnChanges` on the component instance.
       *
       * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
       *     it is guaranteed to be called with component instance.
       */

      function rememberChangeHistoryAndInvokeOnChangesHook() {
        var simpleChangesStore = getSimpleChangesStore(this);
        var current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;

        if (current) {
          var previous = simpleChangesStore.previous;

          if (previous === EMPTY_OBJ) {
            simpleChangesStore.previous = current;
          } else {
            // New changes are copied to the previous store, so that we don't lose history for inputs
            // which were not changed this time
            for (var key in current) {
              previous[key] = current[key];
            }
          }

          simpleChangesStore.current = null;
          this.ngOnChanges(current);
        }
      }

      function ngOnChangesSetInput(instance, value, publicName, privateName) {
        var simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
          previous: EMPTY_OBJ,
          current: null
        });
        var current = simpleChangesStore.current || (simpleChangesStore.current = {});
        var previous = simpleChangesStore.previous;
        var declaredName = this.declaredInputs[publicName];
        var previousChange = previous[declaredName];
        current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
        instance[privateName] = value;
      }

      var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';

      function getSimpleChangesStore(instance) {
        return instance[SIMPLE_CHANGES_STORE] || null;
      }

      function setSimpleChangesStore(instance, store) {
        return instance[SIMPLE_CHANGES_STORE] = store;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
      var MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This property will be monkey-patched on elements, components and directives
       */

      var MONKEY_PATCH_KEY_NAME = '__ngContext__';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
       * inject the `DOCUMENT` token and are done.
       *
       * Ivy is special because it does not rely upon the DI and must get hold of the document some other
       * way.
       *
       * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
       * Wherever ivy needs the global document, it calls `getDocument()` instead.
       *
       * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
       * tell ivy what the global `document` is.
       *
       * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
       * by calling `setDocument()` when providing the `DOCUMENT` token.
       */

      var DOCUMENT = undefined;
      /**
       * Tell ivy what the `document` is for this platform.
       *
       * It is only necessary to call this if the current platform is not a browser.
       *
       * @param document The object representing the global `document` in this environment.
       */

      function setDocument(document) {
        DOCUMENT = document;
      }
      /**
       * Access the object that represents the `document` for this platform.
       *
       * Ivy calls this whenever it needs to access the `document` object.
       * For example to create the renderer or to do sanitization.
       */


      function getDocument() {
        if (DOCUMENT !== undefined) {
          return DOCUMENT;
        } else if (typeof document !== 'undefined') {
          return document;
        } // No "document" can be found. This should only happen if we are running ivy outside Angular and
        // the current platform is not a browser. Since this is not a supported scenario at the moment
        // this should not happen in Angular apps.
        // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
        // public API. Meanwhile we just return `undefined` and let the application fail.


        return undefined;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO: cleanup once the code is merged in angular/angular


      var RendererStyleFlags3;

      (function (RendererStyleFlags3) {
        RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
        RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
      })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
      /** Returns whether the `renderer` is a `ProceduralRenderer3` */


      function isProceduralRenderer(renderer) {
        return !!renderer.listen;
      }

      var ɵ0 = function ɵ0(hostElement, rendererType) {
        return getDocument();
      };

      var domRendererFactory3 = {
        createRenderer: ɵ0
      }; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$2 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
       * in same location in `LView`. This is because we don't want to pre-allocate space for it
       * because the storage is sparse. This file contains utilities for dealing with such data types.
       *
       * How do we know what is stored at a given location in `LView`.
       * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
       * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
       *   - `typeof value[TYPE] === 'object'` => `LView`
       *      - This happens when we have a component at a given location
       *   - `typeof value[TYPE] === true` => `LContainer`
       *      - This happens when we have `LContainer` binding at a given location.
       *
       *
       * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
       */

      /**
       * Returns `RNode`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */

      function unwrapRNode(value) {
        while (Array.isArray(value)) {
          value = value[HOST];
        }

        return value;
      }
      /**
       * Returns `LView` or `null` if not found.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function unwrapLView(value) {
        while (Array.isArray(value)) {
          // This check is same as `isLView()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (typeof value[TYPE] === 'object') return value;
          value = value[HOST];
        }

        return null;
      }
      /**
       * Returns `LContainer` or `null` if not found.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function unwrapLContainer(value) {
        while (Array.isArray(value)) {
          // This check is same as `isLContainer()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (value[TYPE] === true) return value;
          value = value[HOST];
        }

        return null;
      }
      /**
       * Retrieves an element value from the provided `viewData`, by unwrapping
       * from any containers, component views, or style contexts.
       */


      function getNativeByIndex(index, lView) {
        ngDevMode && assertIndexInRange(lView, index);
        ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');
        return unwrapRNode(lView[index]);
      }
      /**
       * Retrieve an `RNode` for a given `TNode` and `LView`.
       *
       * This function guarantees in dev mode to retrieve a non-null `RNode`.
       *
       * @param tNode
       * @param lView
       */


      function getNativeByTNode(tNode, lView) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        ngDevMode && assertIndexInRange(lView, tNode.index);
        var node = unwrapRNode(lView[tNode.index]);
        ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
        return node;
      }
      /**
       * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
       *
       * Some `TNode`s don't have associated `RNode`s. For example `Projection`
       *
       * @param tNode
       * @param lView
       */


      function getNativeByTNodeOrNull(tNode, lView) {
        var index = tNode === null ? -1 : tNode.index;

        if (index !== -1) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          var node = unwrapRNode(lView[index]);
          ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
          return node;
        }

        return null;
      } // fixme(misko): The return Type should be `TNode|null`


      function getTNode(tView, index) {
        ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
        ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
        var tNode = tView.data[index];
        ngDevMode && tNode !== null && assertTNode(tNode);
        return tNode;
      }
      /** Retrieves a value from any `LView` or `TData`. */


      function load(view, index) {
        ngDevMode && assertIndexInRange(view, index);
        return view[index];
      }

      function getComponentLViewByIndex(nodeIndex, hostView) {
        // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
        ngDevMode && assertIndexInRange(hostView, nodeIndex);
        var slotValue = hostView[nodeIndex];
        var lView = isLView(slotValue) ? slotValue : slotValue[HOST];
        return lView;
      }
      /**
       * Returns the monkey-patch value data present on the target (which could be
       * a component, directive or a DOM node).
       */


      function readPatchedData(target) {
        ngDevMode && assertDefined(target, 'Target expected');
        return target[MONKEY_PATCH_KEY_NAME] || null;
      }

      function readPatchedLView(target) {
        var value = readPatchedData(target);

        if (value) {
          return Array.isArray(value) ? value : value.lView;
        }

        return null;
      }
      /** Checks whether a given view is in creation mode */


      function isCreationMode(view) {
        return (view[FLAGS] & 4
        /* CreationMode */
        ) === 4
        /* CreationMode */
        ;
      }
      /**
       * Returns a boolean for whether the view is attached to the change detection tree.
       *
       * Note: This determines whether a view should be checked, not whether it's inserted
       * into a container. For that, you'll want `viewAttachedToContainer` below.
       */


      function viewAttachedToChangeDetector(view) {
        return (view[FLAGS] & 128
        /* Attached */
        ) === 128
        /* Attached */
        ;
      }
      /** Returns a boolean for whether the view is attached to a container. */


      function viewAttachedToContainer(view) {
        return isLContainer(view[PARENT]);
      }

      function getConstant(consts, index) {
        if (index === null || index === undefined) return null;
        ngDevMode && assertIndexInRange(consts, index);
        return consts[index];
      }
      /**
       * Resets the pre-order hook flags of the view.
       * @param lView the LView on which the flags are reset
       */


      function resetPreOrderHookFlags(lView) {
        lView[PREORDER_HOOK_FLAGS] = 0;
      }
      /**
       * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
       * whose
       *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
       *  or
       *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
       */


      function updateTransplantedViewCount(lContainer, amount) {
        lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
        var viewOrContainer = lContainer;
        var parent = lContainer[PARENT];

        while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {
          parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
          viewOrContainer = parent;
          parent = parent[PARENT];
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var instructionState = {
        lFrame: createLFrame(null),
        bindingsEnabled: true,
        isInCheckNoChangesMode: false
      };
      /**
       * Returns true if the instruction state stack is empty.
       *
       * Intended to be called from tests only (tree shaken otherwise).
       */

      function specOnlyIsInstructionStateEmpty() {
        return instructionState.lFrame.parent === null;
      }

      function getElementDepthCount() {
        return instructionState.lFrame.elementDepthCount;
      }

      function increaseElementDepthCount() {
        instructionState.lFrame.elementDepthCount++;
      }

      function decreaseElementDepthCount() {
        instructionState.lFrame.elementDepthCount--;
      }

      function getBindingsEnabled() {
        return instructionState.bindingsEnabled;
      }
      /**
       * Enables directive matching on elements.
       *
       *  * Example:
       * ```
       * <my-comp my-directive>
       *   Should match component / directive.
       * </my-comp>
       * <div ngNonBindable>
       *   <!-- ɵɵdisableBindings() -->
       *   <my-comp my-directive>
       *     Should not match component / directive because we are in ngNonBindable.
       *   </my-comp>
       *   <!-- ɵɵenableBindings() -->
       * </div>
       * ```
       *
       * @codeGenApi
       */


      function ɵɵenableBindings() {
        instructionState.bindingsEnabled = true;
      }
      /**
       * Disables directive matching on element.
       *
       *  * Example:
       * ```
       * <my-comp my-directive>
       *   Should match component / directive.
       * </my-comp>
       * <div ngNonBindable>
       *   <!-- ɵɵdisableBindings() -->
       *   <my-comp my-directive>
       *     Should not match component / directive because we are in ngNonBindable.
       *   </my-comp>
       *   <!-- ɵɵenableBindings() -->
       * </div>
       * ```
       *
       * @codeGenApi
       */


      function ɵɵdisableBindings() {
        instructionState.bindingsEnabled = false;
      }
      /**
       * Return the current `LView`.
       */


      function getLView() {
        return instructionState.lFrame.lView;
      }
      /**
       * Return the current `TView`.
       */


      function getTView() {
        return instructionState.lFrame.tView;
      }
      /**
       * Restores `contextViewData` to the given OpaqueViewState instance.
       *
       * Used in conjunction with the getCurrentView() instruction to save a snapshot
       * of the current view and restore it when listeners are invoked. This allows
       * walking the declaration view tree in listeners to get vars from parent views.
       *
       * @param viewToRestore The OpaqueViewState instance to restore.
       *
       * @codeGenApi
       */


      function ɵɵrestoreView(viewToRestore) {
        instructionState.lFrame.contextLView = viewToRestore;
      }

      function getCurrentTNode() {
        var currentTNode = getCurrentTNodePlaceholderOk();

        while (currentTNode !== null && currentTNode.type === 64
        /* Placeholder */
        ) {
          currentTNode = currentTNode.parent;
        }

        return currentTNode;
      }

      function getCurrentTNodePlaceholderOk() {
        return instructionState.lFrame.currentTNode;
      }

      function getCurrentParentTNode() {
        var lFrame = instructionState.lFrame;
        var currentTNode = lFrame.currentTNode;
        return lFrame.isParent ? currentTNode : currentTNode.parent;
      }

      function setCurrentTNode(tNode, isParent) {
        ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
        var lFrame = instructionState.lFrame;
        lFrame.currentTNode = tNode;
        lFrame.isParent = isParent;
      }

      function isCurrentTNodeParent() {
        return instructionState.lFrame.isParent;
      }

      function setCurrentTNodeAsNotParent() {
        instructionState.lFrame.isParent = false;
      }

      function setCurrentTNodeAsParent() {
        instructionState.lFrame.isParent = true;
      }

      function getContextLView() {
        return instructionState.lFrame.contextLView;
      }

      function isInCheckNoChangesMode() {
        // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
        return instructionState.isInCheckNoChangesMode;
      }

      function setIsInCheckNoChangesMode(mode) {
        instructionState.isInCheckNoChangesMode = mode;
      } // top level variables should not be exported for performance reasons (PERF_NOTES.md)


      function getBindingRoot() {
        var lFrame = instructionState.lFrame;
        var index = lFrame.bindingRootIndex;

        if (index === -1) {
          index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
        }

        return index;
      }

      function getBindingIndex() {
        return instructionState.lFrame.bindingIndex;
      }

      function setBindingIndex(value) {
        return instructionState.lFrame.bindingIndex = value;
      }

      function nextBindingIndex() {
        return instructionState.lFrame.bindingIndex++;
      }

      function incrementBindingIndex(count) {
        var lFrame = instructionState.lFrame;
        var index = lFrame.bindingIndex;
        lFrame.bindingIndex = lFrame.bindingIndex + count;
        return index;
      }

      function isInI18nBlock() {
        return instructionState.lFrame.inI18n;
      }

      function setInI18nBlock(isInI18nBlock) {
        instructionState.lFrame.inI18n = isInI18nBlock;
      }
      /**
       * Set a new binding root index so that host template functions can execute.
       *
       * Bindings inside the host template are 0 index. But because we don't know ahead of time
       * how many host bindings we have we can't pre-compute them. For this reason they are all
       * 0 index and we just shift the root so that they match next available location in the LView.
       *
       * @param bindingRootIndex Root index for `hostBindings`
       * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
       *        whose `hostBindings` are being processed.
       */


      function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
        var lFrame = instructionState.lFrame;
        lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
        setCurrentDirectiveIndex(currentDirectiveIndex);
      }
      /**
       * When host binding is executing this points to the directive index.
       * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
       * `LView[getCurrentDirectiveIndex()]` is directive instance.
       */


      function getCurrentDirectiveIndex() {
        return instructionState.lFrame.currentDirectiveIndex;
      }
      /**
       * Sets an index of a directive whose `hostBindings` are being processed.
       *
       * @param currentDirectiveIndex `TData` index where current directive instance can be found.
       */


      function setCurrentDirectiveIndex(currentDirectiveIndex) {
        instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
      }
      /**
       * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
       * executed.
       *
       * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
       */


      function getCurrentDirectiveDef(tData) {
        var currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
        return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
      }

      function getCurrentQueryIndex() {
        return instructionState.lFrame.currentQueryIndex;
      }

      function setCurrentQueryIndex(value) {
        instructionState.lFrame.currentQueryIndex = value;
      }
      /**
       * Returns a `TNode` of the location where the current `LView` is declared at.
       *
       * @param lView an `LView` that we want to find parent `TNode` for.
       */


      function getDeclarationTNode(lView) {
        var tView = lView[TVIEW]; // Return the declaration parent for embedded views

        if (tView.type === 2
        /* Embedded */
        ) {
            ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
            return tView.declTNode;
          } // Components don't have `TView.declTNode` because each instance of component could be
        // inserted in different location, hence `TView.declTNode` is meaningless.
        // Falling back to `T_HOST` in case we cross component boundary.


        if (tView.type === 1
        /* Component */
        ) {
            return lView[T_HOST];
          } // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.


        return null;
      }
      /**
       * This is a light weight version of the `enterView` which is needed by the DI system.
       *
       * @param lView `LView` location of the DI context.
       * @param tNode `TNode` for DI context
       * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration
       *     tree from `tNode`  until we find parent declared `TElementNode`.
       * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared
       *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated
       *     `NodeInjector` can be found and we should instead use `ModuleInjector`.
       *     - If `true` than this call must be fallowed by `leaveDI`
       *     - If `false` than this call failed and we should NOT call `leaveDI`
       */


      function enterDI(lView, tNode, flags) {
        ngDevMode && assertLViewOrUndefined(lView);

        if (flags & InjectFlags.SkipSelf) {
          ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
          var parentTNode = tNode;
          var parentLView = lView;

          while (true) {
            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');
            parentTNode = parentTNode.parent;

            if (parentTNode === null && !(flags & InjectFlags.Host)) {
              parentTNode = getDeclarationTNode(parentLView);
              if (parentTNode === null) break; // In this case, a parent exists and is definitely an element. So it will definitely
              // have an existing lView as the declaration view, which is why we can assume it's defined.

              ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');
              parentLView = parentLView[DECLARATION_VIEW]; // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives
              // We want to skip those and look only at Elements and ElementContainers to ensure
              // we're looking at true parent nodes, and not content or other types.

              if (parentTNode.type & (2
              /* Element */
              | 8
              /* ElementContainer */
              )) {
                break;
              }
            } else {
              break;
            }
          }

          if (parentTNode === null) {
            // If we failed to find a parent TNode this means that we should use module injector.
            return false;
          } else {
            tNode = parentTNode;
            lView = parentLView;
          }
        }

        ngDevMode && assertTNodeForLView(tNode, lView);
        var lFrame = instructionState.lFrame = allocLFrame();
        lFrame.currentTNode = tNode;
        lFrame.lView = lView;
        return true;
      }
      /**
       * Swap the current lView with a new lView.
       *
       * For performance reasons we store the lView in the top level of the module.
       * This way we minimize the number of properties to read. Whenever a new view
       * is entered we have to store the lView for later, and when the view is
       * exited the state has to be restored
       *
       * @param newView New lView to become active
       * @returns the previously active lView;
       */


      function enterView(newView) {
        ngDevMode && assertNotEqual(newView[0], newView[1], '????');
        ngDevMode && assertLViewOrUndefined(newView);
        var newLFrame = allocLFrame();

        if (ngDevMode) {
          assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
          assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
          assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
          assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
        }

        var tView = newView[TVIEW];
        instructionState.lFrame = newLFrame;
        ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
        newLFrame.currentTNode = tView.firstChild;
        newLFrame.lView = newView;
        newLFrame.tView = tView;
        newLFrame.contextLView = newView;
        newLFrame.bindingIndex = tView.bindingStartIndex;
        newLFrame.inI18n = false;
      }
      /**
       * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
       */


      function allocLFrame() {
        var currentLFrame = instructionState.lFrame;
        var childLFrame = currentLFrame === null ? null : currentLFrame.child;
        var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
        return newLFrame;
      }

      function createLFrame(parent) {
        var lFrame = {
          currentTNode: null,
          isParent: true,
          lView: null,
          tView: null,
          selectedIndex: -1,
          contextLView: null,
          elementDepthCount: 0,
          currentNamespace: null,
          currentDirectiveIndex: -1,
          bindingRootIndex: -1,
          bindingIndex: -1,
          currentQueryIndex: 0,
          parent: parent,
          child: null,
          inI18n: false
        };
        parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.

        return lFrame;
      }
      /**
       * A lightweight version of leave which is used with DI.
       *
       * This function only resets `currentTNode` and `LView` as those are the only properties
       * used with DI (`enterDI()`).
       *
       * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
       * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
       */


      function leaveViewLight() {
        var oldLFrame = instructionState.lFrame;
        instructionState.lFrame = oldLFrame.parent;
        oldLFrame.currentTNode = null;
        oldLFrame.lView = null;
        return oldLFrame;
      }
      /**
       * This is a lightweight version of the `leaveView` which is needed by the DI system.
       *
       * NOTE: this function is an alias so that we can change the type of the function to have `void`
       * return type.
       */


      var leaveDI = leaveViewLight;
      /**
       * Leave the current `LView`
       *
       * This pops the `LFrame` with the associated `LView` from the stack.
       *
       * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
       * because for performance reasons we don't release `LFrame` but rather keep it for next use.
       */

      function leaveView() {
        var oldLFrame = leaveViewLight();
        oldLFrame.isParent = true;
        oldLFrame.tView = null;
        oldLFrame.selectedIndex = -1;
        oldLFrame.contextLView = null;
        oldLFrame.elementDepthCount = 0;
        oldLFrame.currentDirectiveIndex = -1;
        oldLFrame.currentNamespace = null;
        oldLFrame.bindingRootIndex = -1;
        oldLFrame.bindingIndex = -1;
        oldLFrame.currentQueryIndex = 0;
      }

      function nextContextImpl(level) {
        var contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
        return contextLView[CONTEXT];
      }

      function walkUpViews(nestingLevel, currentView) {
        while (nestingLevel > 0) {
          ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
          currentView = currentView[DECLARATION_VIEW];
          nestingLevel--;
        }

        return currentView;
      }
      /**
       * Gets the currently selected element index.
       *
       * Used with {@link property} instruction (and more in the future) to identify the index in the
       * current `LView` to act on.
       */


      function getSelectedIndex() {
        return instructionState.lFrame.selectedIndex;
      }
      /**
       * Sets the most recent index passed to {@link select}
       *
       * Used with {@link property} instruction (and more in the future) to identify the index in the
       * current `LView` to act on.
       *
       * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
       * run if and when the provided `index` value is different from the current selected index value.)
       */


      function setSelectedIndex(index) {
        ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');
        ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\'t set index passed end of LView');
        instructionState.lFrame.selectedIndex = index;
      }
      /**
       * Gets the `tNode` that represents currently selected element.
       */


      function getSelectedTNode() {
        var lFrame = instructionState.lFrame;
        return getTNode(lFrame.tView, lFrame.selectedIndex);
      }
      /**
       * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
       *
       * @codeGenApi
       */


      function ɵɵnamespaceSVG() {
        instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
      }
      /**
       * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
       *
       * @codeGenApi
       */


      function ɵɵnamespaceMathML() {
        instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
      }
      /**
       * Sets the namespace used to create elements to `null`, which forces element creation to use
       * `createElement` rather than `createElementNS`.
       *
       * @codeGenApi
       */


      function ɵɵnamespaceHTML() {
        namespaceHTMLInternal();
      }
      /**
       * Sets the namespace used to create elements to `null`, which forces element creation to use
       * `createElement` rather than `createElementNS`.
       */


      function namespaceHTMLInternal() {
        instructionState.lFrame.currentNamespace = null;
      }

      function getNamespace() {
        return instructionState.lFrame.currentNamespace;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
       *
       * Must be run *only* on the first template pass.
       *
       * Sets up the pre-order hooks on the provided `tView`,
       * see {@link HookData} for details about the data structure.
       *
       * @param directiveIndex The index of the directive in LView
       * @param directiveDef The definition containing the hooks to setup in tView
       * @param tView The current TView
       */


      function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
        ngDevMode && assertFirstCreatePass(tView);
        var _directiveDef$type$pr = directiveDef.type.prototype,
            ngOnChanges = _directiveDef$type$pr.ngOnChanges,
            ngOnInit = _directiveDef$type$pr.ngOnInit,
            ngDoCheck = _directiveDef$type$pr.ngDoCheck;

        if (ngOnChanges) {
          var wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);
        }

        if (ngOnInit) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
        }

        if (ngDoCheck) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
        }
      }
      /**
       *
       * Loops through the directives on the provided `tNode` and queues hooks to be
       * run that are not initialization hooks.
       *
       * Should be executed during `elementEnd()` and similar to
       * preserve hook execution order. Content, view, and destroy hooks for projected
       * components and directives must be called *before* their hosts.
       *
       * Sets up the content, view, and destroy hooks on the provided `tView`,
       * see {@link HookData} for details about the data structure.
       *
       * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
       * separately at `elementStart`.
       *
       * @param tView The current TView
       * @param tNode The TNode whose directives are to be searched for hooks to queue
       */


      function registerPostOrderHooks(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in
        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
        // hooks for projected components and directives must be called *before* their hosts.

        for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
          var _directiveDef = tView.data[i];
          ngDevMode && assertDefined(_directiveDef, 'Expecting DirectiveDef');
          var lifecycleHooks = _directiveDef.type.prototype;
          var ngAfterContentInit = lifecycleHooks.ngAfterContentInit,
              ngAfterContentChecked = lifecycleHooks.ngAfterContentChecked,
              ngAfterViewInit = lifecycleHooks.ngAfterViewInit,
              ngAfterViewChecked = lifecycleHooks.ngAfterViewChecked,
              ngOnDestroy = lifecycleHooks.ngOnDestroy;

          if (ngAfterContentInit) {
            (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
          }

          if (ngAfterContentChecked) {
            (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
            (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
          }

          if (ngAfterViewInit) {
            (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
          }

          if (ngAfterViewChecked) {
            (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
            (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
          }

          if (ngOnDestroy != null) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
          }
        }
      }
      /**
       * Executing hooks requires complex logic as we need to deal with 2 constraints.
       *
       * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
       * once, across many change detection cycles. This must be true even if some hooks throw, or if
       * some recursively trigger a change detection cycle.
       * To solve that, it is required to track the state of the execution of these init hooks.
       * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
       * and the index within that phase. They can be seen as a cursor in the following structure:
       * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
       * They are are stored as flags in LView[FLAGS].
       *
       * 2. Pre-order hooks can be executed in batches, because of the select instruction.
       * To be able to pause and resume their execution, we also need some state about the hook's array
       * that is being processed:
       * - the index of the next hook to be executed
       * - the number of init hooks already found in the processed part of the  array
       * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
       */

      /**
       * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
       * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
       * / write of the init-hooks related flags.
       * @param lView The LView where hooks are defined
       * @param hooks Hooks to be run
       * @param nodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function executeCheckHooks(lView, hooks, nodeIndex) {
        callHooks(lView, hooks, 3
        /* InitPhaseCompleted */
        , nodeIndex);
      }
      /**
       * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
       * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
       * @param lView The LView where hooks are defined
       * @param hooks Hooks to be run
       * @param initPhase A phase for which hooks should be run
       * @param nodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
        ngDevMode && assertNotEqual(initPhase, 3
        /* InitPhaseCompleted */
        , 'Init pre-order hooks should not be called more than once');

        if ((lView[FLAGS] & 3
        /* InitPhaseStateMask */
        ) === initPhase) {
          callHooks(lView, hooks, initPhase, nodeIndex);
        }
      }

      function incrementInitPhaseFlags(lView, initPhase) {
        ngDevMode && assertNotEqual(initPhase, 3
        /* InitPhaseCompleted */
        , 'Init hooks phase should not be incremented after all init hooks have been run.');
        var flags = lView[FLAGS];

        if ((flags & 3
        /* InitPhaseStateMask */
        ) === initPhase) {
          flags &= 2047
          /* IndexWithinInitPhaseReset */
          ;
          flags += 1
          /* InitPhaseStateIncrementer */
          ;
          lView[FLAGS] = flags;
        }
      }
      /**
       * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
       * the first LView pass
       *
       * @param currentView The current view
       * @param arr The array in which the hooks are found
       * @param initPhaseState the current state of the init phase
       * @param currentNodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function callHooks(currentView, arr, initPhase, currentNodeIndex) {
        ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');
        var startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535
        /* IndexOfTheNextPreOrderHookMaskMask */
        : 0;
        var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
        var max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1

        var lastNodeIndexFound = 0;

        for (var i = startIndex; i < max; i++) {
          var hook = arr[i + 1];

          if (typeof hook === 'number') {
            lastNodeIndexFound = arr[i];

            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
              break;
            }
          } else {
            var isInitHook = arr[i] < 0;
            if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536
            /* NumberOfInitHooksCalledIncrementer */
            ;

            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
              callHook(currentView, initPhase, arr, i);
              currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760
              /* NumberOfInitHooksCalledMask */
              ) + i + 2;
            }

            i++;
          }
        }
      }
      /**
       * Execute one hook against the current `LView`.
       *
       * @param currentView The current view
       * @param initPhaseState the current state of the init phase
       * @param arr The array in which the hooks are found
       * @param i The current index within the hook data array
       */


      function callHook(currentView, initPhase, arr, i) {
        var isInitHook = arr[i] < 0;
        var hook = arr[i + 1];
        var directiveIndex = isInitHook ? -arr[i] : arr[i];
        var directive = currentView[directiveIndex];

        if (isInitHook) {
          var indexWithintInitPhase = currentView[FLAGS] >> 11
          /* IndexWithinInitPhaseShift */
          ; // The init phase state must be always checked here as it may have been recursively updated.

          if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16
          /* NumberOfInitHooksCalledShift */
          && (currentView[FLAGS] & 3
          /* InitPhaseStateMask */
          ) === initPhase) {
            currentView[FLAGS] += 2048
            /* IndexWithinInitPhaseIncrementer */
            ;
            hook.call(directive);
          }
        } else {
          hook.call(directive);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NO_PARENT_INJECTOR = -1;
      /**
       * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
       * `TView.data`. This allows us to store information about the current node's tokens (which
       * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
       * shared, so they live in `LView`).
       *
       * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
       * determines whether a directive is available on the associated node or not. This prevents us
       * from searching the directives array at this level unless it's probable the directive is in it.
       *
       * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
       *
       * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
       * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
       * will differ based on where it is flattened into the main array, so it's not possible to know
       * the indices ahead of time and save their types here. The interfaces are still included here
       * for documentation purposes.
       *
       * export interface LInjector extends Array<any> {
       *
       *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
       *    [0]: number;
       *
       *    // Cumulative bloom for directive IDs 32-63
       *    [1]: number;
       *
       *    // Cumulative bloom for directive IDs 64-95
       *    [2]: number;
       *
       *    // Cumulative bloom for directive IDs 96-127
       *    [3]: number;
       *
       *    // Cumulative bloom for directive IDs 128-159
       *    [4]: number;
       *
       *    // Cumulative bloom for directive IDs 160 - 191
       *    [5]: number;
       *
       *    // Cumulative bloom for directive IDs 192 - 223
       *    [6]: number;
       *
       *    // Cumulative bloom for directive IDs 224 - 255
       *    [7]: number;
       *
       *    // We need to store a reference to the injector's parent so DI can keep looking up
       *    // the injector tree until it finds the dependency it's looking for.
       *    [PARENT_INJECTOR]: number;
       * }
       *
       * export interface TInjector extends Array<any> {
       *
       *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
       *    [0]: number;
       *
       *    // Shared node bloom for directive IDs 32-63
       *    [1]: number;
       *
       *    // Shared node bloom for directive IDs 64-95
       *    [2]: number;
       *
       *    // Shared node bloom for directive IDs 96-127
       *    [3]: number;
       *
       *    // Shared node bloom for directive IDs 128-159
       *    [4]: number;
       *
       *    // Shared node bloom for directive IDs 160 - 191
       *    [5]: number;
       *
       *    // Shared node bloom for directive IDs 192 - 223
       *    [6]: number;
       *
       *    // Shared node bloom for directive IDs 224 - 255
       *    [7]: number;
       *
       *    // Necessary to find directive indices for a particular node.
       *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
       *  }
       */

      /**
       * Factory for creating instances of injectors in the NodeInjector.
       *
       * This factory is complicated by the fact that it can resolve `multi` factories as well.
       *
       * NOTE: Some of the fields are optional which means that this class has two hidden classes.
       * - One without `multi` support (most common)
       * - One with `multi` values, (rare).
       *
       * Since VMs can cache up to 4 inline hidden classes this is OK.
       *
       * - Single factory: Only `resolving` and `factory` is defined.
       * - `providers` factory: `componentProviders` is a number and `index = -1`.
       * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
       */

      var NodeInjectorFactory = function NodeInjectorFactory(
      /**
       * Factory to invoke in order to create a new instance.
       */
      factory,
      /**
       * Set to `true` if the token is declared in `viewProviders` (or if it is component).
       */
      isViewProvider, injectImplementation) {
        _classCallCheck(this, NodeInjectorFactory);

        this.factory = factory;
        /**
         * Marker set to true during factory invocation to see if we get into recursive loop.
         * Recursive loop causes an error to be displayed.
         */

        this.resolving = false;
        ngDevMode && assertDefined(factory, 'Factory not specified');
        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');
        this.canSeeViewProviders = isViewProvider;
        this.injectImpl = injectImplementation;
      };

      function isFactory(obj) {
        return obj instanceof NodeInjectorFactory;
      } // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$3 = 1;
      /**
       * Converts `TNodeType` into human readable text.
       * Make sure this matches with `TNodeType`
       */

      function toTNodeTypeAsString(tNodeType) {
        var text = '';
        tNodeType & 1
        /* Text */
        && (text += '|Text');
        tNodeType & 2
        /* Element */
        && (text += '|Element');
        tNodeType & 4
        /* Container */
        && (text += '|Container');
        tNodeType & 8
        /* ElementContainer */
        && (text += '|ElementContainer');
        tNodeType & 16
        /* Projection */
        && (text += '|Projection');
        tNodeType & 32
        /* Icu */
        && (text += '|IcuContainer');
        tNodeType & 64
        /* Placeholder */
        && (text += '|Placeholder');
        return text.length > 0 ? text.substring(1) : text;
      } // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$4 = 1;
      /**
       * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
       *
       * ```
       * <div my-dir [class]="exp"></div>
       * ```
       * and
       * ```
       * @Directive({
       * })
       * class MyDirective {
       *   @Input()
       *   class: string;
       * }
       * ```
       *
       * In the above case it is necessary to write the reconciled styling information into the
       * directive's input.
       *
       * @param tNode
       */

      function hasClassInput(tNode) {
        return (tNode.flags & 16
        /* hasClassInput */
        ) !== 0;
      }
      /**
       * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
       *
       * ```
       * <div my-dir [style]="exp"></div>
       * ```
       * and
       * ```
       * @Directive({
       * })
       * class MyDirective {
       *   @Input()
       *   class: string;
       * }
       * ```
       *
       * In the above case it is necessary to write the reconciled styling information into the
       * directive's input.
       *
       * @param tNode
       */


      function hasStyleInput(tNode) {
        return (tNode.flags & 32
        /* hasStyleInput */
        ) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function assertTNodeType(tNode, expectedTypes, message) {
        assertDefined(tNode, 'should be called with a TNode');

        if ((tNode.type & expectedTypes) === 0) {
          throwError(message || "Expected [".concat(toTNodeTypeAsString(expectedTypes), "] but got ").concat(toTNodeTypeAsString(tNode.type), "."));
        }
      }

      function assertPureTNodeType(type) {
        if (!(type === 2
        /* Element */
        || //
        type === 1
        /* Text */
        || //
        type === 4
        /* Container */
        || //
        type === 8
        /* ElementContainer */
        || //
        type === 32
        /* Icu */
        || //
        type === 16
        /* Projection */
        || //
        type === 64
        /* Placeholder */
        )) {
          throwError("Expected TNodeType to have only a single type selected, but got ".concat(toTNodeTypeAsString(type), "."));
        }
      }
      /**
       * Assigns all attribute values to the provided element via the inferred renderer.
       *
       * This function accepts two forms of attribute entries:
       *
       * default: (key, value):
       *  attrs = [key1, value1, key2, value2]
       *
       * namespaced: (NAMESPACE_MARKER, uri, name, value)
       *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
       *
       * The `attrs` array can contain a mix of both the default and namespaced entries.
       * The "default" values are set without a marker, but if the function comes across
       * a marker value then it will attempt to set a namespaced value. If the marker is
       * not of a namespaced value then the function will quit and return the index value
       * where it stopped during the iteration of the attrs array.
       *
       * See [AttributeMarker] to understand what the namespace marker value is.
       *
       * Note that this instruction does not support assigning style and class values to
       * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
       * are applied to an element.
       * @param renderer The renderer to be used
       * @param native The element that the attributes will be assigned to
       * @param attrs The attribute array of values that will be assigned to the element
       * @returns the index value that was last accessed in the attributes array
       */


      function setUpAttributes(renderer, _native, attrs) {
        var isProc = isProceduralRenderer(renderer);
        var i = 0;

        while (i < attrs.length) {
          var value = attrs[i];

          if (typeof value === 'number') {
            // only namespaces are supported. Other value types (such as style/class
            // entries) are not supported in this function.
            if (value !== 0
            /* NamespaceURI */
            ) {
                break;
              } // we just landed on the marker value ... therefore
            // we should skip to the next entry


            i++;
            var namespaceURI = attrs[i++];
            var attrName = attrs[i++];
            var attrVal = attrs[i++];
            ngDevMode && ngDevMode.rendererSetAttribute++;
            isProc ? renderer.setAttribute(_native, attrName, attrVal, namespaceURI) : _native.setAttributeNS(namespaceURI, attrName, attrVal);
          } else {
            // attrName is string;
            var _attrName = value;
            var _attrVal = attrs[++i]; // Standard attributes

            ngDevMode && ngDevMode.rendererSetAttribute++;

            if (isAnimationProp(_attrName)) {
              if (isProc) {
                renderer.setProperty(_native, _attrName, _attrVal);
              }
            } else {
              isProc ? renderer.setAttribute(_native, _attrName, _attrVal) : _native.setAttribute(_attrName, _attrVal);
            }

            i++;
          }
        } // another piece of code may iterate over the same attributes array. Therefore
        // it may be helpful to return the exact spot where the attributes array exited
        // whether by running into an unsupported marker or if all the static values were
        // iterated over.


        return i;
      }
      /**
       * Test whether the given value is a marker that indicates that the following
       * attribute values in a `TAttributes` array are only the names of attributes,
       * and not name-value pairs.
       * @param marker The attribute marker to test.
       * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
       */


      function isNameOnlyAttributeMarker(marker) {
        return marker === 3
        /* Bindings */
        || marker === 4
        /* Template */
        || marker === 6
        /* I18n */
        ;
      }

      function isAnimationProp(name) {
        // Perf note: accessing charCodeAt to check for the first character of a string is faster as
        // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
        // charCodeAt doesn't allocate memory to return a substring.
        return name.charCodeAt(0) === 64
        /* AT_SIGN */
        ;
      }
      /**
       * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
       *
       * This merge function keeps the order of attrs same.
       *
       * @param dst Location of where the merged `TAttributes` should end up.
       * @param src `TAttributes` which should be appended to `dst`
       */


      function mergeHostAttrs(dst, src) {
        if (src === null || src.length === 0) {// do nothing
        } else if (dst === null || dst.length === 0) {
          // We have source, but dst is empty, just make a copy.
          dst = src.slice();
        } else {
          var srcMarker = -1
          /* ImplicitAttributes */
          ;

          for (var i = 0; i < src.length; i++) {
            var item = src[i];

            if (typeof item === 'number') {
              srcMarker = item;
            } else {
              if (srcMarker === 0
              /* NamespaceURI */
              ) {// Case where we need to consume `key1`, `key2`, `value` items.
                } else if (srcMarker === -1
              /* ImplicitAttributes */
              || srcMarker === 2
              /* Styles */
              ) {
                  // Case where we have to consume `key1` and `value` only.
                  mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
                } else {
                // Case where we have to consume `key1` only.
                mergeHostAttribute(dst, srcMarker, item, null, null);
              }
            }
          }
        }

        return dst;
      }
      /**
       * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
       *
       * @param dst `TAttributes` to append to.
       * @param marker Region where the `key`/`value` should be added.
       * @param key1 Key to add to `TAttributes`
       * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
       * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
       */


      function mergeHostAttribute(dst, marker, key1, key2, value) {
        var i = 0; // Assume that new markers will be inserted at the end.

        var markerInsertPosition = dst.length; // scan until correct type.

        if (marker === -1
        /* ImplicitAttributes */
        ) {
            markerInsertPosition = -1;
          } else {
          while (i < dst.length) {
            var dstValue = dst[i++];

            if (typeof dstValue === 'number') {
              if (dstValue === marker) {
                markerInsertPosition = -1;
                break;
              } else if (dstValue > marker) {
                // We need to save this as we want the markers to be inserted in specific order.
                markerInsertPosition = i - 1;
                break;
              }
            }
          }
        } // search until you find place of insertion


        while (i < dst.length) {
          var item = dst[i];

          if (typeof item === 'number') {
            // since `i` started as the index after the marker, we did not find it if we are at the next
            // marker
            break;
          } else if (item === key1) {
            // We already have same token
            if (key2 === null) {
              if (value !== null) {
                dst[i + 1] = value;
              }

              return;
            } else if (key2 === dst[i + 1]) {
              dst[i + 2] = value;
              return;
            }
          } // Increment counter.


          i++;
          if (key2 !== null) i++;
          if (value !== null) i++;
        } // insert at location.


        if (markerInsertPosition !== -1) {
          dst.splice(markerInsertPosition, 0, marker);
          i = markerInsertPosition + 1;
        }

        dst.splice(i++, 0, key1);

        if (key2 !== null) {
          dst.splice(i++, 0, key2);
        }

        if (value !== null) {
          dst.splice(i++, 0, value);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      /// Parent Injector Utils ///////////////////////////////////////////////////////////////


      function hasParentInjector(parentLocation) {
        return parentLocation !== NO_PARENT_INJECTOR;
      }

      function getParentInjectorIndex(parentLocation) {
        ngDevMode && assertNumber(parentLocation, 'Number expected');
        ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');
        var parentInjectorIndex = parentLocation & 32767
        /* InjectorIndexMask */
        ;
        ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');
        return parentLocation & 32767
        /* InjectorIndexMask */
        ;
      }

      function getParentInjectorViewOffset(parentLocation) {
        return parentLocation >> 16
        /* ViewOffsetShift */
        ;
      }
      /**
       * Unwraps a parent injector location number to find the view offset from the current injector,
       * then walks up the declaration view tree until the view is found that contains the parent
       * injector.
       *
       * @param location The location of the parent injector, which contains the view offset
       * @param startView The LView instance from which to start walking up the view tree
       * @returns The LView instance that contains the parent injector
       */


      function getParentInjectorView(location, startView) {
        var viewOffset = getParentInjectorViewOffset(location);
        var parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component
        // or container), but we must keep the loop here to support the rarer case of deeply nested
        // <ng-template> tags or inline views, where the parent injector might live many views
        // above the child injector.

        while (viewOffset > 0) {
          parentView = parentView[DECLARATION_VIEW];
          viewOffset--;
        }

        return parentView;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines if the call to `inject` should include `viewProviders` in its resolution.
       *
       * This is set to true when we try to instantiate a component. This value is reset in
       * `getNodeInjectable` to a value which matches the declaration location of the token about to be
       * instantiated. This is done so that if we are injecting a token which was declared outside of
       * `viewProviders` we don't accidentally pull `viewProviders` in.
       *
       * Example:
       *
       * ```
       * @Injectable()
       * class MyService {
       *   constructor(public value: String) {}
       * }
       *
       * @Component({
       *   providers: [
       *     MyService,
       *     {provide: String, value: 'providers' }
       *   ]
       *   viewProviders: [
       *     {provide: String, value: 'viewProviders'}
       *   ]
       * })
       * class MyComponent {
       *   constructor(myService: MyService, value: String) {
       *     // We expect that Component can see into `viewProviders`.
       *     expect(value).toEqual('viewProviders');
       *     // `MyService` was not declared in `viewProviders` hence it can't see it.
       *     expect(myService.value).toEqual('providers');
       *   }
       * }
       *
       * ```
       */


      var includeViewProviders = true;

      function setIncludeViewProviders(v) {
        var oldValue = includeViewProviders;
        includeViewProviders = v;
        return oldValue;
      }
      /**
       * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
       * directives that will share slots, and thus, the fewer false positives when checking for
       * the existence of a directive.
       */


      var BLOOM_SIZE = 256;
      var BLOOM_MASK = BLOOM_SIZE - 1;
      /**
       * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,
       * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash
       * number.
       */

      var BLOOM_BUCKET_BITS = 5;
      /** Counter used to generate unique IDs for directives. */

      var nextNgElementId = 0;
      /**
       * Registers this directive as present in its node's injector by flipping the directive's
       * corresponding bit in the injector's bloom filter.
       *
       * @param injectorIndex The index of the node injector where this token should be registered
       * @param tView The TView for the injector's bloom filters
       * @param type The directive token to register
       */

      function bloomAdd(injectorIndex, tView, type) {
        ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
        var id;

        if (typeof type === 'string') {
          id = type.charCodeAt(0) || 0;
        } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
          id = type[NG_ELEMENT_ID];
        } // Set a unique ID on the directive type, so if something tries to inject the directive,
        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.


        if (id == null) {
          id = type[NG_ELEMENT_ID] = nextNgElementId++;
        } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.


        var bloomHash = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.

        var mask = 1 << bloomHash; // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.
        // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask
        // should be written to.

        tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
      }
      /**
       * Creates (or gets an existing) injector for a given element or container.
       *
       * @param tNode for which an injector should be retrieved / created.
       * @param lView View where the node is stored
       * @returns Node injector
       */


      function getOrCreateNodeInjectorForNode(tNode, lView) {
        var existingInjectorIndex = getInjectorIndex(tNode, lView);

        if (existingInjectorIndex !== -1) {
          return existingInjectorIndex;
        }

        var tView = lView[TVIEW];

        if (tView.firstCreatePass) {
          tNode.injectorIndex = lView.length;
          insertBloom(tView.data, tNode); // foundation for node bloom

          insertBloom(lView, null); // foundation for cumulative bloom

          insertBloom(tView.blueprint, null);
        }

        var parentLoc = getParentInjectorLocation(tNode, lView);
        var injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.
        // In that case, we don't need to set up a cumulative bloom

        if (hasParentInjector(parentLoc)) {
          var parentIndex = getParentInjectorIndex(parentLoc);
          var parentLView = getParentInjectorView(parentLoc, lView);
          var parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter
          // and its own cumulative bloom (which contains tokens for all ancestors)

          for (var i = 0; i < 8
          /* BLOOM_SIZE */
          ; i++) {
            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
          }
        }

        lView[injectorIndex + 8
        /* PARENT */
        ] = parentLoc;
        return injectorIndex;
      }

      function insertBloom(arr, footer) {
        arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
      }

      function getInjectorIndex(tNode, lView) {
        if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
        // copied down from the parent node. No injector has been created yet on this node.
        tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
        // might not have been calculated yet for this instance
        lView[tNode.injectorIndex + 8
        /* PARENT */
        ] === null) {
          return -1;
        } else {
          ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
          return tNode.injectorIndex;
        }
      }
      /**
       * Finds the index of the parent injector, with a view offset if applicable. Used to set the
       * parent injector initially.
       *
       * @returns Returns a number that is the combination of the number of LViews that we have to go up
       * to find the LView containing the parent inject AND the index of the injector within that LView.
       */


      function getParentInjectorLocation(tNode, lView) {
        if (tNode.parent && tNode.parent.injectorIndex !== -1) {
          // If we have a parent `TNode` and there is an injector associated with it we are done, because
          // the parent injector is within the current `LView`.
          return tNode.parent.injectorIndex; // ViewOffset is 0
        } // When parent injector location is computed it may be outside of the current view. (ie it could
        // be pointing to a declared parent location). This variable stores number of declaration parents
        // we need to walk up in order to find the parent injector location.


        var declarationViewOffset = 0;
        var parentTNode = null;
        var lViewCursor = lView; // The parent injector is not in the current `LView`. We will have to walk the declared parent
        // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent
        // `NodeInjector`.

        while (lViewCursor !== null) {
          // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.
          var tView = lViewCursor[TVIEW];
          var tViewType = tView.type;

          if (tViewType === 2
          /* Embedded */
          ) {
              ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
              parentTNode = tView.declTNode;
            } else if (tViewType === 1
          /* Component */
          ) {
              // Components don't have `TView.declTNode` because each instance of component could be
              // inserted in different location, hence `TView.declTNode` is meaningless.
              parentTNode = lViewCursor[T_HOST];
            } else {
            ngDevMode && assertEqual(tView.type, 0
            /* Root */
            , 'Root type expected');
            parentTNode = null;
          }

          if (parentTNode === null) {
            // If we have no parent, than we are done.
            return NO_PARENT_INJECTOR;
          }

          ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]); // Every iteration of the loop requires that we go to the declared parent.

          declarationViewOffset++;
          lViewCursor = lViewCursor[DECLARATION_VIEW];

          if (parentTNode.injectorIndex !== -1) {
            // We found a NodeInjector which points to something.
            return parentTNode.injectorIndex | declarationViewOffset << 16
            /* ViewOffsetShift */
            ;
          }
        }

        return NO_PARENT_INJECTOR;
      }
      /**
       * Makes a type or an injection token public to the DI system by adding it to an
       * injector's bloom filter.
       *
       * @param di The node injector in which a directive will be added
       * @param token The type or the injection token to be made public
       */


      function diPublicInInjector(injectorIndex, tView, token) {
        bloomAdd(injectorIndex, tView, token);
      }
      /**
       * Inject static attribute value into directive constructor.
       *
       * This method is used with `factory` functions which are generated as part of
       * `defineDirective` or `defineComponent`. The method retrieves the static value
       * of an attribute. (Dynamic attributes are not supported since they are not resolved
       *  at the time of injection and can change over time.)
       *
       * # Example
       * Given:
       * ```
       * @Component(...)
       * class MyComponent {
       *   constructor(@Attribute('title') title: string) { ... }
       * }
       * ```
       * When instantiated with
       * ```
       * <my-component title="Hello"></my-component>
       * ```
       *
       * Then factory method generated is:
       * ```
       * MyComponent.ɵcmp = defineComponent({
       *   factory: () => new MyComponent(injectAttribute('title'))
       *   ...
       * })
       * ```
       *
       * @publicApi
       */


      function injectAttributeImpl(tNode, attrNameToInject) {
        ngDevMode && assertTNodeType(tNode, 12
        /* AnyContainer */
        | 3
        /* AnyRNode */
        );
        ngDevMode && assertDefined(tNode, 'expecting tNode');

        if (attrNameToInject === 'class') {
          return tNode.classes;
        }

        if (attrNameToInject === 'style') {
          return tNode.styles;
        }

        var attrs = tNode.attrs;

        if (attrs) {
          var attrsLength = attrs.length;
          var i = 0;

          while (i < attrsLength) {
            var value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.

            if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes

            if (value === 0
            /* NamespaceURI */
            ) {
                // we skip the next two values
                // as namespaced attributes looks like
                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
                // 'existValue', ...]
                i = i + 2;
              } else if (typeof value === 'number') {
              // Skip to the first value of the marked attribute.
              i++;

              while (i < attrsLength && typeof attrs[i] === 'string') {
                i++;
              }
            } else if (value === attrNameToInject) {
              return attrs[i + 1];
            } else {
              i = i + 2;
            }
          }
        }

        return null;
      }

      function notFoundValueOrThrow(notFoundValue, token, flags) {
        if (flags & InjectFlags.Optional) {
          return notFoundValue;
        } else {
          throwProviderNotFoundError(token, 'NodeInjector');
        }
      }
      /**
       * Returns the value associated to the given token from the ModuleInjector or throws exception
       *
       * @param lView The `LView` that contains the `tNode`
       * @param token The token to look for
       * @param flags Injection flags
       * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
       * @returns the value from the injector or throws an exception
       */


      function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
        if (flags & InjectFlags.Optional && notFoundValue === undefined) {
          // This must be set or the NullInjector will throw for optional deps
          notFoundValue = null;
        }

        if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
          var moduleInjector = lView[INJECTOR]; // switch to `injectInjectorOnly` implementation for module injector, since module injector
          // should not have access to Component/Directive DI scope (that may happen through
          // `directiveInject` implementation)

          var previousInjectImplementation = setInjectImplementation(undefined);

          try {
            if (moduleInjector) {
              return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
            } else {
              return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
            }
          } finally {
            setInjectImplementation(previousInjectImplementation);
          }
        }

        return notFoundValueOrThrow(notFoundValue, token, flags);
      }
      /**
       * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
       *
       * Look for the injector providing the token by walking up the node injector tree and then
       * the module injector tree.
       *
       * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
       * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
       *
       * @param tNode The Node where the search for the injector should start
       * @param lView The `LView` that contains the `tNode`
       * @param token The token to look for
       * @param flags Injection flags
       * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
       * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
       */


      function getOrCreateInjectable(tNode, lView, token) {
        var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : InjectFlags.Default;
        var notFoundValue = arguments.length > 4 ? arguments[4] : undefined;

        if (tNode !== null) {
          var bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
          // so just call the factory function to create it.

          if (typeof bloomHash === 'function') {
            if (!enterDI(lView, tNode, flags)) {
              // Failed to enter DI, try module injector instead. If a token is injected with the @Host
              // flag, the module injector is not searched for that token in Ivy.
              return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
            }

            try {
              var value = bloomHash();

              if (value == null && !(flags & InjectFlags.Optional)) {
                throwProviderNotFoundError(token);
              } else {
                return value;
              }
            } finally {
              leaveDI();
            }
          } else if (typeof bloomHash === 'number') {
            // A reference to the previous injector TView that was found while climbing the element
            // injector tree. This is used to know if viewProviders can be accessed on the current
            // injector.
            var previousTView = null;
            var injectorIndex = getInjectorIndex(tNode, lView);
            var parentLocation = NO_PARENT_INJECTOR;
            var hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by
            // searching the parent injector.

            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
              parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8
              /* PARENT */
              ];

              if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
                injectorIndex = -1;
              } else {
                previousTView = lView[TVIEW];
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              }
            } // Traverse up the injector tree until we find a potential match or until we know there
            // *isn't* a match.


            while (injectorIndex !== -1) {
              ngDevMode && assertNodeInjector(lView, injectorIndex); // Check the current injector. If it matches, see if it contains token.

              var tView = lView[TVIEW];
              ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8
              /* TNODE */
              ], lView);

              if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
                // At this point, we have an injector which *may* contain the token, so we step through
                // the providers and directives associated with the injector's corresponding node to get
                // the instance.
                var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);

                if (instance !== NOT_FOUND) {
                  return instance;
                }
              }

              parentLocation = lView[injectorIndex + 8
              /* PARENT */
              ];

              if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
                // The def wasn't found anywhere on this node, so it was a false positive.
                // Traverse up the tree and continue searching.
                previousTView = tView;
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              } else {
                // If we should not search parent OR If the ancestor bloom filter value does not have the
                // bit corresponding to the directive we can give up on traversing up to find the specific
                // injector.
                injectorIndex = -1;
              }
            }
          }
        }

        return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
      }

      var NOT_FOUND = {};

      function createNodeInjector() {
        return new NodeInjector(getCurrentTNode(), getLView());
      }

      function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
        var currentTView = lView[TVIEW];
        var tNode = currentTView.data[injectorIndex + 8
        /* TNODE */
        ]; // First, we need to determine if view providers can be accessed by the starting element.
        // There are two possibilities

        var canAccessViewProviders = previousTView == null ? // 1) This is the first invocation `previousTView == null` which means that we are at the
        // `TNode` of where injector is starting to look. In such a case the only time we are allowed
        // to look into the ViewProviders is if:
        // - we are on a component
        // - AND the injector set `includeViewProviders` to true (implying that the token can see
        // ViewProviders because it is the Component or a Service which itself was declared in
        // ViewProviders)
        isComponentHost(tNode) && includeViewProviders : // 2) `previousTView != null` which means that we are now walking across the parent nodes.
        // In such a case we are only allowed to look into the ViewProviders if:
        // - We just crossed from child View to Parent View `previousTView != currentTView`
        // - AND the parent TNode is an Element.
        // This means that we just came from the Component's View and therefore are allowed to see
        // into the ViewProviders.
        previousTView != currentTView && (tNode.type & 3
        /* AnyRNode */
        ) !== 0; // This special case happens when there is a @host on the inject and when we are searching
        // on the host element node.

        var isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
        var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);

        if (injectableIdx !== null) {
          return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
        } else {
          return NOT_FOUND;
        }
      }
      /**
       * Searches for the given token among the node's directives and providers.
       *
       * @param tNode TNode on which directives are present.
       * @param tView The tView we are currently processing
       * @param token Provider token or type of a directive to look for.
       * @param canAccessViewProviders Whether view providers should be considered.
       * @param isHostSpecialCase Whether the host special case applies.
       * @returns Index of a found directive or provider, or null when none found.
       */


      function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
        var nodeProviderIndexes = tNode.providerIndexes;
        var tInjectables = tView.data;
        var injectablesStart = nodeProviderIndexes & 1048575
        /* ProvidersStartIndexMask */
        ;
        var directivesStart = tNode.directiveStart;
        var directiveEnd = tNode.directiveEnd;
        var cptViewProvidersCount = nodeProviderIndexes >> 20
        /* CptViewProvidersCountShift */
        ;
        var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible

        var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;

        for (var i = startingIndex; i < endIndex; i++) {
          var providerTokenOrDef = tInjectables[i];

          if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
            return i;
          }
        }

        if (isHostSpecialCase) {
          var dirDef = tInjectables[directivesStart];

          if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
            return directivesStart;
          }
        }

        return null;
      }
      /**
       * Retrieve or instantiate the injectable from the `LView` at particular `index`.
       *
       * This function checks to see if the value has already been instantiated and if so returns the
       * cached `injectable`. Otherwise if it detects that the value is still a factory it
       * instantiates the `injectable` and caches the value.
       */


      function getNodeInjectable(lView, tView, index, tNode) {
        var value = lView[index];
        var tData = tView.data;

        if (isFactory(value)) {
          var factory = value;

          if (factory.resolving) {
            throwCyclicDependencyError(stringifyForError(tData[index]));
          }

          var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
          factory.resolving = true;
          var previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
          var success = enterDI(lView, tNode, InjectFlags.Default);
          ngDevMode && assertEqual(success, true, 'Because flags do not contain \`SkipSelf\' we expect this to always succeed.');

          try {
            value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.
            // For perf reasons, we want to avoid searching for hooks on providers.
            // It does no harm to try (the hooks just won't exist), but the extra
            // checks are unnecessary and this is a hot path. So we check to see
            // if the index of the dependency is in the directive range for this
            // tNode. If it's not, we know it's a provider and skip hook registration.

            if (tView.firstCreatePass && index >= tNode.directiveStart) {
              ngDevMode && assertDirectiveDef(tData[index]);
              registerPreOrderHooks(index, tData[index], tView);
            }
          } finally {
            previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
            setIncludeViewProviders(previousIncludeViewProviders);
            factory.resolving = false;
            leaveDI();
          }
        }

        return value;
      }
      /**
       * Returns the bit in an injector's bloom filter that should be used to determine whether or not
       * the directive might be provided by the injector.
       *
       * When a directive is public, it is added to the bloom filter and given a unique ID that can be
       * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
       * is returned as the node injector can not possibly provide that token.
       *
       * @param token the injection token
       * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
       *   When the returned value is negative then it represents special values such as `Injector`.
       */


      function bloomHashBitOrFactory(token) {
        ngDevMode && assertDefined(token, 'token must be defined');

        if (typeof token === 'string') {
          return token.charCodeAt(0) || 0;
        }

        var tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.
        token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`

        if (typeof tokenId === 'number') {
          if (tokenId >= 0) {
            return tokenId & BLOOM_MASK;
          } else {
            ngDevMode && assertEqual(tokenId, -1
            /* Injector */
            , 'Expecting to get Special Injector Id');
            return createNodeInjector;
          }
        } else {
          return tokenId;
        }
      }

      function bloomHasToken(bloomHash, injectorIndex, injectorView) {
        // Create a mask that targets the specific bit associated with the directive we're looking for.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.
        var mask = 1 << bloomHash; // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of
        // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset
        // that should be used.

        var value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)]; // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
        // this injector is a potential match.

        return !!(value & mask);
      }
      /** Returns true if flags prevent parent injector from being searched for tokens */


      function shouldSearchParent(flags, isFirstHostTNode) {
        return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
      }

      var NodeInjector = /*#__PURE__*/function () {
        function NodeInjector(_tNode, _lView) {
          _classCallCheck(this, NodeInjector);

          this._tNode = _tNode;
          this._lView = _lView;
        }

        _createClass2(NodeInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
          }
        }]);

        return NodeInjector;
      }();
      /**
       * @codeGenApi
       */


      function ɵɵgetInheritedFactory(type) {
        return noSideEffects(function () {
          var ownConstructor = type.prototype.constructor;
          var ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
          var objectPrototype = Object.prototype;
          var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

          while (parent && parent !== objectPrototype) {
            var factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,
            // we've found the inherited factory. Note the check that the factory isn't the type's
            // own factory is redundant in most cases, but if the user has custom decorators on the
            // class, this lookup will start one level down in the prototype chain, causing us to
            // find the own factory first and potentially triggering an infinite loop downstream.

            if (factory && factory !== ownFactory) {
              return factory;
            }

            parent = Object.getPrototypeOf(parent);
          } // There is no factory defined. Either this was improper usage of inheritance
          // (no Angular decorator on the superclass) or there is no constructor at all
          // in the inheritance chain. Since the two cases cannot be distinguished, the
          // latter has to be assumed.


          return function (t) {
            return new t();
          };
        });
      }

      function getFactoryOf(type) {
        if (isForwardRef(type)) {
          return function () {
            var factory = getFactoryOf(resolveForwardRef(type));
            return factory && factory();
          };
        }

        return getFactoryDef(type);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Facade for the attribute injection from DI.
       *
       * @codeGenApi
       */


      function ɵɵinjectAttribute(attrNameToInject) {
        return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ANNOTATIONS = '__annotations__';
      var PARAMETERS = '__parameters__';
      var PROP_METADATA = '__prop__metadata__';
      /**
       * @suppress {globalThis}
       */

      function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function DecoratorFactory() {
            for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
              args[_key30] = arguments[_key30];
            }

            if (this instanceof DecoratorFactory) {
              metaCtor.call.apply(metaCtor, [this].concat(args));
              return this;
            }

            var annotationInstance = _construct(DecoratorFactory, args);

            return function TypeDecorator(cls) {
              if (typeFn) typeFn.apply(void 0, [cls].concat(args)); // Use of Object.defineProperty is important since it creates non-enumerable property which
              // prevents the property is copied during subclassing.

              var annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
                value: []
              })[ANNOTATIONS];
              annotations.push(annotationInstance);
              if (additionalProcessing) additionalProcessing(cls);
              return cls;
            };
          }

          if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          DecoratorFactory.prototype.ngMetadataName = name;
          DecoratorFactory.annotationCls = DecoratorFactory;
          return DecoratorFactory;
        });
      }

      function makeMetadataCtor(props) {
        return function ctor() {
          if (props) {
            var values = props.apply(void 0, arguments);

            for (var propName in values) {
              this[propName] = values[propName];
            }
          }
        };
      }

      function makeParamDecorator(name, props, parentClass) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function ParamDecoratorFactory() {
            for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {
              args[_key31] = arguments[_key31];
            }

            if (this instanceof ParamDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
            }

            var annotationInstance = _construct(ParamDecoratorFactory, args);

            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;

            function ParamDecorator(cls, unusedKey, index) {
              // Use of Object.defineProperty is important since it creates non-enumerable property which
              // prevents the property is copied during subclassing.
              var parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
                value: []
              })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.
              // we pad with nulls.

              while (parameters.length <= index) {
                parameters.push(null);
              }

              (parameters[index] = parameters[index] || []).push(annotationInstance);
              return cls;
            }
          }

          if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          ParamDecoratorFactory.prototype.ngMetadataName = name;
          ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
          return ParamDecoratorFactory;
        });
      }

      function makePropDecorator(name, props, parentClass, additionalProcessing) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function PropDecoratorFactory() {
            for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {
              args[_key32] = arguments[_key32];
            }

            if (this instanceof PropDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
            }

            var decoratorInstance = _construct(PropDecoratorFactory, args);

            function PropDecorator(target, name) {
              var constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property
              // which prevents the property from being copied during subclassing.

              var meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
                value: {}
              })[PROP_METADATA];
              meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
              meta[name].unshift(decoratorInstance);
              if (additionalProcessing) additionalProcessing.apply(void 0, [target, name].concat(args));
            }

            return PropDecorator;
          }

          if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          PropDecoratorFactory.prototype.ngMetadataName = name;
          PropDecoratorFactory.annotationCls = PropDecoratorFactory;
          return PropDecoratorFactory;
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function CREATE_ATTRIBUTE_DECORATOR__PRE_R3__() {
        return makeParamDecorator('Attribute', function (attributeName) {
          return {
            attributeName: attributeName
          };
        });
      }

      function CREATE_ATTRIBUTE_DECORATOR__POST_R3__() {
        return makeParamDecorator('Attribute', function (attributeName) {
          return {
            attributeName: attributeName,
            __NG_ELEMENT_ID__: function __NG_ELEMENT_ID__() {
              return ɵɵinjectAttribute(attributeName);
            }
          };
        });
      }

      var CREATE_ATTRIBUTE_DECORATOR_IMPL = CREATE_ATTRIBUTE_DECORATOR__POST_R3__;
      /**
       * Attribute decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var Attribute = CREATE_ATTRIBUTE_DECORATOR_IMPL();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Creates a token that can be used in a DI Provider.
       *
       * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
       * runtime representation) such as when injecting an interface, callable type, array or
       * parameterized type.
       *
       * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
       * the `Injector`. This provides additional level of type safety.
       *
       * ```
       * interface MyInterface {...}
       * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
       * // myInterface is inferred to be MyInterface.
       * ```
       *
       * When creating an `InjectionToken`, you can optionally specify a factory function which returns
       * (possibly by creating) a default value of the parameterized type `T`. This sets up the
       * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
       * application's root injector. If the factory function, which takes zero arguments, needs to inject
       * dependencies, it can do so using the `inject` function. See below for an example.
       *
       * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
       * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
       * mentioned above, `'root'` is the default value for `providedIn`.
       *
       * @usageNotes
       * ### Basic Example
       *
       * ### Plain InjectionToken
       *
       * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
       *
       * ### Tree-shakable InjectionToken
       *
       * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
       *
       *
       * @publicApi
       */

      var InjectionToken = /*#__PURE__*/function () {
        function InjectionToken(_desc, options) {
          _classCallCheck(this, InjectionToken);

          this._desc = _desc;
          /** @internal */

          this.ngMetadataName = 'InjectionToken';
          this.ɵprov = undefined;

          if (typeof options == 'number') {
            (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here'); // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
            // See `InjectorMarkers`

            this.__NG_ELEMENT_ID__ = options;
          } else if (options !== undefined) {
            this.ɵprov = ɵɵdefineInjectable({
              token: this,
              providedIn: options.providedIn || 'root',
              factory: options.factory
            });
          }
        }

        _createClass2(InjectionToken, [{
          key: "toString",
          value: function toString() {
            return "InjectionToken ".concat(this._desc);
          }
        }]);

        return InjectionToken;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
       * that will populate the `entryComponents` field of components and NgModules
       * based on its `useValue` property value.
       * All components that are referenced in the `useValue` value (either directly
       * or in a nested array or map) are added to the `entryComponents` property.
       *
       * @usageNotes
       *
       * The following example shows how the router can populate the `entryComponents`
       * field of an NgModule based on a router configuration that refers
       * to components.
       *
       * ```typescript
       * // helper function inside the router
       * function provideRoutes(routes) {
       *   return [
       *     {provide: ROUTES, useValue: routes},
       *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
       *   ];
       * }
       *
       * // user code
       * let routes = [
       *   {path: '/root', component: RootComp},
       *   {path: '/teams', component: TeamsComp}
       * ];
       *
       * @NgModule({
       *   providers: [provideRoutes(routes)]
       * })
       * class ModuleWithRoutes {}
       * ```
       *
       * @publicApi
       * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
       */


      var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents'); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
      // explicitly set. This value will be changed to `true` in v12.
      // TODO(misko): switch the default in v12 to `true`. See: packages/compiler/src/core.ts

      var emitDistinctChangesOnlyDefaultValue = false;
      /**
       * Base class for query metadata.
       *
       * @see `ContentChildren`.
       * @see `ContentChild`.
       * @see `ViewChildren`.
       * @see `ViewChild`.
       *
       * @publicApi
       */

      var Query = function Query() {
        _classCallCheck(this, Query);
      };

      var ɵ0$1 = function ɵ0$1(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: false,
          descendants: false,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      };
      /**
       * ContentChildren decorator and metadata.
       *
       *
       * @Annotation
       * @publicApi
       */


      var ContentChildren = makePropDecorator('ContentChildren', ɵ0$1, Query);

      var ɵ1 = function ɵ1(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: false,
          descendants: true
        }, data);
      };
      /**
       * ContentChild decorator and metadata.
       *
       *
       * @Annotation
       *
       * @publicApi
       */


      var ContentChild = makePropDecorator('ContentChild', ɵ1, Query);

      var ɵ2 = function ɵ2(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: true,
          descendants: true,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      };
      /**
       * ViewChildren decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var ViewChildren = makePropDecorator('ViewChildren', ɵ2, Query);

      var ɵ3 = function ɵ3(selector, data) {
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: true,
          descendants: true
        }, data);
      };
      /**
       * ViewChild decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var ViewChild = makePropDecorator('ViewChild', ɵ3, Query);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var R3ResolvedDependencyType;

      (function (R3ResolvedDependencyType) {
        R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
        R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
        R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
        R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
      })(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));

      var R3FactoryTarget;

      (function (R3FactoryTarget) {
        R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
        R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
        R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
        R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
        R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
      })(R3FactoryTarget || (R3FactoryTarget = {}));

      var ViewEncapsulation$1;

      (function (ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getCompilerFacade() {
        var globalNg = _global['ng'];

        if (!globalNg || !globalNg.ɵcompilerFacade) {
          throw new Error("Angular JIT compilation failed: '@angular/compiler' not loaded!\n" + "  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n" + "  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n" + "  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.");
        }

        return globalNg.ɵcompilerFacade;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Represents a type that a Component or other object is instances of.
       *
       * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
       * the `MyCustomComponent` constructor function.
       *
       * @publicApi
       */


      var Type = Function;

      function isType(v) {
        return typeof v === 'function';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Equivalent to ES6 spread, add each item to an array.
       *
       * @param items The items to add
       * @param arr The array to which you want to add the items
       */


      function addAllToArray(items, arr) {
        for (var i = 0; i < items.length; i++) {
          arr.push(items[i]);
        }
      }
      /**
       * Determines if the contents of two arrays is identical
       *
       * @param a first array
       * @param b second array
       * @param identityAccessor Optional function for extracting stable object identity from a value in
       *     the array.
       */


      function arrayEquals(a, b, identityAccessor) {
        if (a.length !== b.length) return false;

        for (var i = 0; i < a.length; i++) {
          var valueA = a[i];
          var valueB = b[i];

          if (identityAccessor) {
            valueA = identityAccessor(valueA);
            valueB = identityAccessor(valueB);
          }

          if (valueB !== valueA) {
            return false;
          }
        }

        return true;
      }
      /**
       * Flattens an array.
       */


      function flatten(list, dst) {
        if (dst === undefined) dst = list;

        for (var i = 0; i < list.length; i++) {
          var item = list[i];

          if (Array.isArray(item)) {
            // we need to inline it.
            if (dst === list) {
              // Our assumption that the list was already flat was wrong and
              // we need to clone flat since we need to write to it.
              dst = list.slice(0, i);
            }

            flatten(item, dst);
          } else if (dst !== list) {
            dst.push(item);
          }
        }

        return dst;
      }

      function deepForEach(input, fn) {
        input.forEach(function (value) {
          return Array.isArray(value) ? deepForEach(value, fn) : fn(value);
        });
      }

      function addToArray(arr, index, value) {
        // perf: array.push is faster than array.splice!
        if (index >= arr.length) {
          arr.push(value);
        } else {
          arr.splice(index, 0, value);
        }
      }

      function removeFromArray(arr, index) {
        // perf: array.pop is faster than array.splice!
        if (index >= arr.length - 1) {
          return arr.pop();
        } else {
          return arr.splice(index, 1)[0];
        }
      }

      function newArray(size, value) {
        var list = [];

        for (var i = 0; i < size; i++) {
          list.push(value);
        }

        return list;
      }
      /**
       * Remove item from array (Same as `Array.splice()` but faster.)
       *
       * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * https://jsperf.com/fast-array-splice (About 20x faster)
       *
       * @param array Array to splice
       * @param index Index of element in array to remove.
       * @param count Number of items to remove.
       */


      function arraySplice(array, index, count) {
        var length = array.length - count;

        while (index < length) {
          array[index] = array[index + count];
          index++;
        }

        while (count--) {
          array.pop(); // shrink the array
        }
      }
      /**
       * Same as `Array.splice(index, 0, value)` but faster.
       *
       * `Array.splice()` is not fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * @param array Array to splice.
       * @param index Index in array where the `value` should be added.
       * @param value Value to add to array.
       */


      function arrayInsert(array, index, value) {
        ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
        var end = array.length;

        while (end > index) {
          var previousEnd = end - 1;
          array[end] = array[previousEnd];
          end = previousEnd;
        }

        array[index] = value;
      }
      /**
       * Same as `Array.splice2(index, 0, value1, value2)` but faster.
       *
       * `Array.splice()` is not fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * @param array Array to splice.
       * @param index Index in array where the `value` should be added.
       * @param value1 Value to add to array.
       * @param value2 Value to add to array.
       */


      function arrayInsert2(array, index, value1, value2) {
        ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
        var end = array.length;

        if (end == index) {
          // inserting at the end.
          array.push(value1, value2);
        } else if (end === 1) {
          // corner case when we have less items in array than we have items to insert.
          array.push(value2, array[0]);
          array[0] = value1;
        } else {
          end--;
          array.push(array[end - 1], array[end]);

          while (end > index) {
            var previousEnd = end - 2;
            array[end] = array[previousEnd];
            end--;
          }

          array[index] = value1;
          array[index + 1] = value2;
        }
      }
      /**
       * Insert a `value` into an `array` so that the array remains sorted.
       *
       * NOTE:
       * - Duplicates are not allowed, and are ignored.
       * - This uses binary search algorithm for fast inserts.
       *
       * @param array A sorted array to insert into.
       * @param value The value to insert.
       * @returns index of the inserted value.
       */


      function arrayInsertSorted(array, value) {
        var index = arrayIndexOfSorted(array, value);

        if (index < 0) {
          // if we did not find it insert it.
          index = ~index;
          arrayInsert(array, index, value);
        }

        return index;
      }
      /**
       * Remove `value` from a sorted `array`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to remove from.
       * @param value The value to remove.
       * @returns index of the removed value.
       *   - positive index if value found and removed.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       *     inserted)
       */


      function arrayRemoveSorted(array, value) {
        var index = arrayIndexOfSorted(array, value);

        if (index >= 0) {
          arraySplice(array, index, 1);
        }

        return index;
      }
      /**
       * Get an index of an `value` in a sorted `array`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to binary search.
       * @param value The value to look for.
       * @returns index of the value.
       *   - positive index if value found.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       *     located)
       */


      function arrayIndexOfSorted(array, value) {
        return _arrayIndexOfSorted(array, value, 0);
      }
      /**
       * Set a `value` for a `key`.
       *
       * @param keyValueArray to modify.
       * @param key The key to locate or create.
       * @param value The value to set for a `key`.
       * @returns index (always even) of where the value vas set.
       */


      function keyValueArraySet(keyValueArray, key, value) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it set it.
          keyValueArray[index | 1] = value;
        } else {
          index = ~index;
          arrayInsert2(keyValueArray, index, key, value);
        }

        return index;
      }
      /**
       * Retrieve a `value` for a `key` (on `undefined` if not found.)
       *
       * @param keyValueArray to search.
       * @param key The key to locate.
       * @return The `value` stored at the `key` location or `undefined if not found.
       */


      function keyValueArrayGet(keyValueArray, key) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it retrieve it.
          return keyValueArray[index | 1];
        }

        return undefined;
      }
      /**
       * Retrieve a `key` index value in the array or `-1` if not found.
       *
       * @param keyValueArray to search.
       * @param key The key to locate.
       * @returns index of where the key is (or should have been.)
       *   - positive (even) index if key found.
       *   - negative index if key not found. (`~index` (even) to get the index where it should have
       *     been inserted.)
       */


      function keyValueArrayIndexOf(keyValueArray, key) {
        return _arrayIndexOfSorted(keyValueArray, key, 1);
      }
      /**
       * Delete a `key` (and `value`) from the `KeyValueArray`.
       *
       * @param keyValueArray to modify.
       * @param key The key to locate or delete (if exist).
       * @returns index of where the key was (or should have been.)
       *   - positive (even) index if key found and deleted.
       *   - negative index if key not found. (`~index` (even) to get the index where it should have
       *     been.)
       */


      function keyValueArrayDelete(keyValueArray, key) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it remove it.
          arraySplice(keyValueArray, index, 2);
        }

        return index;
      }
      /**
       * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to binary search.
       * @param value The value to look for.
       * @param shift grouping shift.
       *   - `0` means look at every location
       *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
       *         they are values.)
       * @returns index of the value.
       *   - positive index if value found.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       * inserted)
       */


      function _arrayIndexOfSorted(array, value, shift) {
        ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
        var start = 0;
        var end = array.length >> shift;

        while (end !== start) {
          var middle = start + (end - start >> 1); // find the middle.

          var current = array[middle << shift];

          if (value === current) {
            return middle << shift;
          } else if (current > value) {
            end = middle;
          } else {
            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
          }
        }

        return ~(end << shift);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /*
       * #########################
       * Attention: These Regular expressions have to hold even if the code is minified!
       * ##########################
       */

      /**
       * Regular expression that detects pass-through constructors for ES5 output. This Regex
       * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also
       * it intends to capture the pattern where existing constructors have been downleveled from
       * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.
       *
       * ```
       *   function MyClass() {
       *     var _this = _super.apply(this, arguments) || this;
       * ```
       *
       * ```
       *   function MyClass() {
       *     var _this = _super.apply(this, __spread(arguments)) || this;
       * ```
       *
       * More details can be found in: https://github.com/angular/angular/issues/38453.
       */


      var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|[^()]+\(arguments\))\)/;
      /** Regular expression that detects ES2015 classes which extend from other classes. */

      var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
      /**
       * Regular expression that detects ES2015 classes which extend from other classes and
       * have an explicit constructor defined.
       */

      var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
      /**
       * Regular expression that detects ES2015 classes which extend from other classes
       * and inherit a constructor.
       */

      var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s*super\(\.\.\.arguments\)/;
      /**
       * Determine whether a stringified type is a class which delegates its constructor
       * to its parent.
       *
       * This is not trivial since compiled code can actually contain a constructor function
       * even if the original source code did not. For instance, when the child class contains
       * an initialized instance property.
       */

      function isDelegateCtor(typeStr) {
        return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
      }

      var ReflectionCapabilities = /*#__PURE__*/function () {
        function ReflectionCapabilities(reflect) {
          _classCallCheck(this, ReflectionCapabilities);

          this._reflect = reflect || _global['Reflect'];
        }

        _createClass2(ReflectionCapabilities, [{
          key: "isReflectionEnabled",
          value: function isReflectionEnabled() {
            return true;
          }
        }, {
          key: "factory",
          value: function factory(t) {
            return function () {
              for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {
                args[_key33] = arguments[_key33];
              }

              return _construct(t, args);
            };
          }
          /** @internal */

        }, {
          key: "_zipTypesAndAnnotations",
          value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
            var result;

            if (typeof paramTypes === 'undefined') {
              result = newArray(paramAnnotations.length);
            } else {
              result = newArray(paramTypes.length);
            }

            for (var i = 0; i < result.length; i++) {
              // TS outputs Object for parameters without types, while Traceur omits
              // the annotations. For now we preserve the Traceur behavior to aid
              // migration, but this can be revisited.
              if (typeof paramTypes === 'undefined') {
                result[i] = [];
              } else if (paramTypes[i] && paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
              } else {
                result[i] = [];
              }

              if (paramAnnotations && paramAnnotations[i] != null) {
                result[i] = result[i].concat(paramAnnotations[i]);
              }
            }

            return result;
          }
        }, {
          key: "_ownParameters",
          value: function _ownParameters(type, parentCtor) {
            var typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.
            // In that case, to detect whether a child class declared an own constructor or not,
            // we need to look inside of that constructor to check whether it is
            // just calling the parent.
            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
            // that sets 'design:paramtypes' to []
            // if a class inherits from another class but has no ctor declared itself.

            if (isDelegateCtor(typeStr)) {
              return null;
            } // Prefer the direct API.


            if (type.parameters && type.parameters !== parentCtor.parameters) {
              return type.parameters;
            } // API of tsickle for lowering decorators to properties on the class.


            var tsickleCtorParams = type.ctorParameters;

            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
              // Newer tsickle uses a function closure
              // Retain the non-function case for compatibility with older tsickle
              var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;

              var _paramTypes = ctorParameters.map(function (ctorParam) {
                return ctorParam && ctorParam.type;
              });

              var _paramAnnotations = ctorParameters.map(function (ctorParam) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
              });

              return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);
            } // API for metadata created by invoking the decorators.


            var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];

            var paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);

            if (paramTypes || paramAnnotations) {
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            } // If a class has no decorators, at least create metadata
            // based on function.length.
            // Note: We know that this is a real constructor as we checked
            // the content of the constructor above.


            return newArray(type.length);
          }
        }, {
          key: "parameters",
          value: function parameters(type) {
            // Note: only report metadata if we have at least one class decorator
            // to stay in sync with the static reflector.
            if (!isType(type)) {
              return [];
            }

            var parentCtor = getParentCtor(type);

            var parameters = this._ownParameters(type, parentCtor);

            if (!parameters && parentCtor !== Object) {
              parameters = this.parameters(parentCtor);
            }

            return parameters || [];
          }
        }, {
          key: "_ownAnnotations",
          value: function _ownAnnotations(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
              var annotations = typeOrFunc.annotations;

              if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
              }

              return annotations;
            } // API of tsickle for lowering decorators to properties on the class.


            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
              return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
            } // API for metadata created by invoking the decorators.


            if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
              return typeOrFunc[ANNOTATIONS];
            }

            return null;
          }
        }, {
          key: "annotations",
          value: function annotations(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return [];
            }

            var parentCtor = getParentCtor(typeOrFunc);
            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
            return parentAnnotations.concat(ownAnnotations);
          }
        }, {
          key: "_ownPropMetadata",
          value: function _ownPropMetadata(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
              var propMetadata = typeOrFunc.propMetadata;

              if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
              }

              return propMetadata;
            } // API of tsickle for lowering decorators to properties on the class.


            if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
              var propDecorators = typeOrFunc.propDecorators;
              var _propMetadata = {};
              Object.keys(propDecorators).forEach(function (prop) {
                _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
              });
              return _propMetadata;
            } // API for metadata created by invoking the decorators.


            if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
              return typeOrFunc[PROP_METADATA];
            }

            return null;
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return {};
            }

            var parentCtor = getParentCtor(typeOrFunc);
            var propMetadata = {};

            if (parentCtor !== Object) {
              var parentPropMetadata = this.propMetadata(parentCtor);
              Object.keys(parentPropMetadata).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata[propName];
              });
            }

            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);

            if (ownPropMetadata) {
              Object.keys(ownPropMetadata).forEach(function (propName) {
                var decorators = [];

                if (propMetadata.hasOwnProperty(propName)) {
                  decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
                }

                decorators.push.apply(decorators, _toConsumableArray(ownPropMetadata[propName]));
                propMetadata[propName] = decorators;
              });
            }

            return propMetadata;
          }
        }, {
          key: "ownPropMetadata",
          value: function ownPropMetadata(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return {};
            }

            return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            return type instanceof Type && lcProperty in type.prototype;
          }
        }, {
          key: "guards",
          value: function guards(type) {
            return {};
          }
        }, {
          key: "getter",
          value: function getter(name) {
            return new Function('o', 'return o.' + name + ';');
          }
        }, {
          key: "setter",
          value: function setter(name) {
            return new Function('o', 'v', 'return o.' + name + ' = v;');
          }
        }, {
          key: "method",
          value: function method(name) {
            var functionBody = "if (!o.".concat(name, ") throw new Error('\"").concat(name, "\" is undefined');\n        return o.").concat(name, ".apply(o, args);");
            return new Function('o', 'args', functionBody);
          } // There is not a concept of import uri in Js, but this is useful in developing Dart applications.

        }, {
          key: "importUri",
          value: function importUri(type) {
            // StaticSymbol
            if (typeof type === 'object' && type['filePath']) {
              return type['filePath'];
            } // Runtime type


            return "./".concat(stringify(type));
          }
        }, {
          key: "resourceUri",
          value: function resourceUri(type) {
            return "./".concat(stringify(type));
          }
        }, {
          key: "resolveIdentifier",
          value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return runtime;
          }
        }, {
          key: "resolveEnum",
          value: function resolveEnum(enumIdentifier, name) {
            return enumIdentifier[name];
          }
        }]);

        return ReflectionCapabilities;
      }();

      function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
          return [];
        }

        return decoratorInvocations.map(function (decoratorInvocation) {
          var decoratorType = decoratorInvocation.type;
          var annotationCls = decoratorType.annotationCls;
          var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
          return _construct(annotationCls, _toConsumableArray(annotationArgs));
        });
      }

      function getParentCtor(ctor) {
        var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
        var parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value
        // to simplify checking later on.

        return parentCtor || Object;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _THROW_IF_NOT_FOUND = {};
      var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
      /*
       * Name of a property (that we patch onto DI decorator), which is used as an annotation of which
       * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators
       * in the code, thus making them tree-shakable.
       */

      var DI_DECORATOR_FLAG = '__NG_DI_FLAG__';
      var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
      var NG_TOKEN_PATH = 'ngTokenPath';
      var NEW_LINE = /\n/gm;
      var NO_NEW_LINE = 'ɵ';
      var SOURCE = '__source';
      var ɵ0$2 = getClosureSafeProperty;
      var USE_VALUE = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$2
      });
      /**
       * Current injector value used by `inject`.
       * - `undefined`: it is an error to call `inject`
       * - `null`: `inject` can be called but there is no injector (limp-mode).
       * - Injector instance: Use the injector for resolution.
       */

      var _currentInjector = undefined;

      function setCurrentInjector(injector) {
        var former = _currentInjector;
        _currentInjector = injector;
        return former;
      }

      function injectInjectorOnly(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;

        if (_currentInjector === undefined) {
          throw new Error("inject() must be called from an injection context");
        } else if (_currentInjector === null) {
          return injectRootLimpMode(token, undefined, flags);
        } else {
          return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
        }
      }

      function ɵɵinject(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
        return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
      }
      /**
       * Throws an error indicating that a factory function could not be generated by the compiler for a
       * particular class.
       *
       * This instruction allows the actual error message to be optimized away when ngDevMode is turned
       * off, saving bytes of generated code while still providing a good experience in dev mode.
       *
       * The name of the class is not mentioned here, but will be in the generated factory function name
       * and thus in the stack trace.
       *
       * @codeGenApi
       */


      function ɵɵinvalidFactoryDep(index) {
        var msg = ngDevMode ? "This constructor is not compatible with Angular Dependency Injection because its dependency at index ".concat(index, " of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ").concat(index, " is correct and 2) the correct Angular decorators are defined for this class and its ancestors.") : 'invalid';
        throw new Error(msg);
      }
      /**
       * Injects a token from the currently active injector.
       *
       * Must be used in the context of a factory function such as one defined for an
       * `InjectionToken`. Throws an error if not called from such a context.
       *
       * Within such a factory function, using this function to request injection of a dependency
       * is faster and more type-safe than providing an additional array of dependencies
       * (as has been common with `useFactory` providers).
       *
       * @param token The injection token for the dependency to be injected.
       * @param flags Optional flags that control how injection is executed.
       * The flags correspond to injection strategies that can be specified with
       * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
       * @returns the injected value if injection is successful, `null` otherwise.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
       *
       * @publicApi
       */


      var inject = ɵɵinject;

      function injectArgs(types) {
        var args = [];

        for (var i = 0; i < types.length; i++) {
          var arg = resolveForwardRef(types[i]);

          if (Array.isArray(arg)) {
            if (arg.length === 0) {
              throw new Error('Arguments array must have arguments.');
            }

            var type = undefined;
            var flags = InjectFlags.Default;

            for (var j = 0; j < arg.length; j++) {
              var meta = arg[j];
              var flag = getInjectFlag(meta);

              if (typeof flag === 'number') {
                // Special case when we handle @Inject decorator.
                if (flag === -1
                /* Inject */
                ) {
                    type = meta.token;
                  } else {
                  flags |= flag;
                }
              } else {
                type = meta;
              }
            }

            args.push(ɵɵinject(type, flags));
          } else {
            args.push(ɵɵinject(arg));
          }
        }

        return args;
      }
      /**
       * Attaches a given InjectFlag to a given decorator using monkey-patching.
       * Since DI decorators can be used in providers `deps` array (when provider is configured using
       * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we
       * attach the flag to make it available both as a static property and as a field on decorator
       * instance.
       *
       * @param decorator Provided DI decorator.
       * @param flag InjectFlag that should be applied.
       */


      function attachInjectFlag(decorator, flag) {
        decorator[DI_DECORATOR_FLAG] = flag;
        decorator.prototype[DI_DECORATOR_FLAG] = flag;
        return decorator;
      }
      /**
       * Reads monkey-patched property that contains InjectFlag attached to a decorator.
       *
       * @param token Token that may contain monkey-patched DI flags property.
       */


      function getInjectFlag(token) {
        return token[DI_DECORATOR_FLAG];
      }

      function catchInjectorError(e, token, injectorErrorName, source) {
        var tokenPath = e[NG_TEMP_TOKEN_PATH];

        if (token[SOURCE]) {
          tokenPath.unshift(token[SOURCE]);
        }

        e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
        e[NG_TOKEN_PATH] = tokenPath;
        e[NG_TEMP_TOKEN_PATH] = null;
        throw e;
      }

      function formatError(text, obj, injectorErrorName) {
        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
        var context = stringify(obj);

        if (Array.isArray(obj)) {
          context = obj.map(stringify).join(' -> ');
        } else if (typeof obj === 'object') {
          var parts = [];

          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              var value = obj[key];
              parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
            }
          }

          context = "{".concat(parts.join(', '), "}");
        }

        return "".concat(injectorErrorName).concat(source ? '(' + source + ')' : '', "[").concat(context, "]: ").concat(text.replace(NEW_LINE, '\n  '));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$3 = function ɵ0$3(token) {
        return {
          token: token
        };
      };
      /**
       * Inject decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var Inject = attachInjectFlag( // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      makeParamDecorator('Inject', ɵ0$3), -1
      /* Inject */
      );
      /**
       * Optional decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Optional'), 8
      /* Optional */
      );
      /**
       * Self decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Self'), 2
      /* Self */
      );
      /**
       * `SkipSelf` decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('SkipSelf'), 4
      /* SkipSelf */
      );
      /**
       * Host decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Host'), 1
      /* Host */
      );
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var _reflect = null;

      function getReflect() {
        return _reflect = _reflect || new ReflectionCapabilities();
      }

      function reflectDependencies(type) {
        return convertDependencies(getReflect().parameters(type));
      }

      function convertDependencies(deps) {
        var compiler = getCompilerFacade();
        return deps.map(function (dep) {
          return reflectDependency(compiler, dep);
        });
      }

      function reflectDependency(compiler, dep) {
        var meta = {
          token: null,
          host: false,
          optional: false,
          resolved: compiler.R3ResolvedDependencyType.Token,
          self: false,
          skipSelf: false
        };

        function setTokenAndResolvedType(token) {
          meta.resolved = compiler.R3ResolvedDependencyType.Token;
          meta.token = token;
        }

        if (Array.isArray(dep) && dep.length > 0) {
          for (var j = 0; j < dep.length; j++) {
            var param = dep[j];

            if (param === undefined) {
              // param may be undefined if type of dep is not set by ngtsc
              continue;
            }

            var proto = Object.getPrototypeOf(param);

            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
              meta.optional = true;
            } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
              meta.skipSelf = true;
            } else if (param instanceof Self || proto.ngMetadataName === 'Self') {
              meta.self = true;
            } else if (param instanceof Host || proto.ngMetadataName === 'Host') {
              meta.host = true;
            } else if (param instanceof Inject) {
              meta.token = param.token;
            } else if (param instanceof Attribute) {
              if (param.attributeName === undefined) {
                throw new Error("Attribute name must be defined.");
              }

              meta.token = param.attributeName;
              meta.resolved = compiler.R3ResolvedDependencyType.Attribute;
            } else if (param.__ChangeDetectorRef__ === true) {
              meta.token = param;
              meta.resolved = compiler.R3ResolvedDependencyType.ChangeDetectorRef;
            } else {
              setTokenAndResolvedType(param);
            }
          }
        } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {
          meta.token = undefined;
          meta.resolved = R3ResolvedDependencyType.Invalid;
        } else {
          setTokenAndResolvedType(dep);
        }

        return meta;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to resolve resource URLs on `@Component` when used with JIT compilation.
       *
       * Example:
       * ```
       * @Component({
       *   selector: 'my-comp',
       *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
       * })
       * class MyComponent{
       * }
       *
       * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
       * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
       *
       * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
       * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
       *
       * // Use browser's `fetch()` function as the default resource resolution strategy.
       * resolveComponentResources(fetch).then(() => {
       *   // After resolution all URLs have been converted into `template` strings.
       *   renderComponent(MyComponent);
       * });
       *
       * ```
       *
       * NOTE: In AOT the resolution happens during compilation, and so there should be no need
       * to call this method outside JIT mode.
       *
       * @param resourceResolver a function which is responsible for returning a `Promise` to the
       * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
       */


      function resolveComponentResources(resourceResolver) {
        // Store all promises which are fetching the resources.
        var componentResolved = []; // Cache so that we don't fetch the same resource more than once.

        var urlMap = new Map();

        function cachedResourceResolve(url) {
          var promise = urlMap.get(url);

          if (!promise) {
            var resp = resourceResolver(url);
            urlMap.set(url, promise = resp.then(unwrapResponse));
          }

          return promise;
        }

        componentResourceResolutionQueue.forEach(function (component, type) {
          var promises = [];

          if (component.templateUrl) {
            promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {
              component.template = template;
            }));
          }

          var styleUrls = component.styleUrls;
          var styles = component.styles || (component.styles = []);
          var styleOffset = component.styles.length;
          styleUrls && styleUrls.forEach(function (styleUrl, index) {
            styles.push(''); // pre-allocate array.

            promises.push(cachedResourceResolve(styleUrl).then(function (style) {
              styles[styleOffset + index] = style;
              styleUrls.splice(styleUrls.indexOf(styleUrl), 1);

              if (styleUrls.length == 0) {
                component.styleUrls = undefined;
              }
            }));
          });
          var fullyResolved = Promise.all(promises).then(function () {
            return componentDefResolved(type);
          });
          componentResolved.push(fullyResolved);
        });
        clearResolutionOfComponentResourcesQueue();
        return Promise.all(componentResolved).then(function () {
          return undefined;
        });
      }

      var componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.

      var componentDefPendingResolution = new Set();

      function maybeQueueResolutionOfComponentResources(type, metadata) {
        if (componentNeedsResolution(metadata)) {
          componentResourceResolutionQueue.set(type, metadata);
          componentDefPendingResolution.add(type);
        }
      }

      function isComponentDefPendingResolution(type) {
        return componentDefPendingResolution.has(type);
      }

      function componentNeedsResolution(component) {
        return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);
      }

      function clearResolutionOfComponentResourcesQueue() {
        var old = componentResourceResolutionQueue;
        componentResourceResolutionQueue = new Map();
        return old;
      }

      function restoreComponentResolutionQueue(queue) {
        componentDefPendingResolution.clear();
        queue.forEach(function (_, type) {
          return componentDefPendingResolution.add(type);
        });
        componentResourceResolutionQueue = queue;
      }

      function isComponentResourceResolutionQueueEmpty() {
        return componentResourceResolutionQueue.size === 0;
      }

      function unwrapResponse(response) {
        return typeof response == 'string' ? response : response.text();
      }

      function componentDefResolved(type) {
        componentDefPendingResolution["delete"](type);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var policy;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy() {
        if (policy === undefined) {
          policy = null;

          if (_global.trustedTypes) {
            try {
              policy = _global.trustedTypes.createPolicy('angular', {
                createHTML: function createHTML(s) {
                  return s;
                },
                createScript: function createScript(s) {
                  return s;
                },
                createScriptURL: function createScriptURL(s) {
                  return s;
                }
              });
            } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
              // already registered, even in report-only mode. Until the API changes,
              // catch the error not to break the applications functionally. In such
              // cases, the code will fall back to using strings.
            }
          }
        }

        return policy;
      }
      /**
       * Unsafely promote a string to a TrustedHTML, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that the
       * provided string will never cause an XSS vulnerability if used in a context
       * that will be interpreted as HTML by a browser, e.g. when assigning to
       * element.innerHTML.
       */


      function trustedHTMLFromString(html) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
      }
      /**
       * Unsafely promote a string to a TrustedScript, falling back to strings when
       * Trusted Types are not available.
       * @security In particular, it must be assured that the provided string will
       * never cause an XSS vulnerability if used in a context that will be
       * interpreted and executed as a script by a browser, e.g. when calling eval.
       */


      function trustedScriptFromString(script) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
      }
      /**
       * Unsafely promote a string to a TrustedScriptURL, falling back to strings
       * when Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that the
       * provided string will never cause an XSS vulnerability if used in a context
       * that will cause a browser to load and execute a resource, e.g. when
       * assigning to script.src.
       */


      function trustedScriptURLFromString(url) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
      }
      /**
       * Unsafely call the Function constructor with the given string arguments. It
       * is only available in development mode, and should be stripped out of
       * production code.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only called from development code, as use in production code can lead to
       * XSS vulnerabilities.
       */


      function newTrustedFunctionForDev() {
        if (typeof ngDevMode === 'undefined') {
          throw new Error('newTrustedFunctionForDev should never be called in production');
        }

        for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {
          args[_key34] = arguments[_key34];
        }

        if (!_global.trustedTypes) {
          // In environments that don't support Trusted Types, fall back to the most
          // straightforward implementation:
          return _construct(Function, args);
        } // Chrome currently does not support passing TrustedScript to the Function
        // constructor. The following implements the workaround proposed on the page
        // below, where the Chromium bug is also referenced:
        // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor


        var fnArgs = args.slice(0, -1).join(',');
        var fnBody = args[args.length - 1];
        var body = "(function anonymous(".concat(fnArgs, "\n) { ").concat(fnBody, "\n})"); // Using eval directly confuses the compiler and prevents this module from
        // being stripped out of JS binaries even if not used. The global['eval']
        // indirection fixes that.

        var fn = _global['eval'](trustedScriptFromString(body));

        if (fn.bind === undefined) {
          // Workaround for a browser bug that only exists in Chrome 83, where passing
          // a TrustedScript to eval just returns the TrustedScript back without
          // evaluating it. In that case, fall back to the most straightforward
          // implementation:
          return _construct(Function, args);
        } // To completely mimic the behavior of calling "new Function", two more
        // things need to happen:
        // 1. Stringifying the resulting function should return its source code


        fn.toString = function () {
          return body;
        }; // 2. When calling the resulting function, `this` should refer to `global`


        return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,
        // the implementation of this function can be simplified to:
        // return new Function(...args.map(a => trustedScriptFromString(a)));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var policy$1;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy$1() {
        if (policy$1 === undefined) {
          policy$1 = null;

          if (_global.trustedTypes) {
            try {
              policy$1 = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {
                createHTML: function createHTML(s) {
                  return s;
                },
                createScript: function createScript(s) {
                  return s;
                },
                createScriptURL: function createScriptURL(s) {
                  return s;
                }
              });
            } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
              // already registered, even in report-only mode. Until the API changes,
              // catch the error not to break the applications functionally. In such
              // cases, the code will fall back to using strings.
            }
          }
        }

        return policy$1;
      }
      /**
       * Unsafely promote a string to a TrustedHTML, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedHTMLFromStringBypass(html) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
      }
      /**
       * Unsafely promote a string to a TrustedScript, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedScriptFromStringBypass(script) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
      }
      /**
       * Unsafely promote a string to a TrustedScriptURL, falling back to strings
       * when Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedScriptURLFromStringBypass(url) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SafeValueImpl = /*#__PURE__*/function () {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
          _classCallCheck(this, SafeValueImpl);

          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }

        _createClass2(SafeValueImpl, [{
          key: "toString",
          value: function toString() {
            return "SafeValue must use [property]=binding: ".concat(this.changingThisBreaksApplicationSecurity) + " (see https://g.co/ng/security#xss)";
          }
        }]);

        return SafeValueImpl;
      }();

      var SafeHtmlImpl = /*#__PURE__*/function (_SafeValueImpl) {
        _inherits(SafeHtmlImpl, _SafeValueImpl);

        var _super112 = _createSuper(SafeHtmlImpl);

        function SafeHtmlImpl() {
          _classCallCheck(this, SafeHtmlImpl);

          return _super112.apply(this, arguments);
        }

        _createClass2(SafeHtmlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "HTML"
            /* Html */
            ;
          }
        }]);

        return SafeHtmlImpl;
      }(SafeValueImpl);

      var SafeStyleImpl = /*#__PURE__*/function (_SafeValueImpl2) {
        _inherits(SafeStyleImpl, _SafeValueImpl2);

        var _super113 = _createSuper(SafeStyleImpl);

        function SafeStyleImpl() {
          _classCallCheck(this, SafeStyleImpl);

          return _super113.apply(this, arguments);
        }

        _createClass2(SafeStyleImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "Style"
            /* Style */
            ;
          }
        }]);

        return SafeStyleImpl;
      }(SafeValueImpl);

      var SafeScriptImpl = /*#__PURE__*/function (_SafeValueImpl3) {
        _inherits(SafeScriptImpl, _SafeValueImpl3);

        var _super114 = _createSuper(SafeScriptImpl);

        function SafeScriptImpl() {
          _classCallCheck(this, SafeScriptImpl);

          return _super114.apply(this, arguments);
        }

        _createClass2(SafeScriptImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "Script"
            /* Script */
            ;
          }
        }]);

        return SafeScriptImpl;
      }(SafeValueImpl);

      var SafeUrlImpl = /*#__PURE__*/function (_SafeValueImpl4) {
        _inherits(SafeUrlImpl, _SafeValueImpl4);

        var _super115 = _createSuper(SafeUrlImpl);

        function SafeUrlImpl() {
          _classCallCheck(this, SafeUrlImpl);

          return _super115.apply(this, arguments);
        }

        _createClass2(SafeUrlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "URL"
            /* Url */
            ;
          }
        }]);

        return SafeUrlImpl;
      }(SafeValueImpl);

      var SafeResourceUrlImpl = /*#__PURE__*/function (_SafeValueImpl5) {
        _inherits(SafeResourceUrlImpl, _SafeValueImpl5);

        var _super116 = _createSuper(SafeResourceUrlImpl);

        function SafeResourceUrlImpl() {
          _classCallCheck(this, SafeResourceUrlImpl);

          return _super116.apply(this, arguments);
        }

        _createClass2(SafeResourceUrlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "ResourceURL"
            /* ResourceUrl */
            ;
          }
        }]);

        return SafeResourceUrlImpl;
      }(SafeValueImpl);

      function unwrapSafeValue(value) {
        return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
      }

      function allowSanitizationBypassAndThrow(value, type) {
        var actualType = getSanitizationBypassType(value);

        if (actualType != null && actualType !== type) {
          // Allow ResourceURLs in URL contexts, they are strictly more trusted.
          if (actualType === "ResourceURL"
          /* ResourceUrl */
          && type === "URL"
          /* Url */
          ) return true;
          throw new Error("Required a safe ".concat(type, ", got a ").concat(actualType, " (see https://g.co/ng/security#xss)"));
        }

        return actualType === type;
      }

      function getSanitizationBypassType(value) {
        return value instanceof SafeValueImpl && value.getTypeName() || null;
      }
      /**
       * Mark `html` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link htmlSanitizer} to be trusted implicitly.
       *
       * @param trustedHtml `html` string which needs to be implicitly trusted.
       * @returns a `html` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustHtml(trustedHtml) {
        return new SafeHtmlImpl(trustedHtml);
      }
      /**
       * Mark `style` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link styleSanitizer} to be trusted implicitly.
       *
       * @param trustedStyle `style` string which needs to be implicitly trusted.
       * @returns a `style` hich has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustStyle(trustedStyle) {
        return new SafeStyleImpl(trustedStyle);
      }
      /**
       * Mark `script` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link scriptSanitizer} to be trusted implicitly.
       *
       * @param trustedScript `script` string which needs to be implicitly trusted.
       * @returns a `script` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustScript(trustedScript) {
        return new SafeScriptImpl(trustedScript);
      }
      /**
       * Mark `url` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link urlSanitizer} to be trusted implicitly.
       *
       * @param trustedUrl `url` string which needs to be implicitly trusted.
       * @returns a `url`  which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustUrl(trustedUrl) {
        return new SafeUrlImpl(trustedUrl);
      }
      /**
       * Mark `url` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
       *
       * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
       * @returns a `url` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
        return new SafeResourceUrlImpl(trustedResourceUrl);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
       * that needs sanitizing.
       * Depending upon browser support we use one of two strategies for doing this.
       * Default: DOMParser strategy
       * Fallback: InertDocument strategy
       */


      function getInertBodyHelper(defaultDoc) {
        var inertDocumentHelper = new InertDocumentHelper(defaultDoc);
        return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
      }
      /**
       * Uses DOMParser to create and fill an inert body element.
       * This is the default strategy used in browsers that support it.
       */


      var DOMParserHelper = /*#__PURE__*/function () {
        function DOMParserHelper(inertDocumentHelper) {
          _classCallCheck(this, DOMParserHelper);

          this.inertDocumentHelper = inertDocumentHelper;
        }

        _createClass2(DOMParserHelper, [{
          key: "getInertBodyElement",
          value: function getInertBodyElement(html) {
            // We add these extra elements to ensure that the rest of the content is parsed as expected
            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
            // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags
            // in `html` from consuming the otherwise explicit `</body>` tag.
            html = '<body><remove></remove>' + html;

            try {
              var body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;

              if (body === null) {
                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only
                // becomes available in the following tick of the JS engine. In that case we fall back to
                // the `inertDocumentHelper` instead.
                return this.inertDocumentHelper.getInertBodyElement(html);
              }

              body.removeChild(body.firstChild);
              return body;
            } catch (_a) {
              return null;
            }
          }
        }]);

        return DOMParserHelper;
      }();
      /**
       * Use an HTML5 `template` element, if supported, or an inert body element created via
       * `createHtmlDocument` to create and fill an inert DOM element.
       * This is the fallback strategy if the browser does not support DOMParser.
       */


      var InertDocumentHelper = /*#__PURE__*/function () {
        function InertDocumentHelper(defaultDoc) {
          _classCallCheck(this, InertDocumentHelper);

          this.defaultDoc = defaultDoc;
          this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');

          if (this.inertDocument.body == null) {
            // usually there should be only one body element in the document, but IE doesn't have any, so
            // we need to create one.
            var inertHtml = this.inertDocument.createElement('html');
            this.inertDocument.appendChild(inertHtml);
            var inertBodyElement = this.inertDocument.createElement('body');
            inertHtml.appendChild(inertBodyElement);
          }
        }

        _createClass2(InertDocumentHelper, [{
          key: "getInertBodyElement",
          value: function getInertBodyElement(html) {
            // Prefer using <template> element if supported.
            var templateEl = this.inertDocument.createElement('template');

            if ('content' in templateEl) {
              templateEl.innerHTML = trustedHTMLFromString(html);
              return templateEl;
            } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
            // and we returned the inert `body` node. This was changed, because IE seems to treat setting
            // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
            // yet. In particular, IE appears to split some of the text into multiple text nodes rather
            // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
            // down the line. This has been worked around by creating a new inert `body` and using it as
            // the root node in which we insert the HTML.


            var inertBody = this.inertDocument.createElement('body');
            inertBody.innerHTML = trustedHTMLFromString(html); // Support: IE 11 only
            // strip custom-namespaced attributes on IE<=11

            if (this.defaultDoc.documentMode) {
              this.stripCustomNsAttrs(inertBody);
            }

            return inertBody;
          }
          /**
           * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
           * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
           * 'ns1:xlink:foo').
           *
           * This is undesirable since we don't want to allow any of these custom attributes. This method
           * strips them all.
           */

        }, {
          key: "stripCustomNsAttrs",
          value: function stripCustomNsAttrs(el) {
            var elAttrs = el.attributes; // loop backwards so that we can support removals.

            for (var i = elAttrs.length - 1; 0 < i; i--) {
              var attrib = elAttrs.item(i);
              var attrName = attrib.name;

              if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                el.removeAttribute(attrName);
              }
            }

            var childNode = el.firstChild;

            while (childNode) {
              if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);
              childNode = childNode.nextSibling;
            }
          }
        }]);

        return InertDocumentHelper;
      }();
      /**
       * We need to determine whether the DOMParser exists in the global context and
       * supports parsing HTML; HTML parsing support is not as wide as other formats, see
       * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
       *
       * @suppress {uselessCode}
       */


      function isDOMParserAvailable() {
        try {
          return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');
        } catch (_a) {
          return false;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A pattern that recognizes a commonly useful subset of URLs that are safe.
       *
       * This regular expression matches a subset of URLs that will not cause script
       * execution if used in URL context within a HTML document. Specifically, this
       * regular expression matches if (comment from here on and regex copied from
       * Soy's EscapingConventions):
       * (1) Either an allowed protocol (http, https, mailto or ftp).
       * (2) or no protocol.  A protocol must be followed by a colon. The below
       *     allows that by allowing colons only after one of the characters [/?#].
       *     A colon after a hash (#) must be in the fragment.
       *     Otherwise, a colon after a (?) must be in a query.
       *     Otherwise, a colon after a single solidus (/) must be in a path.
       *     Otherwise, a colon after a double solidus (//) must be in the authority
       *     (before port).
       *
       * The pattern disallows &, used in HTML entity declarations before
       * one of the characters in [/?#]. This disallows HTML entities used in the
       * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
       * It also disallows HTML entities in the first path part of a relative path,
       * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
       * that. More importantly, it disallows masking of a colon,
       * e.g. "javascript&#58;...".
       *
       * This regular expression was taken from the Closure sanitization library.
       */


      var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
      /* A pattern that matches safe srcset values */

      var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
      /** A pattern that matches safe data URLs. Only matches image, video and audio types. */

      var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;

      function _sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;

        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          console.warn("WARNING: sanitizing unsafe URL value ".concat(url, " (see https://g.co/ng/security#xss)"));
        }

        return 'unsafe:' + url;
      }

      function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) {
          return _sanitizeUrl(srcset.trim());
        }).join(', ');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function tagSet(tags) {
        var res = {};

        var _iterator4 = _createForOfIteratorHelper(tags.split(',')),
            _step3;

        try {
          for (_iterator4.s(); !(_step3 = _iterator4.n()).done;) {
            var t = _step3.value;
            res[t] = true;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return res;
      }

      function merge() {
        var res = {};

        for (var _len35 = arguments.length, sets = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {
          sets[_key35] = arguments[_key35];
        }

        for (var _i7 = 0, _sets = sets; _i7 < _sets.length; _i7++) {
          var s = _sets[_i7];

          for (var v in s) {
            if (s.hasOwnProperty(v)) res[v] = true;
          }
        }

        return res;
      } // Good source of info about elements and attributes
      // https://html.spec.whatwg.org/#semantics
      // https://simon.html5.org/html-elements
      // Safe Void Elements - HTML5
      // https://html.spec.whatwg.org/#void-elements


      var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
      // https://html.spec.whatwg.org/#optional-tags

      var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
      var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
      var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5

      var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5

      var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
      var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized

      var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href'); // Attributes that have special href set hence need to be sanitized

      var SRCSET_ATTRS = tagSet('srcset');
      var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)

      var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
      // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
      // innerHTML is required, SVG attributes should be added here.
      // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
      // can be sanitized, but they increase security surface area without a legitimate use case, so they
      // are left out here.

      var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
      //
      // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
      // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
      // don't want to preserve the content, if the elements themselves are going to be removed.

      var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
      /**
       * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
       * attributes.
       */

      var SanitizingHtmlSerializer = /*#__PURE__*/function () {
        function SanitizingHtmlSerializer() {
          _classCallCheck(this, SanitizingHtmlSerializer);

          // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
          // because characters were re-encoded.
          this.sanitizedSomething = false;
          this.buf = [];
        }

        _createClass2(SanitizingHtmlSerializer, [{
          key: "sanitizeChildren",
          value: function sanitizeChildren(el) {
            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
            // However this code never accesses properties off of `document` before deleting its contents
            // again, so it shouldn't be vulnerable to DOM clobbering.
            var current = el.firstChild;
            var traverseContent = true;

            while (current) {
              if (current.nodeType === Node.ELEMENT_NODE) {
                traverseContent = this.startElement(current);
              } else if (current.nodeType === Node.TEXT_NODE) {
                this.chars(current.nodeValue);
              } else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
              }

              if (traverseContent && current.firstChild) {
                current = current.firstChild;
                continue;
              }

              while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (current.nodeType === Node.ELEMENT_NODE) {
                  this.endElement(current);
                }

                var next = this.checkClobberedElement(current, current.nextSibling);

                if (next) {
                  current = next;
                  break;
                }

                current = this.checkClobberedElement(current, current.parentNode);
              }
            }

            return this.buf.join('');
          }
          /**
           * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
           * be traversed. Element content must always be traversed (even if the element itself is not
           * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
           *
           * @param element The element to sanitize.
           * @return True if the element's contents should be traversed.
           */

        }, {
          key: "startElement",
          value: function startElement(element) {
            var tagName = element.nodeName.toLowerCase();

            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
              this.sanitizedSomething = true;
              return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
            }

            this.buf.push('<');
            this.buf.push(tagName);
            var elAttrs = element.attributes;

            for (var i = 0; i < elAttrs.length; i++) {
              var elAttr = elAttrs.item(i);
              var attrName = elAttr.name;
              var lower = attrName.toLowerCase();

              if (!VALID_ATTRS.hasOwnProperty(lower)) {
                this.sanitizedSomething = true;
                continue;
              }

              var value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...

              if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
              if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
              this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
            }

            this.buf.push('>');
            return true;
          }
        }, {
          key: "endElement",
          value: function endElement(current) {
            var tagName = current.nodeName.toLowerCase();

            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
              this.buf.push('</');
              this.buf.push(tagName);
              this.buf.push('>');
            }
          }
        }, {
          key: "chars",
          value: function chars(_chars) {
            this.buf.push(encodeEntities(_chars));
          }
        }, {
          key: "checkClobberedElement",
          value: function checkClobberedElement(node, nextNode) {
            if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
              throw new Error("Failed to sanitize html because the element is clobbered: ".concat(node.outerHTML));
            }

            return nextNode;
          }
        }]);

        return SanitizingHtmlSerializer;
      }(); // Regular Expressions for parsing tags and attributes


      var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // ! to ~ is the ASCII range.

      var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
      /**
       * Escapes all potentially dangerous characters, so that the
       * resulting string can be safely inserted into attribute or
       * element text.
       * @param value
       */

      function encodeEntities(value) {
        return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
          var hi = match.charCodeAt(0);
          var low = match.charCodeAt(1);
          return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
        }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
          return '&#' + match.charCodeAt(0) + ';';
        }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
      }

      var inertBodyHelper;
      /**
       * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
       * the DOM in a browser environment.
       */

      function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
        var inertBodyElement = null;

        try {
          inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).

          var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
          inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
          // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.

          var mXSSAttempts = 5;
          var parsedHtml = unsafeHtml;

          do {
            if (mXSSAttempts === 0) {
              throw new Error('Failed to sanitize html because the input is unstable');
            }

            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            parsedHtml = inertBodyElement.innerHTML;
            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
          } while (unsafeHtml !== parsedHtml);

          var sanitizer = new SanitizingHtmlSerializer();
          var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);

          if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {
            console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');
          }

          return trustedHTMLFromString(safeHtml);
        } finally {
          // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
          if (inertBodyElement) {
            var parent = getTemplateContent(inertBodyElement) || inertBodyElement;

            while (parent.firstChild) {
              parent.removeChild(parent.firstChild);
            }
          }
        }
      }

      function getTemplateContent(el) {
        return 'content' in el
        /** Microsoft/TypeScript#21517 */
        && isTemplateElement(el) ? el.content : null;
      }

      function isTemplateElement(el) {
        return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
       * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
       * handled.
       *
       * See DomSanitizer for more details on security in Angular applications.
       *
       * @publicApi
       */


      var SecurityContext;

      (function (SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(SecurityContext || (SecurityContext = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
       * dangerous content.
       *
       * This method parses the `html` and locates potentially dangerous content (such as urls and
       * javascript) and removes it.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
       *
       * @param unsafeHtml untrusted `html`, typically from the user.
       * @returns `html` string which is safe to display to user, because all of the dangerous javascript
       * and urls have been removed.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeHtml(unsafeHtml) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML"
        /* Html */
        )) {
          return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
        }

        return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
      }
      /**
       * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
       * dangerous content.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
       *
       * @param unsafeStyle untrusted `style`, typically from the user.
       * @returns `style` string which is safe to bind to the `style` properties.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeStyle(unsafeStyle) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
        }

        if (allowSanitizationBypassAndThrow(unsafeStyle, "Style"
        /* Style */
        )) {
          return unwrapSafeValue(unsafeStyle);
        }

        return renderStringify(unsafeStyle);
      }
      /**
       * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
       * dangerous
       * content.
       *
       * This method parses the `url` and locates potentially dangerous content (such as javascript) and
       * removes it.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
       *
       * @param unsafeUrl untrusted `url`, typically from the user.
       * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
       * all of the dangerous javascript has been removed.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeUrl(unsafeUrl) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
        }

        if (allowSanitizationBypassAndThrow(unsafeUrl, "URL"
        /* Url */
        )) {
          return unwrapSafeValue(unsafeUrl);
        }

        return _sanitizeUrl(renderStringify(unsafeUrl));
      }
      /**
       * A `url` sanitizer which only lets trusted `url`s through.
       *
       * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
       *
       * @param unsafeResourceUrl untrusted `url`, typically from the user.
       * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
       * only trusted `url`s have been allowed to pass.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL"
        /* ResourceUrl */
        )) {
          return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
        }

        throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');
      }
      /**
       * A `script` sanitizer which only lets trusted javascript through.
       *
       * This passes only `script`s marked trusted by calling {@link
       * bypassSanitizationTrustScript}.
       *
       * @param unsafeScript untrusted `script`, typically from the user.
       * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
       * because only trusted `scripts` have been allowed to pass.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeScript(unsafeScript) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeScript, "Script"
        /* Script */
        )) {
          return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
        }

        throw new Error('unsafe value used in a script context');
      }
      /**
       * A template tag function for promoting the associated constant literal to a
       * TrustedHTML. Interpolation is explicitly not allowed.
       *
       * @param html constant template literal containing trusted HTML.
       * @returns TrustedHTML wrapping `html`.
       *
       * @security This is a security-sensitive function and should only be used to
       * convert constant values of attributes and properties found in
       * application-provided Angular templates to TrustedHTML.
       *
       * @codeGenApi
       */


      function ɵɵtrustConstantHtml(html) {
        // The following runtime check ensures that the function was called as a
        // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation
        // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray
        // is an array with a `raw` property that is also an array. The associated
        // template literal has no interpolation if and only if the length of the
        // TemplateStringsArray is 1.
        if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
          throw new Error("Unexpected interpolation in trusted HTML constant: ".concat(html.join('?')));
        }

        return trustedHTMLFromString(html[0]);
      }
      /**
       * A template tag function for promoting the associated constant literal to a
       * TrustedScriptURL. Interpolation is explicitly not allowed.
       *
       * @param url constant template literal containing a trusted script URL.
       * @returns TrustedScriptURL wrapping `url`.
       *
       * @security This is a security-sensitive function and should only be used to
       * convert constant values of attributes and properties found in
       * application-provided Angular templates to TrustedScriptURL.
       *
       * @codeGenApi
       */


      function ɵɵtrustConstantResourceUrl(url) {
        // The following runtime check ensures that the function was called as a
        // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any
        // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A
        // TemplateStringsArray is an array with a `raw` property that is also an
        // array. The associated template literal has no interpolation if and only if
        // the length of the TemplateStringsArray is 1.
        if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
          throw new Error("Unexpected interpolation in trusted URL constant: ".concat(url.join('?')));
        }

        return trustedScriptURLFromString(url[0]);
      }
      /**
       * Detects which sanitizer to use for URL property, based on tag name and prop name.
       *
       * The rules are based on the RESOURCE_URL context config from
       * `packages/compiler/src/schema/dom_security_schema.ts`.
       * If tag and prop names don't match Resource URL schema, use URL sanitizer.
       */


      function getUrlSanitizer(tag, prop) {
        if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {
          return ɵɵsanitizeResourceUrl;
        }

        return ɵɵsanitizeUrl;
      }
      /**
       * Sanitizes URL, selecting sanitizer function based on tag and property names.
       *
       * This function is used in case we can't define security context at compile time, when only prop
       * name is available. This happens when we generate host bindings for Directives/Components. The
       * host element is unknown at compile time, so we defer calculation of specific sanitizer to
       * runtime.
       *
       * @param unsafeUrl untrusted `url`, typically from the user.
       * @param tag target element tag name.
       * @param prop name of the property that contains the value.
       * @returns `url` string which is safe to bind.
       *
       * @codeGenApi
       */


      function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
        return getUrlSanitizer(tag, prop)(unsafeUrl);
      }

      function validateAgainstEventProperties(name) {
        if (name.toLowerCase().startsWith('on')) {
          var msg = "Binding to event property '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...") + "\nIf '".concat(name, "' is a directive input, make sure the directive is imported by the") + " current module.";
          throw new Error(msg);
        }
      }

      function validateAgainstEventAttributes(name) {
        if (name.toLowerCase().startsWith('on')) {
          var msg = "Binding to event attribute '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...");
          throw new Error(msg);
        }
      }

      function getSanitizer() {
        var lView = getLView();
        return lView && lView[SANITIZER];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ERROR_TYPE = 'ngType';
      var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
      var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
      var ERROR_LOGGER = 'ngErrorLogger';

      function wrappedError(message, originalError) {
        var msg = "".concat(message, " caused by: ").concat(originalError instanceof Error ? originalError.message : originalError);
        var error = Error(msg);
        error[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getType(error) {
        return error[ERROR_TYPE];
      }

      function getDebugContext(error) {
        return error[ERROR_DEBUG_CONTEXT];
      }

      function getOriginalError(error) {
        return error[ERROR_ORIGINAL_ERROR];
      }

      function getErrorLogger(error) {
        return error[ERROR_LOGGER] || defaultErrorLogger;
      }

      function defaultErrorLogger(console) {
        for (var _len36 = arguments.length, values = new Array(_len36 > 1 ? _len36 - 1 : 0), _key36 = 1; _key36 < _len36; _key36++) {
          values[_key36 - 1] = arguments[_key36];
        }

        console.error.apply(console, values);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides a hook for centralized exception handling.
       *
       * The default implementation of `ErrorHandler` prints error messages to the `console`. To
       * intercept error handling, write a custom exception handler that replaces this default as
       * appropriate for your app.
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * class MyErrorHandler implements ErrorHandler {
       *   handleError(error) {
       *     // do something with the exception
       *   }
       * }
       *
       * @NgModule({
       *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
       * })
       * class MyModule {}
       * ```
       *
       * @publicApi
       */


      var ErrorHandler = /*#__PURE__*/function () {
        function ErrorHandler() {
          _classCallCheck(this, ErrorHandler);

          /**
           * @internal
           */
          this._console = console;
        }

        _createClass2(ErrorHandler, [{
          key: "handleError",
          value: function handleError(error) {
            var originalError = this._findOriginalError(error);

            var context = this._findContext(error); // Note: Browser consoles show the place from where console.error was called.
            // We can use this to give users additional information about the error.


            var errorLogger = getErrorLogger(error);
            errorLogger(this._console, "ERROR", error);

            if (originalError) {
              errorLogger(this._console, "ORIGINAL ERROR", originalError);
            }

            if (context) {
              errorLogger(this._console, 'ERROR CONTEXT', context);
            }
          }
          /** @internal */

        }, {
          key: "_findContext",
          value: function _findContext(error) {
            if (error) {
              return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));
            }

            return null;
          }
          /** @internal */

        }, {
          key: "_findOriginalError",
          value: function _findOriginalError(error) {
            var e = getOriginalError(error);

            while (e && getOriginalError(e)) {
              e = getOriginalError(e);
            }

            return e;
          }
        }]);

        return ErrorHandler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines a schema that allows an NgModule to contain the following:
       * - Non-Angular elements named with dash case (`-`).
       * - Element properties named with dash case (`-`).
       * Dash case is the naming convention for custom elements.
       *
       * @publicApi
       */


      var CUSTOM_ELEMENTS_SCHEMA = {
        name: 'custom-elements'
      };
      /**
       * Defines a schema that allows any property on any element.
       *
       * @publicApi
       */

      var NO_ERRORS_SCHEMA = {
        name: 'no-errors-schema'
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Disallowed strings in the comment.
       *
       * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
       */

      var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
      /**
       * Delimiter in the disallowed strings which needs to be wrapped with zero with character.
       */

      var COMMENT_DELIMITER = /(<|>)/;
      var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
      /**
       * Escape the content of comment strings so that it can be safely inserted into a comment node.
       *
       * The issue is that HTML does not specify any way to escape comment end text inside the comment.
       * Consider: `<!-- The way you close a comment is with ">", and "->" at the beginning or by "-->" or
       * "--!>" at the end. -->`. Above the `"-->"` is meant to be text not an end to the comment. This
       * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)
       *
       * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
       *
       * ```
       * div.innerHTML = div.innerHTML
       * ```
       *
       * One would expect that the above code would be safe to do, but it turns out that because comment
       * text is not escaped, the comment may contain text which will prematurely close the comment
       * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which
       * may contain such text and expect them to be safe.)
       *
       * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and
       * surrounding them with `_>_` where the `_` is a zero width space `\u200B`. The result is that if a
       * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the
       * text it will render normally but it will not cause the HTML parser to close/open the comment.
       *
       * @param value text to make safe for comment node by escaping the comment open/close character
       *     sequence.
       */

      function escapeCommentText(value) {
        return value.replace(COMMENT_DISALLOWED, function (text) {
          return text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
       */

      /**
       * Creates an `Array` construction with a given name. This is useful when
       * looking for memory consumption to see what time of array it is.
       *
       *
       * @param name Name to give to the constructor
       * @returns A subclass of `Array` if possible. This can only be done in
       *          environments which support `class` construct.
       */


      function createNamedArrayType(name) {
        // This should never be called in prod mode, so let's verify that is the case.
        if (ngDevMode) {
          try {
            // If this function were compromised the following could lead to arbitrary
            // script execution. We bless it with Trusted Types anyway since this
            // function is stripped out of production binaries.
            return newTrustedFunctionForDev('Array', "return class ".concat(name, " extends Array{}"))(Array);
          } catch (e) {
            // If it does not work just give up and fall back to regular Array.
            return Array;
          }
        } else {
          throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function normalizeDebugBindingName(name) {
        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
        return "ng-reflect-".concat(name);
      }

      var CAMEL_CASE_REGEXP = /([A-Z])/g;

      function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
          for (var _len37 = arguments.length, m = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {
            m[_key37] = arguments[_key37];
          }

          return '-' + m[1].toLowerCase();
        });
      }

      function normalizeDebugBindingValue(value) {
        try {
          // Limit the size of the value as otherwise the DOM just gets polluted.
          return value != null ? value.toString().slice(0, 30) : value;
        } catch (e) {
          return '[ERROR] Exception while trying to serialize the value';
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns the matching `LContext` data for a given DOM node, directive or component instance.
       *
       * This function will examine the provided DOM element, component, or directive instance\'s
       * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
       * value will be that of the newly created `LContext`.
       *
       * If the monkey-patched value is the `LView` instance then the context value for that
       * target will be created and the monkey-patch reference will be updated. Therefore when this
       * function is called it may mutate the provided element\'s, component\'s or any of the associated
       * directive\'s monkey-patch values.
       *
       * If the monkey-patch value is not detected then the code will walk up the DOM until an element
       * is found which contains a monkey-patch reference. When that occurs then the provided element
       * will be updated with a new context (which is then returned). If the monkey-patch value is not
       * detected for a component/directive instance then it will throw an error (all components and
       * directives should be automatically monkey-patched by ivy).
       *
       * @param target Component, Directive or DOM Node.
       */


      function getLContext(target) {
        var mpValue = readPatchedData(target);

        if (mpValue) {
          // only when it's an array is it considered an LView instance
          // ... otherwise it's an already constructed LContext instance
          if (Array.isArray(mpValue)) {
            var lView = mpValue;
            var nodeIndex;
            var component = undefined;
            var directives = undefined;

            if (isComponentInstance(target)) {
              nodeIndex = findViaComponent(lView, target);

              if (nodeIndex == -1) {
                throw new Error('The provided component was not found in the application');
              }

              component = target;
            } else if (isDirectiveInstance(target)) {
              nodeIndex = findViaDirective(lView, target);

              if (nodeIndex == -1) {
                throw new Error('The provided directive was not found in the application');
              }

              directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
            } else {
              nodeIndex = findViaNativeElement(lView, target);

              if (nodeIndex == -1) {
                return null;
              }
            } // the goal is not to fill the entire context full of data because the lookups
            // are expensive. Instead, only the target data (the element, component, container, ICU
            // expression or directive details) are filled into the context. If called multiple times
            // with different target values then the missing target data will be filled in.


            var _native2 = unwrapRNode(lView[nodeIndex]);

            var existingCtx = readPatchedData(_native2);
            var context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, _native2); // only when the component has been discovered then update the monkey-patch

            if (component && context.component === undefined) {
              context.component = component;
              attachPatchData(context.component, context);
            } // only when the directives have been discovered then update the monkey-patch


            if (directives && context.directives === undefined) {
              context.directives = directives;

              for (var i = 0; i < directives.length; i++) {
                attachPatchData(directives[i], context);
              }
            }

            attachPatchData(context["native"], context);
            mpValue = context;
          }
        } else {
          var rElement = target;
          ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM
          // to find the nearest element that has already been monkey patched with data

          var parent = rElement;

          while (parent = parent.parentNode) {
            var parentContext = readPatchedData(parent);

            if (parentContext) {
              var _lView2 = void 0;

              if (Array.isArray(parentContext)) {
                _lView2 = parentContext;
              } else {
                _lView2 = parentContext.lView;
              } // the edge of the app was also reached here through another means
              // (maybe because the DOM was changed manually).


              if (!_lView2) {
                return null;
              }

              var index = findViaNativeElement(_lView2, rElement);

              if (index >= 0) {
                var _native3 = unwrapRNode(_lView2[index]);

                var _context = createLContext(_lView2, index, _native3);

                attachPatchData(_native3, _context);
                mpValue = _context;
                break;
              }
            }
          }
        }

        return mpValue || null;
      }
      /**
       * Creates an empty instance of a `LContext` context
       */


      function createLContext(lView, nodeIndex, _native4) {
        return {
          lView: lView,
          nodeIndex: nodeIndex,
          "native": _native4,
          component: undefined,
          directives: undefined,
          localRefs: undefined
        };
      }
      /**
       * Takes a component instance and returns the view for that component.
       *
       * @param componentInstance
       * @returns The component's view
       */


      function getComponentViewByInstance(componentInstance) {
        var lView = readPatchedData(componentInstance);
        var view;

        if (Array.isArray(lView)) {
          var nodeIndex = findViaComponent(lView, componentInstance);
          view = getComponentLViewByIndex(nodeIndex, lView);
          var context = createLContext(lView, nodeIndex, view[HOST]);
          context.component = componentInstance;
          attachPatchData(componentInstance, context);
          attachPatchData(context["native"], context);
        } else {
          var _context2 = lView;
          view = getComponentLViewByIndex(_context2.nodeIndex, _context2.lView);
        }

        return view;
      }
      /**
       * Assigns the given data to the given target (which could be a component,
       * directive or DOM node instance) using monkey-patching.
       */


      function attachPatchData(target, data) {
        target[MONKEY_PATCH_KEY_NAME] = data;
      }

      function isComponentInstance(instance) {
        return instance && instance.constructor && instance.constructor.ɵcmp;
      }

      function isDirectiveInstance(instance) {
        return instance && instance.constructor && instance.constructor.ɵdir;
      }
      /**
       * Locates the element within the given LView and returns the matching index
       */


      function findViaNativeElement(lView, target) {
        var tView = lView[TVIEW];

        for (var i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
          if (unwrapRNode(lView[i]) === target) {
            return i;
          }
        }

        return -1;
      }
      /**
       * Locates the next tNode (child, sibling or parent).
       */


      function traverseNextElement(tNode) {
        if (tNode.child) {
          return tNode.child;
        } else if (tNode.next) {
          return tNode.next;
        } else {
          // Let's take the following template: <div><span>text</span></div><component/>
          // After checking the text node, we need to find the next parent that has a "next" TNode,
          // in this case the parent `div`, so that we can find the component.
          while (tNode.parent && !tNode.parent.next) {
            tNode = tNode.parent;
          }

          return tNode.parent && tNode.parent.next;
        }
      }
      /**
       * Locates the component within the given LView and returns the matching index
       */


      function findViaComponent(lView, componentInstance) {
        var componentIndices = lView[TVIEW].components;

        if (componentIndices) {
          for (var i = 0; i < componentIndices.length; i++) {
            var elementComponentIndex = componentIndices[i];
            var componentView = getComponentLViewByIndex(elementComponentIndex, lView);

            if (componentView[CONTEXT] === componentInstance) {
              return elementComponentIndex;
            }
          }
        } else {
          var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
          var rootComponent = rootComponentView[CONTEXT];

          if (rootComponent === componentInstance) {
            // we are dealing with the root element here therefore we know that the
            // element is the very first element after the HEADER data in the lView
            return HEADER_OFFSET;
          }
        }

        return -1;
      }
      /**
       * Locates the directive within the given LView and returns the matching index
       */


      function findViaDirective(lView, directiveInstance) {
        // if a directive is monkey patched then it will (by default)
        // have a reference to the LView of the current view. The
        // element bound to the directive being search lives somewhere
        // in the view data. We loop through the nodes and check their
        // list of directives for the instance.
        var tNode = lView[TVIEW].firstChild;

        while (tNode) {
          var directiveIndexStart = tNode.directiveStart;
          var directiveIndexEnd = tNode.directiveEnd;

          for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {
            if (lView[i] === directiveInstance) {
              return tNode.index;
            }
          }

          tNode = traverseNextElement(tNode);
        }

        return -1;
      }
      /**
       * Returns a list of directives extracted from the given view based on the
       * provided list of directive index values.
       *
       * @param nodeIndex The node index
       * @param lView The target view data
       * @param includeComponents Whether or not to include components in returned directives
       */


      function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
        var tNode = lView[TVIEW].data[nodeIndex];
        var directiveStartIndex = tNode.directiveStart;
        if (directiveStartIndex == 0) return EMPTY_ARRAY$1;
        var directiveEndIndex = tNode.directiveEnd;
        if (!includeComponents && tNode.flags & 2
        /* isComponentHost */
        ) directiveStartIndex++;
        return lView.slice(directiveStartIndex, directiveEndIndex);
      }

      function getComponentAtNodeIndex(nodeIndex, lView) {
        var tNode = lView[TVIEW].data[nodeIndex];
        var directiveStartIndex = tNode.directiveStart;
        return tNode.flags & 2
        /* isComponentHost */
        ? lView[directiveStartIndex] : null;
      }
      /**
       * Returns a map of local references (local reference name => element or directive instance) that
       * exist on a given element.
       */


      function discoverLocalRefs(lView, nodeIndex) {
        var tNode = lView[TVIEW].data[nodeIndex];

        if (tNode && tNode.localNames) {
          var result = {};
          var localIndex = tNode.index + 1;

          for (var i = 0; i < tNode.localNames.length; i += 2) {
            result[tNode.localNames[i]] = lView[localIndex];
            localIndex++;
          }

          return result;
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$4 = function ɵ0$4() {
        return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
        setTimeout // everything else
        ).bind(_global);
      };

      var defaultScheduler = ɵ0$4();
      /**
       *
       * @codeGenApi
       */

      function ɵɵresolveWindow(element) {
        return {
          name: 'window',
          target: element.ownerDocument.defaultView
        };
      }
      /**
       *
       * @codeGenApi
       */


      function ɵɵresolveDocument(element) {
        return {
          name: 'document',
          target: element.ownerDocument
        };
      }
      /**
       *
       * @codeGenApi
       */


      function ɵɵresolveBody(element) {
        return {
          name: 'body',
          target: element.ownerDocument.body
        };
      }
      /**
       * The special delimiter we use to separate property names, prefixes, and suffixes
       * in property binding metadata. See storeBindingMetadata().
       *
       * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
       * because it is a very uncommon character that is unlikely to be part of a user's
       * property names or interpolation strings. If it is in fact used in a property
       * binding, DebugElement.properties will not return the correct value for that
       * binding. However, there should be no runtime effect for real applications.
       *
       * This character is typically rendered as a question mark inside of a diamond.
       * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
       *
       */


      var INTERPOLATION_DELIMITER = "\uFFFD";
      /**
       * Unwrap a value which might be behind a closure (for forward declaration reasons).
       */

      function maybeUnwrapFn(value) {
        if (value instanceof Function) {
          return value();
        } else {
          return value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Called when there are multiple component selectors that match a given node */


      function throwMultipleComponentError(tNode) {
        throw new RuntimeError("300"
        /* MULTIPLE_COMPONENTS_MATCH */
        , "Multiple components match node with tagname ".concat(tNode.value));
      }
      /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */


      function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
        var field = propName ? " for '".concat(propName, "'") : '';
        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value".concat(field, ": '").concat(oldValue, "'. Current value: '").concat(currValue, "'.");

        if (creationMode) {
          msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook?";
        } // TODO: include debug context, see `viewDebugError` function in
        // `packages/core/src/view/errors.ts` for reference.


        throw new RuntimeError("100"
        /* EXPRESSION_CHANGED_AFTER_CHECKED */
        , msg);
      }

      function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
        var _meta$split = meta.split(INTERPOLATION_DELIMITER),
            _meta$split2 = _toArray(_meta$split),
            propName = _meta$split2[0],
            prefix = _meta$split2[1],
            chunks = _meta$split2.slice(2);

        var oldValue = prefix,
            newValue = prefix;

        for (var i = 0; i < chunks.length; i++) {
          var slotIdx = rootIndex + i;
          oldValue += "".concat(lView[slotIdx]).concat(chunks[i]);
          newValue += "".concat(slotIdx === expressionIndex ? changedValue : lView[slotIdx]).concat(chunks[i]);
        }

        return {
          propName: propName,
          oldValue: oldValue,
          newValue: newValue
        };
      }
      /**
       * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
       * - property name (for property bindings or interpolations)
       * - old and new values, enriched using information from metadata
       *
       * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
       * function description.
       */


      function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
        var tData = lView[TVIEW].data;
        var metadata = tData[bindingIndex];

        if (typeof metadata === 'string') {
          // metadata for property interpolation
          if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
          } // metadata for property binding


          return {
            propName: metadata,
            oldValue: oldValue,
            newValue: newValue
          };
        } // metadata is not available for this expression, check if this expression is a part of the
        // property interpolation by going from the current binding index left and look for a string that
        // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
        // [..., 'id�Prefix � and � suffix', null, null, null, ...]


        if (metadata === null) {
          var idx = bindingIndex - 1;

          while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
            idx--;
          }

          var meta = tData[idx];

          if (typeof meta === 'string') {
            var matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of
            // property interpolations), so we subtract one from total number of found delimiters

            if (matches && matches.length - 1 > bindingIndex - idx) {
              return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
            }
          }
        }

        return {
          propName: undefined,
          oldValue: oldValue,
          newValue: newValue
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Flags for renderer-specific style modifiers.
       * @publicApi
       */


      var RendererStyleFlags2;

      (function (RendererStyleFlags2) {
        // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
        // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
        // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.

        /**
         * Marks a style as important.
         */
        RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
        /**
         * Marks a style as using dash case naming (this-is-dash-case).
         */

        RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
      })(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _icuContainerIterate;
      /**
       * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.
       */


      function icuContainerIterate(tIcuContainerNode, lView) {
        return _icuContainerIterate(tIcuContainerNode, lView);
      }
      /**
       * Ensures that `IcuContainerVisitor`'s implementation is present.
       *
       * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the
       * bundler to tree shake ICU logic and only load it if ICU instruction is executed.
       */


      function ensureIcuContainerVisitorLoaded(loader) {
        if (_icuContainerIterate === undefined) {
          // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it
          // can be inlined into call-site.
          _icuContainerIterate = loader();
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$5 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
       * that LContainer, which is an LView
       * @param lView the lView whose parent to get
       */

      function getLViewParent(lView) {
        ngDevMode && assertLView(lView);
        var parent = lView[PARENT];
        return isLContainer(parent) ? parent[PARENT] : parent;
      }
      /**
       * Retrieve the root view from any component or `LView` by walking the parent `LView` until
       * reaching the root `LView`.
       *
       * @param componentOrLView any component or `LView`
       */


      function getRootView(componentOrLView) {
        ngDevMode && assertDefined(componentOrLView, 'component');
        var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);

        while (lView && !(lView[FLAGS] & 512
        /* IsRoot */
        )) {
          lView = getLViewParent(lView);
        }

        ngDevMode && assertLView(lView);
        return lView;
      }
      /**
       * Returns the `RootContext` instance that is associated with
       * the application where the target is situated. It does this by walking the parent views until it
       * gets to the root view, then getting the context off of that.
       *
       * @param viewOrComponent the `LView` or component to get the root context for.
       */


      function getRootContext(viewOrComponent) {
        var rootView = getRootView(viewOrComponent);
        ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
        return rootView[CONTEXT];
      }
      /**
       * Gets the first `LContainer` in the LView or `null` if none exists.
       */


      function getFirstLContainer(lView) {
        return getNearestLContainer(lView[CHILD_HEAD]);
      }
      /**
       * Gets the next `LContainer` that is a sibling of the given container.
       */


      function getNextLContainer(container) {
        return getNearestLContainer(container[NEXT]);
      }

      function getNearestLContainer(viewOrContainer) {
        while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
          viewOrContainer = viewOrContainer[NEXT];
        }

        return viewOrContainer;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd;
      /**
       * NOTE: for performance reasons, the possible actions are inlined within the function instead of
       * being passed as an argument.
       */

      function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
        // If this slot was allocated for a text node dynamically created by i18n, the text node itself
        // won't be created until i18nApply() in the update block, so this node should be skipped.
        // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
        // in `i18n_spec.ts`.
        if (lNodeToHandle != null) {
          var lContainer;
          var isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
          // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
          // it has LContainer so that we can process all of those cases appropriately.

          if (isLContainer(lNodeToHandle)) {
            lContainer = lNodeToHandle;
          } else if (isLView(lNodeToHandle)) {
            isComponent = true;
            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
            lNodeToHandle = lNodeToHandle[HOST];
          }

          var rNode = unwrapRNode(lNodeToHandle);
          ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);

          if (action === 0
          /* Create */
          && parent !== null) {
            if (beforeNode == null) {
              nativeAppendChild(renderer, parent, rNode);
            } else {
              nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
            }
          } else if (action === 1
          /* Insert */
          && parent !== null) {
            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
          } else if (action === 2
          /* Detach */
          ) {
              nativeRemoveNode(renderer, rNode, isComponent);
            } else if (action === 3
          /* Destroy */
          ) {
              ngDevMode && ngDevMode.rendererDestroyNode++;
              renderer.destroyNode(rNode);
            }

          if (lContainer != null) {
            applyContainer(renderer, action, lContainer, parent, beforeNode);
          }
        }
      }

      function createTextNode(renderer, value) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && ngDevMode.rendererSetText++;
        return isProceduralRenderer(renderer) ? renderer.createText(value) : renderer.createTextNode(value);
      }

      function updateTextNode(renderer, rNode, value) {
        ngDevMode && ngDevMode.rendererSetText++;
        isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;
      }

      function createCommentNode(renderer, value) {
        ngDevMode && ngDevMode.rendererCreateComment++; // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same
        // method name.

        return renderer.createComment(escapeCommentText(value));
      }
      /**
       * Creates a native element from a tag name, using a renderer.
       * @param renderer A renderer to use
       * @param name the tag name
       * @param namespace Optional namespace for element.
       * @returns the element created
       */


      function createElementNode(renderer, name, namespace) {
        ngDevMode && ngDevMode.rendererCreateElement++;

        if (isProceduralRenderer(renderer)) {
          return renderer.createElement(name, namespace);
        } else {
          return namespace === null ? renderer.createElement(name) : renderer.createElementNS(namespace, name);
        }
      }
      /**
       * Removes all DOM elements associated with a view.
       *
       * Because some root nodes of the view may be containers, we sometimes need
       * to propagate deeply into the nested containers to remove all elements in the
       * views beneath it.
       *
       * @param tView The `TView' of the `LView` from which elements should be added or removed
       * @param lView The view from which elements should be added or removed
       */


      function removeViewFromContainer(tView, lView) {
        var renderer = lView[RENDERER];
        applyView(tView, lView, renderer, 2
        /* Detach */
        , null, null);
        lView[HOST] = null;
        lView[T_HOST] = null;
      }
      /**
       * Adds all DOM elements associated with a view.
       *
       * Because some root nodes of the view may be containers, we sometimes need
       * to propagate deeply into the nested containers to add all elements in the
       * views beneath it.
       *
       * @param tView The `TView' of the `LView` from which elements should be added or removed
       * @param parentTNode The `TNode` where the `LView` should be attached to.
       * @param renderer Current renderer to use for DOM manipulations.
       * @param lView The view from which elements should be added or removed
       * @param parentNativeNode The parent `RElement` where it should be inserted into.
       * @param beforeNode The node before which elements should be added, if insert mode
       */


      function addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
        lView[HOST] = parentNativeNode;
        lView[T_HOST] = parentTNode;
        applyView(tView, lView, renderer, 1
        /* Insert */
        , parentNativeNode, beforeNode);
      }
      /**
       * Detach a `LView` from the DOM by detaching its nodes.
       *
       * @param tView The `TView' of the `LView` to be detached
       * @param lView the `LView` to be detached.
       */


      function renderDetachView(tView, lView) {
        applyView(tView, lView, lView[RENDERER], 2
        /* Detach */
        , null, null);
      }
      /**
       * Traverses down and up the tree of views and containers to remove listeners and
       * call onDestroy callbacks.
       *
       * Notes:
       *  - Because it's used for onDestroy calls, it needs to be bottom-up.
       *  - Must process containers instead of their views to avoid splicing
       *  when views are destroyed and re-added.
       *  - Using a while loop because it's faster than recursion
       *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
       *
       *  @param rootView The view to destroy
       */


      function destroyViewTree(rootView) {
        // If the view has no children, we can clean it up and return early.
        var lViewOrLContainer = rootView[CHILD_HEAD];

        if (!lViewOrLContainer) {
          return cleanUpView(rootView[TVIEW], rootView);
        }

        while (lViewOrLContainer) {
          var next = null;

          if (isLView(lViewOrLContainer)) {
            // If LView, traverse down to child.
            next = lViewOrLContainer[CHILD_HEAD];
          } else {
            ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.

            var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
            if (firstView) next = firstView;
          }

          if (!next) {
            // Only clean up view when moving to the side or up, as destroy hooks
            // should be called in order from the bottom up.
            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
              if (isLView(lViewOrLContainer)) {
                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
              }

              lViewOrLContainer = lViewOrLContainer[PARENT];
            }

            if (lViewOrLContainer === null) lViewOrLContainer = rootView;

            if (isLView(lViewOrLContainer)) {
              cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
            }

            next = lViewOrLContainer && lViewOrLContainer[NEXT];
          }

          lViewOrLContainer = next;
        }
      }
      /**
       * Inserts a view into a container.
       *
       * This adds the view to the container's array of active views in the correct
       * position. It also adds the view's elements to the DOM if the container isn't a
       * root node of another view (in that case, the view's elements will be added when
       * the container's parent view is added later).
       *
       * @param tView The `TView' of the `LView` to insert
       * @param lView The view to insert
       * @param lContainer The container into which the view should be inserted
       * @param index Which index in the container to insert the child view into
       */


      function insertView(tView, lView, lContainer, index) {
        ngDevMode && assertLView(lView);
        ngDevMode && assertLContainer(lContainer);
        var indexInContainer = CONTAINER_HEADER_OFFSET + index;
        var containerLength = lContainer.length;

        if (index > 0) {
          // This is a new view, we need to add it to the children.
          lContainer[indexInContainer - 1][NEXT] = lView;
        }

        if (index < containerLength - CONTAINER_HEADER_OFFSET) {
          lView[NEXT] = lContainer[indexInContainer];
          addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
        } else {
          lContainer.push(lView);
          lView[NEXT] = null;
        }

        lView[PARENT] = lContainer; // track views where declaration and insertion points are different

        var declarationLContainer = lView[DECLARATION_LCONTAINER];

        if (declarationLContainer !== null && lContainer !== declarationLContainer) {
          trackMovedView(declarationLContainer, lView);
        } // notify query that a new view has been added


        var lQueries = lView[QUERIES];

        if (lQueries !== null) {
          lQueries.insertView(tView);
        } // Sets the attached flag


        lView[FLAGS] |= 128
        /* Attached */
        ;
      }
      /**
       * Track views created from the declaration container (TemplateRef) and inserted into a
       * different LContainer.
       */


      function trackMovedView(declarationContainer, lView) {
        ngDevMode && assertDefined(lView, 'LView required');
        ngDevMode && assertLContainer(declarationContainer);
        var movedViews = declarationContainer[MOVED_VIEWS];
        var insertedLContainer = lView[PARENT];
        ngDevMode && assertLContainer(insertedLContainer);
        var insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
        ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
        var declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
        ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');

        if (declaredComponentLView !== insertedComponentLView) {
          // At this point the declaration-component is not same as insertion-component; this means that
          // this is a transplanted view. Mark the declared lView as having transplanted views so that
          // those views can participate in CD.
          declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
        }

        if (movedViews === null) {
          declarationContainer[MOVED_VIEWS] = [lView];
        } else {
          movedViews.push(lView);
        }
      }

      function detachMovedView(declarationContainer, lView) {
        ngDevMode && assertLContainer(declarationContainer);
        ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
        var movedViews = declarationContainer[MOVED_VIEWS];
        var declarationViewIndex = movedViews.indexOf(lView);
        var insertionLContainer = lView[PARENT];
        ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag
        // would be cleared and the counter decremented), we need to decrement the view counter here
        // instead.

        if (lView[FLAGS] & 1024
        /* RefreshTransplantedView */
        ) {
            lView[FLAGS] &= ~1024
            /* RefreshTransplantedView */
            ;
            updateTransplantedViewCount(insertionLContainer, -1);
          }

        movedViews.splice(declarationViewIndex, 1);
      }
      /**
       * Detaches a view from a container.
       *
       * This method removes the view from the container's array of active views. It also
       * removes the view's elements from the DOM.
       *
       * @param lContainer The container from which to detach a view
       * @param removeIndex The index of the view to detach
       * @returns Detached LView instance.
       */


      function detachView(lContainer, removeIndex) {
        if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
        var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
        var viewToDetach = lContainer[indexInContainer];

        if (viewToDetach) {
          var declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];

          if (declarationLContainer !== null && declarationLContainer !== lContainer) {
            detachMovedView(declarationLContainer, viewToDetach);
          }

          if (removeIndex > 0) {
            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
          }

          var removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
          removeViewFromContainer(viewToDetach[TVIEW], viewToDetach); // notify query that a view has been removed

          var lQueries = removedLView[QUERIES];

          if (lQueries !== null) {
            lQueries.detachView(removedLView[TVIEW]);
          }

          viewToDetach[PARENT] = null;
          viewToDetach[NEXT] = null; // Unsets the attached flag

          viewToDetach[FLAGS] &= ~128
          /* Attached */
          ;
        }

        return viewToDetach;
      }
      /**
       * A standalone function which destroys an LView,
       * conducting clean up (e.g. removing listeners, calling onDestroys).
       *
       * @param tView The `TView' of the `LView` to be destroyed
       * @param lView The view to be destroyed.
       */


      function destroyLView(tView, lView) {
        if (!(lView[FLAGS] & 256
        /* Destroyed */
        )) {
          var renderer = lView[RENDERER];

          if (isProceduralRenderer(renderer) && renderer.destroyNode) {
            applyView(tView, lView, renderer, 3
            /* Destroy */
            , null, null);
          }

          destroyViewTree(lView);
        }
      }
      /**
       * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
       * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
       * can be propagated to @Output listeners.
       *
       * @param tView `TView` for the `LView` to clean up.
       * @param lView The LView to clean up
       */


      function cleanUpView(tView, lView) {
        if (!(lView[FLAGS] & 256
        /* Destroyed */
        )) {
          // Usually the Attached flag is removed when the view is detached from its parent, however
          // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
          lView[FLAGS] &= ~128
          /* Attached */
          ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
          // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
          // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
          // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
          // really more of an "afterDestroy" hook if you think about it.

          lView[FLAGS] |= 256
          /* Destroyed */
          ;
          executeOnDestroys(tView, lView);
          processCleanups(tView, lView); // For component views only, the local renderer is destroyed at clean up time.

          if (lView[TVIEW].type === 1
          /* Component */
          && isProceduralRenderer(lView[RENDERER])) {
            ngDevMode && ngDevMode.rendererDestroy++;
            lView[RENDERER].destroy();
          }

          var declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container

          if (declarationContainer !== null && isLContainer(lView[PARENT])) {
            // and this is a projected view
            if (declarationContainer !== lView[PARENT]) {
              detachMovedView(declarationContainer, lView);
            } // For embedded views still attached to a container: remove query result from this view.


            var lQueries = lView[QUERIES];

            if (lQueries !== null) {
              lQueries.detachView(tView);
            }
          }
        }
      }
      /** Removes listeners and unsubscribes from output subscriptions */


      function processCleanups(tView, lView) {
        var tCleanup = tView.cleanup;
        var lCleanup = lView[CLEANUP]; // `LCleanup` contains both share information with `TCleanup` as well as instance specific
        // information appended at the end. We need to know where the end of the `TCleanup` information
        // is, and we track this with `lastLCleanupIndex`.

        var lastLCleanupIndex = -1;

        if (tCleanup !== null) {
          for (var i = 0; i < tCleanup.length - 1; i += 2) {
            if (typeof tCleanup[i] === 'string') {
              // This is a native DOM listener
              var idxOrTargetGetter = tCleanup[i + 1];
              var target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);
              var listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];
              var useCaptureOrSubIdx = tCleanup[i + 3];

              if (typeof useCaptureOrSubIdx === 'boolean') {
                // native DOM listener registered with Renderer3
                target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
              } else {
                if (useCaptureOrSubIdx >= 0) {
                  // unregister
                  lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();
                } else {
                  // Subscription
                  lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();
                }
              }

              i += 2;
            } else {
              // This is a cleanup function that is grouped with the index of its context
              var context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];
              tCleanup[i].call(context);
            }
          }
        }

        if (lCleanup !== null) {
          for (var _i8 = lastLCleanupIndex + 1; _i8 < lCleanup.length; _i8++) {
            var instanceCleanupFn = lCleanup[_i8];
            ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');
            instanceCleanupFn();
          }

          lView[CLEANUP] = null;
        }
      }
      /** Calls onDestroy hooks for this view */


      function executeOnDestroys(tView, lView) {
        var destroyHooks;

        if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
          for (var i = 0; i < destroyHooks.length; i += 2) {
            var context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.

            if (!(context instanceof NodeInjectorFactory)) {
              var toCall = destroyHooks[i + 1];

              if (Array.isArray(toCall)) {
                for (var j = 0; j < toCall.length; j += 2) {
                  toCall[j + 1].call(context[toCall[j]]);
                }
              } else {
                toCall.call(context);
              }
            }
          }
        }
      }
      /**
       * Returns a native element if a node can be inserted into the given parent.
       *
       * There are two reasons why we may not be able to insert a element immediately.
       * - Projection: When creating a child content element of a component, we have to skip the
       *   insertion because the content of a component will be projected.
       *   `<component><content>delayed due to projection</content></component>`
       * - Parent container is disconnected: This can happen when we are inserting a view into
       *   parent container, which itself is disconnected. For example the parent container is part
       *   of a View which has not be inserted or is made for projection but has not been inserted
       *   into destination.
       *
       * @param tView: Current `TView`.
       * @param tNode: `TNode` for which we wish to retrieve render parent.
       * @param lView: Current `LView`.
       */


      function getParentRElement(tView, tNode, lView) {
        return getClosestRElement(tView, tNode.parent, lView);
      }
      /**
       * Get closest `RElement` or `null` if it can't be found.
       *
       * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.
       * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).
       * If `TNode` is `null` then return host `RElement`:
       *   - return `null` if projection
       *   - return `null` if parent container is disconnected (we have no parent.)
       *
       * @param tView: Current `TView`.
       * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is
       *     needed).
       * @param lView: Current `LView`.
       * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)
       */


      function getClosestRElement(tView, tNode, lView) {
        var parentTNode = tNode; // Skip over element and ICU containers as those are represented by a comment node and
        // can't be used as a render parent.

        while (parentTNode !== null && parentTNode.type & (8
        /* ElementContainer */
        | 32
        /* Icu */
        )) {
          tNode = parentTNode;
          parentTNode = tNode.parent;
        } // If the parent tNode is null, then we are inserting across views: either into an embedded view
        // or a component view.


        if (parentTNode === null) {
          // We are inserting a root element of the component view into the component host element and
          // it should always be eager.
          return lView[HOST];
        } else {
          ngDevMode && assertTNodeType(parentTNode, 3
          /* AnyRNode */
          | 4
          /* Container */
          );

          if (parentTNode.flags & 2
          /* isComponentHost */
          ) {
              ngDevMode && assertTNodeForLView(parentTNode, lView);
              var encapsulation = tView.data[parentTNode.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the
              // parent element is not a component. Component's content nodes are not inserted immediately
              // because they will be projected, and so doing insert at this point would be wasteful.
              // Since the projection would then move it to its final destination. Note that we can't
              // make this assumption when using the Shadow DOM, because the native projection placeholders
              // (<content> or <slot>) have to be in place as elements are being inserted.

              if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {
                return null;
              }
            }

          return getNativeByTNode(parentTNode, lView);
        }
      }
      /**
       * Inserts a native node before another native node for a given parent using {@link Renderer3}.
       * This is a utility function that can be used when native nodes were determined - it abstracts an
       * actual renderer being used.
       */


      function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
        ngDevMode && ngDevMode.rendererInsertBefore++;

        if (isProceduralRenderer(renderer)) {
          renderer.insertBefore(parent, child, beforeNode, isMove);
        } else {
          parent.insertBefore(child, beforeNode, isMove);
        }
      }

      function nativeAppendChild(renderer, parent, child) {
        ngDevMode && ngDevMode.rendererAppendChild++;
        ngDevMode && assertDefined(parent, 'parent node must be defined');

        if (isProceduralRenderer(renderer)) {
          renderer.appendChild(parent, child);
        } else {
          parent.appendChild(child);
        }
      }

      function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
        if (beforeNode !== null) {
          nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
        } else {
          nativeAppendChild(renderer, parent, child);
        }
      }
      /** Removes a node from the DOM given its native parent. */


      function nativeRemoveChild(renderer, parent, child, isHostElement) {
        if (isProceduralRenderer(renderer)) {
          renderer.removeChild(parent, child, isHostElement);
        } else {
          parent.removeChild(child);
        }
      }
      /**
       * Returns a native parent of a given native node.
       */


      function nativeParentNode(renderer, node) {
        return isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode;
      }
      /**
       * Returns a native sibling of a given native node.
       */


      function nativeNextSibling(renderer, node) {
        return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
      }
      /**
       * Find a node in front of which `currentTNode` should be inserted.
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
        return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
      }
      /**
       * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into
       * account)
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * does not take `TNode.insertBeforeIndex` into account.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
        if (parentTNode.type & (8
        /* ElementContainer */
        | 32
        /* Icu */
        )) {
          return getNativeByTNode(parentTNode, lView);
        }

        return null;
      }
      /**
       * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.
       *
       * This function will only be set if i18n code runs.
       */


      var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
      /**
       * Tree shakable boundary for `processI18nInsertBefore` function.
       *
       * This function will only be set if i18n code runs.
       */

      var _processI18nInsertBefore;

      function setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {
        _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;
        _processI18nInsertBefore = processI18nInsertBefore;
      }
      /**
       * Appends the `child` native node (or a collection of nodes) to the `parent`.
       *
       * @param tView The `TView' to be appended
       * @param lView The current LView
       * @param childRNode The native child (or children) that should be appended
       * @param childTNode The TNode of the child element
       */


      function appendChild(tView, lView, childRNode, childTNode) {
        var parentRNode = getParentRElement(tView, childTNode, lView);
        var renderer = lView[RENDERER];
        var parentTNode = childTNode.parent || lView[T_HOST];
        var anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);

        if (parentRNode != null) {
          if (Array.isArray(childRNode)) {
            for (var i = 0; i < childRNode.length; i++) {
              nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
            }
          } else {
            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
          }
        }

        _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
      }
      /**
       * Returns the first native node for a given LView, starting from the provided TNode.
       *
       * Native nodes are returned in the order in which those appear in the native tree (DOM).
       */


      function getFirstNativeNode(lView, tNode) {
        if (tNode !== null) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 32
          /* Icu */
          | 16
          /* Projection */
          );
          var tNodeType = tNode.type;

          if (tNodeType & 3
          /* AnyRNode */
          ) {
              return getNativeByTNode(tNode, lView);
            } else if (tNodeType & 4
          /* Container */
          ) {
              return getBeforeNodeForView(-1, lView[tNode.index]);
            } else if (tNodeType & 8
          /* ElementContainer */
          ) {
              var elIcuContainerChild = tNode.child;

              if (elIcuContainerChild !== null) {
                return getFirstNativeNode(lView, elIcuContainerChild);
              } else {
                var rNodeOrLContainer = lView[tNode.index];

                if (isLContainer(rNodeOrLContainer)) {
                  return getBeforeNodeForView(-1, rNodeOrLContainer);
                } else {
                  return unwrapRNode(rNodeOrLContainer);
                }
              }
            } else if (tNodeType & 32
          /* Icu */
          ) {
              var nextRNode = icuContainerIterate(tNode, lView);
              var rNode = nextRNode(); // If the ICU container has no nodes, than we use the ICU anchor as the node.

              return rNode || unwrapRNode(lView[tNode.index]);
            } else {
            var projectionNodes = getProjectionNodes(lView, tNode);

            if (projectionNodes !== null) {
              if (Array.isArray(projectionNodes)) {
                return projectionNodes[0];
              }

              var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
              ngDevMode && assertParentView(parentView);
              return getFirstNativeNode(parentView, projectionNodes);
            } else {
              return getFirstNativeNode(lView, tNode.next);
            }
          }
        }

        return null;
      }

      function getProjectionNodes(lView, tNode) {
        if (tNode !== null) {
          var componentView = lView[DECLARATION_COMPONENT_VIEW];
          var componentHost = componentView[T_HOST];
          var slotIdx = tNode.projection;
          ngDevMode && assertProjectionSlots(lView);
          return componentHost.projection[slotIdx];
        }

        return null;
      }

      function getBeforeNodeForView(viewIndexInContainer, lContainer) {
        var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;

        if (nextViewIndex < lContainer.length) {
          var lView = lContainer[nextViewIndex];
          var firstTNodeOfView = lView[TVIEW].firstChild;

          if (firstTNodeOfView !== null) {
            return getFirstNativeNode(lView, firstTNodeOfView);
          }
        }

        return lContainer[NATIVE];
      }
      /**
       * Removes a native node itself using a given renderer. To remove the node we are looking up its
       * parent from the native tree as not all platforms / browsers support the equivalent of
       * node.remove().
       *
       * @param renderer A renderer to be used
       * @param rNode The native node that should be removed
       * @param isHostElement A flag indicating if a node to be removed is a host of a component.
       */


      function nativeRemoveNode(renderer, rNode, isHostElement) {
        ngDevMode && ngDevMode.rendererRemoveNode++;
        var nativeParent = nativeParentNode(renderer, rNode);

        if (nativeParent) {
          nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
        }
      }
      /**
       * Performs the operation of `action` on the node. Typically this involves inserting or removing
       * nodes on the LView or projection boundary.
       */


      function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
        while (tNode != null) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 16
          /* Projection */
          | 32
          /* Icu */
          );
          var rawSlotValue = lView[tNode.index];
          var tNodeType = tNode.type;

          if (isProjection) {
            if (action === 0
            /* Create */
            ) {
                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
                tNode.flags |= 4
                /* isProjected */
                ;
              }
          }

          if ((tNode.flags & 64
          /* isDetached */
          ) !== 64
          /* isDetached */
          ) {
              if (tNodeType & 8
              /* ElementContainer */
              ) {
                  applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
                } else if (tNodeType & 32
              /* Icu */
              ) {
                  var nextRNode = icuContainerIterate(tNode, lView);
                  var rNode = void 0;

                  while (rNode = nextRNode()) {
                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
                  }

                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
                } else if (tNodeType & 16
              /* Projection */
              ) {
                  applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
                } else {
                ngDevMode && assertTNodeType(tNode, 3
                /* AnyRNode */
                | 4
                /* Container */
                );
                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
              }
            }

          tNode = isProjection ? tNode.projectionNext : tNode.next;
        }
      }

      function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
        applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
      }
      /**
       * `applyProjection` performs operation on the projection.
       *
       * Inserting a projection requires us to locate the projected nodes from the parent component. The
       * complication is that those nodes themselves could be re-projected from their parent component.
       *
       * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
       * @param lView The `LView` which needs to be inserted, detached, destroyed.
       * @param tProjectionNode node to project
       */


      function applyProjection(tView, lView, tProjectionNode) {
        var renderer = lView[RENDERER];
        var parentRNode = getParentRElement(tView, tProjectionNode, lView);
        var parentTNode = tProjectionNode.parent || lView[T_HOST];
        var beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
        applyProjectionRecursive(renderer, 0
        /* Create */
        , lView, tProjectionNode, parentRNode, beforeNode);
      }
      /**
       * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
       * detach, destroy)
       *
       * Inserting a projection requires us to locate the projected nodes from the parent component. The
       * complication is that those nodes themselves could be re-projected from their parent component.
       *
       * @param renderer Render to use
       * @param action action to perform (insert, detach, destroy)
       * @param lView The LView which needs to be inserted, detached, destroyed.
       * @param tProjectionNode node to project
       * @param parentRElement parent DOM element for insertion/removal.
       * @param beforeNode Before which node the insertions should happen.
       */


      function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
        var componentLView = lView[DECLARATION_COMPONENT_VIEW];
        var componentNode = componentLView[T_HOST];
        ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
        var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];

        if (Array.isArray(nodeToProjectOrRNodes)) {
          // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
          // need to support passing projectable nodes, so we cheat and put them in the TNode
          // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
          // because we know that that TView is not shared and therefore it will not be a problem.
          // This should be refactored and cleaned up.
          for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {
            var rNode = nodeToProjectOrRNodes[i];
            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
          }
        } else {
          var nodeToProject = nodeToProjectOrRNodes;
          var projectedComponentLView = componentLView[PARENT];
          applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
        }
      }
      /**
       * `applyContainer` performs an operation on the container and its views as specified by
       * `action` (insert, detach, destroy)
       *
       * Inserting a Container is complicated by the fact that the container may have Views which
       * themselves have containers or projections.
       *
       * @param renderer Renderer to use
       * @param action action to perform (insert, detach, destroy)
       * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
       * @param parentRElement parent DOM element for insertion/removal.
       * @param beforeNode Before which node the insertions should happen.
       */


      function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
        ngDevMode && assertLContainer(lContainer);
        var anchor = lContainer[NATIVE]; // LContainer has its own before node.

        var _native5 = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
        // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor
        // node (comment in the DOM) that will be different from the LContainer's host node. In this
        // particular case we need to execute action on 2 nodes:
        // - container's host node (this is done in the executeActionOnElementOrContainer)
        // - container's host node (this is done here)


        if (anchor !== _native5) {
          // This is very strange to me (Misko). I would expect that the native is same as anchor. I
          // don't see a reason why they should be different, but they are.
          //
          // If they are we need to process the second anchor as well.
          applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
        }

        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var lView = lContainer[i];
          applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
        }
      }
      /**
       * Writes class/style to element.
       *
       * @param renderer Renderer to use.
       * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
       * @param rNode The Node to write to.
       * @param prop Property to write to. This would be the class/style name.
       * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
       *        otherwise).
       */


      function applyStyling(renderer, isClassBased, rNode, prop, value) {
        var isProcedural = isProceduralRenderer(renderer);

        if (isClassBased) {
          // We actually want JS true/false here because any truthy value should add the class
          if (!value) {
            ngDevMode && ngDevMode.rendererRemoveClass++;

            if (isProcedural) {
              renderer.removeClass(rNode, prop);
            } else {
              rNode.classList.remove(prop);
            }
          } else {
            ngDevMode && ngDevMode.rendererAddClass++;

            if (isProcedural) {
              renderer.addClass(rNode, prop);
            } else {
              ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
              rNode.classList.add(prop);
            }
          }
        } else {
          var flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;

          if (value == null
          /** || value === undefined */
          ) {
              ngDevMode && ngDevMode.rendererRemoveStyle++;

              if (isProcedural) {
                renderer.removeStyle(rNode, prop, flags);
              } else {
                rNode.style.removeProperty(prop);
              }
            } else {
            // A value is important if it ends with `!important`. The style
            // parser strips any semicolons at the end of the value.
            var isImportant = typeof value === 'string' ? value.endsWith('!important') : false;

            if (isImportant) {
              // !important has to be stripped from the value for it to be valid.
              value = value.slice(0, -10);
              flags |= RendererStyleFlags2.Important;
            }

            ngDevMode && ngDevMode.rendererSetStyle++;

            if (isProcedural) {
              renderer.setStyle(rNode, prop, value, flags);
            } else {
              ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
              rNode.style.setProperty(prop, value, isImportant ? 'important' : '');
            }
          }
        }
      }
      /**
       * Write `cssText` to `RElement`.
       *
       * This function does direct write without any reconciliation. Used for writing initial values, so
       * that static styling values do not pull in the style parser.
       *
       * @param renderer Renderer to use
       * @param element The element which needs to be updated.
       * @param newValue The new class list to write.
       */


      function writeDirectStyle(renderer, element, newValue) {
        ngDevMode && assertString(newValue, '\'newValue\' should be a string');

        if (isProceduralRenderer(renderer)) {
          renderer.setAttribute(element, 'style', newValue);
        } else {
          element.style.cssText = newValue;
        }

        ngDevMode && ngDevMode.rendererSetStyle++;
      }
      /**
       * Write `className` to `RElement`.
       *
       * This function does direct write without any reconciliation. Used for writing initial values, so
       * that static styling values do not pull in the style parser.
       *
       * @param renderer Renderer to use
       * @param element The element which needs to be updated.
       * @param newValue The new class list to write.
       */


      function writeDirectClass(renderer, element, newValue) {
        ngDevMode && assertString(newValue, '\'newValue\' should be a string');

        if (isProceduralRenderer(renderer)) {
          if (newValue === '') {
            // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
            renderer.removeAttribute(element, 'class');
          } else {
            renderer.setAttribute(element, 'class', newValue);
          }
        } else {
          element.className = newValue;
        }

        ngDevMode && ngDevMode.rendererSetClassName++;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an index of `classToSearch` in `className` taking token boundaries into account.
       *
       * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
       *
       * @param className A string containing classes (whitespace separated)
       * @param classToSearch A class name to locate
       * @param startingIndex Starting location of search
       * @returns an index of the located class (or -1 if not found)
       */


      function classIndexOf(className, classToSearch, startingIndex) {
        ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
        var end = className.length;

        while (true) {
          var foundIndex = className.indexOf(classToSearch, startingIndex);
          if (foundIndex === -1) return foundIndex;

          if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32
          /* SPACE */
          ) {
              // Ensure that it has leading whitespace
              var length = classToSearch.length;

              if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32
              /* SPACE */
              ) {
                  // Ensure that it has trailing whitespace
                  return foundIndex;
                }
            } // False positive, keep searching from where we left off.


          startingIndex = foundIndex + 1;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;
      var NG_TEMPLATE_SELECTOR = 'ng-template';
      /**
       * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
       *
       * @param attrs `TAttributes` to search through.
       * @param cssClassToMatch class to match (lowercase)
       * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
       *    addition to the `AttributeMarker.Classes`.
       */

      function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
        // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
        // It is strange to me that sometimes the class information comes in form of `class` attribute
        // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
        // if that is the right behavior.
        ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
        var i = 0;

        while (i < attrs.length) {
          var item = attrs[i++];

          if (isProjectionMode && item === 'class') {
            item = attrs[i];

            if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
              return true;
            }
          } else if (item === 1
          /* Classes */
          ) {
              // We found the classes section. Start searching for the class.
              while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
                // while we have strings
                if (item.toLowerCase() === cssClassToMatch) return true;
              }

              return false;
            }
        }

        return false;
      }
      /**
       * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
       *
       * @param tNode current TNode
       */


      function isInlineTemplate(tNode) {
        return tNode.type === 4
        /* Container */
        && tNode.value !== NG_TEMPLATE_SELECTOR;
      }
      /**
       * Function that checks whether a given tNode matches tag-based selector and has a valid type.
       *
       * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
       * directive matching mode:
       * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
       * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
       * tag name was extracted from * syntax so we would match the same directive twice);
       * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
       * (applicable to TNodeType.Container only).
       */


      function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
        var tagNameToCompare = tNode.type === 4
        /* Container */
        && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
        return currentSelector === tagNameToCompare;
      }
      /**
       * A utility function to match an Ivy node static data against a simple CSS selector
       *
       * @param node static data of the node to match
       * @param selector The selector to try matching against the node.
       * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
       * directive matching.
       * @returns true if node matches the selector.
       */


      function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
        ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
        var mode = 4
        /* ELEMENT */
        ;
        var nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.

        var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing ":not" selectors, we skip to the next ":not" if the
        // current one doesn't match

        var skipToNextSelector = false;

        for (var i = 0; i < selector.length; i++) {
          var current = selector[i];

          if (typeof current === 'number') {
            // If we finish processing a :not selector and it hasn't failed, return false
            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
              return false;
            } // If we are skipping to the next :not() and this mode flag is positive,
            // it's a part of the current :not() selector, and we should keep skipping


            if (skipToNextSelector && isPositive(current)) continue;
            skipToNextSelector = false;
            mode = current | mode & 1
            /* NOT */
            ;
            continue;
          }

          if (skipToNextSelector) continue;

          if (mode & 4
          /* ELEMENT */
          ) {
              mode = 2
              /* ATTRIBUTE */
              | mode & 1
              /* NOT */
              ;

              if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }
            } else {
            var selectorAttrValue = mode & 8
            /* CLASS */
            ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with
            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])

            if (mode & 8
            /* CLASS */
            && tNode.attrs !== null) {
              if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }

              continue;
            }

            var attrName = mode & 8
            /* CLASS */
            ? 'class' : current;
            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);

            if (attrIndexInNode === -1) {
              if (isPositive(mode)) return false;
              skipToNextSelector = true;
              continue;
            }

            if (selectorAttrValue !== '') {
              var nodeAttrValue = void 0;

              if (attrIndexInNode > nameOnlyMarkerIdx) {
                nodeAttrValue = '';
              } else {
                ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0
                /* NamespaceURI */
                , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match
                // selectors without case-sensitivity
                // (selectors are already in lowercase when generated)

                nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
              }

              var compareAgainstClassName = mode & 8
              /* CLASS */
              ? nodeAttrValue : null;

              if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2
              /* ATTRIBUTE */
              && selectorAttrValue !== nodeAttrValue) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }
            }
          }
        }

        return isPositive(mode) || skipToNextSelector;
      }

      function isPositive(mode) {
        return (mode & 1
        /* NOT */
        ) === 0;
      }
      /**
       * Examines the attribute's definition array for a node to find the index of the
       * attribute that matches the given `name`.
       *
       * NOTE: This will not match namespaced attributes.
       *
       * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
       * The following table summarizes which types of attributes we attempt to match:
       *
       * ===========================================================================================================
       * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
       * Attributes
       * ===========================================================================================================
       * Inline + Projection     | YES               | YES                 | NO                  | YES
       * -----------------------------------------------------------------------------------------------------------
       * Inline + Directive      | NO                | NO                  | YES                 | NO
       * -----------------------------------------------------------------------------------------------------------
       * Non-inline + Projection | YES               | YES                 | NO                  | YES
       * -----------------------------------------------------------------------------------------------------------
       * Non-inline + Directive  | YES               | YES                 | NO                  | YES
       * ===========================================================================================================
       *
       * @param name the name of the attribute to find
       * @param attrs the attribute array to examine
       * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
       * rather than a manually expanded template node (e.g `<ng-template>`).
       * @param isProjectionMode true if we are matching against content projection otherwise we are
       * matching against directives.
       */


      function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
        if (attrs === null) return -1;
        var i = 0;

        if (isProjectionMode || !isInlineTemplate) {
          var bindingsMode = false;

          while (i < attrs.length) {
            var maybeAttrName = attrs[i];

            if (maybeAttrName === name) {
              return i;
            } else if (maybeAttrName === 3
            /* Bindings */
            || maybeAttrName === 6
            /* I18n */
            ) {
                bindingsMode = true;
              } else if (maybeAttrName === 1
            /* Classes */
            || maybeAttrName === 2
            /* Styles */
            ) {
                var value = attrs[++i]; // We should skip classes here because we have a separate mechanism for
                // matching classes in projection mode.

                while (typeof value === 'string') {
                  value = attrs[++i];
                }

                continue;
              } else if (maybeAttrName === 4
            /* Template */
            ) {
                // We do not care about Template attributes in this scenario.
                break;
              } else if (maybeAttrName === 0
            /* NamespaceURI */
            ) {
                // Skip the whole namespaced attribute and value. This is by design.
                i += 4;
                continue;
              } // In binding mode there are only names, rather than name-value pairs.


            i += bindingsMode ? 1 : 2;
          } // We did not match the attribute


          return -1;
        } else {
          return matchTemplateAttribute(attrs, name);
        }
      }

      function isNodeMatchingSelectorList(tNode, selector) {
        var isProjectionMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        for (var i = 0; i < selector.length; i++) {
          if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
            return true;
          }
        }

        return false;
      }

      function getProjectAsAttrValue(tNode) {
        var nodeAttrs = tNode.attrs;

        if (nodeAttrs != null) {
          var ngProjectAsAttrIdx = nodeAttrs.indexOf(5
          /* ProjectAs */
          ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
          // (attribute names are stored at even indexes)

          if ((ngProjectAsAttrIdx & 1) === 0) {
            return nodeAttrs[ngProjectAsAttrIdx + 1];
          }
        }

        return null;
      }

      function getNameOnlyMarkerIndex(nodeAttrs) {
        for (var i = 0; i < nodeAttrs.length; i++) {
          var nodeAttr = nodeAttrs[i];

          if (isNameOnlyAttributeMarker(nodeAttr)) {
            return i;
          }
        }

        return nodeAttrs.length;
      }

      function matchTemplateAttribute(attrs, name) {
        var i = attrs.indexOf(4
        /* Template */
        );

        if (i > -1) {
          i++;

          while (i < attrs.length) {
            var attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the
            // attrs array (that starts with a number that represents an attribute marker).

            if (typeof attr === 'number') return -1;
            if (attr === name) return i;
            i++;
          }
        }

        return -1;
      }
      /**
       * Checks whether a selector is inside a CssSelectorList
       * @param selector Selector to be checked.
       * @param list List in which to look for the selector.
       */


      function isSelectorInSelectorList(selector, list) {
        selectorListLoop: for (var i = 0; i < list.length; i++) {
          var currentSelectorInList = list[i];

          if (selector.length !== currentSelectorInList.length) {
            continue;
          }

          for (var j = 0; j < selector.length; j++) {
            if (selector[j] !== currentSelectorInList[j]) {
              continue selectorListLoop;
            }
          }

          return true;
        }

        return false;
      }

      function maybeWrapInNotSelector(isNegativeMode, chunk) {
        return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
      }

      function stringifyCSSSelector(selector) {
        var result = selector[0];
        var i = 1;
        var mode = 2
        /* ATTRIBUTE */
        ;
        var currentChunk = '';
        var isNegativeMode = false;

        while (i < selector.length) {
          var valueOrMarker = selector[i];

          if (typeof valueOrMarker === 'string') {
            if (mode & 2
            /* ATTRIBUTE */
            ) {
                var attrValue = selector[++i];
                currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
              } else if (mode & 8
            /* CLASS */
            ) {
                currentChunk += '.' + valueOrMarker;
              } else if (mode & 4
            /* ELEMENT */
            ) {
                currentChunk += ' ' + valueOrMarker;
              }
          } else {
            //
            // Append current chunk to the final result in case we come across SelectorFlag, which
            // indicates that the previous section of a selector is over. We need to accumulate content
            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
            // ```
            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
            // ```
            // should be transformed to `.classA :not(.classB .classC)`.
            //
            // Note: for negative selector part, we accumulate content between flags until we find the
            // next negative flag. This is needed to support a case where `:not()` rule contains more than
            // one chunk, e.g. the following selector:
            // ```
            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
            // ```
            // should be stringified to `:not(p.foo) :not(.bar)`
            //
            if (currentChunk !== '' && !isPositive(valueOrMarker)) {
              result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
              currentChunk = '';
            }

            mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector.

            isNegativeMode = isNegativeMode || !isPositive(mode);
          }

          i++;
        }

        if (currentChunk !== '') {
          result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        }

        return result;
      }
      /**
       * Generates string representation of CSS selector in parsed form.
       *
       * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
       * additional parsing at runtime (for example, for directive matching). However in some cases (for
       * example, while bootstrapping a component), a string version of the selector is required to query
       * for the host element on the page. This function takes the parsed form of a selector and returns
       * its string representation.
       *
       * @param selectorList selector in parsed form
       * @returns string representation of a given selector
       */


      function stringifyCSSSelectorList(selectorList) {
        return selectorList.map(stringifyCSSSelector).join(',');
      }
      /**
       * Extracts attributes and classes information from a given CSS selector.
       *
       * This function is used while creating a component dynamically. In this case, the host element
       * (that is created dynamically) should contain attributes and classes specified in component's CSS
       * selector.
       *
       * @param selector CSS selector in parsed form (in a form of array)
       * @returns object with `attrs` and `classes` fields that contain extracted information
       */


      function extractAttrsAndClassesFromSelector(selector) {
        var attrs = [];
        var classes = [];
        var i = 1;
        var mode = 2
        /* ATTRIBUTE */
        ;

        while (i < selector.length) {
          var valueOrMarker = selector[i];

          if (typeof valueOrMarker === 'string') {
            if (mode === 2
            /* ATTRIBUTE */
            ) {
                if (valueOrMarker !== '') {
                  attrs.push(valueOrMarker, selector[++i]);
                }
              } else if (mode === 8
            /* CLASS */
            ) {
                classes.push(valueOrMarker);
              }
          } else {
            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector. Since attributes and classes are
            // extracted only for "positive" part of the selector, we can stop here.
            if (!isPositive(mode)) break;
            mode = valueOrMarker;
          }

          i++;
        }

        return {
          attrs: attrs,
          classes: classes
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** A special value which designates that a value has not changed. */


      var NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {
        __brand__: 'NO_CHANGE'
      } : {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Advances to an element for later binding instructions.
       *
       * Used in conjunction with instructions like {@link property} to act on elements with specified
       * indices, for example those created with {@link element} or {@link elementStart}.
       *
       * ```ts
       * (rf: RenderFlags, ctx: any) => {
       *   if (rf & 1) {
       *     text(0, 'Hello');
       *     text(1, 'Goodbye')
       *     element(2, 'div');
       *   }
       *   if (rf & 2) {
       *     advance(2); // Advance twice to the <div>.
       *     property('title', 'test');
       *   }
       *  }
       * ```
       * @param delta Number of elements to advance forwards by.
       *
       * @codeGenApi
       */

      function ɵɵadvance(delta) {
        ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
        selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());
      }

      function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
        ngDevMode && assertIndexInDeclRange(lView, index); // Flush the initial hooks for elements in the view that have been added up to this point.
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks

        if (!checkNoChangesMode) {
          var hooksInitPhaseCompleted = (lView[FLAGS] & 3
          /* InitPhaseStateMask */
          ) === 3
          /* InitPhaseCompleted */
          ;

          if (hooksInitPhaseCompleted) {
            var preOrderCheckHooks = tView.preOrderCheckHooks;

            if (preOrderCheckHooks !== null) {
              executeCheckHooks(lView, preOrderCheckHooks, index);
            }
          } else {
            var preOrderHooks = tView.preOrderHooks;

            if (preOrderHooks !== null) {
              executeInitAndCheckHooks(lView, preOrderHooks, 0
              /* OnInitHooksToBeRun */
              , index);
            }
          }
        } // We must set the selected index *after* running the hooks, because hooks may have side-effects
        // that cause other template functions to run, thus updating the selected index, which is global
        // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
        // will be altered by the time we leave the `ɵɵadvance` instruction.


        setSelectedIndex(index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function toTStylingRange(prev, next) {
        ngDevMode && assertNumberInRange(prev, 0, 32767
        /* UNSIGNED_MASK */
        );
        ngDevMode && assertNumberInRange(next, 0, 32767
        /* UNSIGNED_MASK */
        );
        return prev << 17
        /* PREV_SHIFT */
        | next << 2
        /* NEXT_SHIFT */
        ;
      }

      function getTStylingRangePrev(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange >> 17
        /* PREV_SHIFT */
        & 32767
        /* UNSIGNED_MASK */
        ;
      }

      function getTStylingRangePrevDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 2
        /* PREV_DUPLICATE */
        ) == 2
        /* PREV_DUPLICATE */
        ;
      }

      function setTStylingRangePrev(tStylingRange, previous) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        ngDevMode && assertNumberInRange(previous, 0, 32767
        /* UNSIGNED_MASK */
        );
        return tStylingRange & ~4294836224
        /* PREV_MASK */
        | previous << 17
        /* PREV_SHIFT */
        ;
      }

      function setTStylingRangePrevDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange | 2
        /* PREV_DUPLICATE */
        ;
      }

      function getTStylingRangeNext(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 131068
        /* NEXT_MASK */
        ) >> 2
        /* NEXT_SHIFT */
        ;
      }

      function setTStylingRangeNext(tStylingRange, next) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        ngDevMode && assertNumberInRange(next, 0, 32767
        /* UNSIGNED_MASK */
        );
        return tStylingRange & ~131068
        /* NEXT_MASK */
        | //
        next << 2
        /* NEXT_SHIFT */
        ;
      }

      function getTStylingRangeNextDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 1
        /* NEXT_DUPLICATE */
        ) === 1
        /* NEXT_DUPLICATE */
        ;
      }

      function setTStylingRangeNextDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange | 1
        /* NEXT_DUPLICATE */
        ;
      }

      function getTStylingRangeTail(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        var next = getTStylingRangeNext(tStylingRange);
        return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Patch a `debug` property on top of the existing object.
       *
       * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
       *
       * @param obj Object to patch
       * @param debug Value to patch
       */


      function attachDebugObject(obj, debug) {
        if (ngDevMode) {
          Object.defineProperty(obj, 'debug', {
            value: debug,
            enumerable: false
          });
        } else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
        }
      }
      /**
       * Patch a `debug` property getter on top of the existing object.
       *
       * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
       *
       * @param obj Object to patch
       * @param debugGetter Getter returning a value to patch
       */


      function attachDebugGetter(obj, debugGetter) {
        if (ngDevMode) {
          Object.defineProperty(obj, 'debug', {
            get: debugGetter,
            enumerable: false
          });
        } else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NG_DEV_MODE = (typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode();
      /*
       * This file contains conditionally attached classes which provide human readable (debug) level
       * information for `LView`, `LContainer` and other internal data structures. These data structures
       * are stored internally as array which makes it very difficult during debugging to reason about the
       * current state of the system.
       *
       * Patching the array with extra property does change the array's hidden class' but it does not
       * change the cost of access, therefore this patching should not have significant if any impact in
       * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
       *
       * So instead of seeing:
       * ```
       * Array(30) [Object, 659, null, …]
       * ```
       *
       * You get to see:
       * ```
       * LViewDebug {
       *   views: [...],
       *   flags: {attached: true, ...}
       *   nodes: [
       *     {html: '<div id="123">', ..., nodes: [
       *       {html: '<span>', ..., nodes: null}
       *     ]}
       *   ]
       * }
       * ```
       */

      var LVIEW_COMPONENT_CACHE;
      var LVIEW_EMBEDDED_CACHE;
      var LVIEW_ROOT;
      /**
       * This function clones a blueprint and creates LView.
       *
       * Simple slice will keep the same type, and we need it to be LView
       */

      function cloneToLViewFromTViewBlueprint(tView) {
        var debugTView = tView;
        var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
        return lView.concat(tView.blueprint);
      }

      function getLViewToClone(type, name) {
        switch (type) {
          case 0
          /* Root */
          :
            if (LVIEW_ROOT === undefined) LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
            return LVIEW_ROOT;

          case 1
          /* Component */
          :
            if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();
            var componentArray = LVIEW_COMPONENT_CACHE.get(name);

            if (componentArray === undefined) {
              componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
              LVIEW_COMPONENT_CACHE.set(name, componentArray);
            }

            return componentArray;

          case 2
          /* Embedded */
          :
            if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();
            var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);

            if (embeddedArray === undefined) {
              embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
              LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
            }

            return embeddedArray;
        }
      }

      function nameSuffix(text) {
        if (text == null) return '';
        var index = text.lastIndexOf('_Template');
        return '_' + (index === -1 ? text : text.substr(0, index));
      }
      /**
       * This class is a debug version of Object literal so that we can have constructor name show up
       * in
       * debug tools in ngDevMode.
       */


      var TViewConstructor = /*#__PURE__*/function () {
        function TView(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {
          _classCallCheck(this, TView);

          this.type = type;
          this.blueprint = blueprint;
          this.template = template;
          this.queries = queries;
          this.viewQuery = viewQuery;
          this.declTNode = declTNode;
          this.data = data;
          this.bindingStartIndex = bindingStartIndex;
          this.expandoStartIndex = expandoStartIndex;
          this.hostBindingOpCodes = hostBindingOpCodes;
          this.firstCreatePass = firstCreatePass;
          this.firstUpdatePass = firstUpdatePass;
          this.staticViewQueries = staticViewQueries;
          this.staticContentQueries = staticContentQueries;
          this.preOrderHooks = preOrderHooks;
          this.preOrderCheckHooks = preOrderCheckHooks;
          this.contentHooks = contentHooks;
          this.contentCheckHooks = contentCheckHooks;
          this.viewHooks = viewHooks;
          this.viewCheckHooks = viewCheckHooks;
          this.destroyHooks = destroyHooks;
          this.cleanup = cleanup;
          this.contentQueries = contentQueries;
          this.components = components;
          this.directiveRegistry = directiveRegistry;
          this.pipeRegistry = pipeRegistry;
          this.firstChild = firstChild;
          this.schemas = schemas;
          this.consts = consts;
          this.incompleteFirstPass = incompleteFirstPass;
          this._decls = _decls;
          this._vars = _vars;
        }

        _createClass2(TView, [{
          key: "template_",
          get: function get() {
            var buf = [];
            processTNodeChildren(this.firstChild, buf);
            return buf.join('');
          }
        }, {
          key: "type_",
          get: function get() {
            return TViewTypeAsString[this.type] || "TViewType.?".concat(this.type, "?");
          }
        }]);

        return TView;
      }();

      var TNode = /*#__PURE__*/function () {
        function TNode(tView_, //
        type, //
        index, //
        insertBeforeIndex, //
        injectorIndex, //
        directiveStart, //
        directiveEnd, //
        directiveStylingLast, //
        propertyBindings, //
        flags, //
        providerIndexes, //
        value, //
        attrs, //
        mergedAttrs, //
        localNames, //
        initialInputs, //
        inputs, //
        outputs, //
        tViews, //
        next, //
        projectionNext, //
        child, //
        parent, //
        projection, //
        styles, //
        stylesWithoutHost, //
        residualStyles, //
        classes, //
        classesWithoutHost, //
        residualClasses, //
        classBindings, //
        styleBindings) {
          _classCallCheck(this, TNode);

          this.tView_ = tView_;
          this.type = type;
          this.index = index;
          this.insertBeforeIndex = insertBeforeIndex;
          this.injectorIndex = injectorIndex;
          this.directiveStart = directiveStart;
          this.directiveEnd = directiveEnd;
          this.directiveStylingLast = directiveStylingLast;
          this.propertyBindings = propertyBindings;
          this.flags = flags;
          this.providerIndexes = providerIndexes;
          this.value = value;
          this.attrs = attrs;
          this.mergedAttrs = mergedAttrs;
          this.localNames = localNames;
          this.initialInputs = initialInputs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.tViews = tViews;
          this.next = next;
          this.projectionNext = projectionNext;
          this.child = child;
          this.parent = parent;
          this.projection = projection;
          this.styles = styles;
          this.stylesWithoutHost = stylesWithoutHost;
          this.residualStyles = residualStyles;
          this.classes = classes;
          this.classesWithoutHost = classesWithoutHost;
          this.residualClasses = residualClasses;
          this.classBindings = classBindings;
          this.styleBindings = styleBindings;
        }
        /**
         * Return a human debug version of the set of `NodeInjector`s which will be consulted when
         * resolving tokens from this `TNode`.
         *
         * When debugging applications, it is often difficult to determine which `NodeInjector`s will be
         * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be
         * consulted in order when resolving a token starting at this `TNode`.
         *
         * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is
         * difficult to reason about.
         *
         * @param lView The `LView` instance for this `TNode`.
         */


        _createClass2(TNode, [{
          key: "debugNodeInjectorPath",
          value: function debugNodeInjectorPath(lView) {
            var path = [];
            var injectorIndex = getInjectorIndex(this, lView);

            if (injectorIndex === -1) {
              // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for
              // parent NodeInjector.
              var parentLocation = getParentInjectorLocation(this, lView);

              if (parentLocation !== NO_PARENT_INJECTOR) {
                // We found a parent, so start searching from the parent location.
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              } else {// No parents have been found, so there are no `NodeInjector`s to consult.
              }
            }

            while (injectorIndex !== -1) {
              ngDevMode && assertNodeInjector(lView, injectorIndex);
              var tNode = lView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ];
              path.push(buildDebugNode(tNode, lView));
              var _parentLocation = lView[injectorIndex + 8
              /* PARENT */
              ];

              if (_parentLocation === NO_PARENT_INJECTOR) {
                injectorIndex = -1;
              } else {
                injectorIndex = getParentInjectorIndex(_parentLocation);
                lView = getParentInjectorView(_parentLocation, lView);
              }
            }

            return path;
          }
        }, {
          key: "type_",
          get: function get() {
            return toTNodeTypeAsString(this.type) || "TNodeType.?".concat(this.type, "?");
          }
        }, {
          key: "flags_",
          get: function get() {
            var flags = [];
            if (this.flags & 16
            /* hasClassInput */
            ) flags.push('TNodeFlags.hasClassInput');
            if (this.flags & 8
            /* hasContentQuery */
            ) flags.push('TNodeFlags.hasContentQuery');
            if (this.flags & 32
            /* hasStyleInput */
            ) flags.push('TNodeFlags.hasStyleInput');
            if (this.flags & 128
            /* hasHostBindings */
            ) flags.push('TNodeFlags.hasHostBindings');
            if (this.flags & 2
            /* isComponentHost */
            ) flags.push('TNodeFlags.isComponentHost');
            if (this.flags & 1
            /* isDirectiveHost */
            ) flags.push('TNodeFlags.isDirectiveHost');
            if (this.flags & 64
            /* isDetached */
            ) flags.push('TNodeFlags.isDetached');
            if (this.flags & 4
            /* isProjected */
            ) flags.push('TNodeFlags.isProjected');
            return flags.join('|');
          }
        }, {
          key: "template_",
          get: function get() {
            if (this.type & 1
            /* Text */
            ) return this.value;
            var buf = [];
            var tagName = typeof this.value === 'string' && this.value || this.type_;
            buf.push('<', tagName);

            if (this.flags) {
              buf.push(' ', this.flags_);
            }

            if (this.attrs) {
              for (var i = 0; i < this.attrs.length;) {
                var attrName = this.attrs[i++];

                if (typeof attrName == 'number') {
                  break;
                }

                var attrValue = this.attrs[i++];
                buf.push(' ', attrName, '="', attrValue, '"');
              }
            }

            buf.push('>');
            processTNodeChildren(this.child, buf);
            buf.push('</', tagName, '>');
            return buf.join('');
          }
        }, {
          key: "styleBindings_",
          get: function get() {
            return toDebugStyleBinding(this, false);
          }
        }, {
          key: "classBindings_",
          get: function get() {
            return toDebugStyleBinding(this, true);
          }
        }, {
          key: "providerIndexStart_",
          get: function get() {
            return this.providerIndexes & 1048575
            /* ProvidersStartIndexMask */
            ;
          }
        }, {
          key: "providerIndexEnd_",
          get: function get() {
            return this.providerIndexStart_ + (this.providerIndexes >>> 20
            /* CptViewProvidersCountShift */
            );
          }
        }]);

        return TNode;
      }();

      var TNodeDebug = TNode;

      function toDebugStyleBinding(tNode, isClassBased) {
        var tData = tNode.tView_.data;
        var bindings = [];
        var range = isClassBased ? tNode.classBindings : tNode.styleBindings;
        var prev = getTStylingRangePrev(range);
        var next = getTStylingRangeNext(range);
        var isTemplate = next !== 0;
        var cursor = isTemplate ? next : prev;

        while (cursor !== 0) {
          var itemKey = tData[cursor];
          var itemRange = tData[cursor + 1];
          bindings.unshift({
            key: itemKey,
            index: cursor,
            isTemplate: isTemplate,
            prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
            nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
            nextIndex: getTStylingRangeNext(itemRange),
            prevIndex: getTStylingRangePrev(itemRange)
          });
          if (cursor === prev) isTemplate = false;
          cursor = getTStylingRangePrev(itemRange);
        }

        bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
        return bindings;
      }

      function processTNodeChildren(tNode, buf) {
        while (tNode) {
          buf.push(tNode.template_);
          tNode = tNode.next;
        }
      }

      var TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || null;
      var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
      // `LView` constructor could have side-effects.

      /**
       * This function clones a blueprint and creates TData.
       *
       * Simple slice will keep the same type, and we need it to be TData
       */

      function cloneToTViewData(list) {
        if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();
        return TVIEWDATA_EMPTY.concat(list);
      }

      var LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || null;
      var MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || null;
      var TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || null;
      var TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || null;
      var TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || null;
      var TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || null;
      var LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || null;
      var TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || null;

      function attachLViewDebug(lView) {
        attachDebugObject(lView, new LViewDebug(lView));
      }

      function attachLContainerDebug(lContainer) {
        attachDebugObject(lContainer, new LContainerDebug(lContainer));
      }

      function toDebug(obj) {
        if (obj) {
          var debug = obj.debug;
          assertDefined(debug, 'Object does not have a debug representation.');
          return debug;
        } else {
          return obj;
        }
      }
      /**
       * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
       * reading.
       *
       * @param value possibly wrapped native DOM node.
       * @param includeChildren If `true` then the serialized HTML form will include child elements
       * (same
       * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
       * itself
       * (will not serialize child elements).
       */


      function toHtml(value) {
        var includeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var node = unwrapRNode(value);

        if (node) {
          switch (node.nodeType) {
            case Node.TEXT_NODE:
              return node.textContent;

            case Node.COMMENT_NODE:
              return "<!--".concat(node.textContent, "-->");

            case Node.ELEMENT_NODE:
              var outerHTML = node.outerHTML;

              if (includeChildren) {
                return outerHTML;
              } else {
                var innerHTML = '>' + node.innerHTML + '<';
                return outerHTML.split(innerHTML)[0] + '>';
              }

          }
        }

        return null;
      }

      var LViewDebug = /*#__PURE__*/function () {
        function LViewDebug(_raw_lView) {
          _classCallCheck(this, LViewDebug);

          this._raw_lView = _raw_lView;
        }
        /**
         * Flags associated with the `LView` unpacked into a more readable state.
         */


        _createClass2(LViewDebug, [{
          key: "flags",
          get: function get() {
            var flags = this._raw_lView[FLAGS];
            return {
              __raw__flags__: flags,
              initPhaseState: flags & 3
              /* InitPhaseStateMask */
              ,
              creationMode: !!(flags & 4
              /* CreationMode */
              ),
              firstViewPass: !!(flags & 8
              /* FirstLViewPass */
              ),
              checkAlways: !!(flags & 16
              /* CheckAlways */
              ),
              dirty: !!(flags & 64
              /* Dirty */
              ),
              attached: !!(flags & 128
              /* Attached */
              ),
              destroyed: !!(flags & 256
              /* Destroyed */
              ),
              isRoot: !!(flags & 512
              /* IsRoot */
              ),
              indexWithinInitPhase: flags >> 11
              /* IndexWithinInitPhaseShift */

            };
          }
        }, {
          key: "parent",
          get: function get() {
            return toDebug(this._raw_lView[PARENT]);
          }
        }, {
          key: "hostHTML",
          get: function get() {
            return toHtml(this._raw_lView[HOST], true);
          }
        }, {
          key: "html",
          get: function get() {
            return (this.nodes || []).map(mapToHTML).join('');
          }
        }, {
          key: "context",
          get: function get() {
            return this._raw_lView[CONTEXT];
          }
          /**
           * The tree of nodes associated with the current `LView`. The nodes have been normalized into
           * a tree structure with relevant details pulled out for readability.
           */

        }, {
          key: "nodes",
          get: function get() {
            var lView = this._raw_lView;
            var tNode = lView[TVIEW].firstChild;
            return toDebugNodes(tNode, lView);
          }
        }, {
          key: "template",
          get: function get() {
            return this.tView.template_;
          }
        }, {
          key: "tView",
          get: function get() {
            return this._raw_lView[TVIEW];
          }
        }, {
          key: "cleanup",
          get: function get() {
            return this._raw_lView[CLEANUP];
          }
        }, {
          key: "injector",
          get: function get() {
            return this._raw_lView[INJECTOR];
          }
        }, {
          key: "rendererFactory",
          get: function get() {
            return this._raw_lView[RENDERER_FACTORY];
          }
        }, {
          key: "renderer",
          get: function get() {
            return this._raw_lView[RENDERER];
          }
        }, {
          key: "sanitizer",
          get: function get() {
            return this._raw_lView[SANITIZER];
          }
        }, {
          key: "childHead",
          get: function get() {
            return toDebug(this._raw_lView[CHILD_HEAD]);
          }
        }, {
          key: "next",
          get: function get() {
            return toDebug(this._raw_lView[NEXT]);
          }
        }, {
          key: "childTail",
          get: function get() {
            return toDebug(this._raw_lView[CHILD_TAIL]);
          }
        }, {
          key: "declarationView",
          get: function get() {
            return toDebug(this._raw_lView[DECLARATION_VIEW]);
          }
        }, {
          key: "queries",
          get: function get() {
            return this._raw_lView[QUERIES];
          }
        }, {
          key: "tHost",
          get: function get() {
            return this._raw_lView[T_HOST];
          }
        }, {
          key: "decls",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);
          }
        }, {
          key: "vars",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);
          }
        }, {
          key: "expando",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
          }
          /**
           * Normalized view of child views (and containers) attached at this location.
           */

        }, {
          key: "childViews",
          get: function get() {
            var childViews = [];
            var child = this.childHead;

            while (child) {
              childViews.push(child);
              child = child.next;
            }

            return childViews;
          }
        }]);

        return LViewDebug;
      }();

      function mapToHTML(node) {
        if (node.type === 'ElementContainer') {
          return (node.children || []).map(mapToHTML).join('');
        } else if (node.type === 'IcuContainer') {
          throw new Error('Not implemented');
        } else {
          return toHtml(node["native"], true) || '';
        }
      }

      function toLViewRange(tView, lView, start, end) {
        var content = [];

        for (var index = start; index < end; index++) {
          content.push({
            index: index,
            t: tView.data[index],
            l: lView[index]
          });
        }

        return {
          start: start,
          end: end,
          length: end - start,
          content: content
        };
      }
      /**
       * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
       *
       * @param tNode
       * @param lView
       */


      function toDebugNodes(tNode, lView) {
        if (tNode) {
          var debugNodes = [];
          var tNodeCursor = tNode;

          while (tNodeCursor) {
            debugNodes.push(buildDebugNode(tNodeCursor, lView));
            tNodeCursor = tNodeCursor.next;
          }

          return debugNodes;
        } else {
          return [];
        }
      }

      function buildDebugNode(tNode, lView) {
        var rawValue = lView[tNode.index];

        var _native6 = unwrapRNode(rawValue);

        var factories = [];
        var instances = [];
        var tView = lView[TVIEW];

        for (var i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
          var def = tView.data[i];
          factories.push(def.type);
          instances.push(lView[i]);
        }

        return {
          html: toHtml(_native6),
          type: toTNodeTypeAsString(tNode.type),
          tNode: tNode,
          "native": _native6,
          children: toDebugNodes(tNode.child, lView),
          factories: factories,
          instances: instances,
          injector: buildNodeInjectorDebug(tNode, tView, lView),

          get injectorResolutionPath() {
            return tNode.debugNodeInjectorPath(lView);
          }

        };
      }

      function buildNodeInjectorDebug(tNode, tView, lView) {
        var viewProviders = [];

        for (var i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {
          viewProviders.push(tView.data[i]);
        }

        var providers = [];

        for (var _i9 = tNode.providerIndexEnd_; _i9 < tNode.directiveEnd; _i9++) {
          providers.push(tView.data[_i9]);
        }

        var nodeInjectorDebug = {
          bloom: toBloom(lView, tNode.injectorIndex),
          cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),
          providers: providers,
          viewProviders: viewProviders,
          parentInjectorIndex: lView[tNode.providerIndexStart_ - 1]
        };
        return nodeInjectorDebug;
      }
      /**
       * Convert a number at `idx` location in `array` into binary representation.
       *
       * @param array
       * @param idx
       */


      function binary(array, idx) {
        var value = array[idx]; // If not a number we print 8 `?` to retain alignment but let user know that it was called on
        // wrong type.

        if (typeof value !== 'number') return '????????'; // We prefix 0s so that we have constant length number

        var text = '00000000' + value.toString(2);
        return text.substring(text.length - 8);
      }
      /**
       * Convert a bloom filter at location `idx` in `array` into binary representation.
       *
       * @param array
       * @param idx
       */


      function toBloom(array, idx) {
        if (idx < 0) {
          return 'NO_NODE_INJECTOR';
        }

        return "".concat(binary(array, idx + 7), "_").concat(binary(array, idx + 6), "_").concat(binary(array, idx + 5), "_").concat(binary(array, idx + 4), "_").concat(binary(array, idx + 3), "_").concat(binary(array, idx + 2), "_").concat(binary(array, idx + 1), "_").concat(binary(array, idx + 0));
      }

      var LContainerDebug = /*#__PURE__*/function () {
        function LContainerDebug(_raw_lContainer) {
          _classCallCheck(this, LContainerDebug);

          this._raw_lContainer = _raw_lContainer;
        }

        _createClass2(LContainerDebug, [{
          key: "hasTransplantedViews",
          get: function get() {
            return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
          }
        }, {
          key: "views",
          get: function get() {
            return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);
          }
        }, {
          key: "parent",
          get: function get() {
            return toDebug(this._raw_lContainer[PARENT]);
          }
        }, {
          key: "movedViews",
          get: function get() {
            return this._raw_lContainer[MOVED_VIEWS];
          }
        }, {
          key: "host",
          get: function get() {
            return this._raw_lContainer[HOST];
          }
        }, {
          key: "native",
          get: function get() {
            return this._raw_lContainer[NATIVE];
          }
        }, {
          key: "next",
          get: function get() {
            return toDebug(this._raw_lContainer[NEXT]);
          }
        }]);

        return LContainerDebug;
      }();

      var ɵ0$5 = function ɵ0$5() {
        return Promise.resolve(null);
      };
      /**
       * A permanent marker promise which signifies that the current CD tree is
       * clean.
       */


      var _CLEAN_PROMISE = ɵ0$5();
      /**
       * Invoke `HostBindingsFunction`s for view.
       *
       * This methods executes `TView.hostBindingOpCodes`. It is used to execute the
       * `HostBindingsFunction`s associated with the current `LView`.
       *
       * @param tView Current `TView`.
       * @param lView Current `LView`.
       */


      function processHostBindingOpCodes(tView, lView) {
        var hostBindingOpCodes = tView.hostBindingOpCodes;
        if (hostBindingOpCodes === null) return;

        try {
          for (var i = 0; i < hostBindingOpCodes.length; i++) {
            var opCode = hostBindingOpCodes[i];

            if (opCode < 0) {
              // Negative numbers are element indexes.
              setSelectedIndex(~opCode);
            } else {
              // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
              var directiveIdx = opCode;
              var bindingRootIndx = hostBindingOpCodes[++i];
              var hostBindingFn = hostBindingOpCodes[++i];
              setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
              var context = lView[directiveIdx];
              hostBindingFn(2
              /* Update */
              , context);
            }
          }
        } finally {
          setSelectedIndex(-1);
        }
      }
      /** Refreshes all content queries declared by directives in a given view */


      function refreshContentQueries(tView, lView) {
        var contentQueries = tView.contentQueries;

        if (contentQueries !== null) {
          for (var i = 0; i < contentQueries.length; i += 2) {
            var queryStartIdx = contentQueries[i];
            var directiveDefIdx = contentQueries[i + 1];

            if (directiveDefIdx !== -1) {
              var _directiveDef2 = tView.data[directiveDefIdx];
              ngDevMode && assertDefined(_directiveDef2, 'DirectiveDef not found.');
              ngDevMode && assertDefined(_directiveDef2.contentQueries, 'contentQueries function should be defined');
              setCurrentQueryIndex(queryStartIdx);

              _directiveDef2.contentQueries(2
              /* Update */
              , lView[directiveDefIdx], directiveDefIdx);
            }
          }
        }
      }
      /** Refreshes child components in the current view (update mode). */


      function refreshChildComponents(hostLView, components) {
        for (var i = 0; i < components.length; i++) {
          refreshComponent(hostLView, components[i]);
        }
      }
      /** Renders child components in the current view (creation mode). */


      function renderChildComponents(hostLView, components) {
        for (var i = 0; i < components.length; i++) {
          renderComponent(hostLView, components[i]);
        }
      }

      function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
        var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
        lView[HOST] = host;
        lView[FLAGS] = flags | 4
        /* CreationMode */
        | 128
        /* Attached */
        | 8
        /* FirstLViewPass */
        ;
        resetPreOrderHookFlags(lView);
        ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
        lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
        lView[CONTEXT] = context;
        lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];
        ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
        lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
        ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
        lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
        lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
        lView[T_HOST] = tHostNode;
        ngDevMode && assertEqual(tView.type == 2
        /* Embedded */
        ? parentLView !== null : true, true, 'Embedded views must have parentLView');
        lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2
        /* Embedded */
        ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
        ngDevMode && attachLViewDebug(lView);
        return lView;
      }

      function getOrCreateTNode(tView, index, type, name, attrs) {
        ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
        // `view_engine_compatibility` for additional context.
        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.'); // Keep this function short, so that the VM will inline it.

        ngDevMode && assertPureTNodeType(type);
        var tNode = tView.data[index];

        if (tNode === null) {
          tNode = createTNodeAtIndex(tView, index, type, name, attrs);

          if (isInI18nBlock()) {
            // If we are in i18n block then all elements should be pre declared through `Placeholder`
            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was
            // removed, so we mark it as detached.
            tNode.flags |= 64
            /* isDetached */
            ;
          }
        } else if (tNode.type & 64
        /* Placeholder */
        ) {
            tNode.type = type;
            tNode.value = name;
            tNode.attrs = attrs;
            var parent = getCurrentParentTNode();
            tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
            ngDevMode && assertTNodeForTView(tNode, tView);
            ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');
          }

        setCurrentTNode(tNode, true);
        return tNode;
      }

      function createTNodeAtIndex(tView, index, type, name, attrs) {
        var currentTNode = getCurrentTNodePlaceholderOk();
        var isParent = isCurrentTNodeParent();
        var parent = isParent ? currentTNode : currentTNode && currentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places.

        var tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one
        // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
        // the index 1 or more, so we can't just check node index.

        if (tView.firstChild === null) {
          tView.firstChild = tNode;
        }

        if (currentTNode !== null) {
          if (isParent) {
            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?
            if (currentTNode.child == null && tNode.parent !== null) {
              // We are in the same view, which means we are adding content node to the parent view.
              currentTNode.child = tNode;
            }
          } else {
            if (currentTNode.next === null) {
              // In the case of i18n the `currentTNode` may already be linked, in which case we don't want
              // to break the links which i18n created.
              currentTNode.next = tNode;
            }
          }
        }

        return tNode;
      }
      /**
       * When elements are created dynamically after a view blueprint is created (e.g. through
       * i18nApply()), we need to adjust the blueprint for future
       * template passes.
       *
       * @param tView `TView` associated with `LView`
       * @param lView The `LView` containing the blueprint to adjust
       * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
       * @param initialValue Initial value to store in blueprint
       */


      function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
        if (numSlotsToAlloc === 0) return -1;

        if (ngDevMode) {
          assertFirstCreatePass(tView);
          assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
          assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');
          assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');
          assertFirstUpdatePass(tView);
        }

        var allocIdx = lView.length;

        for (var i = 0; i < numSlotsToAlloc; i++) {
          lView.push(initialValue);
          tView.blueprint.push(initialValue);
          tView.data.push(null);
        }

        return allocIdx;
      } //////////////////////////
      //// Render
      //////////////////////////

      /**
       * Processes a view in the creation mode. This includes a number of steps in a specific order:
       * - creating view query functions (if any);
       * - executing a template function in the creation mode;
       * - updating static queries (if any);
       * - creating child components defined in a given view.
       */


      function renderView(tView, lView, context) {
        ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
        enterView(lView);

        try {
          var viewQuery = tView.viewQuery;

          if (viewQuery !== null) {
            executeViewQueryFn(1
            /* Create */
            , viewQuery, context);
          } // Execute a template associated with this view, if it exists. A template function might not be
          // defined for the root component views.


          var templateFn = tView.template;

          if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 1
            /* Create */
            , context);
          } // This needs to be set before children are processed to support recursive components.
          // This must be set to false immediately after the first creation run because in an
          // ngFor loop, all the views will be created together before update mode runs and turns
          // off firstCreatePass. If we don't set it here, instances will perform directive
          // matching, etc again and again.


          if (tView.firstCreatePass) {
            tView.firstCreatePass = false;
          } // We resolve content queries specifically marked as `static` in creation mode. Dynamic
          // content queries are resolved during change detection (i.e. update mode), after embedded
          // views are refreshed (see block above).


          if (tView.staticContentQueries) {
            refreshContentQueries(tView, lView);
          } // We must materialize query results before child components are processed
          // in case a child component has projected a container. The LContainer needs
          // to exist so the embedded views are properly attached by the container.


          if (tView.staticViewQueries) {
            executeViewQueryFn(2
            /* Update */
            , tView.viewQuery, context);
          } // Render child component views.


          var components = tView.components;

          if (components !== null) {
            renderChildComponents(lView, components);
          }
        } catch (error) {
          // If we didn't manage to get past the first template pass due to
          // an error, mark the view as corrupted so we can try to recover.
          if (tView.firstCreatePass) {
            tView.incompleteFirstPass = true;
          }

          throw error;
        } finally {
          lView[FLAGS] &= ~4
          /* CreationMode */
          ;
          leaveView();
        }
      }
      /**
       * Processes a view in update mode. This includes a number of steps in a specific order:
       * - executing a template function in update mode;
       * - executing hooks;
       * - refreshing queries;
       * - setting host bindings;
       * - refreshing child (embedded and component) views.
       */


      function refreshView(tView, lView, templateFn, context) {
        ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
        var flags = lView[FLAGS];
        if ((flags & 256
        /* Destroyed */
        ) === 256
        /* Destroyed */
        ) return;
        enterView(lView); // Check no changes mode is a dev only mode used to verify that bindings have not changed
        // since they were assigned. We do not want to execute lifecycle hooks in that mode.

        var isInCheckNoChangesPass = isInCheckNoChangesMode();

        try {
          resetPreOrderHookFlags(lView);
          setBindingIndex(tView.bindingStartIndex);

          if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 2
            /* Update */
            , context);
          }

          var hooksInitPhaseCompleted = (flags & 3
          /* InitPhaseStateMask */
          ) === 3
          /* InitPhaseCompleted */
          ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks

          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var preOrderCheckHooks = tView.preOrderCheckHooks;

              if (preOrderCheckHooks !== null) {
                executeCheckHooks(lView, preOrderCheckHooks, null);
              }
            } else {
              var preOrderHooks = tView.preOrderHooks;

              if (preOrderHooks !== null) {
                executeInitAndCheckHooks(lView, preOrderHooks, 0
                /* OnInitHooksToBeRun */
                , null);
              }

              incrementInitPhaseFlags(lView, 0
              /* OnInitHooksToBeRun */
              );
            }
          } // First mark transplanted views that are declared in this lView as needing a refresh at their
          // insertion points. This is needed to avoid the situation where the template is defined in this
          // `LView` but its declaration appears after the insertion component.


          markTransplantedViewsForRefresh(lView);
          refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.

          if (tView.contentQueries !== null) {
            refreshContentQueries(tView, lView);
          } // execute content hooks (AfterContentInit, AfterContentChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks


          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var contentCheckHooks = tView.contentCheckHooks;

              if (contentCheckHooks !== null) {
                executeCheckHooks(lView, contentCheckHooks);
              }
            } else {
              var contentHooks = tView.contentHooks;

              if (contentHooks !== null) {
                executeInitAndCheckHooks(lView, contentHooks, 1
                /* AfterContentInitHooksToBeRun */
                );
              }

              incrementInitPhaseFlags(lView, 1
              /* AfterContentInitHooksToBeRun */
              );
            }
          }

          processHostBindingOpCodes(tView, lView); // Refresh child component views.

          var components = tView.components;

          if (components !== null) {
            refreshChildComponents(lView, components);
          } // View queries must execute after refreshing child components because a template in this view
          // could be inserted in a child component. If the view query executes before child component
          // refresh, the template might not yet be inserted.


          var viewQuery = tView.viewQuery;

          if (viewQuery !== null) {
            executeViewQueryFn(2
            /* Update */
            , viewQuery, context);
          } // execute view hooks (AfterViewInit, AfterViewChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks


          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var viewCheckHooks = tView.viewCheckHooks;

              if (viewCheckHooks !== null) {
                executeCheckHooks(lView, viewCheckHooks);
              }
            } else {
              var viewHooks = tView.viewHooks;

              if (viewHooks !== null) {
                executeInitAndCheckHooks(lView, viewHooks, 2
                /* AfterViewInitHooksToBeRun */
                );
              }

              incrementInitPhaseFlags(lView, 2
              /* AfterViewInitHooksToBeRun */
              );
            }
          }

          if (tView.firstUpdatePass === true) {
            // We need to make sure that we only flip the flag on successful `refreshView` only
            // Don't do this in `finally` block.
            // If we did this in `finally` block then an exception could block the execution of styling
            // instructions which in turn would be unable to insert themselves into the styling linked
            // list. The result of this would be that if the exception would not be throw on subsequent CD
            // the styling would be unable to process it data and reflect to the DOM.
            tView.firstUpdatePass = false;
          } // Do not reset the dirty state when running in check no changes mode. We don't want components
          // to behave differently depending on whether check no changes is enabled or not. For example:
          // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
          // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
          // no changes cycle, the component would be not be dirty for the next update pass. This would
          // be different in production mode where the component dirty state is not reset.


          if (!isInCheckNoChangesPass) {
            lView[FLAGS] &= ~(64
            /* Dirty */
            | 8
            /* FirstLViewPass */
            );
          }

          if (lView[FLAGS] & 1024
          /* RefreshTransplantedView */
          ) {
              lView[FLAGS] &= ~1024
              /* RefreshTransplantedView */
              ;
              updateTransplantedViewCount(lView[PARENT], -1);
            }
        } finally {
          leaveView();
        }
      }

      function renderComponentOrTemplate(tView, lView, templateFn, context) {
        var rendererFactory = lView[RENDERER_FACTORY];
        var normalExecutionPath = !isInCheckNoChangesMode();
        var creationModeIsActive = isCreationMode(lView);

        try {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
            rendererFactory.begin();
          }

          if (creationModeIsActive) {
            renderView(tView, lView, context);
          }

          refreshView(tView, lView, templateFn, context);
        } finally {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
            rendererFactory.end();
          }
        }
      }

      function executeTemplate(tView, lView, templateFn, rf, context) {
        var prevSelectedIndex = getSelectedIndex();

        try {
          setSelectedIndex(-1);

          if (rf & 2
          /* Update */
          && lView.length > HEADER_OFFSET) {
            // When we're updating, inherently select 0 so we don't
            // have to generate that instruction for most update blocks.
            selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());
          }

          templateFn(rf, context);
        } finally {
          setSelectedIndex(prevSelectedIndex);
        }
      } //////////////////////////
      //// Element
      //////////////////////////


      function executeContentQueries(tView, tNode, lView) {
        if (isContentQueryHost(tNode)) {
          var start = tNode.directiveStart;
          var end = tNode.directiveEnd;

          for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {
            var def = tView.data[directiveIndex];

            if (def.contentQueries) {
              def.contentQueries(1
              /* Create */
              , lView[directiveIndex], directiveIndex);
            }
          }
        }
      }
      /**
       * Creates directive instances.
       */


      function createDirectivesInstances(tView, lView, tNode) {
        if (!getBindingsEnabled()) return;
        instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));

        if ((tNode.flags & 128
        /* hasHostBindings */
        ) === 128
        /* hasHostBindings */
        ) {
            invokeDirectivesHostBindings(tView, lView, tNode);
          }
      }
      /**
       * Takes a list of local names and indices and pushes the resolved local variable values
       * to LView in the same order as they are loaded in the template with load().
       */


      function saveResolvedLocalsInData(viewData, tNode) {
        var localRefExtractor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getNativeByTNode;
        var localNames = tNode.localNames;

        if (localNames !== null) {
          var localIndex = tNode.index + 1;

          for (var i = 0; i < localNames.length; i += 2) {
            var index = localNames[i + 1];
            var value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
            viewData[localIndex++] = value;
          }
        }
      }
      /**
       * Gets TView from a template function or creates a new TView
       * if it doesn't already exist.
       *
       * @param def ComponentDef
       * @returns TView
       */


      function getOrCreateTComponentView(def) {
        var tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't
        // complete successfully since we can't know for sure whether it's in a usable shape.

        if (tView === null || tView.incompleteFirstPass) {
          // Declaration node here is null since this function is called when we dynamically create a
          // component and hence there is no declaration.
          var declTNode = null;
          return def.tView = createTView(1
          /* Component */
          , declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
        }

        return tView;
      }
      /**
       * Creates a TView instance
       *
       * @param type Type of `TView`.
       * @param declTNode Declaration location of this `TView`.
       * @param templateFn Template function
       * @param decls The number of nodes, local refs, and pipes in this template
       * @param directives Registry of directives for this view
       * @param pipes Registry of pipes for this view
       * @param viewQuery View queries for this view
       * @param schemas Schemas for this view
       * @param consts Constants for this view
       */


      function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {
        ngDevMode && ngDevMode.tView++;
        var bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,
        // we don't know which directives are active on this template. As soon as a directive is matched
        // that has a host binding, we will update the blueprint with that def's hostVars count.

        var initialViewLength = bindingStartIndex + vars;
        var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
        var consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;
        var tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, // type: TViewType,
        blueprint, // blueprint: LView,
        templateFn, // template: ComponentTemplate<{}>|null,
        null, // queries: TQueries|null
        viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
        declTNode, // declTNode: TNode|null,
        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
        bindingStartIndex, // bindingStartIndex: number,
        initialViewLength, // expandoStartIndex: number,
        null, // hostBindingOpCodes: HostBindingOpCodes,
        true, // firstCreatePass: boolean,
        true, // firstUpdatePass: boolean,
        false, // staticViewQueries: boolean,
        false, // staticContentQueries: boolean,
        null, // preOrderHooks: HookData|null,
        null, // preOrderCheckHooks: HookData|null,
        null, // contentHooks: HookData|null,
        null, // contentCheckHooks: HookData|null,
        null, // viewHooks: HookData|null,
        null, // viewCheckHooks: HookData|null,
        null, // destroyHooks: DestroyHookData|null,
        null, // cleanup: any[]|null,
        null, // contentQueries: number[]|null,
        null, // components: number[]|null,
        typeof directives === 'function' ? //
        directives() : //
        directives, // directiveRegistry: DirectiveDefList|null,
        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
        null, // firstChild: TNode|null,
        schemas, // schemas: SchemaMetadata[]|null,
        consts, // consts: TConstants|null
        false, // incompleteFirstPass: boolean
        decls, // ngDevMode only: decls
        vars) : {
          type: type,
          blueprint: blueprint,
          template: templateFn,
          queries: null,
          viewQuery: viewQuery,
          declTNode: declTNode,
          data: blueprint.slice().fill(null, bindingStartIndex),
          bindingStartIndex: bindingStartIndex,
          expandoStartIndex: initialViewLength,
          hostBindingOpCodes: null,
          firstCreatePass: true,
          firstUpdatePass: true,
          staticViewQueries: false,
          staticContentQueries: false,
          preOrderHooks: null,
          preOrderCheckHooks: null,
          contentHooks: null,
          contentCheckHooks: null,
          viewHooks: null,
          viewCheckHooks: null,
          destroyHooks: null,
          cleanup: null,
          contentQueries: null,
          components: null,
          directiveRegistry: typeof directives === 'function' ? directives() : directives,
          pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
          firstChild: null,
          schemas: schemas,
          consts: consts,
          incompleteFirstPass: false
        };

        if (ngDevMode) {
          // For performance reasons it is important that the tView retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tView);
        }

        return tView;
      }

      function createViewBlueprint(bindingStartIndex, initialViewLength) {
        var blueprint = ngDevMode ? new LViewBlueprint() : [];

        for (var i = 0; i < initialViewLength; i++) {
          blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
        }

        return blueprint;
      }

      function createError(text, token) {
        return new Error("Renderer: ".concat(text, " [").concat(stringifyForError(token), "]"));
      }

      function assertHostNodeExists(rElement, elementOrSelector) {
        if (!rElement) {
          if (typeof elementOrSelector === 'string') {
            throw createError('Host node with selector not found:', elementOrSelector);
          } else {
            throw createError('Host node is required:', elementOrSelector);
          }
        }
      }
      /**
       * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
       *
       * @param rendererFactory Factory function to create renderer instance.
       * @param elementOrSelector Render element or CSS selector to locate the element.
       * @param encapsulation View Encapsulation defined for component that requests host element.
       */


      function locateHostElement(renderer, elementOrSelector, encapsulation) {
        if (isProceduralRenderer(renderer)) {
          // When using native Shadow DOM, do not clear host element to allow native slot projection
          var preserveContent = encapsulation === ViewEncapsulation.ShadowDom;
          return renderer.selectRootElement(elementOrSelector, preserveContent);
        }

        var rElement = typeof elementOrSelector === 'string' ? renderer.querySelector(elementOrSelector) : elementOrSelector;
        ngDevMode && assertHostNodeExists(rElement, elementOrSelector); // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
        // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
        // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
        // renderer, and procedural renderer case is handled above.

        rElement.textContent = '';
        return rElement;
      }
      /**
       * Saves context for this cleanup function in LView.cleanupInstances.
       *
       * On the first template pass, saves in TView:
       * - Cleanup function
       * - Index of context we just saved in LView.cleanupInstances
       *
       * This function can also be used to store instance specific cleanup fns. In that case the `context`
       * is `null` and the function is store in `LView` (rather than it `TView`).
       */


      function storeCleanupWithContext(tView, lView, context, cleanupFn) {
        var lCleanup = getOrCreateLViewCleanup(lView);

        if (context === null) {
          // If context is null that this is instance specific callback. These callbacks can only be
          // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.
          if (ngDevMode) {
            Object.freeze(getOrCreateTViewCleanup(tView));
          }

          lCleanup.push(cleanupFn);
        } else {
          lCleanup.push(context);

          if (tView.firstCreatePass) {
            getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
          }
        }
      }

      function createTNode(tView, tParent, type, index, value, attrs) {
        ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
        // `view_engine_compatibility` for additional context.
        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
        ngDevMode && assertNotSame(attrs, undefined, '\'undefined\' is not valid value for \'attrs\'');
        ngDevMode && ngDevMode.tNode++;
        ngDevMode && tParent && assertTNodeForTView(tParent, tView);
        var injectorIndex = tParent ? tParent.injectorIndex : -1;
        var tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView
        type, // type: TNodeType
        index, // index: number
        null, // insertBeforeIndex: null|-1|number|number[]
        injectorIndex, // injectorIndex: number
        -1, // directiveStart: number
        -1, // directiveEnd: number
        -1, // directiveStylingLast: number
        null, // propertyBindings: number[]|null
        0, // flags: TNodeFlags
        0, // providerIndexes: TNodeProviderIndexes
        value, // value: string|null
        attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
        null, // mergedAttrs
        null, // localNames: (string|number)[]|null
        undefined, // initialInputs: (string[]|null)[]|null|undefined
        null, // inputs: PropertyAliases|null
        null, // outputs: PropertyAliases|null
        null, // tViews: ITView|ITView[]|null
        null, // next: ITNode|null
        null, // projectionNext: ITNode|null
        null, // child: ITNode|null
        tParent, // parent: TElementNode|TContainerNode|null
        null, // projection: number|(ITNode|RNode[])[]|null
        null, // styles: string|null
        null, // stylesWithoutHost: string|null
        undefined, // residualStyles: string|null
        null, // classes: string|null
        null, // classesWithoutHost: string|null
        undefined, // residualClasses: string|null
        0, // classBindings: TStylingRange;
        0) : {
          type: type,
          index: index,
          insertBeforeIndex: null,
          injectorIndex: injectorIndex,
          directiveStart: -1,
          directiveEnd: -1,
          directiveStylingLast: -1,
          propertyBindings: null,
          flags: 0,
          providerIndexes: 0,
          value: value,
          attrs: attrs,
          mergedAttrs: null,
          localNames: null,
          initialInputs: undefined,
          inputs: null,
          outputs: null,
          tViews: null,
          next: null,
          projectionNext: null,
          child: null,
          parent: tParent,
          projection: null,
          styles: null,
          stylesWithoutHost: null,
          residualStyles: undefined,
          classes: null,
          classesWithoutHost: null,
          residualClasses: undefined,
          classBindings: 0,
          styleBindings: 0
        };

        if (ngDevMode) {
          // For performance reasons it is important that the tNode retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tNode);
        }

        return tNode;
      }

      function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
        for (var publicName in inputAliasMap) {
          if (inputAliasMap.hasOwnProperty(publicName)) {
            propStore = propStore === null ? {} : propStore;
            var internalName = inputAliasMap[publicName];

            if (propStore.hasOwnProperty(publicName)) {
              propStore[publicName].push(directiveDefIdx, internalName);
            } else {
              propStore[publicName] = [directiveDefIdx, internalName];
            }
          }
        }

        return propStore;
      }
      /**
       * Initializes data structures required to work with directive inputs and outputs.
       * Initialization is done for all directives matched on a given TNode.
       */


      function initializeInputAndOutputAliases(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView);
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;
        var tViewData = tView.data;
        var tNodeAttrs = tNode.attrs;
        var inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
        var inputsStore = null;
        var outputsStore = null;

        for (var i = start; i < end; i++) {
          var _directiveDef3 = tViewData[i];
          var directiveInputs = _directiveDef3.inputs; // Do not use unbound attributes as inputs to structural directives, since structural
          // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
          // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
          // should be set for inline templates.

          var initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;
          inputsFromAttrs.push(initialInputs);
          inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
          outputsStore = generatePropertyAliases(_directiveDef3.outputs, i, outputsStore);
        }

        if (inputsStore !== null) {
          if (inputsStore.hasOwnProperty('class')) {
            tNode.flags |= 16
            /* hasClassInput */
            ;
          }

          if (inputsStore.hasOwnProperty('style')) {
            tNode.flags |= 32
            /* hasStyleInput */
            ;
          }
        }

        tNode.initialInputs = inputsFromAttrs;
        tNode.inputs = inputsStore;
        tNode.outputs = outputsStore;
      }
      /**
       * Mapping between attributes names that don't correspond to their element property names.
       *
       * Performance note: this function is written as a series of if checks (instead of, say, a property
       * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
       * mapping property names. Do NOT change without benchmarking.
       *
       * Note: this mapping has to be kept in sync with the equally named mapping in the template
       * type-checking machinery of ngtsc.
       */


      function mapPropName(name) {
        if (name === 'class') return 'className';
        if (name === 'for') return 'htmlFor';
        if (name === 'formaction') return 'formAction';
        if (name === 'innerHtml') return 'innerHTML';
        if (name === 'readonly') return 'readOnly';
        if (name === 'tabindex') return 'tabIndex';
        return name;
      }

      function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
        var element = getNativeByTNode(tNode, lView);
        var inputData = tNode.inputs;
        var dataValue;

        if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
          setInputsForProperty(tView, lView, dataValue, propName, value);
          if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);

          if (ngDevMode) {
            setNgReflectProperties(lView, element, tNode.type, dataValue, value);
          }
        } else if (tNode.type & 3
        /* AnyRNode */
        ) {
            propName = mapPropName(propName);

            if (ngDevMode) {
              validateAgainstEventProperties(propName);

              if (!validateProperty(tView, element, propName, tNode)) {
                // Return here since we only log warnings for unknown properties.
                logUnknownPropertyError(propName, tNode);
                return;
              }

              ngDevMode.rendererSetProperty++;
            } // It is assumed that the sanitizer is only added when the compiler determines that the
            // property is risky, so sanitization can be done without further checks.


            value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;

            if (isProceduralRenderer(renderer)) {
              renderer.setProperty(element, propName, value);
            } else if (!isAnimationProp(propName)) {
              element.setProperty ? element.setProperty(propName, value) : element[propName] = value;
            }
          } else if (tNode.type & 12
        /* AnyContainer */
        ) {
            // If the node is a container and the property didn't
            // match any of the inputs or schemas we should throw.
            if (ngDevMode && !matchingSchemas(tView, tNode.value)) {
              logUnknownPropertyError(propName, tNode);
            }
          }
      }
      /** If node is an OnPush component, marks its LView dirty. */


      function markDirtyIfOnPush(lView, viewIndex) {
        ngDevMode && assertLView(lView);
        var childComponentLView = getComponentLViewByIndex(viewIndex, lView);

        if (!(childComponentLView[FLAGS] & 16
        /* CheckAlways */
        )) {
          childComponentLView[FLAGS] |= 64
          /* Dirty */
          ;
        }
      }

      function setNgReflectProperty(lView, element, type, attrName, value) {
        var renderer = lView[RENDERER];
        attrName = normalizeDebugBindingName(attrName);
        var debugValue = normalizeDebugBindingValue(value);

        if (type & 3
        /* AnyRNode */
        ) {
            if (value == null) {
              isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) : element.removeAttribute(attrName);
            } else {
              isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) : element.setAttribute(attrName, debugValue);
            }
          } else {
          var textContent = escapeCommentText("bindings=".concat(JSON.stringify(_defineProperty({}, attrName, debugValue), null, 2)));

          if (isProceduralRenderer(renderer)) {
            renderer.setValue(element, textContent);
          } else {
            element.textContent = textContent;
          }
        }
      }

      function setNgReflectProperties(lView, element, type, dataValue, value) {
        if (type & (3
        /* AnyRNode */
        | 4
        /* Container */
        )) {
          /**
           * dataValue is an array containing runtime input or output names for the directives:
           * i+0: directive instance index
           * i+1: privateName
           *
           * e.g. [0, 'change', 'change-minified']
           * we want to set the reflected property with the privateName: dataValue[i+1]
           */
          for (var i = 0; i < dataValue.length; i += 2) {
            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
          }
        }
      }

      function validateProperty(tView, element, propName, tNode) {
        // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
        // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
        // defined as an array (as an empty array in case `schemas` field is not defined) and we should
        // execute the check below.
        if (tView.schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element
        // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).

        if (matchingSchemas(tView, tNode.value) || propName in element || isAnimationProp(propName)) {
          return true;
        } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
        // need to account for both here, while being careful for `typeof null` also returning 'object'.


        return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
      }

      function matchingSchemas(tView, tagName) {
        var schemas = tView.schemas;

        if (schemas !== null) {
          for (var i = 0; i < schemas.length; i++) {
            var schema = schemas[i];

            if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
              return true;
            }
          }
        }

        return false;
      }
      /**
       * Logs an error that a property is not supported on an element.
       * @param propName Name of the invalid property.
       * @param tNode Node on which we encountered the property.
       */


      function logUnknownPropertyError(propName, tNode) {
        var message = "Can't bind to '".concat(propName, "' since it isn't a known property of '").concat(tNode.value, "'.");
        console.error(formatRuntimeError("303"
        /* UNKNOWN_BINDING */
        , message));
      }
      /**
       * Instantiate a root component.
       */


      function instantiateRootComponent(tView, lView, def) {
        var rootTNode = getCurrentTNode();

        if (tView.firstCreatePass) {
          if (def.providersResolver) def.providersResolver(def);
          var directiveIndex = allocExpando(tView, lView, 1, null);
          ngDevMode && assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');
          configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);
        }

        var directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);
        attachPatchData(directive, lView);

        var _native7 = getNativeByTNode(rootTNode, lView);

        if (_native7) {
          attachPatchData(_native7, lView);
        }

        return directive;
      }
      /**
       * Resolve the matched directives on a node.
       */


      function resolveDirectives(tView, lView, tNode, localRefs) {
        // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
        // tsickle.
        ngDevMode && assertFirstCreatePass(tView);
        var hasDirectives = false;

        if (getBindingsEnabled()) {
          var directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
          var exportsMap = localRefs === null ? null : {
            '': -1
          };

          if (directiveDefs !== null) {
            hasDirectives = true;
            initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in
            // the viewEngine:
            // - viewProviders have priority over providers
            // - the last directive in NgModule.declarations has priority over the previous one
            // So to match these rules, the order in which providers are added in the arrays is very
            // important.

            for (var i = 0; i < directiveDefs.length; i++) {
              var def = directiveDefs[i];
              if (def.providersResolver) def.providersResolver(def);
            }

            var preOrderHooksFound = false;
            var preOrderCheckHooksFound = false;
            var directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);
            ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');

            for (var _i10 = 0; _i10 < directiveDefs.length; _i10++) {
              var _def2 = directiveDefs[_i10]; // Merge the attrs in the order of matches. This assumes that the first directive is the
              // component itself, so that the component has the least priority.

              tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, _def2.hostAttrs);
              configureViewWithDirective(tView, tNode, lView, directiveIdx, _def2);
              saveNameToExportMap(directiveIdx, _def2, exportsMap);
              if (_def2.contentQueries !== null) tNode.flags |= 8
              /* hasContentQuery */
              ;
              if (_def2.hostBindings !== null || _def2.hostAttrs !== null || _def2.hostVars !== 0) tNode.flags |= 128
              /* hasHostBindings */
              ;
              var lifeCycleHooks = _def2.type.prototype; // Only push a node index into the preOrderHooks array if this is the first
              // pre-order hook found on this node.

              if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
                // We will push the actual hook function into this array later during dir instantiation.
                // We cannot do it now because we must ensure hooks are registered in the same
                // order that directives are created (i.e. injection order).
                (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);
                preOrderHooksFound = true;
              }

              if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
                (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);
                preOrderCheckHooksFound = true;
              }

              directiveIdx++;
            }

            initializeInputAndOutputAliases(tView, tNode);
          }

          if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
        } // Merge the template attrs last so that they have the highest priority.


        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
        return hasDirectives;
      }
      /**
       * Add `hostBindings` to the `TView.hostBindingOpCodes`.
       *
       * @param tView `TView` to which the `hostBindings` should be added.
       * @param tNode `TNode` the element which contains the directive
       * @param lView `LView` current `LView`
       * @param directiveIdx Directive index in view.
       * @param directiveVarsIdx Where will the directive's vars be stored
       * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
       */


      function registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {
        ngDevMode && assertFirstCreatePass(tView);
        var hostBindings = def.hostBindings;

        if (hostBindings) {
          var hostBindingOpCodes = tView.hostBindingOpCodes;

          if (hostBindingOpCodes === null) {
            hostBindingOpCodes = tView.hostBindingOpCodes = [];
          }

          var elementIndx = ~tNode.index;

          if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
            // Conditionally add select element so that we are more efficient in execution.
            // NOTE: this is strictly not necessary and it trades code size for runtime perf.
            // (We could just always add it.)
            hostBindingOpCodes.push(elementIndx);
          }

          hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
        }
      }
      /**
       * Returns the last selected element index in the `HostBindingOpCodes`
       *
       * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only
       * if it changes. This method returns the last index (or '0' if not found.)
       *
       * Selected element index are only the ones which are negative.
       */


      function lastSelectedElementIdx(hostBindingOpCodes) {
        var i = hostBindingOpCodes.length;

        while (i > 0) {
          var value = hostBindingOpCodes[--i];

          if (typeof value === 'number' && value < 0) {
            return value;
          }
        }

        return 0;
      }
      /**
       * Instantiate all the directives that were previously resolved on the current node.
       */


      function instantiateAllDirectives(tView, lView, tNode, _native8) {
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;

        if (!tView.firstCreatePass) {
          getOrCreateNodeInjectorForNode(tNode, lView);
        }

        attachPatchData(_native8, lView);
        var initialInputs = tNode.initialInputs;

        for (var i = start; i < end; i++) {
          var def = tView.data[i];
          var isComponent = isComponentDef(def);

          if (isComponent) {
            ngDevMode && assertTNodeType(tNode, 3
            /* AnyRNode */
            );
            addComponentLogic(lView, tNode, def);
          }

          var directive = getNodeInjectable(lView, tView, i, tNode);
          attachPatchData(directive, lView);

          if (initialInputs !== null) {
            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
          }

          if (isComponent) {
            var componentView = getComponentLViewByIndex(tNode.index, lView);
            componentView[CONTEXT] = directive;
          }
        }
      }

      function invokeDirectivesHostBindings(tView, lView, tNode) {
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;
        var firstCreatePass = tView.firstCreatePass;
        var elementIndex = tNode.index;
        var currentDirectiveIndex = getCurrentDirectiveIndex();

        try {
          setSelectedIndex(elementIndex);

          for (var dirIndex = start; dirIndex < end; dirIndex++) {
            var def = tView.data[dirIndex];
            var directive = lView[dirIndex];
            setCurrentDirectiveIndex(dirIndex);

            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
              invokeHostBindingsInCreationMode(def, directive);
            }
          }
        } finally {
          setSelectedIndex(-1);
          setCurrentDirectiveIndex(currentDirectiveIndex);
        }
      }
      /**
       * Invoke the host bindings in creation mode.
       *
       * @param def `DirectiveDef` which may contain the `hostBindings` function.
       * @param directive Instance of directive.
       */


      function invokeHostBindingsInCreationMode(def, directive) {
        if (def.hostBindings !== null) {
          def.hostBindings(1
          /* Create */
          , directive);
        }
      }
      /**
       * Matches the current node against all available selectors.
       * If a component is matched (at most one), it is returned in first position in the array.
       */


      function findDirectiveDefMatches(tView, viewData, tNode) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        );
        var registry = tView.directiveRegistry;
        var matches = null;

        if (registry) {
          for (var i = 0; i < registry.length; i++) {
            var def = registry[i];

            if (isNodeMatchingSelectorList(tNode, def.selectors,
            /* isProjectionMode */
            false)) {
              matches || (matches = ngDevMode ? new MatchesArray() : []);
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);

              if (isComponentDef(def)) {
                if (ngDevMode) {
                  assertTNodeType(tNode, 2
                  /* Element */
                  , "\"".concat(tNode.value, "\" tags cannot be used as component hosts. ") + "Please use a different tag to activate the ".concat(stringify(def.type), " component."));
                  if (tNode.flags & 2
                  /* isComponentHost */
                  ) throwMultipleComponentError(tNode);
                }

                markAsComponentHost(tView, tNode); // The component is always stored first with directives after.

                matches.unshift(def);
              } else {
                matches.push(def);
              }
            }
          }
        }

        return matches;
      }
      /**
       * Marks a given TNode as a component's host. This consists of:
       * - setting appropriate TNode flags;
       * - storing index of component's host element so it will be queued for view refresh during CD.
       */


      function markAsComponentHost(tView, hostTNode) {
        ngDevMode && assertFirstCreatePass(tView);
        hostTNode.flags |= 2
        /* isComponentHost */
        ;
        (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
      }
      /** Caches local names and their matching directive indices for query and template lookups. */


      function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
        if (localRefs) {
          var localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined
          // in the template to ensure the data is loaded in the same slots as their refs
          // in the template (for template queries).

          for (var i = 0; i < localRefs.length; i += 2) {
            var index = exportsMap[localRefs[i + 1]];
            if (index == null) throw new RuntimeError("301"
            /* EXPORT_NOT_FOUND */
            , "Export of name '".concat(localRefs[i + 1], "' not found!"));
            localNames.push(localRefs[i], index);
          }
        }
      }
      /**
       * Builds up an export map as directives are created, so local refs can be quickly mapped
       * to their directive instances.
       */


      function saveNameToExportMap(directiveIdx, def, exportsMap) {
        if (exportsMap) {
          if (def.exportAs) {
            for (var i = 0; i < def.exportAs.length; i++) {
              exportsMap[def.exportAs[i]] = directiveIdx;
            }
          }

          if (isComponentDef(def)) exportsMap[''] = directiveIdx;
        }
      }
      /**
       * Initializes the flags on the current node, setting all indices to the initial index,
       * the directive count to 0, and adding the isComponent flag.
       * @param index the initial index
       */


      function initTNodeFlags(tNode, index, numberOfDirectives) {
        ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
        tNode.flags |= 1
        /* isDirectiveHost */
        ; // When the first directive is created on a node, save the index

        tNode.directiveStart = index;
        tNode.directiveEnd = index + numberOfDirectives;
        tNode.providerIndexes = index;
      }
      /**
       * Setup directive for instantiation.
       *
       * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well
       * as `LView`. `TView` gets the `DirectiveDef`.
       *
       * @param tView `TView`
       * @param tNode `TNode`
       * @param lView `LView`
       * @param directiveIndex Index where the directive will be stored in the Expando.
       * @param def `DirectiveDef`
       */


      function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
        ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');
        tView.data[directiveIndex] = def;
        var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
        var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
        tView.blueprint[directiveIndex] = nodeInjectorFactory;
        lView[directiveIndex] = nodeInjectorFactory;
        registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
      }

      function addComponentLogic(lView, hostTNode, def) {
        var _native9 = getNativeByTNode(hostTNode, lView);

        var tView = getOrCreateTComponentView(def); // Only component views should be added to the view tree directly. Embedded views are
        // accessed through their containers because they may be removed / re-added later.

        var rendererFactory = lView[RENDERER_FACTORY];
        var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64
        /* Dirty */
        : 16
        /* CheckAlways */
        , _native9, hostTNode, rendererFactory, rendererFactory.createRenderer(_native9, def), null, null)); // Component view will always be created before any injected LContainers,
        // so this is a regular element, wrap it with the component view

        lView[hostTNode.index] = componentView;
      }

      function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
        if (ngDevMode) {
          assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
          validateAgainstEventAttributes(name);
          assertTNodeType(tNode, 2
          /* Element */
          , "Attempted to set attribute `".concat(name, "` on a container node. ") + "Host bindings are not valid on ng-container or ng-template.");
        }

        var element = getNativeByTNode(tNode, lView);
        setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
      }

      function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
        if (value == null) {
          ngDevMode && ngDevMode.rendererRemoveAttribute++;
          isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) : element.removeAttribute(name);
        } else {
          ngDevMode && ngDevMode.rendererSetAttribute++;
          var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);

          if (isProceduralRenderer(renderer)) {
            renderer.setAttribute(element, name, strValue, namespace);
          } else {
            namespace ? element.setAttributeNS(namespace, name, strValue) : element.setAttribute(name, strValue);
          }
        }
      }
      /**
       * Sets initial input properties on directive instances from attribute data
       *
       * @param lView Current LView that is being processed.
       * @param directiveIndex Index of the directive in directives array
       * @param instance Instance of the directive on which to set the initial inputs
       * @param def The directive def that contains the list of inputs
       * @param tNode The static data for this node
       */


      function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
        var initialInputs = initialInputData[directiveIndex];

        if (initialInputs !== null) {
          var setInput = def.setInput;

          for (var i = 0; i < initialInputs.length;) {
            var publicName = initialInputs[i++];
            var privateName = initialInputs[i++];
            var value = initialInputs[i++];

            if (setInput !== null) {
              def.setInput(instance, value, publicName, privateName);
            } else {
              instance[privateName] = value;
            }

            if (ngDevMode) {
              var nativeElement = getNativeByTNode(tNode, lView);
              setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
            }
          }
        }
      }
      /**
       * Generates initialInputData for a node and stores it in the template's static storage
       * so subsequent template invocations don't have to recalculate it.
       *
       * initialInputData is an array containing values that need to be set as input properties
       * for directives on this node, but only once on creation. We need this array to support
       * the case where you set an @Input property of a directive using attribute-like syntax.
       * e.g. if you have a `name` @Input, you can set it once like this:
       *
       * <my-component name="Bess"></my-component>
       *
       * @param inputs The list of inputs from the directive def
       * @param attrs The static attrs on this node
       */


      function generateInitialInputs(inputs, attrs) {
        var inputsToStore = null;
        var i = 0;

        while (i < attrs.length) {
          var attrName = attrs[i];

          if (attrName === 0
          /* NamespaceURI */
          ) {
              // We do not allow inputs on namespaced attributes.
              i += 4;
              continue;
            } else if (attrName === 5
          /* ProjectAs */
          ) {
              // Skip over the `ngProjectAs` value.
              i += 2;
              continue;
            } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.


          if (typeof attrName === 'number') break;

          if (inputs.hasOwnProperty(attrName)) {
            if (inputsToStore === null) inputsToStore = [];
            inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
          }

          i += 2;
        }

        return inputsToStore;
      } //////////////////////////
      //// ViewContainer & View
      //////////////////////////
      // Not sure why I need to do `any` here but TS complains later.


      var LContainerArray = (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode() && createNamedArrayType('LContainer');
      /**
       * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
       *
       * @param hostNative The host element for the LContainer
       * @param hostTNode The host TNode for the LContainer
       * @param currentView The parent view of the LContainer
       * @param native The native comment element
       * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
       * @returns LContainer
       */

      function createLContainer(hostNative, currentView, _native10, tNode) {
        ngDevMode && assertLView(currentView);
        ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(_native10); // https://jsperf.com/array-literal-vs-new-array-really

        var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
        true, // Boolean `true` in this position signifies that this is an `LContainer`
        false, // has transplanted views
        currentView, // parent
        null, // next
        0, // transplanted views to refresh count
        tNode, // t_host
        _native10, // native,
        null, // view refs
        null);
        ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
        ngDevMode && attachLContainerDebug(lContainer);
        return lContainer;
      }
      /**
       * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
       * them by executing an associated template function.
       */


      function refreshEmbeddedViews(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
            var embeddedLView = lContainer[i];
            var embeddedTView = embeddedLView[TVIEW];
            ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');

            if (viewAttachedToChangeDetector(embeddedLView)) {
              refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
            }
          }
        }
      }
      /**
       * Mark transplanted views as needing to be refreshed at their insertion points.
       *
       * @param lView The `LView` that may have transplanted views.
       */


      function markTransplantedViewsForRefresh(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;
          var movedViews = lContainer[MOVED_VIEWS];
          ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');

          for (var i = 0; i < movedViews.length; i++) {
            var movedLView = movedViews[i];
            var insertionLContainer = movedLView[PARENT];
            ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for
            // refresh.

            if ((movedLView[FLAGS] & 1024
            /* RefreshTransplantedView */
            ) === 0) {
              updateTransplantedViewCount(insertionLContainer, 1);
            } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
            // those that aren't (declaration component === insertion component). In the latter case,
            // it's fine to add the flag, as we will clear it immediately in
            // `refreshEmbeddedViews` for the view currently being refreshed.


            movedLView[FLAGS] |= 1024
            /* RefreshTransplantedView */
            ;
          }
        }
      } /////////////

      /**
       * Refreshes components by entering the component view and processing its bindings, queries, etc.
       *
       * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
       */


      function refreshComponent(hostLView, componentHostIdx) {
        ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

        if (viewAttachedToChangeDetector(componentView)) {
          var tView = componentView[TVIEW];

          if (componentView[FLAGS] & (16
          /* CheckAlways */
          | 64
          /* Dirty */
          )) {
            refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
          } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
            refreshContainsDirtyView(componentView);
          }
        }
      }
      /**
       * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
       * children or descendants of the given lView.
       *
       * @param lView The lView which contains descendant transplanted views that need to be refreshed.
       */


      function refreshContainsDirtyView(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
            var embeddedLView = lContainer[i];

            if (embeddedLView[FLAGS] & 1024
            /* RefreshTransplantedView */
            ) {
                var embeddedTView = embeddedLView[TVIEW];
                ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
              } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
              refreshContainsDirtyView(embeddedLView);
            }
          }
        }

        var tView = lView[TVIEW]; // Refresh child component views.

        var components = tView.components;

        if (components !== null) {
          for (var _i11 = 0; _i11 < components.length; _i11++) {
            var componentView = getComponentLViewByIndex(components[_i11], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

            if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
              refreshContainsDirtyView(componentView);
            }
          }
        }
      }

      function renderComponent(hostLView, componentHostIdx) {
        ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
        var componentTView = componentView[TVIEW];
        syncViewWithBlueprint(componentTView, componentView);
        renderView(componentTView, componentView, componentView[CONTEXT]);
      }
      /**
       * Syncs an LView instance with its blueprint if they have gotten out of sync.
       *
       * Typically, blueprints and their view instances should always be in sync, so the loop here
       * will be skipped. However, consider this case of two components side-by-side:
       *
       * App template:
       * ```
       * <comp></comp>
       * <comp></comp>
       * ```
       *
       * The following will happen:
       * 1. App template begins processing.
       * 2. First <comp> is matched as a component and its LView is created.
       * 3. Second <comp> is matched as a component and its LView is created.
       * 4. App template completes processing, so it's time to check child templates.
       * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
       * 6. Second <comp> template is checked. Its blueprint has been updated by the first
       * <comp> template, but its LView was created before this update, so it is out of sync.
       *
       * Note that embedded views inside ngFor loops will never be out of sync because these views
       * are processed as soon as they are created.
       *
       * @param tView The `TView` that contains the blueprint for syncing
       * @param lView The view to sync
       */


      function syncViewWithBlueprint(tView, lView) {
        for (var i = lView.length; i < tView.blueprint.length; i++) {
          lView.push(tView.blueprint[i]);
        }
      }
      /**
       * Adds LView or LContainer to the end of the current view tree.
       *
       * This structure will be used to traverse through nested views to remove listeners
       * and call onDestroy callbacks.
       *
       * @param lView The view where LView or LContainer should be added
       * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
       * @param lViewOrLContainer The LView or LContainer to add to the view tree
       * @returns The state passed in
       */


      function addToViewTree(lView, lViewOrLContainer) {
        // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
        // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
        // of order, the change detection will run out of order, as the act of retrieving the the
        // LContainer from the RNode is what adds it to the queue.
        if (lView[CHILD_HEAD]) {
          lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
        } else {
          lView[CHILD_HEAD] = lViewOrLContainer;
        }

        lView[CHILD_TAIL] = lViewOrLContainer;
        return lViewOrLContainer;
      } ///////////////////////////////
      //// Change detection
      ///////////////////////////////

      /**
       * Marks current view and all ancestors dirty.
       *
       * Returns the root view because it is found as a byproduct of marking the view tree
       * dirty, and can be used by methods that consume markViewDirty() to easily schedule
       * change detection. Otherwise, such methods would need to traverse up the view tree
       * an additional time to get the root view and schedule a tick on it.
       *
       * @param lView The starting LView to mark dirty
       * @returns the root LView
       */


      function markViewDirty(lView) {
        while (lView) {
          lView[FLAGS] |= 64
          /* Dirty */
          ;
          var parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container

          if (isRootView(lView) && !parent) {
            return lView;
          } // continue otherwise


          lView = parent;
        }

        return null;
      }
      /**
       * Used to schedule change detection on the whole application.
       *
       * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
       * It is usually called indirectly by calling `markDirty` when the view needs to be
       * re-rendered.
       *
       * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
       * `scheduleTick` requests. The scheduling function can be overridden in
       * `renderComponent`'s `scheduler` option.
       */


      function scheduleTick(rootContext, flags) {
        var nothingScheduled = rootContext.flags === 0
        /* Empty */
        ;

        if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
          // https://github.com/angular/angular/issues/39296
          // should only attach the flags when really scheduling a tick
          rootContext.flags |= flags;
          var res;
          rootContext.clean = new Promise(function (r) {
            return res = r;
          });
          rootContext.scheduler(function () {
            if (rootContext.flags & 1
            /* DetectChanges */
            ) {
                rootContext.flags &= ~1
                /* DetectChanges */
                ;
                tickRootContext(rootContext);
              }

            if (rootContext.flags & 2
            /* FlushPlayers */
            ) {
                rootContext.flags &= ~2
                /* FlushPlayers */
                ;
                var playerHandler = rootContext.playerHandler;

                if (playerHandler) {
                  playerHandler.flushPlayers();
                }
              }

            rootContext.clean = _CLEAN_PROMISE;
            res(null);
          });
        }
      }

      function tickRootContext(rootContext) {
        for (var i = 0; i < rootContext.components.length; i++) {
          var rootComponent = rootContext.components[i];
          var lView = readPatchedLView(rootComponent);
          var tView = lView[TVIEW];
          renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
        }
      }

      function detectChangesInternal(tView, lView, context) {
        var rendererFactory = lView[RENDERER_FACTORY];
        if (rendererFactory.begin) rendererFactory.begin();

        try {
          refreshView(tView, lView, tView.template, context);
        } catch (error) {
          handleError(lView, error);
          throw error;
        } finally {
          if (rendererFactory.end) rendererFactory.end();
        }
      }
      /**
       * Synchronously perform change detection on a root view and its components.
       *
       * @param lView The view which the change detection should be performed on.
       */


      function detectChangesInRootView(lView) {
        tickRootContext(lView[CONTEXT]);
      }

      function checkNoChangesInternal(tView, view, context) {
        setIsInCheckNoChangesMode(true);

        try {
          detectChangesInternal(tView, view, context);
        } finally {
          setIsInCheckNoChangesMode(false);
        }
      }
      /**
       * Checks the change detector on a root view and its components, and throws if any changes are
       * detected.
       *
       * This is used in development mode to verify that running change detection doesn't
       * introduce other changes.
       *
       * @param lView The view which the change detection should be checked on.
       */


      function checkNoChangesInRootView(lView) {
        setIsInCheckNoChangesMode(true);

        try {
          detectChangesInRootView(lView);
        } finally {
          setIsInCheckNoChangesMode(false);
        }
      }

      function executeViewQueryFn(flags, viewQueryFn, component) {
        ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
        setCurrentQueryIndex(0);
        viewQueryFn(flags, component);
      } ///////////////////////////////
      //// Bindings & interpolations
      ///////////////////////////////

      /**
       * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
       *
       * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
       * - a bound property name;
       * - a static parts of interpolated strings;
       *
       * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
       * property binding metadata will be stored in `TView.data` at the same index as a bound value in
       * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
       * following format:
       * - `propertyName` for bound properties;
       * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
       * interpolated properties.
       *
       * @param tData `TData` where meta-data will be saved;
       * @param tNode `TNode` that is a target of the binding;
       * @param propertyName bound property name;
       * @param bindingIndex binding index in `LView`
       * @param interpolationParts static interpolation parts (for property interpolations)
       */


      function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex) {
        // Binding meta-data are stored only the first time a given property instruction is processed.
        // Since we don't have a concept of the "first update pass" we need to check for presence of the
        // binding meta-data to decide if one should be stored (or if was stored already).
        if (tData[bindingIndex] === null) {
          if (tNode.inputs == null || !tNode.inputs[propertyName]) {
            var propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
            propBindingIdxs.push(bindingIndex);
            var bindingMetadata = propertyName;

            for (var _len38 = arguments.length, interpolationParts = new Array(_len38 > 4 ? _len38 - 4 : 0), _key38 = 4; _key38 < _len38; _key38++) {
              interpolationParts[_key38 - 4] = arguments[_key38];
            }

            if (interpolationParts.length > 0) {
              bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
            }

            tData[bindingIndex] = bindingMetadata;
          }
        }
      }

      var CLEAN_PROMISE = _CLEAN_PROMISE;

      function getOrCreateLViewCleanup(view) {
        // top level variables should not be exported for performance reasons (PERF_NOTES.md)
        return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
      }

      function getOrCreateTViewCleanup(tView) {
        return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
      }
      /**
       * There are cases where the sub component's renderer needs to be included
       * instead of the current renderer (see the componentSyntheticHost* instructions).
       */


      function loadComponentRenderer(currentDef, tNode, lView) {
        // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
        // component (see packages/core/src/render3/component.ts). This is not consistent with the process
        // of creating inner components, when current directive index is available in the state. In order
        // to avoid relying on current def being `null` (thus special-casing root component creation), the
        // process of creating root component should be unified with the process of creating inner
        // components.
        if (currentDef === null || isComponentDef(currentDef)) {
          lView = unwrapLView(lView[tNode.index]);
        }

        return lView[RENDERER];
      }
      /** Handles an error thrown in an LView. */


      function handleError(lView, error) {
        var injector = lView[INJECTOR];
        var errorHandler = injector ? injector.get(ErrorHandler, null) : null;
        errorHandler && errorHandler.handleError(error);
      }
      /**
       * Set the inputs of directives at the current node to corresponding value.
       *
       * @param tView The current TView
       * @param lView the `LView` which contains the directives.
       * @param inputs mapping between the public "input" name and privately-known,
       *        possibly minified, property names to write to.
       * @param value Value to set.
       */


      function setInputsForProperty(tView, lView, inputs, publicName, value) {
        for (var i = 0; i < inputs.length;) {
          var index = inputs[i++];
          var privateName = inputs[i++];
          var instance = lView[index];
          ngDevMode && assertIndexInRange(lView, index);
          var def = tView.data[index];

          if (def.setInput !== null) {
            def.setInput(instance, value, publicName, privateName);
          } else {
            instance[privateName] = value;
          }
        }
      }
      /**
       * Updates a text binding at a given index in a given LView.
       */


      function textBindingInternal(lView, index, value) {
        ngDevMode && assertString(value, 'Value should be a string');
        ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
        ngDevMode && assertIndexInRange(lView, index);
        var element = getNativeByIndex(index, lView);
        ngDevMode && assertDefined(element, 'native element should exist');
        updateTextNode(lView[RENDERER], element, value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compute the static styling (class/style) from `TAttributes`.
       *
       * This function should be called during `firstCreatePass` only.
       *
       * @param tNode The `TNode` into which the styling information should be loaded.
       * @param attrs `TAttributes` containing the styling information.
       * @param writeToHost Where should the resulting static styles be written?
       *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
       *   - `true` Write to `TNode.styles` / `TNode.classes`
       */


      function computeStaticStyling(tNode, attrs, writeToHost) {
        ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
        var styles = writeToHost ? tNode.styles : null;
        var classes = writeToHost ? tNode.classes : null;
        var mode = 0;

        if (attrs !== null) {
          for (var i = 0; i < attrs.length; i++) {
            var value = attrs[i];

            if (typeof value === 'number') {
              mode = value;
            } else if (mode == 1
            /* Classes */
            ) {
                classes = concatStringsWithSpace(classes, value);
              } else if (mode == 2
            /* Styles */
            ) {
                var style = value;
                var styleValue = attrs[++i];
                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
              }
          }
        }

        writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
        writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Synchronously perform change detection on a component (and possibly its sub-components).
       *
       * This function triggers change detection in a synchronous way on a component.
       *
       * @param component The component which the change detection should be performed on.
       */


      function detectChanges(component) {
        var view = getComponentViewByInstance(component);
        detectChangesInternal(view[TVIEW], view, component);
      }
      /**
       * Marks the component as dirty (needing change detection). Marking a component dirty will
       * schedule a change detection on it at some point in the future.
       *
       * Marking an already dirty component as dirty won't do anything. Only one outstanding change
       * detection can be scheduled per component tree.
       *
       * @param component Component to mark as dirty.
       */


      function markDirty(component) {
        ngDevMode && assertDefined(component, 'component');
        var rootView = markViewDirty(getComponentViewByInstance(component));
        ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
        scheduleTick(rootView[CONTEXT], 1
        /* DetectChanges */
        );
      }
      /**
       * Used to perform change detection on the whole application.
       *
       * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
       * executes lifecycle hooks and conditionally checks components based on their
       * `ChangeDetectionStrategy` and dirtiness.
       *
       * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
       * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
       * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
       * be changed when calling `renderComponent` and providing the `scheduler` option.
       */


      function tick(component) {
        var rootView = getRootView(component);
        var rootContext = rootView[CONTEXT];
        tickRootContext(rootContext);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
       *
       * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
       * project.
       *
       * @publicApi
       */


      var INJECTOR$1 = new InjectionToken('INJECTOR', // Dissable tslint because this is const enum which gets inlined not top level prop access.
      // tslint:disable-next-line: no-toplevel-property-access
      -1
      /* Injector */
      );
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var NullInjector = /*#__PURE__*/function () {
        function NullInjector() {
          _classCallCheck(this, NullInjector);
        }

        _createClass2(NullInjector, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

            if (notFoundValue === THROW_IF_NOT_FOUND) {
              var error = new Error("NullInjectorError: No provider for ".concat(stringify(token), "!"));
              error.name = 'NullInjectorError';
              throw error;
            }

            return notFoundValue;
          }
        }]);

        return NullInjector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An internal token whose presence in an injector indicates that the injector should treat itself
       * as a root scoped injector when processing requests for unknown tokens which may indicate
       * they are provided in the root scope.
       */


      var INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marker which indicates that a value has not yet been created from the factory function.
       */

      var NOT_YET = {};
      /**
       * Marker which indicates that the factory function for a token is in the process of being called.
       *
       * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
       * injection of a dependency has recursively attempted to inject the original token, and there is
       * a circular dependency among the providers.
       */

      var CIRCULAR = {};
      var EMPTY_ARRAY$2 = [];
      /**
       * A lazily initialized NullInjector.
       */

      var NULL_INJECTOR = undefined;

      function getNullInjector() {
        if (NULL_INJECTOR === undefined) {
          NULL_INJECTOR = new NullInjector();
        }

        return NULL_INJECTOR;
      }
      /**
       * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
       *
       * @publicApi
       */


      function createInjector(defType) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var name = arguments.length > 3 ? arguments[3] : undefined;
        var injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);

        injector._resolveInjectorDefTypes();

        return injector;
      }
      /**
       * Creates a new injector without eagerly resolving its injector types. Can be used in places
       * where resolving the injector types immediately can lead to an infinite loop. The injector types
       * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
       */


      function createInjectorWithoutInjectorInstances(defType) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var name = arguments.length > 3 ? arguments[3] : undefined;
        return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
      }

      var R3Injector = /*#__PURE__*/function () {
        function R3Injector(def, additionalProviders, parent) {
          var _this146 = this;

          var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck(this, R3Injector);

          this.parent = parent;
          /**
           * Map of tokens to records which contain the instances of those tokens.
           * - `null` value implies that we don't have the record. Used by tree-shakable injectors
           * to prevent further searches.
           */

          this.records = new Map();
          /**
           * The transitive set of `InjectorType`s which define this injector.
           */

          this.injectorDefTypes = new Set();
          /**
           * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
           */

          this.onDestroy = new Set();
          this._destroyed = false;
          var dedupStack = []; // Start off by creating Records for every provider declared in every InjectorType
          // included transitively in additional providers then do the same for `def`. This order is
          // important because `def` may include providers that override ones in additionalProviders.

          additionalProviders && deepForEach(additionalProviders, function (provider) {
            return _this146.processProvider(provider, def, additionalProviders);
          });
          deepForEach([def], function (injectorDef) {
            return _this146.processInjectorType(injectorDef, [], dedupStack);
          }); // Make sure the INJECTOR token provides this injector.

          this.records.set(INJECTOR$1, makeRecord(undefined, this)); // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
          // any injectable scoped to APP_ROOT_SCOPE.

          var record = this.records.get(INJECTOR_SCOPE);
          this.scope = record != null ? record.value : null; // Source name, used for debugging

          this.source = source || (typeof def === 'object' ? null : stringify(def));
        }
        /**
         * Flag indicating that this injector was previously destroyed.
         */


        _createClass2(R3Injector, [{
          key: "destroyed",
          get: function get() {
            return this._destroyed;
          }
          /**
           * Destroy the injector and release references to every instance or provider associated with it.
           *
           * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
           * hook was found.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().

            this._destroyed = true;

            try {
              // Call all the lifecycle hooks.
              this.onDestroy.forEach(function (service) {
                return service.ngOnDestroy();
              });
            } finally {
              // Release all references.
              this.records.clear();
              this.onDestroy.clear();
              this.injectorDefTypes.clear();
            }
          }
        }, {
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
            var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
            this.assertNotDestroyed(); // Set the injection context.

            var previousInjector = setCurrentInjector(this);

            try {
              // Check for the SkipSelf flag.
              if (!(flags & InjectFlags.SkipSelf)) {
                // SkipSelf isn't set, check if the record belongs to this injector.
                var record = this.records.get(token);

                if (record === undefined) {
                  // No record, but maybe the token is scoped to this injector. Look for an injectable
                  // def with a scope matching this injector.
                  var def = couldBeInjectableType(token) && getInjectableDef(token);

                  if (def && this.injectableDefInScope(def)) {
                    // Found an injectable def and it's scoped to this injector. Pretend as if it was here
                    // all along.
                    record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                  } else {
                    record = null;
                  }

                  this.records.set(token, record);
                } // If a record was found, get the instance for it and return it.


                if (record != null
                /* NOT null || undefined */
                ) {
                    return this.hydrate(token, record);
                  }
              } // Select the next injector based on the Self flag - if self is set, the next injector is
              // the NullInjector, otherwise it's the parent.


              var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
              // is undefined, the value is null, otherwise it's the notFoundValue.

              notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
              return nextInjector.get(token, notFoundValue);
            } catch (e) {
              if (e.name === 'NullInjectorError') {
                var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
                path.unshift(stringify(token));

                if (previousInjector) {
                  // We still have a parent injector, keep throwing
                  throw e;
                } else {
                  // Format & throw the final error message when we don't have any previous injector
                  return catchInjectorError(e, token, 'R3InjectorError', this.source);
                }
              } else {
                throw e;
              }
            } finally {
              // Lastly, clean up the state by restoring the previous injector.
              setCurrentInjector(previousInjector);
            }
          }
          /** @internal */

        }, {
          key: "_resolveInjectorDefTypes",
          value: function _resolveInjectorDefTypes() {
            var _this147 = this;

            this.injectorDefTypes.forEach(function (defType) {
              return _this147.get(defType);
            });
          }
        }, {
          key: "toString",
          value: function toString() {
            var tokens = [],
                records = this.records;
            records.forEach(function (v, token) {
              return tokens.push(stringify(token));
            });
            return "R3Injector[".concat(tokens.join(', '), "]");
          }
        }, {
          key: "assertNotDestroyed",
          value: function assertNotDestroyed() {
            if (this._destroyed) {
              throw new Error('Injector has already been destroyed.');
            }
          }
          /**
           * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
           * to this injector.
           *
           * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
           * the function will return "true" to indicate that the providers of the type definition need
           * to be processed. This allows us to process providers of injector types after all imports of
           * an injector definition are processed. (following View Engine semantics: see FW-1349)
           */

        }, {
          key: "processInjectorType",
          value: function processInjectorType(defOrWrappedDef, parents, dedupStack) {
            var _this148 = this;

            defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
            if (!defOrWrappedDef) return false; // Either the defOrWrappedDef is an InjectorType (with injector def) or an
            // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
            // read, so care is taken to only do the read once.
            // First attempt to read the injector def (`ɵinj`).

            var def = getInjectorDef(defOrWrappedDef); // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.

            var ngModule = def == null && defOrWrappedDef.ngModule || undefined; // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
            // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
            // is the `ngModule`.

            var defType = ngModule === undefined ? defOrWrappedDef : ngModule; // Check for circular dependencies.

            if (ngDevMode && parents.indexOf(defType) !== -1) {
              var defName = stringify(defType);
              var path = parents.map(stringify);
              throwCyclicDependencyError(defName, path);
            } // Check for multiple imports of the same module


            var isDuplicate = dedupStack.indexOf(defType) !== -1; // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
            // `InjectorDef` is on its `ngModule`.

            if (ngModule !== undefined) {
              def = getInjectorDef(ngModule);
            } // If no definition was found, it might be from exports. Remove it.


            if (def == null) {
              return false;
            } // Add providers in the same way that @NgModule resolution did:
            // First, include providers from any imports.


            if (def.imports != null && !isDuplicate) {
              // Before processing defType's imports, add it to the set of parents. This way, if it ends
              // up deeply importing itself, this can be detected.
              ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module

              dedupStack.push(defType);
              var importTypesWithProviders;

              try {
                deepForEach(def.imports, function (imported) {
                  if (_this148.processInjectorType(imported, parents, dedupStack)) {
                    if (importTypesWithProviders === undefined) importTypesWithProviders = []; // If the processed import is an injector type with providers, we store it in the
                    // list of import types with providers, so that we can process those afterwards.

                    importTypesWithProviders.push(imported);
                  }
                });
              } finally {
                // Remove it from the parents set when finished.
                ngDevMode && parents.pop();
              } // Imports which are declared with providers (TypeWithProviders) need to be processed
              // after all imported modules are processed. This is similar to how View Engine
              // processes/merges module imports in the metadata resolver. See: FW-1349.


              if (importTypesWithProviders !== undefined) {
                var _loop2 = function _loop2(i) {
                  var _importTypesWithProvi = importTypesWithProviders[i],
                      ngModule = _importTypesWithProvi.ngModule,
                      providers = _importTypesWithProvi.providers;
                  deepForEach(providers, function (provider) {
                    return _this148.processProvider(provider, ngModule, providers || EMPTY_ARRAY$2);
                  });
                };

                for (var i = 0; i < importTypesWithProviders.length; i++) {
                  _loop2(i);
                }
              }
            } // Track the InjectorType and add a provider for it. It's important that this is done after the
            // def's imports.


            this.injectorDefTypes.add(defType);

            var factory = getFactoryDef(defType) || function () {
              return new defType();
            };

            this.records.set(defType, makeRecord(factory, NOT_YET)); // Next, include providers listed on the definition itself.

            var defProviders = def.providers;

            if (defProviders != null && !isDuplicate) {
              var injectorType = defOrWrappedDef;
              deepForEach(defProviders, function (provider) {
                return _this148.processProvider(provider, injectorType, defProviders);
              });
            }

            return ngModule !== undefined && defOrWrappedDef.providers !== undefined;
          }
          /**
           * Process a `SingleProvider` and add it.
           */

        }, {
          key: "processProvider",
          value: function processProvider(provider, ngModuleType, providers) {
            // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
            // property.
            provider = resolveForwardRef(provider);
            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.

            var record = providerToRecord(provider, ngModuleType, providers);

            if (!isTypeProvider(provider) && provider.multi === true) {
              // If the provider indicates that it's a multi-provider, process it specially.
              // First check whether it's been defined already.
              var multiRecord = this.records.get(token);

              if (multiRecord) {
                // It has. Throw a nice error if
                if (ngDevMode && multiRecord.multi === undefined) {
                  throwMixedMultiProviderError();
                }
              } else {
                multiRecord = makeRecord(undefined, NOT_YET, true);

                multiRecord.factory = function () {
                  return injectArgs(multiRecord.multi);
                };

                this.records.set(token, multiRecord);
              }

              token = provider;
              multiRecord.multi.push(provider);
            } else {
              var existing = this.records.get(token);

              if (ngDevMode && existing && existing.multi !== undefined) {
                throwMixedMultiProviderError();
              }
            }

            this.records.set(token, record);
          }
        }, {
          key: "hydrate",
          value: function hydrate(token, record) {
            if (ngDevMode && record.value === CIRCULAR) {
              throwCyclicDependencyError(stringify(token));
            } else if (record.value === NOT_YET) {
              record.value = CIRCULAR;
              record.value = record.factory();
            }

            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
              this.onDestroy.add(record.value);
            }

            return record.value;
          }
        }, {
          key: "injectableDefInScope",
          value: function injectableDefInScope(def) {
            if (!def.providedIn) {
              return false;
            } else if (typeof def.providedIn === 'string') {
              return def.providedIn === 'any' || def.providedIn === this.scope;
            } else {
              return this.injectorDefTypes.has(def.providedIn);
            }
          }
        }]);

        return R3Injector;
      }();

      function injectableDefOrInjectorDefFactory(token) {
        // Most tokens will have an injectable def directly on them, which specifies a factory directly.
        var injectableDef = getInjectableDef(token);
        var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);

        if (factory !== null) {
          return factory;
        } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
        // If it's missing that, it's an error.


        if (token instanceof InjectionToken) {
          throw new Error("Token ".concat(stringify(token), " is missing a \u0275prov definition."));
        } // Undecorated types can sometimes be created if they have no constructor arguments.


        if (token instanceof Function) {
          return getUndecoratedInjectableFactory(token);
        } // There was no way to resolve a factory for this token.


        throw new Error('unreachable');
      }

      function getUndecoratedInjectableFactory(token) {
        // If the token has parameters then it has dependencies that we cannot resolve implicitly.
        var paramLength = token.length;

        if (paramLength > 0) {
          var args = newArray(paramLength, '?');
          throw new Error("Can't resolve all parameters for ".concat(stringify(token), ": (").concat(args.join(', '), ")."));
        } // The constructor function appears to have no parameters.
        // This might be because it inherits from a super-class. In which case, use an injectable
        // def from an ancestor if there is one.
        // Otherwise this really is a simple class with no dependencies, so return a factory that
        // just instantiates the zero-arg constructor.


        var inheritedInjectableDef = getInheritedInjectableDef(token);

        if (inheritedInjectableDef !== null) {
          return function () {
            return inheritedInjectableDef.factory(token);
          };
        } else {
          return function () {
            return new token();
          };
        }
      }

      function providerToRecord(provider, ngModuleType, providers) {
        if (isValueProvider(provider)) {
          return makeRecord(undefined, provider.useValue);
        } else {
          var factory = providerToFactory(provider, ngModuleType, providers);
          return makeRecord(factory, NOT_YET);
        }
      }
      /**
       * Converts a `SingleProvider` into a factory function.
       *
       * @param provider provider to convert to factory
       */


      function providerToFactory(provider, ngModuleType, providers) {
        var factory = undefined;

        if (isTypeProvider(provider)) {
          var unwrappedProvider = resolveForwardRef(provider);
          return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
        } else {
          if (isValueProvider(provider)) {
            factory = function factory() {
              return resolveForwardRef(provider.useValue);
            };
          } else if (isFactoryProvider(provider)) {
            factory = function factory() {
              return provider.useFactory.apply(provider, _toConsumableArray(injectArgs(provider.deps || [])));
            };
          } else if (isExistingProvider(provider)) {
            factory = function factory() {
              return ɵɵinject(resolveForwardRef(provider.useExisting));
            };
          } else {
            var classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));

            if (ngDevMode && !classRef) {
              throwInvalidProviderError(ngModuleType, providers, provider);
            }

            if (hasDeps(provider)) {
              factory = function factory() {
                return _construct(classRef, _toConsumableArray(injectArgs(provider.deps)));
              };
            } else {
              return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
            }
          }
        }

        return factory;
      }

      function makeRecord(factory, value) {
        var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return {
          factory: factory,
          value: value,
          multi: multi ? [] : undefined
        };
      }

      function isValueProvider(value) {
        return value !== null && typeof value == 'object' && USE_VALUE in value;
      }

      function isExistingProvider(value) {
        return !!(value && value.useExisting);
      }

      function isFactoryProvider(value) {
        return !!(value && value.useFactory);
      }

      function isTypeProvider(value) {
        return typeof value === 'function';
      }

      function isClassProvider(value) {
        return !!value.useClass;
      }

      function hasDeps(value) {
        return !!value.deps;
      }

      function hasOnDestroy(value) {
        return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';
      }

      function couldBeInjectableType(value) {
        return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
        return new StaticInjector(providers, parent, name);
      }

      function INJECTOR_IMPL__POST_R3__(providers, parent, name) {
        return createInjector({
          name: name
        }, parent, providers, name);
      }

      var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;
      /**
       * Concrete injectors implement this interface. Injectors are configured
       * with [providers](guide/glossary#provider) that associate
       * dependencies of various types with [injection tokens](guide/glossary#di-token).
       *
       * @see ["DI Providers"](guide/dependency-injection-providers).
       * @see `StaticProvider`
       *
       * @usageNotes
       *
       *  The following example creates a service injector instance.
       *
       * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
       *
       * ### Usage example
       *
       * {@example core/di/ts/injector_spec.ts region='Injector'}
       *
       * `Injector` returns itself when given `Injector` as a token:
       *
       * {@example core/di/ts/injector_spec.ts region='injectInjector'}
       *
       * @publicApi
       */

      var Injector = /*#__PURE__*/function () {
        function Injector() {
          _classCallCheck(this, Injector);
        }

        _createClass2(Injector, null, [{
          key: "create",
          value: function create(options, parent) {
            if (Array.isArray(options)) {
              return INJECTOR_IMPL(options, parent, '');
            } else {
              return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
            }
          }
        }]);

        return Injector;
      }();

      Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
      Injector.NULL = new NullInjector();
      /** @nocollapse */

      Injector.ɵprov = ɵɵdefineInjectable({
        token: Injector,
        providedIn: 'any',
        factory: function factory() {
          return ɵɵinject(INJECTOR$1);
        }
      });
      /**
       * @internal
       * @nocollapse
       */

      Injector.__NG_ELEMENT_ID__ = -1
      /* Injector */
      ;

      var IDENT = function IDENT(value) {
        return value;
      };

      var ɵ0$6 = IDENT;
      var EMPTY = [];
      var CIRCULAR$1 = IDENT;

      var MULTI_PROVIDER_FN = function MULTI_PROVIDER_FN() {
        return Array.prototype.slice.call(arguments);
      };

      var ɵ1$1 = MULTI_PROVIDER_FN;
      var NO_NEW_LINE$1 = 'ɵ';

      var StaticInjector = /*#__PURE__*/function () {
        function StaticInjector(providers) {
          var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.NULL;
          var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

          _classCallCheck(this, StaticInjector);

          this.parent = parent;
          this.source = source;
          var records = this._records = new Map();
          records.set(Injector, {
            token: Injector,
            fn: IDENT,
            deps: EMPTY,
            value: this,
            useNew: false
          });
          records.set(INJECTOR$1, {
            token: INJECTOR$1,
            fn: IDENT,
            deps: EMPTY,
            value: this,
            useNew: false
          });
          this.scope = recursivelyProcessProviders(records, providers);
        }

        _createClass2(StaticInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
            var records = this._records;
            var record = records.get(token);

            if (record === undefined) {
              // This means we have never seen this record, see if it is tree shakable provider.
              var injectableDef = getInjectableDef(token);

              if (injectableDef) {
                var providedIn = injectableDef && injectableDef.providedIn;

                if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
                  records.set(token, record = resolveProvider({
                    provide: token,
                    useFactory: injectableDef.factory,
                    deps: EMPTY
                  }));
                }
              }

              if (record === undefined) {
                // Set record to null to make sure that we don't go through expensive lookup above again.
                records.set(token, null);
              }
            }

            var lastInjector = setCurrentInjector(this);

            try {
              return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
            } catch (e) {
              return catchInjectorError(e, token, 'StaticInjectorError', this.source);
            } finally {
              setCurrentInjector(lastInjector);
            }
          }
        }, {
          key: "toString",
          value: function toString() {
            var tokens = [],
                records = this._records;
            records.forEach(function (v, token) {
              return tokens.push(stringify(token));
            });
            return "StaticInjector[".concat(tokens.join(', '), "]");
          }
        }]);

        return StaticInjector;
      }();

      function resolveProvider(provider) {
        var deps = computeDeps(provider);
        var fn = IDENT;
        var value = EMPTY;
        var useNew = false;
        var provide = resolveForwardRef(provider.provide);

        if (USE_VALUE in provider) {
          // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
          value = provider.useValue;
        } else if (provider.useFactory) {
          fn = provider.useFactory;
        } else if (provider.useExisting) {// Just use IDENT
        } else if (provider.useClass) {
          useNew = true;
          fn = resolveForwardRef(provider.useClass);
        } else if (typeof provide == 'function') {
          useNew = true;
          fn = provide;
        } else {
          throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
        }

        return {
          deps: deps,
          fn: fn,
          useNew: useNew,
          value: value
        };
      }

      function multiProviderMixError(token) {
        return staticError('Cannot mix multi providers and regular providers', token);
      }

      function recursivelyProcessProviders(records, provider) {
        var scope = null;

        if (provider) {
          provider = resolveForwardRef(provider);

          if (Array.isArray(provider)) {
            // if we have an array recurse into the array
            for (var i = 0; i < provider.length; i++) {
              scope = recursivelyProcessProviders(records, provider[i]) || scope;
            }
          } else if (typeof provider === 'function') {
            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
            // error messages
            throw staticError('Function/Class not supported', provider);
          } else if (provider && typeof provider === 'object' && provider.provide) {
            // At this point we have what looks like a provider: {provide: ?, ....}
            var token = resolveForwardRef(provider.provide);
            var resolvedProvider = resolveProvider(provider);

            if (provider.multi === true) {
              // This is a multi provider.
              var multiProvider = records.get(token);

              if (multiProvider) {
                if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                  throw multiProviderMixError(token);
                }
              } else {
                // Create a placeholder factory which will look up the constituents of the multi provider.
                records.set(token, multiProvider = {
                  token: provider.provide,
                  deps: [],
                  useNew: false,
                  fn: MULTI_PROVIDER_FN,
                  value: EMPTY
                });
              } // Treat the provider as the token.


              token = provider;
              multiProvider.deps.push({
                token: token,
                options: 6
                /* Default */

              });
            }

            var record = records.get(token);

            if (record && record.fn == MULTI_PROVIDER_FN) {
              throw multiProviderMixError(token);
            }

            if (token === INJECTOR_SCOPE) {
              scope = resolvedProvider.value;
            }

            records.set(token, resolvedProvider);
          } else {
            throw staticError('Unexpected provider', provider);
          }
        }

        return scope;
      }

      function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
        try {
          return resolveToken(token, record, records, parent, notFoundValue, flags);
        } catch (e) {
          // ensure that 'e' is of type Error.
          if (!(e instanceof Error)) {
            e = new Error(e);
          }

          var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
          path.unshift(token);

          if (record && record.value == CIRCULAR$1) {
            // Reset the Circular flag.
            record.value = EMPTY;
          }

          throw e;
        }
      }

      function resolveToken(token, record, records, parent, notFoundValue, flags) {
        var value;

        if (record && !(flags & InjectFlags.SkipSelf)) {
          // If we don't have a record, this implies that we don't own the provider hence don't know how
          // to resolve it.
          value = record.value;

          if (value == CIRCULAR$1) {
            throw Error(NO_NEW_LINE$1 + 'Circular dependency');
          } else if (value === EMPTY) {
            record.value = CIRCULAR$1;
            var obj = undefined;
            var useNew = record.useNew;
            var fn = record.fn;
            var depRecords = record.deps;
            var deps = EMPTY;

            if (depRecords.length) {
              deps = [];

              for (var i = 0; i < depRecords.length; i++) {
                var depRecord = depRecords[i];
                var options = depRecord.options;
                var childRecord = options & 2
                /* CheckSelf */
                ? records.get(depRecord.token) : undefined;
                deps.push(tryResolveToken( // Current Token to resolve
                depRecord.token, // A record which describes how to resolve the token.
                // If undefined, this means we don't have such a record
                childRecord, // Other records we know about.
                records, // If we don't know how to resolve dependency and we should not check parent for it,
                // than pass in Null injector.
                !childRecord && !(options & 4
                /* CheckParent */
                ) ? Injector.NULL : parent, options & 1
                /* Optional */
                ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));
              }
            }

            record.value = value = useNew ? _construct(fn, _toConsumableArray(deps)) : fn.apply(obj, deps);
          }
        } else if (!(flags & InjectFlags.Self)) {
          value = parent.get(token, notFoundValue, InjectFlags.Default);
        } else if (!(flags & InjectFlags.Optional)) {
          value = Injector.NULL.get(token, notFoundValue);
        } else {
          value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
        }

        return value;
      }

      function computeDeps(provider) {
        var deps = EMPTY;
        var providerDeps = provider.deps;

        if (providerDeps && providerDeps.length) {
          deps = [];

          for (var i = 0; i < providerDeps.length; i++) {
            var options = 6
            /* Default */
            ;
            var token = resolveForwardRef(providerDeps[i]);

            if (Array.isArray(token)) {
              for (var j = 0, annotations = token; j < annotations.length; j++) {
                var annotation = annotations[j];

                if (annotation instanceof Optional || annotation == Optional) {
                  options = options | 1
                  /* Optional */
                  ;
                } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
                  options = options & ~2
                  /* CheckSelf */
                  ;
                } else if (annotation instanceof Self || annotation == Self) {
                  options = options & ~4
                  /* CheckParent */
                  ;
                } else if (annotation instanceof Inject) {
                  token = annotation.token;
                } else {
                  token = resolveForwardRef(annotation);
                }
              }
            }

            deps.push({
              token: token,
              options: options
            });
          }
        } else if (provider.useExisting) {
          var _token = resolveForwardRef(provider.useExisting);

          deps = [{
            token: _token,
            options: 6
            /* Default */

          }];
        } else if (!providerDeps && !(USE_VALUE in provider)) {
          // useValue & useExisting are the only ones which are exempt from deps all others need it.
          throw staticError('\'deps\' required', provider);
        }

        return deps;
      }

      function staticError(text, obj) {
        return new Error(formatError(text, obj, 'StaticInjectorError'));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves the component instance associated with a given DOM element.
       *
       * @usageNotes
       * Given the following DOM structure:
       * ```html
       * <my-app>
       *   <div>
       *     <child-comp></child-comp>
       *   </div>
       * </my-app>
       * ```
       * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
       * associated with this DOM element.
       *
       * Calling the function on `<my-app>` will return the `MyApp` instance.
       *
       *
       * @param element DOM element from which the component should be retrieved.
       * @returns Component instance associated with the element or `null` if there
       *    is no component associated with it.
       *
       * @publicApi
       * @globalApi ng
       */


      function getComponent(element) {
        assertDomElement(element);
        var context = loadLContext(element, false);
        if (context === null) return null;

        if (context.component === undefined) {
          context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
        }

        return context.component;
      }
      /**
       * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
       * view that the element is part of. Otherwise retrieves the instance of the component whose view
       * owns the element (in this case, the result is the same as calling `getOwningComponent`).
       *
       * @param element Element for which to get the surrounding component instance.
       * @returns Instance of the component that is around the element or null if the element isn't
       *    inside any component.
       *
       * @publicApi
       * @globalApi ng
       */


      function getContext(element) {
        assertDomElement(element);
        var context = loadLContext(element, false);
        return context === null ? null : context.lView[CONTEXT];
      }
      /**
       * Retrieves the component instance whose view contains the DOM element.
       *
       * For example, if `<child-comp>` is used in the template of `<app-comp>`
       * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
       * would return `<app-comp>`.
       *
       * @param elementOrDir DOM element, component or directive instance
       *    for which to retrieve the root components.
       * @returns Component instance whose view owns the DOM element or null if the element is not
       *    part of a component view.
       *
       * @publicApi
       * @globalApi ng
       */


      function getOwningComponent(elementOrDir) {
        var context = loadLContext(elementOrDir, false);
        if (context === null) return null;
        var lView = context.lView;
        var parent;
        ngDevMode && assertLView(lView);

        while (lView[TVIEW].type === 2
        /* Embedded */
        && (parent = getLViewParent(lView))) {
          lView = parent;
        }

        return lView[FLAGS] & 512
        /* IsRoot */
        ? null : lView[CONTEXT];
      }
      /**
       * Retrieves all root components associated with a DOM element, directive or component instance.
       * Root components are those which have been bootstrapped by Angular.
       *
       * @param elementOrDir DOM element, component or directive instance
       *    for which to retrieve the root components.
       * @returns Root components associated with the target object.
       *
       * @publicApi
       * @globalApi ng
       */


      function getRootComponents(elementOrDir) {
        return _toConsumableArray(getRootContext(elementOrDir).components);
      }
      /**
       * Retrieves an `Injector` associated with an element, component or directive instance.
       *
       * @param elementOrDir DOM element, component or directive instance for which to
       *    retrieve the injector.
       * @returns Injector associated with the element, component or directive instance.
       *
       * @publicApi
       * @globalApi ng
       */


      function getInjector(elementOrDir) {
        var context = loadLContext(elementOrDir, false);
        if (context === null) return Injector.NULL;
        var tNode = context.lView[TVIEW].data[context.nodeIndex];
        return new NodeInjector(tNode, context.lView);
      }
      /**
       * Retrieve a set of injection tokens at a given DOM node.
       *
       * @param element Element for which the injection tokens should be retrieved.
       */


      function getInjectionTokens(element) {
        var context = loadLContext(element, false);
        if (context === null) return [];
        var lView = context.lView;
        var tView = lView[TVIEW];
        var tNode = tView.data[context.nodeIndex];
        var providerTokens = [];
        var startIndex = tNode.providerIndexes & 1048575
        /* ProvidersStartIndexMask */
        ;
        var endIndex = tNode.directiveEnd;

        for (var i = startIndex; i < endIndex; i++) {
          var value = tView.data[i];

          if (isDirectiveDefHack(value)) {
            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
            // design flaw.  We should always store same type so that we can be monomorphic. The issue
            // is that for Components/Directives we store the def instead the type. The correct behavior
            // is that we should always be storing injectable type in this location.
            value = value.type;
          }

          providerTokens.push(value);
        }

        return providerTokens;
      }
      /**
       * Retrieves directive instances associated with a given DOM element. Does not include
       * component instances.
       *
       * @usageNotes
       * Given the following DOM structure:
       * ```
       * <my-app>
       *   <button my-button></button>
       *   <my-comp></my-comp>
       * </my-app>
       * ```
       * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
       * directive that is associated with the DOM element.
       *
       * Calling `getDirectives` on `<my-comp>` will return an empty array.
       *
       * @param element DOM element for which to get the directives.
       * @returns Array of directives associated with the element.
       *
       * @publicApi
       * @globalApi ng
       */


      function getDirectives(element) {
        var context = loadLContext(element);

        if (context.directives === undefined) {
          context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);
        } // The `directives` in this case are a named array called `LComponentView`. Clone the
        // result so we don't expose an internal data structure in the user's console.


        return context.directives === null ? [] : _toConsumableArray(context.directives);
      }

      function loadLContext(target) {
        var throwOnNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var context = getLContext(target);

        if (!context && throwOnNotFound) {
          throw new Error(ngDevMode ? "Unable to find context associated with ".concat(stringifyForError(target)) : 'Invalid ng target');
        }

        return context;
      }
      /**
       * Retrieve map of local references.
       *
       * The references are retrieved as a map of local reference name to element or directive instance.
       *
       * @param target DOM element, component or directive instance for which to retrieve
       *    the local references.
       */


      function getLocalRefs(target) {
        var context = loadLContext(target, false);
        if (context === null) return {};

        if (context.localRefs === undefined) {
          context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
        }

        return context.localRefs || {};
      }
      /**
       * Retrieves the host element of a component or directive instance.
       * The host element is the DOM element that matched the selector of the directive.
       *
       * @param componentOrDirective Component or directive instance for which the host
       *     element should be retrieved.
       * @returns Host element of the target.
       *
       * @publicApi
       * @globalApi ng
       */


      function getHostElement(componentOrDirective) {
        return getLContext(componentOrDirective)["native"];
      }
      /**
       * Retrieves the rendered text for a given component.
       *
       * This function retrieves the host element of a component and
       * and then returns the `textContent` for that element. This implies
       * that the text returned will include re-projected content of
       * the component as well.
       *
       * @param component The component to return the content text for.
       */


      function getRenderedText(component) {
        var hostElement = getHostElement(component);
        return hostElement.textContent || '';
      }

      function loadLContextFromNode(node) {
        if (!(node instanceof Node)) throw new Error('Expecting instance of DOM Element');
        return loadLContext(node);
      }
      /**
       * Retrieves a list of event listeners associated with a DOM element. The list does include host
       * listeners, but it does not include event listeners defined outside of the Angular context
       * (e.g. through `addEventListener`).
       *
       * @usageNotes
       * Given the following DOM structure:
       * ```
       * <my-app>
       *   <div (click)="doSomething()"></div>
       * </my-app>
       *
       * ```
       * Calling `getListeners` on `<div>` will return an object that looks as follows:
       * ```
       * {
       *   name: 'click',
       *   element: <div>,
       *   callback: () => doSomething(),
       *   useCapture: false
       * }
       * ```
       *
       * @param element Element for which the DOM listeners should be retrieved.
       * @returns Array of event listeners on the DOM element.
       *
       * @publicApi
       * @globalApi ng
       */


      function getListeners(element) {
        assertDomElement(element);
        var lContext = loadLContext(element, false);
        if (lContext === null) return [];
        var lView = lContext.lView;
        var tView = lView[TVIEW];
        var lCleanup = lView[CLEANUP];
        var tCleanup = tView.cleanup;
        var listeners = [];

        if (tCleanup && lCleanup) {
          for (var i = 0; i < tCleanup.length;) {
            var firstParam = tCleanup[i++];
            var secondParam = tCleanup[i++];

            if (typeof firstParam === 'string') {
              var name = firstParam;
              var listenerElement = unwrapRNode(lView[secondParam]);
              var callback = lCleanup[tCleanup[i++]];
              var useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.
              // if useCaptureOrIndx is positive number then it in unsubscribe method
              // if useCaptureOrIndx is negative number then it is a Subscription

              var type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';
              var useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;

              if (element == listenerElement) {
                listeners.push({
                  element: element,
                  name: name,
                  callback: callback,
                  useCapture: useCapture,
                  type: type
                });
              }
            }
          }
        }

        listeners.sort(sortListeners);
        return listeners;
      }

      function sortListeners(a, b) {
        if (a.name == b.name) return 0;
        return a.name < b.name ? -1 : 1;
      }
      /**
       * This function should not exist because it is megamorphic and only mostly correct.
       *
       * See call site for more info.
       */


      function isDirectiveDefHack(obj) {
        return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
      }
      /**
       * Returns the attached `DebugNode` instance for an element in the DOM.
       *
       * @param element DOM element which is owned by an existing component's view.
       */


      function getDebugNode(element) {
        var debugNode = null;
        var lContext = loadLContextFromNode(element);
        var lView = lContext.lView;
        var nodeIndex = lContext.nodeIndex;

        if (nodeIndex !== -1) {
          var valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own
          // data. In this situation the TNode is not accessed at the same spot.

          var tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);
          ngDevMode && assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');
          debugNode = buildDebugNode(tNode, lView);
        }

        return debugNode;
      }
      /**
       * Retrieve the component `LView` from component/element.
       *
       * NOTE: `LView` is a private and should not be leaked outside.
       *       Don't export this method to `ng.*` on window.
       *
       * @param target DOM element or component instance for which to retrieve the LView.
       */


      function getComponentLView(target) {
        var lContext = loadLContext(target);
        var nodeIndx = lContext.nodeIndex;
        var lView = lContext.lView;
        var componentLView = lView[nodeIndx];
        ngDevMode && assertLView(componentLView);
        return componentLView;
      }
      /** Asserts that a value is a DOM Element. */


      function assertDomElement(value) {
        if (typeof Element !== 'undefined' && !(value instanceof Element)) {
          throw new Error('Expecting instance of DOM Element');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks a component for check (in case of OnPush components) and synchronously
       * performs change detection on the application this component belongs to.
       *
       * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
       *
       * @publicApi
       * @globalApi ng
       */


      function applyChanges(component) {
        markDirty(component);
        getRootComponents(component).forEach(function (rootComponent) {
          return detectChanges(rootComponent);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file introduces series of globally accessible debug tools
       * to allow for the Angular debugging story to function.
       *
       * To see this in action run the following command:
       *
       *   bazel run --config=ivy
       *   //packages/core/test/bundling/todo:devserver
       *
       *  Then load `localhost:5432` and start using the console tools.
       */

      /**
       * This value reflects the property on the window where the dev
       * tools are patched (window.ng).
       * */


      var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
      var _published = false;
      /**
       * Publishes a collection of default debug tools onto`window.ng`.
       *
       * These functions are available globally when Angular is in development
       * mode and are automatically stripped away from prod mode is on.
       */

      function publishDefaultGlobalUtils() {
        if (!_published) {
          _published = true;
          publishGlobalUtil('getComponent', getComponent);
          publishGlobalUtil('getContext', getContext);
          publishGlobalUtil('getListeners', getListeners);
          publishGlobalUtil('getOwningComponent', getOwningComponent);
          publishGlobalUtil('getHostElement', getHostElement);
          publishGlobalUtil('getInjector', getInjector);
          publishGlobalUtil('getRootComponents', getRootComponents);
          publishGlobalUtil('getDirectives', getDirectives);
          publishGlobalUtil('applyChanges', applyChanges);
        }
      }
      /**
       * Publishes the given function to `window.ng` so that it can be
       * used from the browser console when an application is not in production.
       */


      function publishGlobalUtil(name, fn) {
        if (typeof COMPILED === 'undefined' || !COMPILED) {
          // Note: we can't export `ng` when using closure enhanced optimization as:
          // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
          // - we can't declare a closure extern as the namespace `ng` is already used within Google
          //   for typings for AngularJS (via `goog.provide('ng....')`).
          var w = _global;
          ngDevMode && assertDefined(fn, 'function not defined');

          if (w) {
            var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];

            if (!container) {
              container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
            }

            container[name] = fn;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$7 = function ɵ0$7(token, notFoundValue) {
        throwProviderNotFoundError(token, 'NullInjector');
      }; // TODO: A hack to not pull in the NullInjector from @angular/core.


      var NULL_INJECTOR$1 = {
        get: ɵ0$7
      };
      /**
       * Bootstraps a Component into an existing host element and returns an instance
       * of the component.
       *
       * Use this function to bootstrap a component into the DOM tree. Each invocation
       * of this function will create a separate tree of components, injectors and
       * change detection cycles and lifetimes. To dynamically insert a new component
       * into an existing tree such that it shares the same injection, change detection
       * and object lifetime, use {@link ViewContainer#createComponent}.
       *
       * @param componentType Component to bootstrap
       * @param options Optional parameters which control bootstrapping
       */

      function renderComponent$1(componentType
      /* Type as workaround for: Microsoft/TypeScript/issues/4881 */
      ) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        ngDevMode && publishDefaultGlobalUtils();
        ngDevMode && assertComponentType(componentType);
        var rendererFactory = opts.rendererFactory || domRendererFactory3;
        var sanitizer = opts.sanitizer || null;
        var componentDef = getComponentDef(componentType);
        if (componentDef.type != componentType) componentDef.type = componentType; // The first index of the first selector is the tag name.

        var componentTag = componentDef.selectors[0][0];
        var hostRenderer = rendererFactory.createRenderer(null, null);
        var hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
        var rootFlags = componentDef.onPush ? 64
        /* Dirty */
        | 512
        /* IsRoot */
        : 16
        /* CheckAlways */
        | 512
        /* IsRoot */
        ;
        var rootContext = createRootContext(opts.scheduler, opts.playerHandler);
        var renderer = rendererFactory.createRenderer(hostRNode, componentDef);
        var rootTView = createTView(0
        /* Root */
        , null, null, 1, 0, null, null, null, null, null);
        var rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null, opts.injector || null);
        enterView(rootView);
        var component;

        try {
          if (rendererFactory.begin) rendererFactory.begin();
          var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
          component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null); // create mode pass

          renderView(rootTView, rootView, null); // update mode pass

          refreshView(rootTView, rootView, null, null);
        } finally {
          leaveView();
          if (rendererFactory.end) rendererFactory.end();
        }

        return component;
      }
      /**
       * Creates the root component view and the root component node.
       *
       * @param rNode Render host element.
       * @param def ComponentDef
       * @param rootView The parent view where the host node is stored
       * @param rendererFactory Factory to be used for creating child renderers.
       * @param hostRenderer The current renderer
       * @param sanitizer The sanitizer, if provided
       *
       * @returns Component view created
       */


      function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
        var tView = rootView[TVIEW];
        var index = HEADER_OFFSET;
        ngDevMode && assertIndexInRange(rootView, index);
        rootView[index] = rNode; // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at
        // the same time we want to communicate the debug `TNode` that this is a special `TNode`
        // representing a host element.

        var tNode = getOrCreateTNode(tView, index, 2
        /* Element */
        , '#host', null);
        var mergedAttrs = tNode.mergedAttrs = def.hostAttrs;

        if (mergedAttrs !== null) {
          computeStaticStyling(tNode, mergedAttrs, true);

          if (rNode !== null) {
            setUpAttributes(hostRenderer, rNode, mergedAttrs);

            if (tNode.classes !== null) {
              writeDirectClass(hostRenderer, rNode, tNode.classes);
            }

            if (tNode.styles !== null) {
              writeDirectStyle(hostRenderer, rNode, tNode.styles);
            }
          }
        }

        var viewRenderer = rendererFactory.createRenderer(rNode, def);
        var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64
        /* Dirty */
        : 16
        /* CheckAlways */
        , rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null);

        if (tView.firstCreatePass) {
          diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
          markAsComponentHost(tView, tNode);
          initTNodeFlags(tNode, rootView.length, 1);
        }

        addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST

        return rootView[index] = componentView;
      }
      /**
       * Creates a root component and sets it up with features and host bindings. Shared by
       * renderComponent() and ViewContainerRef.createComponent().
       */


      function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
        var tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData

        var component = instantiateRootComponent(tView, rootLView, componentDef);
        rootContext.components.push(component);
        componentView[CONTEXT] = component;
        hostFeatures && hostFeatures.forEach(function (feature) {
          return feature(component, componentDef);
        }); // We want to generate an empty QueryList for root content queries for backwards
        // compatibility with ViewEngine.

        if (componentDef.contentQueries) {
          var tNode = getCurrentTNode();
          ngDevMode && assertDefined(tNode, 'TNode expected');
          componentDef.contentQueries(1
          /* Create */
          , component, tNode.directiveStart);
        }

        var rootTNode = getCurrentTNode();
        ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');

        if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
          setSelectedIndex(rootTNode.index);
          var rootTView = rootLView[TVIEW];
          registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);
          invokeHostBindingsInCreationMode(componentDef, component);
        }

        return component;
      }

      function createRootContext(scheduler, playerHandler) {
        return {
          components: [],
          scheduler: scheduler || defaultScheduler,
          clean: CLEAN_PROMISE,
          playerHandler: playerHandler || null,
          flags: 0
          /* Empty */

        };
      }
      /**
       * Used to enable lifecycle hooks on the root component.
       *
       * Include this feature when calling `renderComponent` if the root component
       * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
       * be called properly.
       *
       * Example:
       *
       * ```
       * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
       * ```
       */


      function LifecycleHooksFeature(component, def) {
        var lView = readPatchedLView(component);
        ngDevMode && assertDefined(lView, 'LView is required');
        var tView = lView[TVIEW];
        var tNode = getCurrentTNode();
        ngDevMode && assertDefined(tNode, 'TNode is required');
        registerPostOrderHooks(tView, tNode);
      }
      /**
       * Wait on component until it is rendered.
       *
       * This function returns a `Promise` which is resolved when the component's
       * change detection is executed. This is determined by finding the scheduler
       * associated with the `component`'s render tree and waiting until the scheduler
       * flushes. If nothing is scheduled, the function returns a resolved promise.
       *
       * Example:
       * ```
       * await whenRendered(myComponent);
       * ```
       *
       * @param component Component to wait upon
       * @returns Promise which resolves when the component is rendered.
       */


      function whenRendered(component) {
        return getRootContext(component).clean;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getSuperType(type) {
        return Object.getPrototypeOf(type.prototype).constructor;
      }
      /**
       * Merges the definition from a super class to a sub class.
       * @param definition The definition that is a SubClass of another directive of component
       *
       * @codeGenApi
       */


      function ɵɵInheritDefinitionFeature(definition) {
        var superType = getSuperType(definition.type);
        var shouldInheritFields = true;
        var inheritanceChain = [definition];

        while (superType) {
          var superDef = undefined;

          if (isComponentDef(definition)) {
            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
            superDef = superType.ɵcmp || superType.ɵdir;
          } else {
            if (superType.ɵcmp) {
              throw new Error('Directives cannot inherit Components');
            } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.


            superDef = superType.ɵdir;
          }

          if (superDef) {
            if (shouldInheritFields) {
              inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that
              // would've justified object creation. Unwrap them if necessary.

              var writeableDef = definition;
              writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
              writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
              writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings

              var superHostBindings = superDef.hostBindings;
              superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries

              var superViewQuery = superDef.viewQuery;
              var superContentQueries = superDef.contentQueries;
              superViewQuery && inheritViewQuery(definition, superViewQuery);
              superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs

              fillProperties(definition.inputs, superDef.inputs);
              fillProperties(definition.declaredInputs, superDef.declaredInputs);
              fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.
              // If `superDef` is a Component, the `data` field is present (defaults to an empty object).

              if (isComponentDef(superDef) && superDef.data.animation) {
                // If super def is a Component, the `definition` is also a Component, since Directives can
                // not inherit Components (we throw an error above and cannot reach this code).
                var defData = definition.data;
                defData.animation = (defData.animation || []).concat(superDef.data.animation);
              }
            } // Run parent features


            var features = superDef.features;

            if (features) {
              for (var i = 0; i < features.length; i++) {
                var feature = features[i];

                if (feature && feature.ngInherit) {
                  feature(definition);
                } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
                // def already has all the necessary information inherited from its super class(es), so we
                // can stop merging fields from super classes. However we need to iterate through the
                // prototype chain to look for classes that might contain other "features" (like
                // NgOnChanges), which we should invoke for the original `definition`. We set the
                // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
                // logic and only invoking functions from the "features" list.


                if (feature === ɵɵInheritDefinitionFeature) {
                  shouldInheritFields = false;
                }
              }
            }
          }

          superType = Object.getPrototypeOf(superType);
        }

        mergeHostAttrsAcrossInheritance(inheritanceChain);
      }
      /**
       * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
       *
       * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
       * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
       * type.
       */


      function mergeHostAttrsAcrossInheritance(inheritanceChain) {
        var hostVars = 0;
        var hostAttrs = null; // We process the inheritance order from the base to the leaves here.

        for (var i = inheritanceChain.length - 1; i >= 0; i--) {
          var def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.

          def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.

          def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
        }
      }

      function maybeUnwrapEmpty(value) {
        if (value === EMPTY_OBJ) {
          return {};
        } else if (value === EMPTY_ARRAY$1) {
          return [];
        } else {
          return value;
        }
      }

      function inheritViewQuery(definition, superViewQuery) {
        var prevViewQuery = definition.viewQuery;

        if (prevViewQuery) {
          definition.viewQuery = function (rf, ctx) {
            superViewQuery(rf, ctx);
            prevViewQuery(rf, ctx);
          };
        } else {
          definition.viewQuery = superViewQuery;
        }
      }

      function inheritContentQueries(definition, superContentQueries) {
        var prevContentQueries = definition.contentQueries;

        if (prevContentQueries) {
          definition.contentQueries = function (rf, ctx, directiveIndex) {
            superContentQueries(rf, ctx, directiveIndex);
            prevContentQueries(rf, ctx, directiveIndex);
          };
        } else {
          definition.contentQueries = superContentQueries;
        }
      }

      function inheritHostBindings(definition, superHostBindings) {
        var prevHostBindings = definition.hostBindings;

        if (prevHostBindings) {
          definition.hostBindings = function (rf, ctx) {
            superHostBindings(rf, ctx);
            prevHostBindings(rf, ctx);
          };
        } else {
          definition.hostBindings = superHostBindings;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Fields which exist on either directive or component definitions, and need to be copied from
       * parent to child classes by the `ɵɵCopyDefinitionFeature`.
       */


      var COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.
      'providersResolver'];
      /**
       * Fields which exist only on component definitions, and need to be copied from parent to child
       * classes by the `ɵɵCopyDefinitionFeature`.
       *
       * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
       * since those should go in `COPY_DIRECTIVE_FIELDS` above.
       */

      var COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template
      // semantics.
      'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.
      'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.
      'schemas'];
      /**
       * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
       * definition.
       *
       * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
       * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
       * generates a skeleton definition on the child class, and applies this feature.
       *
       * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
       * including things like the component template function.
       *
       * @param definition The definition of a child class which inherits from a parent class with its
       * own definition.
       *
       * @codeGenApi
       */

      function ɵɵCopyDefinitionFeature(definition) {
        var superType = getSuperType(definition.type);
        var superDef = undefined;

        if (isComponentDef(definition)) {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.ɵcmp;
        } else {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.ɵdir;
        } // Needed because `definition` fields are readonly.


        var defAny = definition; // Copy over any fields that apply to either directives or components.

        var _iterator5 = _createForOfIteratorHelper(COPY_DIRECTIVE_FIELDS),
            _step4;

        try {
          for (_iterator5.s(); !(_step4 = _iterator5.n()).done;) {
            var _field = _step4.value;
            defAny[_field] = superDef[_field];
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        if (isComponentDef(superDef)) {
          // Copy over any component-specific fields.
          var _iterator6 = _createForOfIteratorHelper(COPY_COMPONENT_FIELDS),
              _step5;

          try {
            for (_iterator6.s(); !(_step5 = _iterator6.n()).done;) {
              var field = _step5.value;
              defAny[field] = superDef[field];
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _symbolIterator = null;

      function getSymbolIterator() {
        if (!_symbolIterator) {
          var _Symbol = _global['Symbol'];

          if (_Symbol && _Symbol.iterator) {
            _symbolIterator = _Symbol.iterator;
          } else {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(Map.prototype);

            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];

              if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                _symbolIterator = key;
              }
            }
          }
        }

        return _symbolIterator;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function devModeEqual(a, b) {
        var isListLikeIterableA = isListLikeIterable(a);
        var isListLikeIterableB = isListLikeIterable(b);

        if (isListLikeIterableA && isListLikeIterableB) {
          return areIterablesEqual(a, b, devModeEqual);
        } else {
          var isAObject = a && (typeof a === 'object' || typeof a === 'function');
          var isBObject = b && (typeof b === 'object' || typeof b === 'function');

          if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
          } else {
            return Object.is(a, b);
          }
        }
      }
      /**
       * Indicates that the result of a {@link Pipe} transformation has changed even though the
       * reference has not changed.
       *
       * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
       * is stored.
       *
       * Example:
       *
       * ```
       * if (this._latestValue === this._latestReturnedValue) {
       *    return this._latestReturnedValue;
       *  } else {
       *    this._latestReturnedValue = this._latestValue;
       *    return WrappedValue.wrap(this._latestValue); // this will force update
       *  }
       * ```
       *
       * @publicApi
       * @deprecated from v10 stop using. (No replacement, deemed unnecessary.)
       */


      var WrappedValue = /*#__PURE__*/function () {
        function WrappedValue(value) {
          _classCallCheck(this, WrappedValue);

          this.wrapped = value;
        }
        /** Creates a wrapped value. */


        _createClass2(WrappedValue, null, [{
          key: "wrap",
          value: function wrap(value) {
            return new WrappedValue(value);
          }
          /**
           * Returns the underlying value of a wrapped value.
           * Returns the given `value` when it is not wrapped.
           **/

        }, {
          key: "unwrap",
          value: function unwrap(value) {
            return WrappedValue.isWrapped(value) ? value.wrapped : value;
          }
          /** Returns true if `value` is a wrapped value. */

        }, {
          key: "isWrapped",
          value: function isWrapped(value) {
            return value instanceof WrappedValue;
          }
        }]);

        return WrappedValue;
      }();

      function isListLikeIterable(obj) {
        if (!isJsObject(obj)) return false;
        return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
        getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
      }

      function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[getSymbolIterator()]();
        var iterator2 = b[getSymbolIterator()]();

        while (true) {
          var item1 = iterator1.next();
          var item2 = iterator2.next();
          if (item1.done && item2.done) return true;
          if (item1.done || item2.done) return false;
          if (!comparator(item1.value, item2.value)) return false;
        }
      }

      function iterateListLike(obj, fn) {
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
          }
        } else {
          var iterator = obj[getSymbolIterator()]();
          var item;

          while (!(item = iterator.next()).done) {
            fn(item.value);
          }
        }
      }

      function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO(misko): consider inlining

      /** Updates binding and returns the value. */


      function updateBinding(lView, bindingIndex, value) {
        return lView[bindingIndex] = value;
      }
      /** Gets the current binding value. */


      function getBinding(lView, bindingIndex) {
        ngDevMode && assertIndexInRange(lView, bindingIndex);
        ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
        return lView[bindingIndex];
      }
      /**
       * Updates binding if changed, then returns whether it was updated.
       *
       * This function also checks the `CheckNoChangesMode` and throws if changes are made.
       * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
       * behavior.
       *
       * @param lView current `LView`
       * @param bindingIndex The binding in the `LView` to check
       * @param value New value to check against `lView[bindingIndex]`
       * @returns `true` if the bindings has changed. (Throws if binding has changed during
       *          `CheckNoChangesMode`)
       */


      function bindingUpdated(lView, bindingIndex, value) {
        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
        ngDevMode && assertLessThan(bindingIndex, lView.length, "Slot should have been initialized to NO_CHANGE");
        var oldValue = lView[bindingIndex];

        if (Object.is(oldValue, value)) {
          return false;
        } else {
          if (ngDevMode && isInCheckNoChangesMode()) {
            // View engine didn't report undefined values as changed on the first checkNoChanges pass
            // (before the change detection was run).
            var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;

            if (!devModeEqual(oldValueToCompare, value)) {
              var details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
              throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
            } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
            // For this reason we exit as if no change. The early exit is needed to prevent the changed
            // value to be written into `LView` (If we would write the new value that we would not see it
            // as change on next CD.)


            return false;
          }

          lView[bindingIndex] = value;
          return true;
        }
      }
      /** Updates 2 bindings if changed, then returns whether either was updated. */


      function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
        var different = bindingUpdated(lView, bindingIndex, exp1);
        return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
      }
      /** Updates 3 bindings if changed, then returns whether any was updated. */


      function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
        return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
      }
      /** Updates 4 bindings if changed, then returns whether any was updated. */


      function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
        return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Updates the value of or removes a bound attribute on an Element.
       *
       * Used in the case of `[attr.title]="value"`
       *
       * @param name name The name of the attribute.
       * @param value value The attribute is removed when value is `null` or `undefined`.
       *                  Otherwise the attribute value is set to the stringified value.
       * @param sanitizer An optional function used to sanitize the value.
       * @param namespace Optional namespace to use when setting the attribute.
       *
       * @codeGenApi
       */


      function ɵɵattribute(name, value, sanitizer, namespace) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
        }

        return ɵɵattribute;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create interpolation bindings with a variable number of expressions.
       *
       * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
       * Those are faster because there is no need to create an array of expressions and iterate over it.
       *
       * `values`:
       * - has static text at even indexes,
       * - has evaluated expressions at odd indexes.
       *
       * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
       */


      function interpolationV(lView, values) {
        ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
        ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
        var isBindingUpdated = false;
        var bindingIndex = getBindingIndex();

        for (var i = 1; i < values.length; i += 2) {
          // Check if bindings (odd indexes) have changed
          isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
        }

        setBindingIndex(bindingIndex);

        if (!isBindingUpdated) {
          return NO_CHANGE;
        } // Build the updated content


        var content = values[0];

        for (var _i12 = 1; _i12 < values.length; _i12 += 2) {
          content += renderStringify(values[_i12]) + values[_i12 + 1];
        }

        return content;
      }
      /**
       * Creates an interpolation binding with 1 expression.
       *
       * @param prefix static value used for concatenation only.
       * @param v0 value checked for change.
       * @param suffix static value used for concatenation only.
       */


      function interpolation1(lView, prefix, v0, suffix) {
        var different = bindingUpdated(lView, nextBindingIndex(), v0);
        return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 2 expressions.
       */


      function interpolation2(lView, prefix, v0, i0, v1, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated2(lView, bindingIndex, v0, v1);
        incrementBindingIndex(2);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 3 expressions.
       */


      function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
        incrementBindingIndex(3);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
      }
      /**
       * Create an interpolation binding with 4 expressions.
       */


      function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        incrementBindingIndex(4);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 5 expressions.
       */


      function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
        incrementBindingIndex(5);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 6 expressions.
       */


      function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
        incrementBindingIndex(6);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 7 expressions.
       */


      function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
        incrementBindingIndex(7);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 8 expressions.
       */


      function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
        incrementBindingIndex(8);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
      }
      /**
       *
       * Update an interpolated attribute on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
        }

        return ɵɵattributeInterpolate1;
      }
      /**
       *
       * Update an interpolated attribute on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
        }

        return ɵɵattributeInterpolate2;
      }
      /**
       *
       * Update an interpolated attribute on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate3(
       * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
        }

        return ɵɵattributeInterpolate3;
      }
      /**
       *
       * Update an interpolated attribute on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate4(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
        }

        return ɵɵattributeInterpolate4;
      }
      /**
       *
       * Update an interpolated attribute on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate5(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
        }

        return ɵɵattributeInterpolate5;
      }
      /**
       *
       * Update an interpolated attribute on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate6(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
        }

        return ɵɵattributeInterpolate6;
      }
      /**
       *
       * Update an interpolated attribute on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate7(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
        }

        return ɵɵattributeInterpolate7;
      }
      /**
       *
       * Update an interpolated attribute on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate8(
       *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
        }

        return ɵɵattributeInterpolate8;
      }
      /**
       * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolateV(
       *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * @param attrName The name of the attribute to update.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
        var lView = getLView();
        var interpolated = interpolationV(lView, values);

        if (interpolated !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);

          if (ngDevMode) {
            var interpolationInBetween = [values[0]]; // prefix

            for (var i = 2; i < values.length; i += 2) {
              interpolationInBetween.push(values[i]);
            }

            storePropertyBindingMetadata.apply(void 0, [getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
          }
        }

        return ɵɵattributeInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the "create" only version

        var tNode = getOrCreateTNode(tView, index, 4
        /* Container */
        , tagName || null, getConstant(tViewConsts, attrsIndex));
        resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
        registerPostOrderHooks(tView, tNode);
        var embeddedTView = tNode.tViews = createTView(2
        /* Embedded */
        , tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);

        if (tView.queries !== null) {
          tView.queries.template(tView, tNode);
          embeddedTView.queries = tView.queries.embeddedTView(tNode);
        }

        return tNode;
      }
      /**
       * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
       *
       * <ng-template #foo>
       *    <div></div>
       * </ng-template>
       *
       * @param index The index of the container in the data array
       * @param templateFn Inline template
       * @param decls The number of nodes, local refs, and pipes for this template
       * @param vars The number of bindings for this template
       * @param tagName The name of the container element, if applicable
       * @param attrsIndex Index of template attributes in the `consts` array.
       * @param localRefs Index of the local references in the `consts` array.
       * @param localRefExtractor A function which extracts local-refs values from the template.
       *        Defaults to the current element associated with the local-ref.
       *
       * @codeGenApi
       */


      function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        var tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, false);
        var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
        appendChild(tView, lView, comment, tNode);
        attachPatchData(comment, lView);
        addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
        }

        if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode, localRefExtractor);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Store a value in the `data` at a given `index`. */


      function store(tView, lView, index, value) {
        // We don't store any static data for local variables, so the first time
        // we see the template, we should store as null to avoid a sparse array
        if (index >= tView.data.length) {
          tView.data[index] = null;
          tView.blueprint[index] = null;
        }

        lView[index] = value;
      }
      /**
       * Retrieves a local reference from the current contextViewData.
       *
       * If the reference to retrieve is in a parent view, this instruction is used in conjunction
       * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
       *
       * @param index The index of the local ref in contextViewData.
       *
       * @codeGenApi
       */


      function ɵɵreference(index) {
        var contextLView = getContextLView();
        return load(contextLView, HEADER_OFFSET + index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
       *
       * This should be kept up to date with the public exports of @angular/core.
       */


      var angularCoreDiEnv = {
        'ɵɵdefineInjectable': ɵɵdefineInjectable,
        'ɵɵdefineInjector': ɵɵdefineInjector,
        'ɵɵinject': ɵɵinject,
        'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
       * injectable def (`ɵprov`) onto the injectable type.
       */

      function compileInjectable(type, srcMeta) {
        var ngInjectableDef = null;
        var ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it

        if (!type.hasOwnProperty(NG_PROV_DEF)) {
          Object.defineProperty(type, NG_PROV_DEF, {
            get: function get() {
              if (ngInjectableDef === null) {
                ngInjectableDef = getCompilerFacade().compileInjectable(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275prov.js"), getInjectableMetadata(type, srcMeta));
              }

              return ngInjectableDef;
            }
          });
        } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it


        if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
          Object.defineProperty(type, NG_FACTORY_DEF, {
            get: function get() {
              if (ngFactoryDef === null) {
                var metadata = getInjectableMetadata(type, srcMeta);
                var compiler = getCompilerFacade();
                ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
                  name: metadata.name,
                  type: metadata.type,
                  typeArgumentCount: metadata.typeArgumentCount,
                  deps: reflectDependencies(type),
                  injectFn: 'inject',
                  target: compiler.R3FactoryTarget.Injectable
                });
              }

              return ngFactoryDef;
            },
            // Leave this configurable so that the factories from directives or pipes can take precedence.
            configurable: true
          });
        }
      }

      var ɵ0$8 = getClosureSafeProperty;
      var USE_VALUE$1 = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$8
      });

      function isUseClassProvider(meta) {
        return meta.useClass !== undefined;
      }

      function isUseValueProvider(meta) {
        return USE_VALUE$1 in meta;
      }

      function isUseFactoryProvider(meta) {
        return meta.useFactory !== undefined;
      }

      function isUseExistingProvider(meta) {
        return meta.useExisting !== undefined;
      }

      function getInjectableMetadata(type, srcMeta) {
        // Allow the compilation of a class with a `@Injectable()` decorator without parameters
        var meta = srcMeta || {
          providedIn: null
        };
        var compilerMeta = {
          name: type.name,
          type: type,
          typeArgumentCount: 0,
          providedIn: meta.providedIn,
          userDeps: undefined
        };

        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
          compilerMeta.userDeps = convertDependencies(meta.deps);
        }

        if (isUseClassProvider(meta)) {
          // The user explicitly specified useClass, and may or may not have provided deps.
          compilerMeta.useClass = resolveForwardRef(meta.useClass);
        } else if (isUseValueProvider(meta)) {
          // The user explicitly specified useValue.
          compilerMeta.useValue = resolveForwardRef(meta.useValue);
        } else if (isUseFactoryProvider(meta)) {
          // The user explicitly specified useFactory.
          compilerMeta.useFactory = meta.useFactory;
        } else if (isUseExistingProvider(meta)) {
          // The user explicitly specified useExisting.
          compilerMeta.useExisting = resolveForwardRef(meta.useExisting);
        }

        return compilerMeta;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$9 = getClosureSafeProperty;
      var USE_VALUE$2 = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$9
      });
      var EMPTY_ARRAY$3 = [];

      function convertInjectableProviderToFactory(type, provider) {
        if (!provider) {
          var reflectionCapabilities = new ReflectionCapabilities();
          var deps = reflectionCapabilities.parameters(type); // TODO - convert to flags.

          return function () {
            return _construct(type, _toConsumableArray(injectArgs(deps)));
          };
        }

        if (USE_VALUE$2 in provider) {
          var valueProvider = provider;
          return function () {
            return valueProvider.useValue;
          };
        } else if (provider.useExisting) {
          var existingProvider = provider;
          return function () {
            return ɵɵinject(resolveForwardRef(existingProvider.useExisting));
          };
        } else if (provider.useFactory) {
          var factoryProvider = provider;
          return function () {
            return factoryProvider.useFactory.apply(factoryProvider, _toConsumableArray(injectArgs(factoryProvider.deps || EMPTY_ARRAY$3)));
          };
        } else if (provider.useClass) {
          var classProvider = provider;
          var _deps = provider.deps;

          if (!_deps) {
            var _reflectionCapabilities = new ReflectionCapabilities();

            _deps = _reflectionCapabilities.parameters(type);
          }

          return function () {
            return _construct(resolveForwardRef(classProvider.useClass), _toConsumableArray(injectArgs(_deps)));
          };
        } else {
          var _deps2 = provider.deps;

          if (!_deps2) {
            var _reflectionCapabilities2 = new ReflectionCapabilities();

            _deps2 = _reflectionCapabilities2.parameters(type);
          }

          return function () {
            return _construct(type, _toConsumableArray(injectArgs(_deps2)));
          };
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$a = function ɵ0$a(type, meta) {
        return SWITCH_COMPILE_INJECTABLE(type, meta);
      };
      /**
       * Injectable decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, ɵ0$a);
      /**
       * Supports @Injectable() in JIT mode for Render2.
       */

      function render2CompileInjectable(injectableType, options) {
        if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
          injectableType.ɵprov = ɵɵdefineInjectable({
            token: injectableType,
            providedIn: options.providedIn,
            factory: convertInjectableProviderToFactory(injectableType, options)
          });
        }
      }

      var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;
      var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
      var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function findFirstClosedCycle(keys) {
        var res = [];

        for (var i = 0; i < keys.length; ++i) {
          if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
          }

          res.push(keys[i]);
        }

        return res;
      }

      function constructResolvingPath(keys) {
        if (keys.length > 1) {
          var reversed = findFirstClosedCycle(keys.slice().reverse());
          var tokenStrs = reversed.map(function (k) {
            return stringify(k.token);
          });
          return ' (' + tokenStrs.join(' -> ') + ')';
        }

        return '';
      }

      function injectionError(injector, key, constructResolvingMessage, originalError) {
        var keys = [key];
        var errMsg = constructResolvingMessage(keys);
        var error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);
        error.addKey = addKey;
        error.keys = keys;
        error.injectors = [injector];
        error.constructResolvingMessage = constructResolvingMessage;
        error[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
      }

      function addKey(injector, key) {
        this.injectors.push(injector);
        this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property

        this.message = this.constructResolvingMessage(this.keys);
      }
      /**
       * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
       * {@link Injector} does not have a {@link Provider} for the given key.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor(b:B) {}
       * }
       *
       * expect(() => Injector.resolveAndCreate([A])).toThrowError();
       * ```
       */


      function noProviderError(injector, key) {
        return injectionError(injector, key, function (keys) {
          var first = stringify(keys[0].token);
          return "No provider for ".concat(first, "!").concat(constructResolvingPath(keys));
        });
      }
      /**
       * Thrown when dependencies form a cycle.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * var injector = Injector.resolveAndCreate([
       *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
       *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
       * ]);
       *
       * expect(() => injector.get("one")).toThrowError();
       * ```
       *
       * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
       */


      function cyclicDependencyError(injector, key) {
        return injectionError(injector, key, function (keys) {
          return "Cannot instantiate cyclic dependency!".concat(constructResolvingPath(keys));
        });
      }
      /**
       * Thrown when a constructing type returns with an Error.
       *
       * The `InstantiationError` class contains the original error plus the dependency graph which caused
       * this object to be instantiated.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor() {
       *     throw new Error('message');
       *   }
       * }
       *
       * var injector = Injector.resolveAndCreate([A]);
      
       * try {
       *   injector.get(A);
       * } catch (e) {
       *   expect(e instanceof InstantiationError).toBe(true);
       *   expect(e.originalException.message).toEqual("message");
       *   expect(e.originalStack).toBeDefined();
       * }
       * ```
       */


      function instantiationError(injector, originalException, originalStack, key) {
        return injectionError(injector, key, function (keys) {
          var first = stringify(keys[0].token);
          return "".concat(originalException.message, ": Error during instantiation of ").concat(first, "!").concat(constructResolvingPath(keys), ".");
        }, originalException);
      }
      /**
       * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
       * creation.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
       * ```
       */


      function invalidProviderError(provider) {
        return Error("Invalid provider - only instances of Provider and Type are allowed, got: ".concat(provider));
      }
      /**
       * Thrown when the class has no annotation information.
       *
       * Lack of annotation information prevents the {@link Injector} from determining which dependencies
       * need to be injected into the constructor.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor(b) {}
       * }
       *
       * expect(() => Injector.resolveAndCreate([A])).toThrowError();
       * ```
       *
       * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
       *
       * ```typescript
       * class B {}
       *
       * class A {
       *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
       * }
       *
       * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
       * ```
       *
       */


      function noAnnotationError(typeOrFunc, params) {
        var signature = [];

        for (var i = 0, ii = params.length; i < ii; i++) {
          var parameter = params[i];

          if (!parameter || parameter.length == 0) {
            signature.push('?');
          } else {
            signature.push(parameter.map(stringify).join(' '));
          }
        }

        return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
      }
      /**
       * Thrown when getting an object by index.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {}
       *
       * var injector = Injector.resolveAndCreate([A]);
       *
       * expect(() => injector.getAt(100)).toThrowError();
       * ```
       *
       */


      function outOfBoundsError(index) {
        return Error("Index ".concat(index, " is out-of-bounds."));
      } // TODO: add a working example after alpha38 is released

      /**
       * Thrown when a multi provider and a regular provider are bound to the same token.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * expect(() => Injector.resolveAndCreate([
       *   { provide: "Strings", useValue: "string1", multi: true},
       *   { provide: "Strings", useValue: "string2", multi: false}
       * ])).toThrowError();
       * ```
       */


      function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        return Error("Cannot mix multi providers and regular providers, got: ".concat(provider1, " ").concat(provider2));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A unique object used for retrieving items from the {@link ReflectiveInjector}.
       *
       * Keys have:
       * - a system-wide unique `id`.
       * - a `token`.
       *
       * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
       * the
       * injector to store created objects in a more efficient way.
       *
       * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
       * resolving
       * providers.
       *
       * @deprecated No replacement
       * @publicApi
       */


      var ReflectiveKey = /*#__PURE__*/function () {
        /**
         * Private
         */
        function ReflectiveKey(token, id) {
          _classCallCheck(this, ReflectiveKey);

          this.token = token;
          this.id = id;

          if (!token) {
            throw new Error('Token must be defined!');
          }

          this.displayName = stringify(this.token);
        }
        /**
         * Retrieves a `Key` for a token.
         */


        _createClass2(ReflectiveKey, null, [{
          key: "get",
          value: function get(token) {
            return _globalKeyRegistry.get(resolveForwardRef(token));
          }
          /**
           * @returns the number of keys registered in the system.
           */

        }, {
          key: "numberOfKeys",
          get: function get() {
            return _globalKeyRegistry.numberOfKeys;
          }
        }]);

        return ReflectiveKey;
      }();

      var KeyRegistry = /*#__PURE__*/function () {
        function KeyRegistry() {
          _classCallCheck(this, KeyRegistry);

          this._allKeys = new Map();
        }

        _createClass2(KeyRegistry, [{
          key: "get",
          value: function get(token) {
            if (token instanceof ReflectiveKey) return token;

            if (this._allKeys.has(token)) {
              return this._allKeys.get(token);
            }

            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);

            this._allKeys.set(token, newKey);

            return newKey;
          }
        }, {
          key: "numberOfKeys",
          get: function get() {
            return this._allKeys.size;
          }
        }]);

        return KeyRegistry;
      }();

      var _globalKeyRegistry = new KeyRegistry();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides access to reflection data about symbols. Used internally by Angular
       * to power dependency injection and compilation.
       */


      var Reflector = /*#__PURE__*/function () {
        function Reflector(reflectionCapabilities) {
          _classCallCheck(this, Reflector);

          this.reflectionCapabilities = reflectionCapabilities;
        }

        _createClass2(Reflector, [{
          key: "updateCapabilities",
          value: function updateCapabilities(caps) {
            this.reflectionCapabilities = caps;
          }
        }, {
          key: "factory",
          value: function factory(type) {
            return this.reflectionCapabilities.factory(type);
          }
        }, {
          key: "parameters",
          value: function parameters(typeOrFunc) {
            return this.reflectionCapabilities.parameters(typeOrFunc);
          }
        }, {
          key: "annotations",
          value: function annotations(typeOrFunc) {
            return this.reflectionCapabilities.annotations(typeOrFunc);
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(typeOrFunc) {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
          }
        }, {
          key: "getter",
          value: function getter(name) {
            return this.reflectionCapabilities.getter(name);
          }
        }, {
          key: "setter",
          value: function setter(name) {
            return this.reflectionCapabilities.setter(name);
          }
        }, {
          key: "method",
          value: function method(name) {
            return this.reflectionCapabilities.method(name);
          }
        }, {
          key: "importUri",
          value: function importUri(type) {
            return this.reflectionCapabilities.importUri(type);
          }
        }, {
          key: "resourceUri",
          value: function resourceUri(type) {
            return this.reflectionCapabilities.resourceUri(type);
          }
        }, {
          key: "resolveIdentifier",
          value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
          }
        }, {
          key: "resolveEnum",
          value: function resolveEnum(identifier, name) {
            return this.reflectionCapabilities.resolveEnum(identifier, name);
          }
        }]);

        return Reflector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The {@link Reflector} used internally in Angular to access metadata
       * about symbols.
       */


      var reflector = new Reflector(new ReflectionCapabilities());
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * `Dependency` is used by the framework to extend DI.
       * This is internal to Angular and should not be used directly.
       */

      var ReflectiveDependency = /*#__PURE__*/function () {
        function ReflectiveDependency(key, optional, visibility) {
          _classCallCheck(this, ReflectiveDependency);

          this.key = key;
          this.optional = optional;
          this.visibility = visibility;
        }

        _createClass2(ReflectiveDependency, null, [{
          key: "fromKey",
          value: function fromKey(key) {
            return new ReflectiveDependency(key, false, null);
          }
        }]);

        return ReflectiveDependency;
      }();

      var _EMPTY_LIST = [];

      var ResolvedReflectiveProvider_ = function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        _classCallCheck(this, ResolvedReflectiveProvider_);

        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
        this.resolvedFactory = this.resolvedFactories[0];
      };
      /**
       * An internal resolved representation of a factory function created by resolving `Provider`.
       * @publicApi
       */


      var ResolvedReflectiveFactory = function ResolvedReflectiveFactory(
      /**
       * Factory function which can return an instance of an object represented by a key.
       */
      factory,
      /**
       * Arguments (dependencies) to the `factory` function.
       */
      dependencies) {
        _classCallCheck(this, ResolvedReflectiveFactory);

        this.factory = factory;
        this.dependencies = dependencies;
      };
      /**
       * Resolve a single provider.
       */


      function resolveReflectiveFactory(provider) {
        var factoryFn;
        var resolvedDeps;

        if (provider.useClass) {
          var useClass = resolveForwardRef(provider.useClass);
          factoryFn = reflector.factory(useClass);
          resolvedDeps = _dependenciesFor(useClass);
        } else if (provider.useExisting) {
          factoryFn = function factoryFn(aliasInstance) {
            return aliasInstance;
          };

          resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
        } else if (provider.useFactory) {
          factoryFn = provider.useFactory;
          resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
        } else {
          factoryFn = function factoryFn() {
            return provider.useValue;
          };

          resolvedDeps = _EMPTY_LIST;
        }

        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
      }
      /**
       * Converts the `Provider` into `ResolvedProvider`.
       *
       * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
       * syntax.
       */


      function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
      }
      /**
       * Resolve a list of Providers.
       */


      function resolveReflectiveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);

        var resolved = normalized.map(resolveReflectiveProvider);
        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
        return Array.from(resolvedProviderMap.values());
      }
      /**
       * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
       * multi providers have been merged.
       */


      function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
          var provider = providers[i];
          var existing = normalizedProvidersMap.get(provider.key.id);

          if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
              throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }

            if (provider.multiProvider) {
              for (var j = 0; j < provider.resolvedFactories.length; j++) {
                existing.resolvedFactories.push(provider.resolvedFactories[j]);
              }
            } else {
              normalizedProvidersMap.set(provider.key.id, provider);
            }
          } else {
            var resolvedProvider = void 0;

            if (provider.multiProvider) {
              resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            } else {
              resolvedProvider = provider;
            }

            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
          }
        }

        return normalizedProvidersMap;
      }

      function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
          if (b instanceof Type) {
            res.push({
              provide: b,
              useClass: b
            });
          } else if (b && typeof b == 'object' && b.provide !== undefined) {
            res.push(b);
          } else if (Array.isArray(b)) {
            _normalizeProviders(b, res);
          } else {
            throw invalidProviderError(b);
          }
        });
        return res;
      }

      function constructDependencies(typeOrFunc, dependencies) {
        if (!dependencies) {
          return _dependenciesFor(typeOrFunc);
        } else {
          var params = dependencies.map(function (t) {
            return [t];
          });
          return dependencies.map(function (t) {
            return _extractToken(typeOrFunc, t, params);
          });
        }
      }

      function _dependenciesFor(typeOrFunc) {
        var params = reflector.parameters(typeOrFunc);
        if (!params) return [];

        if (params.some(function (p) {
          return p == null;
        })) {
          throw noAnnotationError(typeOrFunc, params);
        }

        return params.map(function (p) {
          return _extractToken(typeOrFunc, p, params);
        });
      }

      function _extractToken(typeOrFunc, metadata, params) {
        var token = null;
        var optional = false;

        if (!Array.isArray(metadata)) {
          if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null);
          } else {
            return _createDependency(metadata, optional, null);
          }
        }

        var visibility = null;

        for (var i = 0; i < metadata.length; ++i) {
          var paramMetadata = metadata[i];

          if (paramMetadata instanceof Type) {
            token = paramMetadata;
          } else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
          } else if (paramMetadata instanceof Optional) {
            optional = true;
          } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
            visibility = paramMetadata;
          } else if (paramMetadata instanceof InjectionToken) {
            token = paramMetadata;
          }
        }

        token = resolveForwardRef(token);

        if (token != null) {
          return _createDependency(token, optional, visibility);
        } else {
          throw noAnnotationError(typeOrFunc, params);
        }
      }

      function _createDependency(token, optional, visibility) {
        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Threshold for the dynamic version


      var UNDEFINED = {};
      /**
       * A ReflectiveDependency injection container used for instantiating objects and resolving
       * dependencies.
       *
       * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
       * constructor dependencies.
       *
       * In typical use, application code asks for the dependencies in the constructor and they are
       * resolved by the `Injector`.
       *
       * @usageNotes
       * ### Example
       *
       * The following example creates an `Injector` configured to create `Engine` and `Car`.
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
       * var car = injector.get(Car);
       * expect(car instanceof Car).toBe(true);
       * expect(car.engine instanceof Engine).toBe(true);
       * ```
       *
       * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
       * resolve all of the object's dependencies automatically.
       *
       * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
       * @publicApi
       */

      var ReflectiveInjector = /*#__PURE__*/function () {
        function ReflectiveInjector() {
          _classCallCheck(this, ReflectiveInjector);
        }

        _createClass2(ReflectiveInjector, null, [{
          key: "resolve",
          value:
          /**
           * Turns an array of provider definitions into an array of resolved providers.
           *
           * A resolution is a process of flattening multiple nested arrays and converting individual
           * providers into an array of `ResolvedReflectiveProvider`s.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
           *
           * expect(providers.length).toEqual(2);
           *
           * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
           * expect(providers[0].key.displayName).toBe("Car");
           * expect(providers[0].dependencies.length).toEqual(1);
           * expect(providers[0].factory).toBeDefined();
           *
           * expect(providers[1].key.displayName).toBe("Engine");
           * });
           * ```
           *
           */
          function resolve(providers) {
            return resolveReflectiveProviders(providers);
          }
          /**
           * Resolves an array of providers and creates an injector from those providers.
           *
           * The passed-in providers can be an array of `Type`, `Provider`,
           * or a recursive array of more providers.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
           * expect(injector.get(Car) instanceof Car).toBe(true);
           * ```
           */

        }, {
          key: "resolveAndCreate",
          value: function resolveAndCreate(providers, parent) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
          }
          /**
           * Creates an injector from previously resolved providers.
           *
           * This API is the recommended way to construct injectors in performance-sensitive parts.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var providers = ReflectiveInjector.resolve([Car, Engine]);
           * var injector = ReflectiveInjector.fromResolvedProviders(providers);
           * expect(injector.get(Car) instanceof Car).toBe(true);
           * ```
           */

        }, {
          key: "fromResolvedProviders",
          value: function fromResolvedProviders(providers, parent) {
            return new ReflectiveInjector_(providers, parent);
          }
        }]);

        return ReflectiveInjector;
      }();

      var ReflectiveInjector_ = /*#__PURE__*/function () {
        /**
         * Private
         */
        function ReflectiveInjector_(_providers, _parent) {
          _classCallCheck(this, ReflectiveInjector_);

          /** @internal */
          this._constructionCounter = 0;
          this._providers = _providers;
          this.parent = _parent || null;
          var len = _providers.length;
          this.keyIds = [];
          this.objs = [];

          for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
          }
        }

        _createClass2(ReflectiveInjector_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
          }
        }, {
          key: "resolveAndCreateChild",
          value: function resolveAndCreateChild(providers) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
          }
        }, {
          key: "createChildFromResolved",
          value: function createChildFromResolved(providers) {
            var inj = new ReflectiveInjector_(providers);
            inj.parent = this;
            return inj;
          }
        }, {
          key: "resolveAndInstantiate",
          value: function resolveAndInstantiate(provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
          }
        }, {
          key: "instantiateResolved",
          value: function instantiateResolved(provider) {
            return this._instantiateProvider(provider);
          }
        }, {
          key: "getProviderAtIndex",
          value: function getProviderAtIndex(index) {
            if (index < 0 || index >= this._providers.length) {
              throw outOfBoundsError(index);
            }

            return this._providers[index];
          }
          /** @internal */

        }, {
          key: "_new",
          value: function _new(provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
              throw cyclicDependencyError(this, provider.key);
            }

            return this._instantiateProvider(provider);
          }
        }, {
          key: "_getMaxNumberOfObjects",
          value: function _getMaxNumberOfObjects() {
            return this.objs.length;
          }
        }, {
          key: "_instantiateProvider",
          value: function _instantiateProvider(provider) {
            if (provider.multiProvider) {
              var res = [];

              for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
              }

              return res;
            } else {
              return this._instantiate(provider, provider.resolvedFactories[0]);
            }
          }
        }, {
          key: "_instantiate",
          value: function _instantiate(provider, ResolvedReflectiveFactory) {
            var _this149 = this;

            var factory = ResolvedReflectiveFactory.factory;
            var deps;

            try {
              deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {
                return _this149._getByReflectiveDependency(dep);
              });
            } catch (e) {
              if (e.addKey) {
                e.addKey(this, provider.key);
              }

              throw e;
            }

            var obj;

            try {
              obj = factory.apply(void 0, _toConsumableArray(deps));
            } catch (e) {
              throw instantiationError(this, e, e.stack, provider.key);
            }

            return obj;
          }
        }, {
          key: "_getByReflectiveDependency",
          value: function _getByReflectiveDependency(dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
          }
        }, {
          key: "_getByKey",
          value: function _getByKey(key, visibility, notFoundValue) {
            if (key === ReflectiveInjector_.INJECTOR_KEY) {
              return this;
            }

            if (visibility instanceof Self) {
              return this._getByKeySelf(key, notFoundValue);
            } else {
              return this._getByKeyDefault(key, notFoundValue, visibility);
            }
          }
        }, {
          key: "_getObjByKeyId",
          value: function _getObjByKeyId(keyId) {
            for (var i = 0; i < this.keyIds.length; i++) {
              if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                  this.objs[i] = this._new(this._providers[i]);
                }

                return this.objs[i];
              }
            }

            return UNDEFINED;
          }
          /** @internal */

        }, {
          key: "_throwOrNull",
          value: function _throwOrNull(key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
              return notFoundValue;
            } else {
              throw noProviderError(this, key);
            }
          }
          /** @internal */

        }, {
          key: "_getByKeySelf",
          value: function _getByKeySelf(key, notFoundValue) {
            var obj = this._getObjByKeyId(key.id);

            return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
          }
          /** @internal */

        }, {
          key: "_getByKeyDefault",
          value: function _getByKeyDefault(key, notFoundValue, visibility) {
            var inj;

            if (visibility instanceof SkipSelf) {
              inj = this.parent;
            } else {
              inj = this;
            }

            while (inj instanceof ReflectiveInjector_) {
              var inj_ = inj;

              var obj = inj_._getObjByKeyId(key.id);

              if (obj !== UNDEFINED) return obj;
              inj = inj_.parent;
            }

            if (inj !== null) {
              return inj.get(key.token, notFoundValue);
            } else {
              return this._throwOrNull(key, notFoundValue);
            }
          }
        }, {
          key: "displayName",
          get: function get() {
            var providers = _mapProviders(this, function (b) {
              return ' "' + b.key.displayName + '" ';
            }).join(', ');

            return "ReflectiveInjector(providers: [".concat(providers, "])");
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.displayName;
          }
        }]);

        return ReflectiveInjector_;
      }();

      ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);

      function _mapProviders(injector, fn) {
        var res = [];

        for (var i = 0; i < injector._providers.length; ++i) {
          res[i] = fn(injector.getProviderAtIndex(i));
        }

        return res;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function ɵɵdirectiveInject(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
        var lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests
        // if inject utilities are used before bootstrapping.

        if (lView === null) {
          // Verify that we will not get into infinite loop.
          ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);
          return ɵɵinject(token, flags);
        }

        var tNode = getCurrentTNode();
        return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
      }
      /**
       * Throws an error indicating that a factory function could not be generated by the compiler for a
       * particular class.
       *
       * This instruction allows the actual error message to be optimized away when ngDevMode is turned
       * off, saving bytes of generated code while still providing a good experience in dev mode.
       *
       * The name of the class is not mentioned here, but will be in the generated factory function name
       * and thus in the stack trace.
       *
       * @codeGenApi
       */


      function ɵɵinvalidFactory() {
        var msg = ngDevMode ? "This constructor was not compatible with Dependency Injection." : 'invalid';
        throw new Error(msg);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a property on a selected element.
       *
       * Operates on the element selected by index via the {@link select} instruction.
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
       *
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       * @returns This function returns itself so that it may be chained
       * (e.g. `property('name', ctx.name)('title', ctx.title)`)
       *
       * @codeGenApi
       */


      function ɵɵproperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return ɵɵproperty;
      }
      /**
       * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
       * directive input.
       */


      function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
        var inputs = tNode.inputs;
        var property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.

        setInputsForProperty(tView, lView, inputs[property], property, value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function elementStartFirstCreatePass(index, tView, lView, _native11, name, attrsIndex, localRefsIndex) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts;
        var attrs = getConstant(tViewConsts, attrsIndex);
        var tNode = getOrCreateTNode(tView, index, 2
        /* Element */
        , name, attrs);
        var hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
        ngDevMode && logUnknownElementError(tView, _native11, tNode, hasDirectives);

        if (tNode.attrs !== null) {
          computeStaticStyling(tNode, tNode.attrs, false);
        }

        if (tNode.mergedAttrs !== null) {
          computeStaticStyling(tNode, tNode.mergedAttrs, true);
        }

        if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
        }

        return tNode;
      }
      /**
       * Create DOM element. The instruction must later be followed by `elementEnd()` call.
       *
       * @param index Index of the element in the LView array
       * @param name Name of the DOM Node
       * @param attrsIndex Index of the element's attributes in the `consts` array.
       * @param localRefsIndex Index of the element's local references in the `consts` array.
       *
       * Attributes and localRefs are passed as an array of strings where elements with an even index
       * hold an attribute name and elements with an odd index hold an attribute value, ex.:
       * ['id', 'warning5', 'class', 'alert']
       *
       * @codeGenApi
       */


      function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = HEADER_OFFSET + index;
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        var renderer = lView[RENDERER];

        var _native12 = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());

        var tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, _native12, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, true);
        var mergedAttrs = tNode.mergedAttrs;

        if (mergedAttrs !== null) {
          setUpAttributes(renderer, _native12, mergedAttrs);
        }

        var classes = tNode.classes;

        if (classes !== null) {
          writeDirectClass(renderer, _native12, classes);
        }

        var styles = tNode.styles;

        if (styles !== null) {
          writeDirectStyle(renderer, _native12, styles);
        }

        if ((tNode.flags & 64
        /* isDetached */
        ) !== 64
        /* isDetached */
        ) {
            // In the i18n case, the translation may have removed this element, so only add it if it is not
            // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
            appendChild(tView, lView, _native12, tNode);
          } // any immediate children of a component or template container must be pre-emptively
        // monkey-patched with the component view data so that the element can be inspected
        // later on using any element discovery utility methods (see `element_discovery.ts`)


        if (getElementDepthCount() === 0) {
          attachPatchData(_native12, lView);
        }

        increaseElementDepthCount();

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
        }

        if (localRefsIndex !== null) {
          saveResolvedLocalsInData(lView, tNode);
        }
      }
      /**
       * Mark the end of the element.
       *
       * @codeGenApi
       */


      function ɵɵelementEnd() {
        var currentTNode = getCurrentTNode();
        ngDevMode && assertDefined(currentTNode, 'No parent node to close.');

        if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
        } else {
          ngDevMode && assertHasParent(getCurrentTNode());
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
        }

        var tNode = currentTNode;
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        );
        decreaseElementDepthCount();
        var tView = getTView();

        if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);

          if (isContentQueryHost(currentTNode)) {
            tView.queries.elementEnd(currentTNode);
          }
        }

        if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
        }

        if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
        }
      }
      /**
       * Creates an empty element using {@link elementStart} and {@link elementEnd}
       *
       * @param index Index of the element in the data array
       * @param name Name of the DOM Node
       * @param attrsIndex Index of the element's attributes in the `consts` array.
       * @param localRefsIndex Index of the element's local references in the `consts` array.
       *
       * @codeGenApi
       */


      function ɵɵelement(index, name, attrsIndex, localRefsIndex) {
        ɵɵelementStart(index, name, attrsIndex, localRefsIndex);
        ɵɵelementEnd();
      }

      function logUnknownElementError(tView, element, tNode, hasDirectives) {
        var schemas = tView.schemas; // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
        // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
        // defined as an array (as an empty array in case `schemas` field is not defined) and we should
        // execute the check below.

        if (schemas === null) return;
        var tagName = tNode.value; // If the element matches any directive, it's considered as valid.

        if (!hasDirectives && tagName !== null) {
          // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered
          // as a custom element. Note that unknown elements with a dash in their name won't be instances
          // of HTMLUnknownElement in browsers that support web components.
          var isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
          // because while most browsers return 'function', IE returns 'object'.
          typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);

          if (isUnknown && !matchingSchemas(tView, tagName)) {
            var message = "'".concat(tagName, "' is not a known element:\n");
            message += "1. If '".concat(tagName, "' is an Angular component, then verify that it is part of this module.\n");

            if (tagName && tagName.indexOf('-') > -1) {
              message += "2. If '".concat(tagName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.");
            } else {
              message += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
            }

            console.error(formatRuntimeError("304"
            /* UNKNOWN_ELEMENT */
            , message));
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts;
        var attrs = getConstant(tViewConsts, attrsIndex);
        var tNode = getOrCreateTNode(tView, index, 8
        /* ElementContainer */
        , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify
        // and execute directives on the ng-container.

        if (attrs !== null) {
          computeStaticStyling(tNode, attrs, true);
        }

        var localRefs = getConstant(tViewConsts, localRefsIndex);
        resolveDirectives(tView, lView, tNode, localRefs);

        if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
        }

        return tNode;
      }
      /**
       * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
       * The instruction must later be followed by `elementContainerEnd()` call.
       *
       * @param index Index of the element in the LView array
       * @param attrsIndex Index of the container attributes in the `consts` array.
       * @param localRefsIndex Index of the container's local references in the `consts` array.
       *
       * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
       * the DOM (as a comment node can't have attributes). Attributes are here only for directive
       * matching purposes and setting initial inputs of directives.
       *
       * @codeGenApi
       */


      function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
        var tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, true);
        ngDevMode && ngDevMode.rendererCreateComment++;

        var _native13 = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');

        appendChild(tView, lView, _native13, tNode);
        attachPatchData(_native13, lView);

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
        }

        if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode);
        }
      }
      /**
       * Mark the end of the <ng-container>.
       *
       * @codeGenApi
       */


      function ɵɵelementContainerEnd() {
        var currentTNode = getCurrentTNode();
        var tView = getTView();

        if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
        } else {
          ngDevMode && assertHasParent(currentTNode);
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
        }

        ngDevMode && assertTNodeType(currentTNode, 8
        /* ElementContainer */
        );

        if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);

          if (isContentQueryHost(currentTNode)) {
            tView.queries.elementEnd(currentTNode);
          }
        }
      }
      /**
       * Creates an empty logical container using {@link elementContainerStart}
       * and {@link elementContainerEnd}
       *
       * @param index Index of the element in the LView array
       * @param attrsIndex Index of the container attributes in the `consts` array.
       * @param localRefsIndex Index of the container's local references in the `consts` array.
       *
       * @codeGenApi
       */


      function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
        ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);
        ɵɵelementContainerEnd();
      }
      /**
       * Returns the current OpaqueViewState instance.
       *
       * Used in conjunction with the restoreView() instruction to save a snapshot
       * of the current view and restore it when listeners are invoked. This allows
       * walking the declaration view tree in listeners to get vars from parent views.
       *
       * @codeGenApi
       */


      function ɵɵgetCurrentView() {
        return getLView();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Determine if the argument is shaped like a Promise
       */


      function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return !!obj && typeof obj.then === 'function';
      }
      /**
       * Determine if the argument is a Subscribable
       */


      function isSubscribable(obj) {
        return !!obj && typeof obj.subscribe === 'function';
      }
      /**
       * Determine if the argument is an Observable
       *
       * Strictly this tests that the `obj` is `Subscribable`, since `Observable`
       * types need additional methods, such as `lift()`. But it is adequate for our
       * needs since within the Angular framework code we only ever need to use the
       * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects
       * into `Observable` as needed.
       */


      var isObservable = isSubscribable;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds an event listener to the current node.
       *
       * If an output exists on one of the node's directives, it also subscribes to the output
       * and saves the subscription for later cleanup.
       *
       * @param eventName Name of the event
       * @param listenerFn The function to be called when event emits
       * @param useCapture Whether or not to use capture in event listener
       * @param eventTargetResolver Function that returns global target information in case this listener
       * should be attached to a global object like window, document or body
       *
       * @codeGenApi
       */

      function ɵɵlistener(eventName, listenerFn) {
        var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var eventTargetResolver = arguments.length > 3 ? arguments[3] : undefined;
        var lView = getLView();
        var tView = getTView();
        var tNode = getCurrentTNode();
        listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, useCapture, eventTargetResolver);
        return ɵɵlistener;
      }
      /**
       * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
       *
       * This instruction is for compatibility purposes and is designed to ensure that a
       * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
       * in the component's renderer. Normally all host listeners are evaluated with the
       * parent component's renderer, but, in the case of animation @triggers, they need
       * to be evaluated with the sub component's renderer (because that's where the
       * animation triggers are defined).
       *
       * Do not use this instruction as a replacement for `listener`. This instruction
       * only exists to ensure compatibility with the ViewEngine's host binding behavior.
       *
       * @param eventName Name of the event
       * @param listenerFn The function to be called when event emits
       * @param useCapture Whether or not to use capture in event listener
       * @param eventTargetResolver Function that returns global target information in case this listener
       * should be attached to a global object like window, document or body
       *
       * @codeGenApi
       */


      function ɵɵsyntheticHostListener(eventName, listenerFn) {
        var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var eventTargetResolver = arguments.length > 3 ? arguments[3] : undefined;
        var tNode = getCurrentTNode();
        var lView = getLView();
        var tView = getTView();
        var currentDef = getCurrentDirectiveDef(tView.data);
        var renderer = loadComponentRenderer(currentDef, tNode, lView);
        listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver);
        return ɵɵsyntheticHostListener;
      }
      /**
       * A utility function that checks if a given element has already an event handler registered for an
       * event with a specified name. The TView.cleanup data structure is used to find out which events
       * are registered for a given element.
       */


      function findExistingListener(tView, lView, eventName, tNodeIdx) {
        var tCleanup = tView.cleanup;

        if (tCleanup != null) {
          for (var i = 0; i < tCleanup.length - 1; i += 2) {
            var cleanupEventName = tCleanup[i];

            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
              // We have found a matching event name on the same node but it might not have been
              // registered yet, so we must explicitly verify entries in the LView cleanup data
              // structures.
              var lCleanup = lView[CLEANUP];
              var listenerIdxInLCleanup = tCleanup[i + 2];
              return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
            } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
            // 2-element entries (for directive and queries destroy hooks). As such we can encounter
            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
            // documentation of TView.cleanup for more details of this data structure layout.


            if (typeof cleanupEventName === 'string') {
              i += 2;
            }
          }
        }

        return null;
      }

      function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn) {
        var useCapture = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var eventTargetResolver = arguments.length > 7 ? arguments[7] : undefined;
        var isTNodeDirectiveHost = isDirectiveHost(tNode);
        var firstCreatePass = tView.firstCreatePass;
        var tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView); // When the ɵɵlistener instruction was generated and is executed we know that there is either a
        // native listener or a directive output on this element. As such we we know that we will have to
        // register a listener and store its cleanup function on LView.

        var lCleanup = getOrCreateLViewCleanup(lView);
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        );
        var processOutputs = true; // add native event listener - applicable to elements only

        if (tNode.type & 3
        /* AnyRNode */
        ) {
            var _native14 = getNativeByTNode(tNode, lView);

            var resolved = eventTargetResolver ? eventTargetResolver(_native14) : EMPTY_OBJ;
            var target = resolved.target || _native14;
            var lCleanupIndex = lCleanup.length;
            var idxOrTargetGetter = eventTargetResolver ? function (_lView) {
              return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target;
            } : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all
            // events (including outputs).

            if (isProceduralRenderer(renderer)) {
              // There might be cases where multiple directives on the same element try to register an event
              // handler function for the same event. In this situation we want to avoid registration of
              // several native listeners as each registration would be intercepted by NgZone and
              // trigger change detection. This would mean that a single user action would result in several
              // change detections being invoked. To avoid this situation we want to have only one call to
              // native handler registration (for the same element and same type of event).
              //
              // In order to have just one native event handler in presence of multiple handler functions,
              // we just register a first handler function as a native event listener and then chain
              // (coalesce) other handler functions on top of the first native handler function.
              var existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an
              // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
              // view engine.
              // Also, we don't have to search for existing listeners is there are no directives
              // matching on a given node as we can't register multiple event handlers for the same event in
              // a template (this would mean having duplicate attributes).

              if (!eventTargetResolver && isTNodeDirectiveHost) {
                existingListener = findExistingListener(tView, lView, eventName, tNode.index);
              }

              if (existingListener !== null) {
                // Attach a new listener to coalesced listeners list, maintaining the order in which
                // listeners are registered. For performance reasons, we keep a reference to the last
                // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
                // the entire set each time we need to add a new listener.
                var lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
                lastListenerFn.__ngNextListenerFn__ = listenerFn;
                existingListener.__ngLastListenerFn__ = listenerFn;
                processOutputs = false;
              } else {
                // The first argument of `listen` function in Procedural Renderer is:
                // - either a target name (as a string) in case of global target (window, document, body)
                // - or element reference (in all other cases)
                listenerFn = wrapListener(tNode, lView, listenerFn, false
                /** preventDefault */
                );
                var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);
                ngDevMode && ngDevMode.rendererAddEventListener++;
                lCleanup.push(listenerFn, cleanupFn);
                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
              }
            } else {
              listenerFn = wrapListener(tNode, lView, listenerFn, true
              /** preventDefault */
              );
              target.addEventListener(eventName, listenerFn, useCapture);
              ngDevMode && ngDevMode.rendererAddEventListener++;
              lCleanup.push(listenerFn);
              tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
            }
          } else {
          // Even if there is no native listener to add, we still need to wrap the listener so that OnPush
          // ancestors are marked dirty when an event occurs.
          listenerFn = wrapListener(tNode, lView, listenerFn, false
          /** preventDefault */
          );
        } // subscribe to directive outputs


        var outputs = tNode.outputs;
        var props;

        if (processOutputs && outputs !== null && (props = outputs[eventName])) {
          var propsLength = props.length;

          if (propsLength) {
            for (var i = 0; i < propsLength; i += 2) {
              var index = props[i];
              ngDevMode && assertIndexInRange(lView, index);
              var minifiedName = props[i + 1];
              var directiveInstance = lView[index];
              var output = directiveInstance[minifiedName];

              if (ngDevMode && !isObservable(output)) {
                throw new Error("@Output ".concat(minifiedName, " not initialized in '").concat(directiveInstance.constructor.name, "'."));
              }

              var subscription = output.subscribe(listenerFn);
              var idx = lCleanup.length;
              lCleanup.push(listenerFn, subscription);
              tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
            }
          }
        }
      }

      function executeListenerWithErrorHandling(lView, listenerFn, e) {
        try {
          // Only explicitly returning false from a listener should preventDefault
          return listenerFn(e) !== false;
        } catch (error) {
          handleError(lView, error);
          return false;
        }
      }
      /**
       * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
       * if applicable.
       *
       * @param tNode The TNode associated with this listener
       * @param lView The LView that contains this listener
       * @param listenerFn The listener function to call
       * @param wrapWithPreventDefault Whether or not to prevent default behavior
       * (the procedural renderer does this already, so in those cases, we should skip)
       */


      function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {
        // Note: we are performing most of the work in the listener function itself
        // to optimize listener registration.
        return function wrapListenerIn_markDirtyAndPreventDefault(e) {
          // Ivy uses `Function` as a special token that allows us to unwrap the function
          // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
          if (e === Function) {
            return listenerFn;
          } // In order to be backwards compatible with View Engine, events on component host nodes
          // must also mark the component view itself dirty (i.e. the view that it owns).


          var startView = tNode.flags & 2
          /* isComponentHost */
          ? getComponentLViewByIndex(tNode.index, lView) : lView; // See interfaces/view.ts for more on LViewFlags.ManualOnPush

          if ((lView[FLAGS] & 32
          /* ManualOnPush */
          ) === 0) {
            markViewDirty(startView);
          }

          var result = executeListenerWithErrorHandling(lView, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for
          // their presence and invoke as needed.

          var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;

          while (nextListenerFn) {
            // We should prevent default if any of the listeners explicitly return false
            result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;
            nextListenerFn = nextListenerFn.__ngNextListenerFn__;
          }

          if (wrapWithPreventDefault && result === false) {
            e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)

            e.returnValue = false;
          }

          return result;
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves a context at the level specified and saves it as the global, contextViewData.
       * Will get the next level up if level is not specified.
       *
       * This is used to save contexts of parent views so they can be bound in embedded views, or
       * in conjunction with reference() to bind a ref from a parent view.
       *
       * @param level The relative level of the view from which to grab context compared to contextVewData
       * @returns context
       *
       * @codeGenApi
       */


      function ɵɵnextContext() {
        var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        return nextContextImpl(level);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Checks a given node against matching projection slots and returns the
       * determined slot index. Returns "null" if no slot matched the given node.
       *
       * This function takes into account the parsed ngProjectAs selector from the
       * node's attributes. If present, it will check whether the ngProjectAs selector
       * matches any of the projection slot selectors.
       */


      function matchingProjectionSlotIndex(tNode, projectionSlots) {
        var wildcardNgContentIndex = null;
        var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);

        for (var i = 0; i < projectionSlots.length; i++) {
          var slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching
          // any selector. This is necessary to be backwards compatible with view engine.

          if (slotValue === '*') {
            wildcardNgContentIndex = i;
            continue;
          } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
          // to the list of selectors, otherwise we fall back to matching against the node.


          if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,
          /* isProjectionMode */
          true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
            return i; // first matching selector "captures" a given node
          }
        }

        return wildcardNgContentIndex;
      }
      /**
       * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
       * It takes all the selectors from the entire component's template and decides where
       * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
       * backed by a selector).
       *
       * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
       * un-parsed form.
       *
       * The parsed form is needed for efficient matching of a node against a given CSS selector.
       * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
       *
       * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
       * drawbacks:
       * - having only a textual form would require runtime parsing of CSS selectors;
       * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
       * template author).
       *
       * @param projectionSlots? A collection of projection slots. A projection slot can be based
       *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
       *        all nodes which do not match any selector. If not specified, a single wildcard
       *        selector projection slot will be defined.
       *
       * @codeGenApi
       */


      function ɵɵprojectionDef(projectionSlots) {
        var componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];

        if (!componentNode.projection) {
          // If no explicit projection slots are defined, fall back to a single
          // projection slot with the wildcard selector.
          var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
          var projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
          var tails = projectionHeads.slice();
          var componentChild = componentNode.child;

          while (componentChild !== null) {
            var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;

            if (slotIndex !== null) {
              if (tails[slotIndex]) {
                tails[slotIndex].projectionNext = componentChild;
              } else {
                projectionHeads[slotIndex] = componentChild;
              }

              tails[slotIndex] = componentChild;
            }

            componentChild = componentChild.next;
          }
        }
      }
      /**
       * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
       * to the projectionDef instruction.
       *
       * @param nodeIndex
       * @param selectorIndex:
       *        - 0 when the selector is `*` (or unspecified as this is the default value),
       *        - 1 based index of the selector from the {@link projectionDef}
       *
       * @codeGenApi
       */


      function ɵɵprojection(nodeIndex) {
        var selectorIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var attrs = arguments.length > 2 ? arguments[2] : undefined;
        var lView = getLView();
        var tView = getTView();
        var tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16
        /* Projection */
        , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.

        if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content

        setCurrentTNodeAsNotParent();

        if ((tProjectionNode.flags & 64
        /* isDetached */
        ) !== 64
        /* isDetached */
        ) {
            // re-distribution of projectable nodes is stored on a component's view level
            applyProjection(tView, lView, tProjectionNode);
          }
      }
      /**
       *
       * Update an interpolated property on an element with a lone bound value
       *
       * Used when the value passed to a property has 1 interpolated value in it, an no additional text
       * surrounds that interpolated value:
       *
       * ```html
       * <div title="{{v0}}"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate('title', v0);
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate(propName, v0, sanitizer) {
        ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);
        return ɵɵpropertyInterpolate;
      }
      /**
       *
       * Update an interpolated property on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div title="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
        }

        return ɵɵpropertyInterpolate1;
      }
      /**
       *
       * Update an interpolated property on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
        }

        return ɵɵpropertyInterpolate2;
      }
      /**
       *
       * Update an interpolated property on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate3(
       * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
        }

        return ɵɵpropertyInterpolate3;
      }
      /**
       *
       * Update an interpolated property on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate4(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
        }

        return ɵɵpropertyInterpolate4;
      }
      /**
       *
       * Update an interpolated property on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate5(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
        }

        return ɵɵpropertyInterpolate5;
      }
      /**
       *
       * Update an interpolated property on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate6(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
        }

        return ɵɵpropertyInterpolate6;
      }
      /**
       *
       * Update an interpolated property on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate7(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
        }

        return ɵɵpropertyInterpolate7;
      }
      /**
       *
       * Update an interpolated property on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate8(
       *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
        }

        return ɵɵpropertyInterpolate8;
      }
      /**
       * Update an interpolated property on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolateV(
       *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update.
       * @param values The collection of values and the strings inbetween those values, beginning with a
       * string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵpropertyInterpolateV(propName, values, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);

          if (ngDevMode) {
            var interpolationInBetween = [values[0]]; // prefix

            for (var i = 2; i < values.length; i += 2) {
              interpolationInBetween.push(values[i]);
            }

            storePropertyBindingMetadata.apply(void 0, [tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
          }
        }

        return ɵɵpropertyInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * NOTE: The word `styling` is used interchangeably as style or class styling.
       *
       * This file contains code to link styling instructions together so that they can be replayed in
       * priority order. The file exists because Ivy styling instruction execution order does not match
       * that of the priority order. The purpose of this code is to create a linked list so that the
       * instructions can be traversed in priority order when computing the styles.
       *
       * Assume we are dealing with the following code:
       * ```
       * @Component({
       *   template: `
       *     <my-cmp [style]=" {color: '#001'} "
       *             [style.color]=" #002 "
       *             dir-style-color-1
       *             dir-style-color-2> `
       * })
       * class ExampleComponent {
       *   static ngComp = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#001'});
       *     ɵɵstyleProp('color', '#002');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `[dir-style-color-1]',
       * })
       * class Style1Directive {
       *   @HostBinding('style') style = {color: '#005'};
       *   @HostBinding('style.color') color = '#006';
       *
       *   static ngDir = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#005'});
       *     ɵɵstyleProp('color', '#006');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `[dir-style-color-2]',
       * })
       * class Style2Directive {
       *   @HostBinding('style') style = {color: '#007'};
       *   @HostBinding('style.color') color = '#008';
       *
       *   static ngDir = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#007'});
       *     ɵɵstyleProp('color', '#008');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `my-cmp',
       * })
       * class MyComponent {
       *   @HostBinding('style') style = {color: '#003'};
       *   @HostBinding('style.color') color = '#004';
       *
       *   static ngComp = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#003'});
       *     ɵɵstyleProp('color', '#004');
       *     ...
       *   }
       * }
       * ```
       *
       * The Order of instruction execution is:
       *
       * NOTE: the comment binding location is for illustrative purposes only.
       *
       * ```
       * // Template: (ExampleComponent)
       *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
       *     ɵɵstyleProp('color', '#002');  // Binding index: 12
       * // MyComponent
       *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
       *     ɵɵstyleProp('color', '#004');  // Binding index: 22
       * // Style1Directive
       *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
       *     ɵɵstyleProp('color', '#006');  // Binding index: 26
       * // Style2Directive
       *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
       *     ɵɵstyleProp('color', '#008');  // Binding index: 30
       * ```
       *
       * The correct priority order of concatenation is:
       *
       * ```
       * // MyComponent
       *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
       *     ɵɵstyleProp('color', '#004');  // Binding index: 22
       * // Style1Directive
       *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
       *     ɵɵstyleProp('color', '#006');  // Binding index: 26
       * // Style2Directive
       *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
       *     ɵɵstyleProp('color', '#008');  // Binding index: 30
       * // Template: (ExampleComponent)
       *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
       *     ɵɵstyleProp('color', '#002');  // Binding index: 12
       * ```
       *
       * What color should be rendered?
       *
       * Once the items are correctly sorted in the list, the answer is simply the last item in the
       * concatenation list which is `#002`.
       *
       * To do so we keep a linked list of all of the bindings which pertain to this element.
       * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
       * us to traverse them in the order of priority.
       *
       * |Idx|`TView.data`|`LView`          | Notes
       * |---|------------|-----------------|--------------
       * |...|            |                 |
       * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
       * |11 |`30 | 12`   | ...             |
       * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
       * |13 |`10 | 0`    | ...             |
       * |...|            |                 |
       * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
       * |21 |`0 | 22`    | ...             |
       * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
       * |23 |`20 | 24`   | ...             |
       * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
       * |25 |`22 | 26`   | ...             |
       * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
       * |27 |`24 | 28`   | ...             |
       * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
       * |29 |`26 | 30`   | ...             |
       * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
       * |31 |`28 | 10`   | ...             |
       *
       * The above data structure allows us to re-concatenate the styling no matter which data binding
       * changes.
       *
       * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
       * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
       * there is a map (which may contain the name). This information is useful in knowing if other
       * styles with higher priority need to be searched for overwrites.
       *
       * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
       * `tnode_linked_list_spec.ts` for working example.
       */


      var __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
      /**
       * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
       * list of styles and compute the duplicate flag.
       *
       * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
       *
       * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
       * the head/tail of the template portion of the styles.
       *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
       *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
       *
       * @param tData The `TData` to insert into.
       * @param tNode `TNode` associated with the styling element.
       * @param tStylingKey See `TStylingKey`.
       * @param index location of where `tStyleValue` should be stored (and linked into list.)
       * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
       *               template.)
       * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
       *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
       */


      function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
        ngDevMode && assertFirstUpdatePass(getTView());
        var tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
        var tmplHead = getTStylingRangePrev(tBindings);
        var tmplTail = getTStylingRangeNext(tBindings);
        tData[index] = tStylingKeyWithStatic;
        var isKeyDuplicateOfStatic = false;
        var tStylingKey;

        if (Array.isArray(tStylingKeyWithStatic)) {
          // We are case when the `TStylingKey` contains static fields as well.
          var staticKeyValueArray = tStylingKeyWithStatic;
          tStylingKey = staticKeyValueArray[1]; // unwrap.
          // We need to check if our key is present in the static so that we can mark it as duplicate.

          if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
            // tStylingKey is present in the statics, need to mark it as duplicate.
            isKeyDuplicateOfStatic = true;
          }
        } else {
          tStylingKey = tStylingKeyWithStatic;
        }

        if (isHostBinding) {
          // We are inserting host bindings
          // If we don't have template bindings then `tail` is 0.
          var hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first
          // template bindings (there are none.) Instead the head points to the tail of the template.

          if (hasTemplateBindings) {
            // template head's "prev" will point to last host binding or to 0 if no host bindings yet
            var previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
            tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one

            if (previousNode !== 0) {
              // We need to update the template-tail value to point to us.
              tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
            } // The "previous" of the template binding head should point to this host binding


            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
          } else {
            tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one

            if (tmplHead !== 0) {
              // We need to update the template-tail value to point to us.
              tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
            } // if we don't have template, the head points to template-tail, and needs to be advanced.


            tmplHead = index;
          }
        } else {
          // We are inserting in template section.
          // We need to set this binding's "previous" to the current template tail
          tData[index + 1] = toTStylingRange(tmplTail, 0);
          ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');

          if (tmplHead === 0) {
            tmplHead = index;
          } else {
            // We need to update the previous value "next" to point to this binding
            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
          }

          tmplTail = index;
        } // Now we need to update / compute the duplicates.
        // Starting with our location search towards head (least priority)


        if (isKeyDuplicateOfStatic) {
          tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
        }

        markDuplicates(tData, tStylingKey, index, true, isClassBinding);
        markDuplicates(tData, tStylingKey, index, false, isClassBinding);
        markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
        tBindings = toTStylingRange(tmplHead, tmplTail);

        if (isClassBinding) {
          tNode.classBindings = tBindings;
        } else {
          tNode.styleBindings = tBindings;
        }
      }
      /**
       * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
       *
       * @param tNode `TNode` where the residual is stored.
       * @param tStylingKey `TStylingKey` to store.
       * @param tData `TData` associated with the current `LView`.
       * @param index location of where `tStyleValue` should be stored (and linked into list.)
       * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
       *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
       */


      function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
        var residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;

        if (residual != null
        /* or undefined */
        && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
          // We have duplicate in the residual so mark ourselves as duplicate.
          tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
        }
      }
      /**
       * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
       * `TStyleValue`.
       *
       * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
       * with it set to `false` to search both the previous as well as next items in the list.
       *
       * No duplicate case
       * ```
       *   [style.color]
       *   [style.width.px] <<- index
       *   [style.height.px]
       * ```
       *
       * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
       * duplicates because `width` is not found in any other part of the linked list.
       *
       * Duplicate case
       * ```
       *   [style.color]
       *   [style.width.em]
       *   [style.width.px] <<- index
       * ```
       * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
       * because `width` is found in the chain.
       *
       * Map case 1
       * ```
       *   [style.width.px]
       *   [style.color]
       *   [style]  <<- index
       * ```
       * In the above case adding `[style]` will produce a duplicate with any other bindings because
       * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
       *
       * Map case 2
       * ```
       *   [style]
       *   [style.width.px]
       *   [style.color]  <<- index
       * ```
       * In the above case adding `[style.color]` will produce a duplicate because there is already a
       * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
       * `width`.
       *
       * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
       * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
       *        the linked list.
       * @param index Starting location in the linked list to search from
       * @param isPrevDir Direction.
       *        - `true` for previous (lower priority);
       *        - `false` for next (higher priority).
       */


      function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
        var tStylingAtIndex = tData[index + 1];
        var isMap = tStylingKey === null;
        var cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
        var foundDuplicate = false; // We keep iterating as long as we have a cursor
        // AND either:
        // - we found what we are looking for, OR
        // - we are a map in which case we have to continue searching even after we find what we were
        //   looking for since we are a wild card and everything needs to be flipped to duplicate.

        while (cursor !== 0 && (foundDuplicate === false || isMap)) {
          ngDevMode && assertIndexInRange(tData, cursor);
          var tStylingValueAtCursor = tData[cursor];
          var tStyleRangeAtCursor = tData[cursor + 1];

          if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
            foundDuplicate = true;
            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
          }

          cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
        }

        if (foundDuplicate) {
          // if we found a duplicate, than mark ourselves.
          tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
        }
      }
      /**
       * Determines if two `TStylingKey`s are a match.
       *
       * When computing whether a binding contains a duplicate, we need to compare if the instruction
       * `TStylingKey` has a match.
       *
       * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
       * - `color`
       *    - `color`    // Match another color
       *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
       *    - `['', 'color', 'other', true]` // wrapped `color` so match
       *    - `['', null, 'other', true]`       // wrapped `null` so match
       *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
       * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
       *
       * @param tStylingKeyCursor
       * @param tStylingKey
       */


      function isStylingMatch(tStylingKeyCursor, tStylingKey) {
        ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');

        if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
        // location so we must assume that we have a match.
        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
        // contains a match.
        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.
        ) {
            return true;
          } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
          // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
          // statics and we need to check those as well.
          return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Global state of the parser. (This makes parser non-reentrant, but that is not an issue)


      var parserState = {
        textEnd: 0,
        key: 0,
        keyEnd: 0,
        value: 0,
        valueEnd: 0
      };
      /**
       * Retrieves the last parsed `key` of style.
       * @param text the text to substring the key from.
       */

      function getLastParsedKey(text) {
        return text.substring(parserState.key, parserState.keyEnd);
      }
      /**
       * Retrieves the last parsed `value` of style.
       * @param text the text to substring the key from.
       */


      function getLastParsedValue(text) {
        return text.substring(parserState.value, parserState.valueEnd);
      }
      /**
       * Initializes `className` string for parsing and parses the first token.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
       *   const key = getLastParsedKey();
       *   ...
       * }
       * ```
       * @param text `className` to parse
       * @returns index where the next invocation of `parseClassNameNext` should resume.
       */


      function parseClassName(text) {
        resetParserState(text);
        return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
      }
      /**
       * Parses next `className` token.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
       *   const key = getLastParsedKey();
       *   ...
       * }
       * ```
       *
       * @param text `className` to parse
       * @param index where the parsing should resume.
       * @returns index where the next invocation of `parseClassNameNext` should resume.
       */


      function parseClassNameNext(text, index) {
        var end = parserState.textEnd;

        if (end === index) {
          return -1;
        }

        index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
        return consumeWhitespace(text, index, end);
      }
      /**
       * Initializes `cssText` string for parsing and parses the first key/values.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
       *   const key = getLastParsedKey();
       *   const value = getLastParsedValue();
       *   ...
       * }
       * ```
       * @param text `cssText` to parse
       * @returns index where the next invocation of `parseStyleNext` should resume.
       */


      function parseStyle(text) {
        resetParserState(text);
        return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
      }
      /**
       * Parses the next `cssText` key/values.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
       *   const key = getLastParsedKey();
       *   const value = getLastParsedValue();
       *   ...
       * }
       *
       * @param text `cssText` to parse
       * @param index where the parsing should resume.
       * @returns index where the next invocation of `parseStyleNext` should resume.
       */


      function parseStyleNext(text, startIndex) {
        var end = parserState.textEnd;
        var index = parserState.key = consumeWhitespace(text, startIndex, end);

        if (end === index) {
          // we reached an end so just quit
          return -1;
        }

        index = parserState.keyEnd = consumeStyleKey(text, index, end);
        index = consumeSeparator(text, index, end, 58
        /* COLON */
        );
        index = parserState.value = consumeWhitespace(text, index, end);
        index = parserState.valueEnd = consumeStyleValue(text, index, end);
        return consumeSeparator(text, index, end, 59
        /* SEMI_COLON */
        );
      }
      /**
       * Reset the global state of the styling parser.
       * @param text The styling text to parse.
       */


      function resetParserState(text) {
        parserState.key = 0;
        parserState.keyEnd = 0;
        parserState.value = 0;
        parserState.valueEnd = 0;
        parserState.textEnd = text.length;
      }
      /**
       * Returns index of next non-whitespace character.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
       *          that location.)
       */


      function consumeWhitespace(text, startIndex, endIndex) {
        while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32
        /* SPACE */
        ) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Returns index of last char in class token.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last char in class token.
       */


      function consumeClassToken(text, startIndex, endIndex) {
        while (startIndex < endIndex && text.charCodeAt(startIndex) > 32
        /* SPACE */
        ) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes all of the characters belonging to style key and token.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last style key character.
       */


      function consumeStyleKey(text, startIndex, endIndex) {
        var ch;

        while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45
        /* DASH */
        || ch === 95
        /* UNDERSCORE */
        || (ch & -33
        /* UPPER_CASE */
        ) >= 65
        /* A */
        && (ch & -33
        /* UPPER_CASE */
        ) <= 90
        /* Z */
        || ch >= 48
        /* ZERO */
        && ch <= 57
        /* NINE */
        )) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes all whitespace and the separator `:` after the style key.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after separator and surrounding whitespace.
       */


      function consumeSeparator(text, startIndex, endIndex, separator) {
        startIndex = consumeWhitespace(text, startIndex, endIndex);

        if (startIndex < endIndex) {
          if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
            malformedStyleError(text, String.fromCharCode(separator), startIndex);
          }

          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes style value honoring `url()` and `""` text.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last style value character.
       */


      function consumeStyleValue(text, startIndex, endIndex) {
        var ch1 = -1; // 1st previous character

        var ch2 = -1; // 2nd previous character

        var ch3 = -1; // 3rd previous character

        var i = startIndex;
        var lastChIndex = i;

        while (i < endIndex) {
          var ch = text.charCodeAt(i++);

          if (ch === 59
          /* SEMI_COLON */
          ) {
              return lastChIndex;
            } else if (ch === 34
          /* DOUBLE_QUOTE */
          || ch === 39
          /* SINGLE_QUOTE */
          ) {
              lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
            } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
          ch3 === 85
          /* U */
          && ch2 === 82
          /* R */
          && ch1 === 76
          /* L */
          && ch === 40
          /* OPEN_PAREN */
          ) {
              lastChIndex = i = consumeQuotedText(text, 41
              /* CLOSE_PAREN */
              , i, endIndex);
            } else if (ch > 32
          /* SPACE */
          ) {
              // if we have a non-whitespace character then capture its location
              lastChIndex = i;
            }

          ch3 = ch2;
          ch2 = ch1;
          ch1 = ch & -33
          /* UPPER_CASE */
          ;
        }

        return lastChIndex;
      }
      /**
       * Consumes all of the quoted characters.
       *
       * @param text Text to scan
       * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after quoted characters.
       */


      function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
        var ch1 = -1; // 1st previous character

        var index = startIndex;

        while (index < endIndex) {
          var ch = text.charCodeAt(index++);

          if (ch == quoteCharCode && ch1 !== 92
          /* BACK_SLASH */
          ) {
              return index;
            }

          if (ch == 92
          /* BACK_SLASH */
          && ch1 === 92
          /* BACK_SLASH */
          ) {
              // two back slashes cancel each other out. For example `"\\"` should properly end the
              // quotation. (It should not assume that the last `"` is escaped.)
              ch1 = 0;
            } else {
            ch1 = ch;
          }
        }

        throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
      }

      function malformedStyleError(text, expecting, index) {
        ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
        throw throwError("Malformed style at location ".concat(index, " in string '") + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.substr(index + 1) + "'. Expecting '".concat(expecting, "'."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a style binding on an element with the provided value.
       *
       * If the style value is falsy then it will be removed from the element
       * (or assigned a different value depending if there are any styles placed
       * on the element with `styleMap` or any static styles that are
       * present from when the element was created with `styling`).
       *
       * Note that the styling element is updated as part of `stylingApply`.
       *
       * @param prop A valid CSS property.
       * @param value New value to write (`null` or an empty string to remove).
       * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
       *
       * Note that this will apply the provided style value to the host element if this function is called
       * within a host binding function.
       *
       * @codeGenApi
       */


      function ɵɵstyleProp(prop, value, suffix) {
        checkStylingProperty(prop, value, suffix, false);
        return ɵɵstyleProp;
      }
      /**
       * Update a class binding on an element with the provided value.
       *
       * This instruction is meant to handle the `[class.foo]="exp"` case and,
       * therefore, the class binding itself must already be allocated using
       * `styling` within the creation block.
       *
       * @param prop A valid CSS class (only one).
       * @param value A true/false value which will turn the class on or off.
       *
       * Note that this will apply the provided class value to the host element if this function
       * is called within a host binding function.
       *
       * @codeGenApi
       */


      function ɵɵclassProp(className, value) {
        checkStylingProperty(className, value, null, true);
        return ɵɵclassProp;
      }
      /**
       * Update style bindings using an object literal on an element.
       *
       * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
       * When styles are applied to the element they will then be updated with respect to
       * any styles/classes set via `styleProp`. If any styles are set to falsy
       * then they will be removed from the element.
       *
       * Note that the styling instruction will not be applied until `stylingApply` is called.
       *
       * @param styles A key/value style map of the styles that will be applied to the given element.
       *        Any missing styles (that have already been applied to the element beforehand) will be
       *        removed (unset) from the element's styling.
       *
       * Note that this will apply the provided styleMap value to the host element if this function
       * is called within a host binding.
       *
       * @codeGenApi
       */


      function ɵɵstyleMap(styles) {
        checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
      }
      /**
       * Parse text as style and add values to KeyValueArray.
       *
       * This code is pulled out to a separate function so that it can be tree shaken away if it is not
       * needed. It is only referenced from `ɵɵstyleMap`.
       *
       * @param keyValueArray KeyValueArray to add parsed values to.
       * @param text text to parse.
       */


      function styleStringParser(keyValueArray, text) {
        for (var i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
          styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
        }
      }
      /**
       * Update class bindings using an object literal or class-string on an element.
       *
       * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
       * When classes are applied to the element they will then be updated with
       * respect to any styles/classes set via `classProp`. If any
       * classes are set to falsy then they will be removed from the element.
       *
       * Note that the styling instruction will not be applied until `stylingApply` is called.
       * Note that this will the provided classMap value to the host element if this function is called
       * within a host binding.
       *
       * @param classes A key/value map or string of CSS classes that will be added to the
       *        given element. Any missing classes (that have already been applied to the element
       *        beforehand) will be removed (unset) from the element's list of CSS classes.
       *
       * @codeGenApi
       */


      function ɵɵclassMap(classes) {
        checkStylingMap(keyValueArraySet, classStringParser, classes, true);
      }
      /**
       * Parse text as class and add values to KeyValueArray.
       *
       * This code is pulled out to a separate function so that it can be tree shaken away if it is not
       * needed. It is only referenced from `ɵɵclassMap`.
       *
       * @param keyValueArray KeyValueArray to add parsed values to.
       * @param text text to parse.
       */


      function classStringParser(keyValueArray, text) {
        for (var i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
          keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
        }
      }
      /**
       * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
       *
       * @param prop property name.
       * @param value binding value.
       * @param suffix suffix for the property (e.g. `em` or `px`)
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function checkStylingProperty(prop, value, suffix, isClassBased) {
        var lView = getLView();
        var tView = getTView(); // Styling instructions use 2 slots per binding.
        // 1. one for the value / TStylingKey
        // 2. one for the intermittent-value / TStylingRange

        var bindingIndex = incrementBindingIndex(2);

        if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
        }

        if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          var tNode = tView.data[getSelectedIndex()];
          updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
        }
      }
      /**
       * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
       *
       * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
       *        function so that `style` can be processed. This is done for tree shaking purposes.
       * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
       *        have different parsers.)
       * @param value bound value from application
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
        var tView = getTView();
        var bindingIndex = incrementBindingIndex(2);

        if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
        }

        var lView = getLView();

        if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          var tNode = tView.data[getSelectedIndex()];

          if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
            if (ngDevMode) {
              // verify that if we are shadowing then `TData` is appropriately marked so that we skip
              // processing this binding in styling resolution.
              var tStylingKey = tView.data[bindingIndex];
              assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
            } // VE does not concatenate the static portion like we are doing here.
            // Instead VE just ignores the static completely if dynamic binding is present.
            // Because of locality we have already set the static portion because we don't know if there
            // is a dynamic portion until later. If we would ignore the static portion it would look like
            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
            // thing as it would think that the static portion was removed. For this reason we
            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.


            var staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
            ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');

            if (staticPrefix !== null) {
              // We want to make sure that falsy values of `value` become empty strings.
              value = concatStringsWithSpace(staticPrefix, value ? value : '');
            } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
            // This takes over the `[style]` binding. (Same for `[class]`)


            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
          } else {
            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
          }
        }
      }
      /**
       * Determines when the binding is in `hostBindings` section
       *
       * @param tView Current `TView`
       * @param bindingIndex index of binding which we would like if it is in `hostBindings`
       */


      function isInHostBindings(tView, bindingIndex) {
        // All host bindings are placed after the expando section.
        return bindingIndex >= tView.expandoStartIndex;
      }
      /**
       * Collects the necessary information to insert the binding into a linked list of style bindings
       * using `insertTStylingBinding`.
       *
       * @param tView `TView` where the binding linked list will be stored.
       * @param tStylingKey Property/key of the binding.
       * @param bindingIndex Index of binding associated with the `prop`
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
        ngDevMode && assertFirstUpdatePass(tView);
        var tData = tView.data;

        if (tData[bindingIndex + 1] === null) {
          // The above check is necessary because we don't clear first update pass until first successful
          // (no exception) template execution. This prevents the styling instruction from double adding
          // itself to the list.
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          var tNode = tData[getSelectedIndex()];
          ngDevMode && assertDefined(tNode, 'TNode expected');
          var isHostBindings = isInHostBindings(tView, bindingIndex);

          if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
            // If there is a directive which uses `@Input('style')` or `@Input('class')` than
            // we need to neutralize this binding since that directive is shadowing it.
            // We turn this into a noop by setting the key to `false`
            tStylingKey = false;
          }

          tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
          insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
        }
      }
      /**
       * Adds static styling information to the binding if applicable.
       *
       * The linked list of styles not only stores the list and keys, but also stores static styling
       * information on some of the keys. This function determines if the key should contain the styling
       * information and computes it.
       *
       * See `TStylingStatic` for more details.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
        var hostDirectiveDef = getCurrentDirectiveDef(tData);
        var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

        if (hostDirectiveDef === null) {
          // We are in template node.
          // If template node already had styling instruction then it has already collected the static
          // styling and there is no need to collect them again. We know that we are the first styling
          // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
          var isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;

          if (isFirstStylingInstructionInTemplate) {
            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
            // they are already merged and it would not be possible to figure which property belongs where
            // in the priority.
            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.

            residual = null;
          }
        } else {
          // We are in host binding node and there was no binding instruction in template node.
          // This means that we need to compute the residual.
          var directiveStylingLast = tNode.directiveStylingLast;
          var isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;

          if (isFirstStylingInstructionInHostBinding) {
            stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);

            if (residual === null) {
              // - If `null` than either:
              //    - Template styling instruction already ran and it has consumed the static
              //      styling into its `TStylingKey` and so there is no need to update residual. Instead
              //      we need to update the `TStylingKey` associated with the first template node
              //      instruction. OR
              //    - Some other styling instruction ran and determined that there are no residuals
              var templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);

              if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
                // Only recompute if `templateStylingKey` had static values. (If no static value found
                // then there is nothing to do since this operation can only produce less static keys, not
                // more.)
                templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]
                /* unwrap previous statics */
                , isClassBased);
                templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
                setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
              }
            } else {
              // We only need to recompute residual if it is not `null`.
              // - If existing residual (implies there was no template styling). This means that some of
              //   the statics may have moved from the residual to the `stylingKey` and so we have to
              //   recompute.
              // - If `undefined` this is the first time we are running.
              residual = collectResidual(tData, tNode, isClassBased);
            }
          }
        }

        if (residual !== undefined) {
          isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
        }

        return stylingKey;
      }
      /**
       * Retrieve the `TStylingKey` for the template styling instruction.
       *
       * This is needed since `hostBinding` styling instructions are inserted after the template
       * instruction. While the template instruction needs to update the residual in `TNode` the
       * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
       * the template instruction is downstream from the `hostBindings` instructions.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @return `TStylingKey` if found or `undefined` if not found.
       */


      function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
        var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;

        if (getTStylingRangeNext(bindings) === 0) {
          // There does not seem to be a styling instruction in the `template`.
          return undefined;
        }

        return tData[getTStylingRangePrev(bindings)];
      }
      /**
       * Update the `TStylingKey` of the first template instruction in `TNode`.
       *
       * Logically `hostBindings` styling instructions are of lower priority than that of the template.
       * However, they execute after the template styling instructions. This means that they get inserted
       * in front of the template styling instructions.
       *
       * If we have a template styling instruction and a new `hostBindings` styling instruction is
       * executed it means that it may need to steal static fields from the template instruction. This
       * method allows us to update the first template instruction `TStylingKey` with a new value.
       *
       * Assume:
       * ```
       * <div my-dir style="color: red" [style.color]="tmplExp"></div>
       *
       * @Directive({
       *   host: {
       *     'style': 'width: 100px',
       *     '[style.color]': 'dirExp',
       *   }
       * })
       * class MyDir {}
       * ```
       *
       * when `[style.color]="tmplExp"` executes it creates this data structure.
       * ```
       *  ['', 'color', 'color', 'red', 'width', '100px'],
       * ```
       *
       * The reason for this is that the template instruction does not know if there are styling
       * instructions and must assume that there are none and must collect all of the static styling.
       * (both
       * `color' and 'width`)
       *
       * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
       * ```
       *  ['', 'color', 'width', '100px'],  // newly inserted
       *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
       * ```
       *
       * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
       * update it like so:
       * ```
       *  ['', 'color', 'width', '100px'],
       *  ['', 'color', 'color', 'red'],    // UPDATE
       * ```
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param tStylingKey New `TStylingKey` which is replacing the old one.
       */


      function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
        var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
        ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
        tData[getTStylingRangePrev(bindings)] = tStylingKey;
      }
      /**
       * Collect all static values after the current `TNode.directiveStylingLast` index.
       *
       * Collect the remaining styling information which has not yet been collected by an existing
       * styling instruction.
       *
       * @param tData `TData` where the `DirectiveDefs` are stored.
       * @param tNode `TNode` which contains the directive range.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectResidual(tData, tNode, isClassBased) {
        var residual = undefined;
        var directiveEnd = tNode.directiveEnd;
        ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
        // collecting things after the last `hostBindings` directive which had a styling instruction.)

        for (var i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
          var attrs = tData[i].hostAttrs;
          residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
        }

        return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
      }
      /**
       * Collect the static styling information with lower priority than `hostDirectiveDef`.
       *
       * (This is opposite of residual styling.)
       *
       * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
       *        styling. (Or `null` if template styling)
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param stylingKey Existing `TStylingKey` to update or wrap.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
        // We need to loop because there can be directives which have `hostAttrs` but don't have
        // `hostBindings` so this loop catches up to the current directive..
        var currentDirective = null;
        var directiveEnd = tNode.directiveEnd;
        var directiveStylingLast = tNode.directiveStylingLast;

        if (directiveStylingLast === -1) {
          directiveStylingLast = tNode.directiveStart;
        } else {
          directiveStylingLast++;
        }

        while (directiveStylingLast < directiveEnd) {
          currentDirective = tData[directiveStylingLast];
          ngDevMode && assertDefined(currentDirective, 'expected to be defined');
          stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
          if (currentDirective === hostDirectiveDef) break;
          directiveStylingLast++;
        }

        if (hostDirectiveDef !== null) {
          // we only advance the styling cursor if we are collecting data from host bindings.
          // Template executes before host bindings and so if we would update the index,
          // host bindings would not get their statics.
          tNode.directiveStylingLast = directiveStylingLast;
        }

        return stylingKey;
      }
      /**
       * Convert `TAttrs` into `TStylingStatic`.
       *
       * @param stylingKey existing `TStylingKey` to update or wrap.
       * @param attrs `TAttributes` to process.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
        var desiredMarker = isClassBased ? 1
        /* Classes */
        : 2
        /* Styles */
        ;
        var currentMarker = -1
        /* ImplicitAttributes */
        ;

        if (attrs !== null) {
          for (var i = 0; i < attrs.length; i++) {
            var item = attrs[i];

            if (typeof item === 'number') {
              currentMarker = item;
            } else {
              if (currentMarker === desiredMarker) {
                if (!Array.isArray(stylingKey)) {
                  stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
                }

                keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
              }
            }
          }
        }

        return stylingKey === undefined ? null : stylingKey;
      }
      /**
       * Convert user input to `KeyValueArray`.
       *
       * This function takes user input which could be `string`, Object literal, or iterable and converts
       * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
       * where
       * even indexes contain keys and odd indexes contain values for those keys).
       *
       * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
       * independent
       * way.
       * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
       * applied)
       *
       * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
       * difference in linear fashion without the need to allocate any additional data.
       *
       * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
       * which values need to be deleted, over the new `Map` to determine additions, and we would have to
       * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
       *
       * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
       *        function so that `style` can be processed. This is done
       *        for tree shaking purposes.
       * @param stringParser The parser is passed in so that it will be tree shakable. See
       *        `styleStringParser` and `classStringParser`
       * @param value The value to parse/convert to `KeyValueArray`
       */


      function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
        if (value == null
        /*|| value === undefined */
        || value === '') return EMPTY_ARRAY;
        var styleKeyValueArray = [];
        var unwrappedValue = unwrapSafeValue(value);

        if (Array.isArray(unwrappedValue)) {
          for (var i = 0; i < unwrappedValue.length; i++) {
            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
          }
        } else if (typeof unwrappedValue === 'object') {
          for (var key in unwrappedValue) {
            if (unwrappedValue.hasOwnProperty(key)) {
              keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
            }
          }
        } else if (typeof unwrappedValue === 'string') {
          stringParser(styleKeyValueArray, unwrappedValue);
        } else {
          ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
        }

        return styleKeyValueArray;
      }
      /**
       * Set a `value` for a `key`.
       *
       * See: `keyValueArraySet` for details
       *
       * @param keyValueArray KeyValueArray to add to.
       * @param key Style key to add.
       * @param value The value to set.
       */


      function styleKeyValueArraySet(keyValueArray, key, value) {
        keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
      }
      /**
       * Update map based styling.
       *
       * Map based styling could be anything which contains more than one binding. For example `string`,
       * or object literal. Dealing with all of these types would complicate the logic so
       * instead this function expects that the complex input is first converted into normalized
       * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
       * very cheap to compute deltas between the previous and current value.
       *
       * @param tView Associated `TView.data` contains the linked list of binding priorities.
       * @param tNode `TNode` where the binding is located.
       * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
       * @param renderer Renderer to use if any updates.
       * @param oldKeyValueArray Previous value represented as `KeyValueArray`
       * @param newKeyValueArray Current value represented as `KeyValueArray`
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param bindingIndex Binding index of the binding.
       */


      function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
        if (oldKeyValueArray === NO_CHANGE) {
          // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
          oldKeyValueArray = EMPTY_ARRAY;
        }

        var oldIndex = 0;
        var newIndex = 0;
        var oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
        var newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;

        while (oldKey !== null || newKey !== null) {
          ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
          ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
          var oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
          var newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
          var setKey = null;
          var setValue = undefined;

          if (oldKey === newKey) {
            // UPDATE: Keys are equal => new value is overwriting old value.
            oldIndex += 2;
            newIndex += 2;

            if (oldValue !== newValue) {
              setKey = newKey;
              setValue = newValue;
            }
          } else if (newKey === null || oldKey !== null && oldKey < newKey) {
            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
            // `"background" < "color"` so we need to delete `"background"` because it is not found in the
            // new array.
            oldIndex += 2;
            setKey = oldKey;
          } else {
            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
            // `"color" > "background"` so we need to add `color` because it is in new array but not in
            // old array.
            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
            newIndex += 2;
            setKey = newKey;
            setValue = newValue;
          }

          if (setKey !== null) {
            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
          }

          oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
          newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
        }
      }
      /**
       * Update a simple (property name) styling.
       *
       * This function takes `prop` and updates the DOM to that value. The function takes the binding
       * value as well as binding priority into consideration to determine which value should be written
       * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
       * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
       *
       * @param tView Associated `TView.data` contains the linked list of binding priorities.
       * @param tNode `TNode` where the binding is located.
       * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
       * @param renderer Renderer to use if any updates.
       * @param prop Either style property name or a class name.
       * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param bindingIndex Binding index of the binding.
       */


      function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
        if (!(tNode.type & 3
        /* AnyRNode */
        )) {
          // It is possible to have styling on non-elements (such as ng-container).
          // This is rare, but it does happen. In such a case, just ignore the binding.
          return;
        }

        var tData = tView.data;
        var tRange = tData[bindingIndex + 1];
        var higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;

        if (!isStylingValuePresent(higherPriorityValue)) {
          // We don't have a next duplicate, or we did not find a duplicate value.
          if (!isStylingValuePresent(value)) {
            // We should delete current value or restore to lower priority value.
            if (getTStylingRangePrevDuplicate(tRange)) {
              // We have a possible prev duplicate, let's retrieve it.
              value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
            }
          }

          var rNode = getNativeByIndex(getSelectedIndex(), lView);
          applyStyling(renderer, isClassBased, rNode, prop, value);
        }
      }
      /**
       * Search for styling value with higher priority which is overwriting current value, or a
       * value of lower priority to which we should fall back if the value is `undefined`.
       *
       * When value is being applied at a location, related values need to be consulted.
       * - If there is a higher priority binding, we should be using that one instead.
       *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
       *   requires that we check `exp2` to see if it is set to value other than `undefined`.
       * - If there is a lower priority binding and we are changing to `undefined`
       *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
       *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
       *
       * NOTE: The styling stores two values.
       * 1. The raw value which came from the application is stored at `index + 0` location. (This value
       *    is used for dirty checking).
       * 2. The normalized value is stored at `index + 1`.
       *
       * @param tData `TData` used for traversing the priority.
       * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
       *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
       *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
       *   - `null` search prev and go all the way to end. Return last value where
       *     `isStylingValuePresent(value)` is true.
       * @param lView `LView` used for retrieving the actual values.
       * @param prop Property which we are interested in.
       * @param index Starting index in the linked list of styling bindings where the search should start.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
        // `TNode` to use for resolving static styling. Also controls search direction.
        //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
        //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
        //   - `null` search prev and go all the way to end. Return last value where
        //     `isStylingValuePresent(value)` is true.
        var isPrevDirection = tNode === null;
        var value = undefined;

        while (index > 0) {
          var rawKey = tData[index];
          var containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.

          var key = containsStatics ? rawKey[1] : rawKey;
          var isStylingMap = key === null;
          var valueAtLViewIndex = lView[index + 1];

          if (valueAtLViewIndex === NO_CHANGE) {
            // In firstUpdatePass the styling instructions create a linked list of styling.
            // On subsequent passes it is possible for a styling instruction to try to read a binding
            // which
            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
            // we have `undefined` (or empty array in case of styling-map instruction) instead. This
            // allows the resolution to apply the value (which may later be overwritten when the
            // binding actually executes.)
            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;
          }

          var currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;

          if (containsStatics && !isStylingValuePresent(currentValue)) {
            currentValue = keyValueArrayGet(rawKey, prop);
          }

          if (isStylingValuePresent(currentValue)) {
            value = currentValue;

            if (isPrevDirection) {
              return value;
            }
          }

          var tRange = tData[index + 1];
          index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
        }

        if (tNode !== null) {
          // in case where we are going in next direction AND we did not find anything, we need to
          // consult residual styling
          var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

          if (residual != null
          /** OR residual !=== undefined */
          ) {
              value = keyValueArrayGet(residual, prop);
            }
        }

        return value;
      }
      /**
       * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
       * resolution should be used.)
       *
       * @param value Binding style value.
       */


      function isStylingValuePresent(value) {
        // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
        // have an opinion as to what this binding should be and you should consult other bindings by
        // priority to determine the valid value.
        // This is extracted into a single function so that we have a single place to control this.
        return value !== undefined;
      }
      /**
       * Normalizes and/or adds a suffix to the value.
       *
       * If value is `null`/`undefined` no suffix is added
       * @param value
       * @param suffix
       */


      function normalizeSuffix(value, suffix) {
        if (value == null
        /** || value === undefined */
        ) {// do nothing
          } else if (typeof suffix === 'string') {
          value = value + suffix;
        } else if (typeof value === 'object') {
          value = stringify(unwrapSafeValue(value));
        }

        return value;
      }
      /**
       * Tests if the `TNode` has input shadow.
       *
       * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
       * `@Input('class')` as input.
       *
       * @param tNode `TNode` which we would like to see if it has shadow.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function hasStylingInputShadow(tNode, isClassBased) {
        return (tNode.flags & (isClassBased ? 16
        /* hasClassInput */
        : 32
        /* hasStyleInput */
        )) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create static text node
       *
       * @param index Index of the node in the data array
       * @param value Static string value to write.
       *
       * @codeGenApi
       */


      function ɵɵtext(index) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        var tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1
        /* Text */
        , value, null) : tView.data[adjustedIndex];
        var textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);
        appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.

        setCurrentTNode(tNode, false);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update text content with a lone bound value
       *
       * Used when a text node has 1 interpolated value in it, an no additional text
       * surrounds that interpolated value:
       *
       * ```html
       * <div>{{v0}}</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate(v0);
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate(v0) {
        ɵɵtextInterpolate1('', v0, '');
        return ɵɵtextInterpolate;
      }
      /**
       *
       * Update text content with single bound value surrounded by other text.
       *
       * Used when a text node has 1 interpolated value in it:
       *
       * ```html
       * <div>prefix{{v0}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate1('prefix', v0, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate1(prefix, v0, suffix) {
        var lView = getLView();
        var interpolated = interpolation1(lView, prefix, v0, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate1;
      }
      /**
       *
       * Update text content with 2 bound values surrounded by other text.
       *
       * Used when a text node has 2 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate2;
      }
      /**
       *
       * Update text content with 3 bound values surrounded by other text.
       *
       * Used when a text node has 3 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate3(
       * 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate3;
      }
      /**
       *
       * Update text content with 4 bound values surrounded by other text.
       *
       * Used when a text node has 4 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate4(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see ɵɵtextInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate4;
      }
      /**
       *
       * Update text content with 5 bound values surrounded by other text.
       *
       * Used when a text node has 5 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate5(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate5;
      }
      /**
       *
       * Update text content with 6 bound values surrounded by other text.
       *
       * Used when a text node has 6 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate6(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change. @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate6;
      }
      /**
       *
       * Update text content with 7 bound values surrounded by other text.
       *
       * Used when a text node has 7 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate7(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate7;
      }
      /**
       *
       * Update text content with 8 bound values surrounded by other text.
       *
       * Used when a text node has 8 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate8(
       *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolate8;
      }
      /**
       * Update text content with 9 or more bound values other surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolateV(
       *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       *
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵtextInterpolateV(values) {
        var lView = getLView();
        var interpolated = interpolationV(lView, values);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return ɵɵtextInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated class on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div class="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate1(prefix, v0, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate3(
       * 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate4(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate5(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate6(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate7(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate8(
       *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       * Update an interpolated class on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolateV(
       *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @codeGenApi
       */


      function ɵɵclassMapInterpolateV(values) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated style on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div style="key: {{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate1(prefix, v0, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate3(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate4(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate5(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
       *             key5: {{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate6(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *             key6: {{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate7(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    '; key6: ', v6, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *             key6: {{v6}}; key7: {{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate8(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    '; key6: ', v6, '; key7: ', v7, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       * Update an interpolated style on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolateV(
       *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
       * @codeGenApi
       */


      function ɵɵstyleMapInterpolateV(values) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);
        ɵɵstyleMap(interpolatedValue);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated style property on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate1;
      }
      /**
       *
       * Update an interpolated style property on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate2;
      }
      /**
       *
       * Update an interpolated style property on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate3;
      }
      /**
       *
       * Update an interpolated style property on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate4;
      }
      /**
       *
       * Update an interpolated style property on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate5;
      }
      /**
       *
       * Update an interpolated style property on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate6;
      }
      /**
       *
       * Update an interpolated style property on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate7(
       *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate7;
      }
      /**
       *
       * Update an interpolated style property on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
       * '-', v7, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolate8;
      }
      /**
       * Update an interpolated style property on an element with 9 or more bound values surrounded by
       * text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
       * </div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolateV(
       *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`..
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return ɵɵstylePropInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a property on a host element. Only applies to native node properties, not inputs.
       *
       * Operates on the element selected by index via the {@link select} instruction.
       *
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       * @returns This function returns itself so that it may be chained
       * (e.g. `property('name', ctx.name)('title', ctx.title)`)
       *
       * @codeGenApi
       */


      function ɵɵhostProperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return ɵɵhostProperty;
      }
      /**
       * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
       *
       * This instruction is for compatibility purposes and is designed to ensure that a
       * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
       * the component's renderer. Normally all host bindings are evaluated with the parent
       * component's renderer, but, in the case of animation @triggers, they need to be
       * evaluated with the sub component's renderer (because that's where the animation
       * triggers are defined).
       *
       * Do not use this instruction as a replacement for `elementProperty`. This instruction
       * only exists to ensure compatibility with the ViewEngine's host binding behavior.
       *
       * @param index The index of the element to update in the data array
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       *
       * @codeGenApi
       */


      function ɵɵsyntheticHostProperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          var currentDef = getCurrentDirectiveDef(tView.data);
          var renderer = loadComponentRenderer(currentDef, tNode, lView);
          elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return ɵɵsyntheticHostProperty;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
       */


      if (typeof ngI18nClosureMode === 'undefined') {
        // These property accesses can be ignored because ngI18nClosureMode will be set to false
        // when optimizing code and the whole if statement will be dropped.
        // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
        // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
        (function () {
          // tslint:disable-next-line:no-toplevel-property-access
          _global['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.
          // tslint:disable-next-line:no-toplevel-property-access
          typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
        })();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // THIS CODE IS GENERATED - DO NOT MODIFY
      // See angular/tools/gulp-tasks/cldr/extract.js


      var u = undefined;

      function plural(n) {
        var i = Math.floor(Math.abs(n)),
            v = n.toString().replace(/^[^.]*\.?/, '').length;
        if (i === 1 && v === 0) return 1;
        return 5;
      }

      var localeEn = ['en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u], [['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']], u, [['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']], u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0], ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'], ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \'at\' {0}', u], ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'], ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], 'USD', '$', 'US Dollar', {}, 'ltr', plural];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This const is used to store the locale data registered with `registerLocaleData`
       */

      var LOCALE_DATA = {};
      /**
       * Register locale data to be used internally by Angular. See the
       * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
       *
       * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
       */

      function registerLocaleData(data, localeId, extraData) {
        if (typeof localeId !== 'string') {
          extraData = localeId;
          localeId = data[LocaleDataIndex.LocaleId];
        }

        localeId = localeId.toLowerCase().replace(/_/g, '-');
        LOCALE_DATA[localeId] = data;

        if (extraData) {
          LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
        }
      }
      /**
       * Finds the locale data for a given locale.
       *
       * @param locale The locale code.
       * @returns The locale data.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function findLocaleData(locale) {
        var normalizedLocale = normalizeLocale(locale);
        var match = getLocaleData(normalizedLocale);

        if (match) {
          return match;
        } // let's try to find a parent locale


        var parentLocale = normalizedLocale.split('-')[0];
        match = getLocaleData(parentLocale);

        if (match) {
          return match;
        }

        if (parentLocale === 'en') {
          return localeEn;
        }

        throw new Error("Missing locale data for the locale \"".concat(locale, "\"."));
      }
      /**
       * Retrieves the default currency code for the given locale.
       *
       * The default is defined as the first currency which is still in use.
       *
       * @param locale The code of the locale whose currency code we want.
       * @returns The code of the default currency for the given locale.
       *
       */


      function getLocaleCurrencyCode(locale) {
        var data = findLocaleData(locale);
        return data[LocaleDataIndex.CurrencyCode] || null;
      }
      /**
       * Retrieves the plural function used by ICU expressions to determine the plural case to use
       * for a given locale.
       * @param locale A locale code for the locale format rules to use.
       * @returns The plural function for the locale.
       * @see `NgPlural`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function getLocalePluralCase(locale) {
        var data = findLocaleData(locale);
        return data[LocaleDataIndex.PluralCase];
      }
      /**
       * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
       * or from the global `ng.common.locale`.
       */


      function getLocaleData(normalizedLocale) {
        if (!(normalizedLocale in LOCALE_DATA)) {
          LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
        }

        return LOCALE_DATA[normalizedLocale];
      }
      /**
       * Helper function to remove all the locale data from `LOCALE_DATA`.
       */


      function unregisterAllLocaleData() {
        LOCALE_DATA = {};
      }
      /**
       * Index of each type of locale data from the locale data array
       */


      var LocaleDataIndex;

      (function (LocaleDataIndex) {
        LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
        LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
        LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
        LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
        LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
        LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
        LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
        LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
        LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
        LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
        LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
        LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
        LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
        LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
        LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
        LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
        LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
        LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
        LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
        LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
        LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
        LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
      })(LocaleDataIndex || (LocaleDataIndex = {}));
      /**
       * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
       */


      function normalizeLocale(locale) {
        return locale.toLowerCase().replace(/_/g, '-');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
      /**
       * Returns the plural case based on the locale
       */

      function getPluralCase(value, locale) {
        var plural = getLocalePluralCase(locale)(parseInt(value, 10));
        var result = pluralMapping[plural];
        return result !== undefined ? result : 'other';
      }
      /**
       * The locale id that the application is using by default (for translations and ICU expressions).
       */


      var DEFAULT_LOCALE_ID = 'en-US';
      /**
       * USD currency code that the application uses by default for CurrencyPipe when no
       * DEFAULT_CURRENCY_CODE is provided.
       */

      var USD_CURRENCY_CODE = 'USD';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks that the next string is an element name.
       *
       * See `I18nMutateOpCodes` documentation.
       */

      var ELEMENT_MARKER = {
        marker: 'element'
      };
      /**
       * Marks that the next string is comment text need for ICU.
       *
       * See `I18nMutateOpCodes` documentation.
       */

      var ICU_MARKER = {
        marker: 'ICU'
      };
      /**
       * See `I18nCreateOpCodes`
       */

      var I18nCreateOpCode;

      (function (I18nCreateOpCode) {
        /**
         * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and
         * `COMMENT`.
         */
        I18nCreateOpCode[I18nCreateOpCode["SHIFT"] = 2] = "SHIFT";
        /**
         * Should the node be appended to parent imedditatly after creation.
         */

        I18nCreateOpCode[I18nCreateOpCode["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
        /**
         * If set the node should be comment (rather than a text) node.
         */

        I18nCreateOpCode[I18nCreateOpCode["COMMENT"] = 2] = "COMMENT";
      })(I18nCreateOpCode || (I18nCreateOpCode = {})); // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$6 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The locale id that the application is currently using (for translations and ICU expressions).
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       */

      var LOCALE_ID = DEFAULT_LOCALE_ID;
      /**
       * Sets the locale id that will be used for translations and ICU expressions.
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       *
       * @param localeId
       */

      function setLocaleId(localeId) {
        assertDefined(localeId, "Expected localeId to be defined");

        if (typeof localeId === 'string') {
          LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
        }
      }
      /**
       * Gets the locale id that will be used for translations and ICU expressions.
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       */


      function getLocaleId() {
        return LOCALE_ID;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * takes `TNode.insertBeforeIndex` into account.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
        var tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
        var insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;

        if (insertBeforeIndex === null) {
          return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
        } else {
          ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
          return unwrapRNode(lView[insertBeforeIndex]);
        }
      }
      /**
       * Process `TNode.insertBeforeIndex` by adding i18n text nodes.
       *
       * See `TNode.insertBeforeIndex`
       */


      function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
        var tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;

        if (Array.isArray(tNodeInsertBeforeIndex)) {
          // An array indicates that there are i18n nodes that need to be added as children of this
          // `childRNode`. These i18n nodes were created before this `childRNode` was available and so
          // only now can be added. The first element of the array is the normal index where we should
          // insert the `childRNode`. Additional elements are the extra nodes to be added as children of
          // `childRNode`.
          ngDevMode && assertDomNode(childRNode);
          var i18nParent = childRNode;
          var anchorRNode = null;

          if (!(childTNode.type & 3
          /* AnyRNode */
          )) {
            anchorRNode = i18nParent;
            i18nParent = parentRElement;
          }

          if (i18nParent !== null && (childTNode.flags & 2
          /* isComponentHost */
          ) === 0) {
            for (var i = 1; i < tNodeInsertBeforeIndex.length; i++) {
              // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.
              // see `assertDomNode` below.
              var i18nChild = lView[tNodeInsertBeforeIndex[i]];
              nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
            }
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list
       * `tNode.insertBeforeIndex`.
       *
       * Things to keep in mind:
       * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the
       *    `ɵɵi18nStart` instruction.
       * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by
       *    `ɵɵelementStart` instruction.
       * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a
       *    smaller index `TNode` is guaranteed to be created before a larger one)
       *
       * We use the above three invariants to determine `TNode.insertBeforeIndex`.
       *
       * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,
       * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that
       * the next node is not yet created and therefore we can't insert in front of it.
       *
       * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't
       *        know if there will be further `TNode`s inserted after.)
       * Rule2: If `previousTNode` is created after the `tNode` being inserted, then
       *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check
       *        previous to see if we can update its `insertBeforeTNode`)
       *
       * See `TNode.insertBeforeIndex` for more context.
       *
       * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in
       *     reverse order. (If `TNode` would have `previous` this would not be necessary.)
       * @param newTNode A TNode to add to the `previousTNodes` list.
       */


      function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
        // Start with Rule1
        ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');
        previousTNodes.push(newTNode);

        if (previousTNodes.length > 1) {
          for (var i = previousTNodes.length - 2; i >= 0; i--) {
            var existingTNode = previousTNodes[i]; // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.
            // It is safe to ignore them.

            if (!isI18nText(existingTNode)) {
              if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
                // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)
                // then add the `insertBeforeIndex`.
                setInsertBeforeIndex(existingTNode, newTNode.index);
              }
            }
          }
        }
      }

      function isI18nText(tNode) {
        return !(tNode.type & 64
        /* Placeholder */
        );
      }

      function isNewTNodeCreatedBefore(existingTNode, newTNode) {
        return isI18nText(newTNode) || existingTNode.index > newTNode.index;
      }

      function getInsertBeforeIndex(tNode) {
        var index = tNode.insertBeforeIndex;
        return Array.isArray(index) ? index[0] : index;
      }

      function setInsertBeforeIndex(tNode, value) {
        var index = tNode.insertBeforeIndex;

        if (Array.isArray(index)) {
          // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`
          index[0] = value;
        } else {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          tNode.insertBeforeIndex = value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieve `TIcu` at a given `index`.
       *
       * The `TIcu` can be stored either directly (if it is nested ICU) OR
       * it is stored inside tho `TIcuContainer` if it is top level ICU.
       *
       * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
       * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
       * expressed (parent ICU may have selected a case which does not contain it.)
       *
       * @param tView Current `TView`.
       * @param index Index where the value should be read from.
       */


      function getTIcu(tView, index) {
        var value = tView.data[index];
        if (value === null || typeof value === 'string') return null;

        if (ngDevMode && !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {
          throwError('We expect to get \'null\'|\'TIcu\'|\'TIcuContainer\', but got: ' + value);
        } // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be
        // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it
        // will be just two cases which fits into the browser inline cache (inline cache can take up to
        // 4)


        var tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;
        ngDevMode && assertTIcu(tIcu);
        return tIcu;
      }
      /**
       * Store `TIcu` at a give `index`.
       *
       * The `TIcu` can be stored either directly (if it is nested ICU) OR
       * it is stored inside tho `TIcuContainer` if it is top level ICU.
       *
       * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
       * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
       * expressed (parent ICU may have selected a case which does not contain it.)
       *
       * @param tView Current `TView`.
       * @param index Index where the value should be stored at in `Tview.data`
       * @param tIcu The TIcu to store.
       */


      function setTIcu(tView, index, tIcu) {
        var tNode = tView.data[index];
        ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \'null\'|\'TIcuContainer\'');

        if (tNode === null) {
          tView.data[index] = tIcu;
        } else {
          ngDevMode && assertTNodeType(tNode, 32
          /* Icu */
          );
          tNode.value = tIcu;
        }
      }
      /**
       * Set `TNode.insertBeforeIndex` taking the `Array` into account.
       *
       * See `TNode.insertBeforeIndex`
       */


      function setTNodeInsertBeforeIndex(tNode, index) {
        ngDevMode && assertTNode(tNode);
        var insertBeforeIndex = tNode.insertBeforeIndex;

        if (insertBeforeIndex === null) {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          insertBeforeIndex = tNode.insertBeforeIndex = [null
          /* may be updated to number later */
          , index];
        } else {
          assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');
          insertBeforeIndex.push(index);
        }
      }
      /**
       * Create `TNode.type=TNodeType.Placeholder` node.
       *
       * See `TNodeType.Placeholder` for more information.
       */


      function createTNodePlaceholder(tView, previousTNodes, index) {
        var tNode = createTNodeAtIndex(tView, index, 64
        /* Placeholder */
        , null, null);
        addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
        return tNode;
      }
      /**
       * Returns current ICU case.
       *
       * ICU cases are stored as index into the `TIcu.cases`.
       * At times it is necessary to communicate that the ICU case just switched and that next ICU update
       * should update all bindings regardless of the mask. In such a case the we store negative numbers
       * for cases which have just been switched. This function removes the negative flag.
       */


      function getCurrentICUCaseIndex(tIcu, lView) {
        var currentCase = lView[tIcu.currentCaseLViewIndex];
        return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
      }

      function getParentFromIcuCreateOpCode(mergedCode) {
        return mergedCode >>> 17
        /* SHIFT_PARENT */
        ;
      }

      function getRefFromIcuCreateOpCode(mergedCode) {
        return (mergedCode & 131070
        /* MASK_REF */
        ) >>> 1
        /* SHIFT_REF */
        ;
      }

      function getInstructionFromIcuCreateOpCode(mergedCode) {
        return mergedCode & 1
        /* MASK_INSTRUCTION */
        ;
      }

      function icuCreateOpCode(opCode, parentIdx, refIdx) {
        ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');
        ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');
        return opCode | parentIdx << 17
        /* SHIFT_PARENT */
        | refIdx << 1
        /* SHIFT_REF */
        ;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Keep track of which input bindings in `ɵɵi18nExp` have changed.
       *
       * This is used to efficiently update expressions in i18n only when the corresponding input has
       * changed.
       *
       * 1) Each bit represents which of the `ɵɵi18nExp` has changed.
       * 2) There are 32 bits allowed in JS.
       * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more
       * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means
       * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare
       * so in practice it should not be an issue.)
       */


      var changeMask = 0;
      /**
       * Keeps track of which bit needs to be updated in `changeMask`
       *
       * This value gets incremented on every call to `ɵɵi18nExp`
       */

      var changeMaskCounter = 0;
      /**
       * Keep track of which input bindings in `ɵɵi18nExp` have changed.
       *
       * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.
       *
       * @param hasChange did `ɵɵi18nExp` detect a change.
       */

      function setMaskBit(hasChange) {
        if (hasChange) {
          changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
        }

        changeMaskCounter++;
      }

      function applyI18n(tView, lView, index) {
        if (changeMaskCounter > 0) {
          ngDevMode && assertDefined(tView, "tView should be defined");
          var tI18n = tView.data[index]; // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`

          var updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
          var bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
          applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
        } // Reset changeMask & maskBit to default for the next update cycle


        changeMask = 0;
        changeMaskCounter = 0;
      }
      /**
       * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.
       *
       * Creates text (and comment) nodes which are internationalized.
       *
       * @param lView Current lView
       * @param createOpCodes Set of op-codes to apply
       * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is
       *     a root node.
       * @param insertInFrontOf DOM node that should be used as an anchor.
       */


      function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
        var renderer = lView[RENDERER];

        for (var i = 0; i < createOpCodes.length; i++) {
          var opCode = createOpCodes[i++];
          var text = createOpCodes[i];
          var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          var index = opCode >>> I18nCreateOpCode.SHIFT;
          var rNode = lView[index];

          if (rNode === null) {
            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a
            // case which was already instantiated, no need to create new DOM nodes.
            rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);
          }

          if (appendNow && parentRNode !== null) {
            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
          }
        }
      }
      /**
       * Apply `I18nMutateOpCodes` OpCodes.
       *
       * @param tView Current `TView`
       * @param mutableOpCodes Mutable OpCodes to process
       * @param lView Current `LView`
       * @param anchorRNode place where the i18n node should be inserted.
       */


      function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        var renderer = lView[RENDERER]; // `rootIdx` represents the node into which all inserts happen.

        var rootIdx = null; // `rootRNode` represents the real node into which we insert. This can be different from
        // `lView[rootIdx]` if we have projection.
        //  - null we don't have a parent (as can be the case in when we are inserting into a root of
        //    LView which has no parent.)
        //  - `RElement` The element representing the root after taking projection into account.

        var rootRNode;

        for (var i = 0; i < mutableOpCodes.length; i++) {
          var opCode = mutableOpCodes[i];

          if (typeof opCode == 'string') {
            var textNodeIndex = mutableOpCodes[++i];

            if (lView[textNodeIndex] === null) {
              ngDevMode && ngDevMode.rendererCreateTextNode++;
              ngDevMode && assertIndexInRange(lView, textNodeIndex);
              lView[textNodeIndex] = createTextNode(renderer, opCode);
            }
          } else if (typeof opCode == 'number') {
            switch (opCode & 1
            /* MASK_INSTRUCTION */
            ) {
              case 0
              /* AppendChild */
              :
                var parentIdx = getParentFromIcuCreateOpCode(opCode);

                if (rootIdx === null) {
                  // The first operation should save the `rootIdx` because the first operation
                  // must insert into the root. (Only subsequent operations can insert into a dynamic
                  // parent)
                  rootIdx = parentIdx;
                  rootRNode = nativeParentNode(renderer, anchorRNode);
                }

                var insertInFrontOf = void 0;
                var parentRNode = void 0;

                if (parentIdx === rootIdx) {
                  insertInFrontOf = anchorRNode;
                  parentRNode = rootRNode;
                } else {
                  insertInFrontOf = null;
                  parentRNode = unwrapRNode(lView[parentIdx]);
                } // FIXME(misko): Refactor with `processI18nText`


                if (parentRNode !== null) {
                  // This can happen if the `LView` we are adding to is not attached to a parent `LView`.
                  // In such a case there is no "root" we can attach to. This is fine, as we still need to
                  // create the elements. When the `LView` gets later added to a parent these "root" nodes
                  // get picked up and added.
                  ngDevMode && assertDomNode(parentRNode);
                  var refIdx = getRefFromIcuCreateOpCode(opCode);
                  ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref'); // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n
                  // which can't have components.

                  var child = lView[refIdx];
                  ngDevMode && assertDomNode(child);
                  nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
                  var tIcu = getTIcu(tView, refIdx);

                  if (tIcu !== null && typeof tIcu === 'object') {
                    // If we just added a comment node which has ICU then that ICU may have already been
                    // rendered and therefore we need to re-add it here.
                    ngDevMode && assertTIcu(tIcu);
                    var caseIndex = getCurrentICUCaseIndex(tIcu, lView);

                    if (caseIndex !== null) {
                      applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
                    }
                  }
                }

                break;

              case 1
              /* Attr */
              :
                var elementNodeIndex = opCode >>> 1
                /* SHIFT_REF */
                ;
                var attrName = mutableOpCodes[++i];
                var attrValue = mutableOpCodes[++i]; // This code is used for ICU expressions only, since we don't support
                // directives/components in ICUs, we don't need to worry about inputs here

                setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
                break;

              default:
                throw new Error("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
            }
          } else {
            switch (opCode) {
              case ICU_MARKER:
                var commentValue = mutableOpCodes[++i];
                var commentNodeIndex = mutableOpCodes[++i];

                if (lView[commentNodeIndex] === null) {
                  ngDevMode && assertEqual(typeof commentValue, 'string', "Expected \"".concat(commentValue, "\" to be a comment node value"));
                  ngDevMode && ngDevMode.rendererCreateComment++;
                  ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
                  var commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

                  attachPatchData(commentRNode, lView);
                }

                break;

              case ELEMENT_MARKER:
                var tagName = mutableOpCodes[++i];
                var _elementNodeIndex = mutableOpCodes[++i];

                if (lView[_elementNodeIndex] === null) {
                  ngDevMode && assertEqual(typeof tagName, 'string', "Expected \"".concat(tagName, "\" to be an element node tag name"));
                  ngDevMode && ngDevMode.rendererCreateElement++;
                  ngDevMode && assertIndexInExpandoRange(lView, _elementNodeIndex);
                  var elementRNode = lView[_elementNodeIndex] = createElementNode(renderer, tagName, null); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

                  attachPatchData(elementRNode, lView);
                }

                break;

              default:
                ngDevMode && throwError("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
            }
          }
        }
      }
      /**
       * Apply `I18nUpdateOpCodes` OpCodes
       *
       * @param tView Current `TView`
       * @param lView Current `LView`
       * @param updateOpCodes OpCodes to process
       * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
       * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
       *     `bindingsStartIndex`)
       */


      function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {
        for (var i = 0; i < updateOpCodes.length; i++) {
          // bit code to check if we should apply the next update
          var checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes

          var skipCodes = updateOpCodes[++i];

          if (checkBit & changeMask) {
            // The value has been updated since last checked
            var value = '';

            for (var j = i + 1; j <= i + skipCodes; j++) {
              var opCode = updateOpCodes[j];

              if (typeof opCode == 'string') {
                value += opCode;
              } else if (typeof opCode == 'number') {
                if (opCode < 0) {
                  // Negative opCode represent `i18nExp` values offset.
                  value += renderStringify(lView[bindingsStartIndex - opCode]);
                } else {
                  var nodeIndex = opCode >>> 2
                  /* SHIFT_REF */
                  ;

                  switch (opCode & 3
                  /* MASK_OPCODE */
                  ) {
                    case 1
                    /* Attr */
                    :
                      var propName = updateOpCodes[++j];
                      var sanitizeFn = updateOpCodes[++j];
                      var tNodeOrTagName = tView.data[nodeIndex];
                      ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');

                      if (typeof tNodeOrTagName === 'string') {
                        // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does
                        // not have TNode), in which case we know that there are no directives, and hence
                        // we use attribute setting.
                        setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                      } else {
                        elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                      }

                      break;

                    case 0
                    /* Text */
                    :
                      var rText = lView[nodeIndex];
                      rText !== null && updateTextNode(lView[RENDERER], rText, value);
                      break;

                    case 2
                    /* IcuSwitch */
                    :
                      applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                      break;

                    case 3
                    /* IcuUpdate */
                    :
                      applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                      break;
                  }
                }
              }
            }
          } else {
            var _opCode = updateOpCodes[i + 1];

            if (_opCode > 0 && (_opCode & 3
            /* MASK_OPCODE */
            ) === 3
            /* IcuUpdate */
            ) {
                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but
                // we still need to execute `icuUpdateCase` because the case has changed recently due to
                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in
                // pairs.)
                var _nodeIndex = _opCode >>> 2
                /* SHIFT_REF */
                ;

                var tIcu = getTIcu(tView, _nodeIndex);
                var currentIndex = lView[tIcu.currentCaseLViewIndex];

                if (currentIndex < 0) {
                  applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
                }
              }
          }

          i += skipCodes;
        }
      }
      /**
       * Apply OpCodes associated with updating an existing ICU.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
       * @param lView Current `LView`
       */


      function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
        ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
        var activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

        if (activeCaseIndex !== null) {
          var mask = changeMask;

          if (activeCaseIndex < 0) {
            // Clear the flag.
            // Negative number means that the ICU was freshly created and we need to force the update.
            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex; // -1 is same as all bits on, which simulates creation since it marks all bits dirty

            mask = -1;
          }

          applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
        }
      }
      /**
       * Apply OpCodes associated with switching a case on ICU.
       *
       * This involves tearing down existing case and than building up a new case.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param lView Current `LView`
       * @param value Value of the case to update to.
       */


      function applyIcuSwitchCase(tView, tIcu, lView, value) {
        // Rebuild a new case for this ICU
        var caseIndex = getCaseIndex(tIcu, value);
        var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

        if (activeCaseIndex !== caseIndex) {
          applyIcuSwitchCaseRemove(tView, tIcu, lView);
          lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;

          if (caseIndex !== null) {
            // Add the nodes for the new case
            var anchorRNode = lView[tIcu.anchorIdx];

            if (anchorRNode) {
              ngDevMode && assertDomNode(anchorRNode);
              applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
            }
          }
        }
      }
      /**
       * Apply OpCodes associated with tearing ICU case.
       *
       * This involves tearing down existing case and than building up a new case.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param lView Current `LView`
       */


      function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
        var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

        if (activeCaseIndex !== null) {
          var removeCodes = tIcu.remove[activeCaseIndex];

          for (var i = 0; i < removeCodes.length; i++) {
            var nodeOrIcuIndex = removeCodes[i];

            if (nodeOrIcuIndex > 0) {
              // Positive numbers are `RNode`s.
              var rNode = getNativeByIndex(nodeOrIcuIndex, lView);
              rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
            } else {
              // Negative numbers are ICUs
              applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
            }
          }
        }
      }
      /**
       * Returns the index of the current case of an ICU expression depending on the main binding value
       *
       * @param icuExpression
       * @param bindingValue The value of the main binding used by this ICU expression
       */


      function getCaseIndex(icuExpression, bindingValue) {
        var index = icuExpression.cases.indexOf(bindingValue);

        if (index === -1) {
          switch (icuExpression.type) {
            case 1
            /* plural */
            :
              {
                var resolvedCase = getPluralCase(bindingValue, getLocaleId());
                index = icuExpression.cases.indexOf(resolvedCase);

                if (index === -1 && resolvedCase !== 'other') {
                  index = icuExpression.cases.indexOf('other');
                }

                break;
              }

            case 0
            /* select */
            :
              {
                index = icuExpression.cases.indexOf('other');
                break;
              }
          }
        }

        return index === -1 ? null : index;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function loadIcuContainerVisitor() {
        var _stack = [];

        var _index = -1;

        var _lView;

        var _removes;
        /**
         * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`
         * to determine which root belong to the ICU.
         *
         * Example of usage.
         * ```
         * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);
         * let rNode: RNode|null;
         * while(rNode = nextRNode()) {
         *   console.log(rNode);
         * }
         * ```
         *
         * @param tIcuContainerNode Current `TIcuContainerNode`
         * @param lView `LView` where the `RNode`s should be looked up.
         */


        function icuContainerIteratorStart(tIcuContainerNode, lView) {
          _lView = lView;

          while (_stack.length) {
            _stack.pop();
          }

          ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
          enterIcu(tIcuContainerNode.value, lView);
          return icuContainerIteratorNext;
        }

        function enterIcu(tIcu, lView) {
          _index = 0;
          var currentCase = getCurrentICUCaseIndex(tIcu, lView);

          if (currentCase !== null) {
            ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
            _removes = tIcu.remove[currentCase];
          } else {
            _removes = EMPTY_ARRAY$1;
          }
        }

        function icuContainerIteratorNext() {
          if (_index < _removes.length) {
            var removeOpCode = _removes[_index++];
            ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');

            if (removeOpCode > 0) {
              var rNode = _lView[removeOpCode];
              ngDevMode && assertDomNode(rNode);
              return rNode;
            } else {
              _stack.push(_index, _removes); // ICUs are represented by negative indices


              var tIcuIndex = ~removeOpCode;
              var tIcu = _lView[TVIEW].data[tIcuIndex];
              ngDevMode && assertTIcu(tIcu);
              enterIcu(tIcu, _lView);
              return icuContainerIteratorNext();
            }
          } else {
            if (_stack.length === 0) {
              return null;
            } else {
              _removes = _stack.pop();
              _index = _stack.pop();
              return icuContainerIteratorNext();
            }
          }
        }

        return icuContainerIteratorStart;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Converts `I18nCreateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.
       * This function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nCreateOpCodes` if attached as a method.
       * @param opcodes `I18nCreateOpCodes` if invoked as a function.
       */


      function i18nCreateOpCodesToString(opcodes) {
        var createOpCodes = opcodes || (Array.isArray(this) ? this : []);
        var lines = [];

        for (var i = 0; i < createOpCodes.length; i++) {
          var opCode = createOpCodes[i++];
          var text = createOpCodes[i];
          var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          var index = opCode >>> I18nCreateOpCode.SHIFT;
          lines.push("lView[".concat(index, "] = document.").concat(isComment ? 'createComment' : 'createText', "(").concat(JSON.stringify(text), ");"));

          if (appendNow) {
            lines.push("parent.appendChild(lView[".concat(index, "]);"));
          }
        }

        return lines;
      }
      /**
       * Converts `I18nUpdateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
       * This function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nUpdateOpCodes` if attached as a method.
       * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
       */


      function i18nUpdateOpCodesToString(opcodes) {
        var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
        var lines = [];

        function consumeOpCode(value) {
          var ref = value >>> 2
          /* SHIFT_REF */
          ;
          var opCode = value & 3
          /* MASK_OPCODE */
          ;

          switch (opCode) {
            case 0
            /* Text */
            :
              return "(lView[".concat(ref, "] as Text).textContent = $$$");

            case 1
            /* Attr */
            :
              var attrName = parser.consumeString();
              var sanitizationFn = parser.consumeFunction();

              var _value2 = sanitizationFn ? "(".concat(sanitizationFn, ")($$$)") : '$$$';

              return "(lView[".concat(ref, "] as Element).setAttribute('").concat(attrName, "', ").concat(_value2, ")");

            case 2
            /* IcuSwitch */
            :
              return "icuSwitchCase(".concat(ref, ", $$$)");

            case 3
            /* IcuUpdate */
            :
              return "icuUpdateCase(".concat(ref, ")");
          }

          throw new Error('unexpected OpCode');
        }

        while (parser.hasMore()) {
          var mask = parser.consumeNumber();
          var size = parser.consumeNumber();
          var end = parser.i + size;
          var statements = [];
          var statement = '';

          while (parser.i < end) {
            var value = parser.consumeNumberOrString();

            if (typeof value === 'string') {
              statement += value;
            } else if (value < 0) {
              // Negative numbers are ref indexes
              // Here `i` refers to current binding index. It is to signify that the value is relative,
              // rather than absolute.
              statement += '${lView[i' + value + ']}';
            } else {
              // Positive numbers are operations.
              var opCodeText = consumeOpCode(value);
              statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
              statement = '';
            }
          }

          lines.push("if (mask & 0b".concat(mask.toString(2), ") { ").concat(statements.join(' '), " }"));
        }

        return lines;
      }
      /**
       * Converts `I18nCreateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This
       * function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nCreateOpCodes` if attached as a method.
       * @param opcodes `I18nCreateOpCodes` if invoked as a function.
       */


      function icuCreateOpCodesToString(opcodes) {
        var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
        var lines = [];

        function consumeOpCode(opCode) {
          var parent = getParentFromIcuCreateOpCode(opCode);
          var ref = getRefFromIcuCreateOpCode(opCode);

          switch (getInstructionFromIcuCreateOpCode(opCode)) {
            case 0
            /* AppendChild */
            :
              return "(lView[".concat(parent, "] as Element).appendChild(lView[").concat(lastRef, "])");

            case 1
            /* Attr */
            :
              return "(lView[".concat(ref, "] as Element).setAttribute(\"").concat(parser.consumeString(), "\", \"").concat(parser.consumeString(), "\")");
          }

          throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));
        }

        var lastRef = -1;

        while (parser.hasMore()) {
          var value = parser.consumeNumberStringOrMarker();

          if (value === ICU_MARKER) {
            var text = parser.consumeString();
            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createComment(\"").concat(text, "\")"));
          } else if (value === ELEMENT_MARKER) {
            var _text = parser.consumeString();

            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createElement(\"").concat(_text, "\")"));
          } else if (typeof value === 'string') {
            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createTextNode(\"").concat(value, "\")"));
          } else if (typeof value === 'number') {
            var line = consumeOpCode(value);
            line && lines.push(line);
          } else {
            throw new Error('Unexpected value');
          }
        }

        return lines;
      }
      /**
       * Converts `I18nRemoveOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This
       * function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nRemoveOpCodes` if attached as a method.
       * @param opcodes `I18nRemoveOpCodes` if invoked as a function.
       */


      function i18nRemoveOpCodesToString(opcodes) {
        var removeCodes = opcodes || (Array.isArray(this) ? this : []);
        var lines = [];

        for (var i = 0; i < removeCodes.length; i++) {
          var nodeOrIcuIndex = removeCodes[i];

          if (nodeOrIcuIndex > 0) {
            // Positive numbers are `RNode`s.
            lines.push("remove(lView[".concat(nodeOrIcuIndex, "])"));
          } else {
            // Negative numbers are ICUs
            lines.push("removeNestedICU(".concat(~nodeOrIcuIndex, ")"));
          }
        }

        return lines;
      }

      var OpCodeParser = /*#__PURE__*/function () {
        function OpCodeParser(codes) {
          _classCallCheck(this, OpCodeParser);

          this.i = 0;
          this.codes = codes;
        }

        _createClass2(OpCodeParser, [{
          key: "hasMore",
          value: function hasMore() {
            return this.i < this.codes.length;
          }
        }, {
          key: "consumeNumber",
          value: function consumeNumber() {
            var value = this.codes[this.i++];
            assertNumber(value, 'expecting number in OpCode');
            return value;
          }
        }, {
          key: "consumeString",
          value: function consumeString() {
            var value = this.codes[this.i++];
            assertString(value, 'expecting string in OpCode');
            return value;
          }
        }, {
          key: "consumeFunction",
          value: function consumeFunction() {
            var value = this.codes[this.i++];

            if (value === null || typeof value === 'function') {
              return value;
            }

            throw new Error('expecting function in OpCode');
          }
        }, {
          key: "consumeNumberOrString",
          value: function consumeNumberOrString() {
            var value = this.codes[this.i++];

            if (typeof value === 'string') {
              return value;
            }

            assertNumber(value, 'expecting number or string in OpCode');
            return value;
          }
        }, {
          key: "consumeNumberStringOrMarker",
          value: function consumeNumberStringOrMarker() {
            var value = this.codes[this.i++];

            if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {
              return value;
            }

            assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');
            return value;
          }
        }]);

        return OpCodeParser;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BINDING_REGEXP = /�(\d+):?\d*�/gi;
      var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
      var NESTED_ICU = /�(\d+)�/;
      var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
      var MARKER = "\uFFFD";
      var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
      var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
      /**
       * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
       * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
       * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
       * and later on replaced by a space. We are re-implementing the same idea here, since translations
       * might contain this special character.
       */

      var NGSP_UNICODE_REGEXP = /\uE500/g;

      function replaceNgsp(value) {
        return value.replace(NGSP_UNICODE_REGEXP, ' ');
      }
      /**
       * Create dynamic nodes from i18n translation block.
       *
       * - Text nodes are created synchronously
       * - TNodes are linked into tree lazily
       *
       * @param tView Current `TView`
       * @parentTNodeIndex index to the parent TNode of this i18n block
       * @param lView Current `LView`
       * @param index Index of `ɵɵi18nStart` instruction.
       * @param message Message to translate.
       * @param subTemplateIndex Index into the sub template of message translation. (ie in case of
       *     `ngIf`) (-1 otherwise)
       */


      function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
        var rootTNode = getCurrentParentTNode();
        var createOpCodes = [];
        var updateOpCodes = [];
        var existingTNodeStack = [[]];

        if (ngDevMode) {
          attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        message = getTranslationForTemplate(message, subTemplateIndex);
        var msgParts = replaceNgsp(message).split(PH_REGEXP);

        for (var i = 0; i < msgParts.length; i++) {
          var value = msgParts[i];

          if ((i & 1) === 0) {
            // Even indexes are text (including bindings & ICU expressions)
            var parts = i18nParseTextIntoPartsAndICU(value);

            for (var j = 0; j < parts.length; j++) {
              var part = parts[j];

              if ((j & 1) === 0) {
                // `j` is odd therefore `part` is string
                var text = part;
                ngDevMode && assertString(text, 'Parsed ICU part should be string');

                if (text !== '') {
                  i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
                }
              } else {
                // `j` is Even therefor `part` is an `ICUExpression`
                var icuExpression = part; // Verify that ICU expression has the right shape. Translations might contain invalid
                // constructions (while original messages were correct), so ICU parsing at runtime may
                // not succeed (thus `icuExpression` remains a string).
                // Note: we intentionally retain the error here by not using `ngDevMode`, because
                // the value can change based on the locale and users aren't guaranteed to hit
                // an invalid string while they're developing.

                if (typeof icuExpression !== 'object') {
                  throw new Error("Unable to parse ICU expression in \"".concat(message, "\" message."));
                }

                var icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? "ICU ".concat(index, ":").concat(icuExpression.mainBinding) : '', true);
                var icuNodeIndex = icuContainerTNode.index;
                ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');
                icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
              }
            }
          } else {
            // Odd indexes are placeholders (elements and sub-templates)
            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')
            var isClosing = value.charCodeAt(0) === 47
            /* SLASH */
            ;
            var type = value.charCodeAt(isClosing ? 1 : 0);
            ngDevMode && assertOneOf(type, 42
            /* STAR */
            , 35
            /* HASH */
            );

            var _index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));

            if (isClosing) {
              existingTNodeStack.shift();
              setCurrentTNode(getCurrentParentTNode(), false);
            } else {
              var tNode = createTNodePlaceholder(tView, existingTNodeStack[0], _index2);
              existingTNodeStack.unshift([]);
              setCurrentTNode(tNode, true);
            }
          }
        }

        tView.data[index] = {
          create: createOpCodes,
          update: updateOpCodes
        };
      }
      /**
       * Allocate space in i18n Range add create OpCode instruction to crete a text or comment node.
       *
       * @param tView Current `TView` needed to allocate space in i18n range.
       * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be
       *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.
       * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
       * @param lView Current `LView` needed to allocate space in i18n range.
       * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.
       * @param text Text to be added when the `Text` or `Comment` node will be created.
       * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.
       */


      function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
        var i18nNodeIdx = allocExpando(tView, lView, 1, null);
        var opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
        var parentTNode = getCurrentParentTNode();

        if (rootTNode === parentTNode) {
          // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.
          // (there is no parent), but in some circumstances (because we are inconsistent about how we set
          // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.
          parentTNode = null;
        }

        if (parentTNode === null) {
          // If we don't have a parent that means that we can eagerly add nodes.
          // If we have a parent than these nodes can't be added now (as the parent has not been created
          // yet) and instead the `parentTNode` is responsible for adding it. See
          // `TNode.insertBeforeIndex`
          opCode |= I18nCreateOpCode.APPEND_EAGERLY;
        }

        if (isICU) {
          opCode |= I18nCreateOpCode.COMMENT;
          ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
        }

        createOpCodes.push(opCode, text === null ? '' : text); // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the
        // bindings are.

        var tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32
        /* Icu */
        : 1
        /* Text */
        , text === null ? ngDevMode ? '{{?}}' : '' : text, null);
        addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
        var tNodeIdx = tNode.index;
        setCurrentTNode(tNode, false
        /* Text nodes are self closing */
        );

        if (parentTNode !== null && rootTNode !== parentTNode) {
          // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)
          // We have to make sure to add ourselves to the parent.
          setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
        }

        return tNode;
      }
      /**
       * Processes text node in i18n block.
       *
       * Text nodes can have:
       * - Create instruction in `createOpCodes` for creating the text node.
       * - Allocate spec for text node in i18n range of `LView`
       * - If contains binding:
       *    - bindings => allocate space in i18n range of `LView` to store the binding value.
       *    - populate `updateOpCodes` with update instructions.
       *
       * @param tView Current `TView`
       * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will
       *     be added as part of the `i18nStart` instruction or as part of the
       *     `TNode.insertBeforeIndex`.
       * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
       * @param createOpCodes Location where the creation OpCodes will be stored.
       * @param lView Current `LView`
       * @param text The translated text (which may contain binding)
       */


      function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
        var hasBinding = text.match(BINDING_REGEXP);
        var tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);

        if (hasBinding) {
          generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index);
        }
      }
      /**
       * See `i18nAttributes` above.
       */


      function i18nAttributesFirstPass(tView, index, values) {
        var previousElement = getCurrentTNode();
        var previousElementIndex = previousElement.index;
        var updateOpCodes = [];

        if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        if (tView.firstCreatePass && tView.data[index] === null) {
          for (var i = 0; i < values.length; i += 2) {
            var attrName = values[i];
            var message = values[i + 1];

            if (message !== '') {
              // Check if attribute value contains an ICU and throw an error if that's the case.
              // ICUs in element attributes are not supported.
              // Note: we intentionally retain the error here by not using `ngDevMode`, because
              // the `value` can change based on the locale and users aren't guaranteed to hit
              // an invalid string while they're developing.
              if (ICU_REGEXP.test(message)) {
                throw new Error("ICU expressions are not supported in attributes. Message: \"".concat(message, "\"."));
              } // i18n attributes that hit this code path are guaranteed to have bindings, because
              // the compiler treats static i18n attributes as regular attribute bindings.


              generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName);
            }
          }

          tView.data[index] = updateOpCodes;
        }
      }
      /**
       * Generate the OpCodes to update the bindings of a string.
       *
       * @param updateOpCodes Place where the update opcodes will be stored.
       * @param str The string containing the bindings.
       * @param destinationNode Index of the destination node which will receive the binding.
       * @param attrName Name of the attribute, if the string belongs to an attribute.
       * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
       */


      function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName) {
        var sanitizeFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');
        var maskIndex = updateOpCodes.length; // Location of mask

        var sizeIndex = maskIndex + 1; // location of size for skipping

        updateOpCodes.push(null, null); // Alloc space for mask and size

        var startIndex = maskIndex + 2; // location of first allocation.

        if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        var textParts = str.split(BINDING_REGEXP);
        var mask = 0;

        for (var j = 0; j < textParts.length; j++) {
          var textValue = textParts[j];

          if (j & 1) {
            // Odd indexes are bindings
            var bindingIndex = parseInt(textValue, 10);
            updateOpCodes.push(-1 - bindingIndex);
            mask = mask | toMaskBit(bindingIndex);
          } else if (textValue !== '') {
            // Even indexes are text
            updateOpCodes.push(textValue);
          }
        }

        updateOpCodes.push(destinationNode << 2
        /* SHIFT_REF */
        | (attrName ? 1
        /* Attr */
        : 0
        /* Text */
        ));

        if (attrName) {
          updateOpCodes.push(attrName, sanitizeFn);
        }

        updateOpCodes[maskIndex] = mask;
        updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
        return mask;
      }
      /**
       * Convert binding index to mask bit.
       *
       * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
       * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to
       * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner
       * case is that we will execute binding code more often than necessary. (penalty of performance)
       */


      function toMaskBit(bindingIndex) {
        return 1 << Math.min(bindingIndex, 31);
      }

      function isRootTemplateMessage(subTemplateIndex) {
        return subTemplateIndex === -1;
      }
      /**
       * Removes everything inside the sub-templates of a message.
       */


      function removeInnerTemplateTranslation(message) {
        var match;
        var res = '';
        var index = 0;
        var inTemplate = false;
        var tagMatched;

        while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
          if (!inTemplate) {
            res += message.substring(index, match.index + match[0].length);
            tagMatched = match[1];
            inTemplate = true;
          } else {
            if (match[0] === "".concat(MARKER, "/*").concat(tagMatched).concat(MARKER)) {
              index = match.index;
              inTemplate = false;
            }
          }
        }

        ngDevMode && assertEqual(inTemplate, false, "Tag mismatch: unable to find the end of the sub-template in the translation \"".concat(message, "\""));
        res += message.substr(index);
        return res;
      }
      /**
       * Extracts a part of a message and removes the rest.
       *
       * This method is used for extracting a part of the message associated with a template. A
       * translated message can span multiple templates.
       *
       * Example:
       * ```
       * <div i18n>Translate <span *ngIf>me</span>!</div>
       * ```
       *
       * @param message The message to crop
       * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
       * external template and removes all sub-templates.
       */


      function getTranslationForTemplate(message, subTemplateIndex) {
        if (isRootTemplateMessage(subTemplateIndex)) {
          // We want the root template message, ignore all sub-templates
          return removeInnerTemplateTranslation(message);
        } else {
          // We want a specific sub-template
          var start = message.indexOf(":".concat(subTemplateIndex).concat(MARKER)) + 2 + subTemplateIndex.toString().length;
          var end = message.search(new RegExp("".concat(MARKER, "\\/\\*\\d+:").concat(subTemplateIndex).concat(MARKER)));
          return removeInnerTemplateTranslation(message.substring(start, end));
        }
      }
      /**
       * Generate the OpCodes for ICU expressions.
       *
       * @param icuExpression
       * @param index Index where the anchor is stored and an optional `TIcuContainerNode`
       *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.
       *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)
       */


      function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
        ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');
        var bindingMask = 0;
        var tIcu = {
          type: icuExpression.type,
          currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
          anchorIdx: anchorIdx,
          cases: [],
          create: [],
          remove: [],
          update: []
        };
        addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
        setTIcu(tView, anchorIdx, tIcu);
        var values = icuExpression.values;

        for (var i = 0; i < values.length; i++) {
          // Each value is an array of strings & other ICU expressions
          var valueArr = values[i];
          var nestedIcus = [];

          for (var j = 0; j < valueArr.length; j++) {
            var value = valueArr[j];

            if (typeof value !== 'string') {
              // It is an nested ICU expression
              var icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node

              valueArr[j] = "<!--\uFFFD".concat(icuIndex, "\uFFFD-->");
            }
          }

          bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;
        }

        if (bindingMask) {
          addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
        }
      }
      /**
       * Parses text containing an ICU expression and produces a JSON object for it.
       * Original code from closure library, modified for Angular.
       *
       * @param pattern Text containing an ICU expression that needs to be parsed.
       *
       */


      function parseICUBlock(pattern) {
        var cases = [];
        var values = [];
        var icuType = 1
        /* plural */
        ;
        var mainBinding = 0;
        pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
          if (type === 'select') {
            icuType = 0
            /* select */
            ;
          } else {
            icuType = 1
            /* plural */
            ;
          }

          mainBinding = parseInt(binding.substr(1), 10);
          return '';
        });
        var parts = i18nParseTextIntoPartsAndICU(pattern); // Looking for (key block)+ sequence. One of the keys has to be "other".

        for (var pos = 0; pos < parts.length;) {
          var key = parts[pos++].trim();

          if (icuType === 1
          /* plural */
          ) {
              // Key can be "=x", we just want "x"
              key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
            }

          if (key.length) {
            cases.push(key);
          }

          var blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);

          if (cases.length > values.length) {
            values.push(blocks);
          }
        } // TODO(ocombe): support ICU expressions in attributes, see #21615


        return {
          type: icuType,
          mainBinding: mainBinding,
          cases: cases,
          values: values
        };
      }
      /**
       * Breaks pattern into strings and top level {...} blocks.
       * Can be used to break a message into text and ICU expressions, or to break an ICU expression
       * into keys and cases. Original code from closure library, modified for Angular.
       *
       * @param pattern (sub)Pattern to be broken.
       * @returns An `Array<string|IcuExpression>` where:
       *   - odd positions: `string` => text between ICU expressions
       *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.
       */


      function i18nParseTextIntoPartsAndICU(pattern) {
        if (!pattern) {
          return [];
        }

        var prevPos = 0;
        var braceStack = [];
        var results = [];
        var braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.

        braces.lastIndex = 0;
        var match;

        while (match = braces.exec(pattern)) {
          var pos = match.index;

          if (match[0] == '}') {
            braceStack.pop();

            if (braceStack.length == 0) {
              // End of the block.
              var block = pattern.substring(prevPos, pos);

              if (ICU_BLOCK_REGEXP.test(block)) {
                results.push(parseICUBlock(block));
              } else {
                results.push(block);
              }

              prevPos = pos + 1;
            }
          } else {
            if (braceStack.length == 0) {
              var _substring = pattern.substring(prevPos, pos);

              results.push(_substring);
              prevPos = pos + 1;
            }

            braceStack.push('{');
          }
        }

        var substring = pattern.substring(prevPos);
        results.push(substring);
        return results;
      }
      /**
       * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
       *
       */


      function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
        var create = [];
        var remove = [];
        var update = [];

        if (ngDevMode) {
          attachDebugGetter(create, icuCreateOpCodesToString);
          attachDebugGetter(remove, i18nRemoveOpCodesToString);
          attachDebugGetter(update, i18nUpdateOpCodesToString);
        }

        tIcu.cases.push(caseName);
        tIcu.create.push(create);
        tIcu.remove.push(remove);
        tIcu.update.push(update);
        var inertBodyHelper = getInertBodyHelper(getDocument());
        var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);
        ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');
        var inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;

        if (inertRootNode) {
          return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);
        } else {
          return 0;
        }
      }

      function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {
        var bindingMask = 0;
        var currentNode = parentNode.firstChild;

        while (currentNode) {
          var newIndex = allocExpando(tView, lView, 1, null);

          switch (currentNode.nodeType) {
            case Node.ELEMENT_NODE:
              var element = currentNode;
              var tagName = element.tagName.toLowerCase();

              if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
                addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
                tView.data[newIndex] = tagName;
                var elAttrs = element.attributes;

                for (var i = 0; i < elAttrs.length; i++) {
                  var attr = elAttrs.item(i);
                  var lowerAttrName = attr.name.toLowerCase();

                  var _hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding


                  if (_hasBinding) {
                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                      if (URI_ATTRS[lowerAttrName]) {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, _sanitizeUrl);
                      } else if (SRCSET_ATTRS[lowerAttrName]) {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, sanitizeSrcset);
                      } else {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name);
                      }
                    } else {
                      ngDevMode && console.warn("WARNING: ignoring unsafe attribute value " + "".concat(lowerAttrName, " on element ").concat(tagName, " ") + "(see https://g.co/ng/security#xss)");
                    }
                  } else {
                    addCreateAttribute(create, newIndex, attr);
                  }
                } // Parse the children of this node (if any)


                bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
                addRemoveNode(remove, newIndex, depth);
              }

              break;

            case Node.TEXT_NODE:
              var value = currentNode.textContent || '';
              var hasBinding = value.match(BINDING_REGEXP);
              addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);
              addRemoveNode(remove, newIndex, depth);

              if (hasBinding) {
                bindingMask = generateBindingUpdateOpCodes(update, value, newIndex) | bindingMask;
              }

              break;

            case Node.COMMENT_NODE:
              // Check if the comment node is a placeholder for a nested ICU
              var isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');

              if (isNestedIcu) {
                var nestedIcuIndex = parseInt(isNestedIcu[1], 10);
                var icuExpression = nestedIcus[nestedIcuIndex]; // Create the comment node that will anchor the ICU expression

                addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? "nested ICU ".concat(nestedIcuIndex) : '', parentIdx, newIndex);
                icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
                addRemoveNestedIcu(remove, newIndex, depth);
              }

              break;
          }

          currentNode = currentNode.nextSibling;
        }

        return bindingMask;
      }

      function addRemoveNode(remove, index, depth) {
        if (depth === 0) {
          remove.push(index);
        }
      }

      function addRemoveNestedIcu(remove, index, depth) {
        if (depth === 0) {
          remove.push(~index); // remove ICU at `index`

          remove.push(index); // remove ICU comment at `index`
        }
      }

      function addUpdateIcuSwitch(update, icuExpression, index) {
        update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2
        /* SHIFT_REF */
        | 2
        /* IcuSwitch */
        );
      }

      function addUpdateIcuUpdate(update, bindingMask, index) {
        update.push(bindingMask, 1, index << 2
        /* SHIFT_REF */
        | 3
        /* IcuUpdate */
        );
      }

      function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
        if (marker !== null) {
          create.push(marker);
        }

        create.push(text, createAtIdx, icuCreateOpCode(0
        /* AppendChild */
        , appendToParentIdx, createAtIdx));
      }

      function addCreateAttribute(create, newIndex, attr) {
        create.push(newIndex << 1
        /* SHIFT_REF */
        | 1
        /* Attr */
        , attr.name, attr.value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // i18nPostprocess consts


      var ROOT_TEMPLATE_ID = 0;
      var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
      var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
      var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
      var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
      var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
      var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
      var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
      /**
       * Handles message string post-processing for internationalization.
       *
       * Handles message string post-processing by transforming it from intermediate
       * format (that might contain some markers that we need to replace) to the final
       * form, consumable by i18nStart instruction. Post processing steps include:
       *
       * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
       * 2. Replace all ICU vars (like "VAR_PLURAL")
       * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
       *    in case multiple ICUs have the same placeholder name
       *
       * @param message Raw translation string for post processing
       * @param replacements Set of replacements that should be applied
       *
       * @returns Transformed string that can be consumed by i18nStart instruction
       *
       * @codeGenApi
       */

      function i18nPostprocess(message) {
        var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        /**
         * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
         *
         * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
         * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
         * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
         * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
         * front of �#6�. The post processing step restores the right order by keeping track of the
         * template id stack and looks for placeholders that belong to the currently active template.
         */
        var result = message;

        if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
          var matches = {};
          var templateIdsStack = [ROOT_TEMPLATE_ID];
          result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {
            var content = phs || tmpl;
            var placeholders = matches[content] || [];

            if (!placeholders.length) {
              content.split('|').forEach(function (placeholder) {
                var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
                var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
                var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
                placeholders.push([templateId, isCloseTemplateTag, placeholder]);
              });
              matches[content] = placeholders;
            }

            if (!placeholders.length) {
              throw new Error("i18n postprocess: unmatched placeholder - ".concat(content));
            }

            var currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
            var idx = 0; // find placeholder index that matches current template id

            for (var i = 0; i < placeholders.length; i++) {
              if (placeholders[i][0] === currentTemplateId) {
                idx = i;
                break;
              }
            } // update template id stack based on the current tag extracted


            var _placeholders$idx = _slicedToArray(placeholders[idx], 3),
                templateId = _placeholders$idx[0],
                isCloseTemplateTag = _placeholders$idx[1],
                placeholder = _placeholders$idx[2];

            if (isCloseTemplateTag) {
              templateIdsStack.pop();
            } else if (currentTemplateId !== templateId) {
              templateIdsStack.push(templateId);
            } // remove processed tag from the list


            placeholders.splice(idx, 1);
            return placeholder;
          });
        } // return current result if no replacements specified


        if (!Object.keys(replacements).length) {
          return result;
        }
        /**
         * Step 2: replace all ICU vars (like "VAR_PLURAL")
         */


        result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {
          return replacements.hasOwnProperty(key) ? "".concat(start).concat(replacements[key]).concat(end) : match;
        });
        /**
         * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
         */

        result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {
          return replacements.hasOwnProperty(key) ? replacements[key] : match;
        });
        /**
         * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
         * multiple ICUs have the same placeholder name
         */

        result = result.replace(PP_ICUS_REGEXP, function (match, key) {
          if (replacements.hasOwnProperty(key)) {
            var list = replacements[key];

            if (!list.length) {
              throw new Error("i18n postprocess: unmatched ICU - ".concat(match, " with key: ").concat(key));
            }

            return list.shift();
          }

          return match;
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks a block of text as translatable.
       *
       * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
       * The translation `message` is the value which is locale specific. The translation string may
       * contain placeholders which associate inner elements and sub-templates within the translation.
       *
       * The translation `message` placeholders are:
       * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
       *   interpolated into. The placeholder `index` points to the expression binding index. An optional
       *   `block` that matches the sub-template in which it was declared.
       * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
       *   and end of DOM element that were embedded in the original translation block. The placeholder
       *   `index` points to the element index in the template instructions set. An optional `block` that
       *   matches the sub-template in which it was declared.
       * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
       *   split up and translated separately in each angular template function. The `index` points to the
       *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
       *
       * @param index A unique index of the translation in the static block.
       * @param messageIndex An index of the translation message from the `def.consts` array.
       * @param subTemplateIndex Optional sub-template index in the `message`.
       *
       * @codeGenApi
       */


      function ɵɵi18nStart(index, messageIndex) {
        var subTemplateIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var tView = getTView();
        var lView = getLView();
        var adjustedIndex = HEADER_OFFSET + index;
        ngDevMode && assertDefined(tView, "tView should be defined");
        var message = getConstant(tView.consts, messageIndex);
        var parentTNode = getCurrentParentTNode();

        if (tView.firstCreatePass) {
          i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
        }

        var tI18n = tView.data[adjustedIndex];
        var sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
        var parentRNode = getClosestRElement(tView, sameViewParentTNode, lView); // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.
        // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.

        var insertInFrontOf = parentTNode && parentTNode.type & 8
        /* ElementContainer */
        ? lView[parentTNode.index] : null;
        applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
        setInI18nBlock(true);
      }
      /**
       * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
       * into the render tree, moves the placeholder nodes and removes the deleted nodes.
       *
       * @codeGenApi
       */


      function ɵɵi18nEnd() {
        setInI18nBlock(false);
      }
      /**
       *
       * Use this instruction to create a translation block that doesn't contain any placeholder.
       * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
       *
       * The translation `message` is the value which is locale specific. The translation string may
       * contain placeholders which associate inner elements and sub-templates within the translation.
       *
       * The translation `message` placeholders are:
       * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
       *   interpolated into. The placeholder `index` points to the expression binding index. An optional
       *   `block` that matches the sub-template in which it was declared.
       * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
       *   and end of DOM element that were embedded in the original translation block. The placeholder
       *   `index` points to the element index in the template instructions set. An optional `block` that
       *   matches the sub-template in which it was declared.
       * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
       *   split up and translated separately in each angular template function. The `index` points to the
       *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
       *
       * @param index A unique index of the translation in the static block.
       * @param messageIndex An index of the translation message from the `def.consts` array.
       * @param subTemplateIndex Optional sub-template index in the `message`.
       *
       * @codeGenApi
       */


      function ɵɵi18n(index, messageIndex, subTemplateIndex) {
        ɵɵi18nStart(index, messageIndex, subTemplateIndex);
        ɵɵi18nEnd();
      }
      /**
       * Marks a list of attributes as translatable.
       *
       * @param index A unique index in the static block
       * @param values
       *
       * @codeGenApi
       */


      function ɵɵi18nAttributes(index, attrsIndex) {
        var tView = getTView();
        ngDevMode && assertDefined(tView, "tView should be defined");
        var attrs = getConstant(tView.consts, attrsIndex);
        i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
      }
      /**
       * Stores the values of the bindings during each update cycle in order to determine if we need to
       * update the translated nodes.
       *
       * @param value The binding's value
       * @returns This function returns itself so that it may be chained
       * (e.g. `i18nExp(ctx.name)(ctx.title)`)
       *
       * @codeGenApi
       */


      function ɵɵi18nExp(value) {
        var lView = getLView();
        setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
        return ɵɵi18nExp;
      }
      /**
       * Updates a translation block or an i18n attribute when the bindings have changed.
       *
       * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
       * (i18n attribute) on which it should update the content.
       *
       * @codeGenApi
       */


      function ɵɵi18nApply(index) {
        applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
      }
      /**
       * Handles message string post-processing for internationalization.
       *
       * Handles message string post-processing by transforming it from intermediate
       * format (that might contain some markers that we need to replace) to the final
       * form, consumable by i18nStart instruction. Post processing steps include:
       *
       * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
       * 2. Replace all ICU vars (like "VAR_PLURAL")
       * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
       *    in case multiple ICUs have the same placeholder name
       *
       * @param message Raw translation string for post processing
       * @param replacements Set of replacements that should be applied
       *
       * @returns Transformed string that can be consumed by i18nStart instruction
       *
       * @codeGenApi
       */


      function ɵɵi18nPostprocess(message) {
        var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return i18nPostprocess(message, replacements);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Resolves the providers which are defined in the DirectiveDef.
       *
       * When inserting the tokens and the factories in their respective arrays, we can assume that
       * this method is called first for the component (if any), and then for other directives on the same
       * node.
       * As a consequence,the providers are always processed in that order:
       * 1) The view providers of the component
       * 2) The providers of the component
       * 3) The providers of the other directives
       * This matches the structure of the injectables arrays of a view (for each node).
       * So the tokens and the factories can be pushed at the end of the arrays, except
       * in one case for multi providers.
       *
       * @param def the directive definition
       * @param providers: Array of `providers`.
       * @param viewProviders: Array of `viewProviders`.
       */


      function providersResolver(def, providers, viewProviders) {
        var tView = getTView();

        if (tView.firstCreatePass) {
          var isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated

          resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated

          resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);
        }
      }
      /**
       * Resolves a provider and publishes it to the DI system.
       */


      function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
        provider = resolveForwardRef(provider);

        if (Array.isArray(provider)) {
          // Recursively call `resolveProvider`
          // Recursion is OK in this case because this code will not be in hot-path once we implement
          // cloning of the initial state.
          for (var i = 0; i < provider.length; i++) {
            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
          }
        } else {
          var tView = getTView();
          var lView = getLView();
          var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
          var providerFactory = providerToFactory(provider);
          var tNode = getCurrentTNode();
          var beginIndex = tNode.providerIndexes & 1048575
          /* ProvidersStartIndexMask */
          ;
          var endIndex = tNode.directiveStart;
          var cptViewProvidersCount = tNode.providerIndexes >> 20
          /* CptViewProvidersCountShift */
          ;

          if (isTypeProvider(provider) || !provider.multi) {
            // Single provider case: the factory is created and pushed immediately
            var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);
            var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);

            if (existingFactoryIndex === -1) {
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
              registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
              tInjectables.push(token);
              tNode.directiveStart++;
              tNode.directiveEnd++;

              if (isViewProvider) {
                tNode.providerIndexes += 1048576
                /* CptViewProvidersCountShifter */
                ;
              }

              lInjectablesBlueprint.push(factory);
              lView.push(factory);
            } else {
              lInjectablesBlueprint[existingFactoryIndex] = factory;
              lView[existingFactoryIndex] = factory;
            }
          } else {
            // Multi provider case:
            // We create a multi factory which is going to aggregate all the values.
            // Since the output of such a factory depends on content or view injection,
            // we create two of them, which are linked together.
            //
            // The first one (for view providers) is always in the first block of the injectables array,
            // and the second one (for providers) is always in the second block.
            // This is important because view providers have higher priority. When a multi token
            // is being looked up, the view providers should be found first.
            // Note that it is not possible to have a multi factory in the third block (directive block).
            //
            // The algorithm to process multi providers is as follows:
            // 1) If the multi provider comes from the `viewProviders` of the component:
            //   a) If the special view providers factory doesn't exist, it is created and pushed.
            //   b) Else, the multi provider is added to the existing multi factory.
            // 2) If the multi provider comes from the `providers` of the component or of another
            // directive:
            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
            //      It is also linked to the multi factory for view providers, if it exists.
            //   b) Else, the multi provider is added to the existing multi factory.
            var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
            var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
            var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
            var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];

            if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
              // Cases 1.a and 2.a
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);

              var _factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);

              if (!isViewProvider && doesViewProvidersFactoryExist) {
                lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = _factory;
              }

              registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
              tInjectables.push(token);
              tNode.directiveStart++;
              tNode.directiveEnd++;

              if (isViewProvider) {
                tNode.providerIndexes += 1048576
                /* CptViewProvidersCountShifter */
                ;
              }

              lInjectablesBlueprint.push(_factory);
              lView.push(_factory);
            } else {
              // Cases 1.b and 2.b
              var indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
              registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
            }

            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
              lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
            }
          }
        }
      }
      /**
       * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
       * @param tView `TView` in which to register the hook.
       * @param provider Provider whose hook should be registered.
       * @param contextIndex Index under which to find the context for the hook when it's being invoked.
       * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
       * provider factory.
       */


      function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
        var providerIsTypeProvider = isTypeProvider(provider);

        if (providerIsTypeProvider || isClassProvider(provider)) {
          var prototype = (provider.useClass || provider).prototype;
          var ngOnDestroy = prototype.ngOnDestroy;

          if (ngOnDestroy) {
            var hooks = tView.destroyHooks || (tView.destroyHooks = []);

            if (!providerIsTypeProvider && provider.multi) {
              ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
              var existingCallbacksIndex = hooks.indexOf(contextIndex);

              if (existingCallbacksIndex === -1) {
                hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
              } else {
                hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
              }
            } else {
              hooks.push(contextIndex, ngOnDestroy);
            }
          }
        }
      }
      /**
       * Add a factory in a multi factory.
       * @returns Index at which the factory was inserted.
       */


      function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
        if (isComponentProvider) {
          multiFactory.componentProviders++;
        }

        return multiFactory.multi.push(factory) - 1;
      }
      /**
       * Returns the index of item in the array, but only in the begin to end range.
       */


      function indexOf(item, arr, begin, end) {
        for (var i = begin; i < end; i++) {
          if (arr[i] === item) return i;
        }

        return -1;
      }
      /**
       * Use this with `multi` `providers`.
       */


      function multiProvidersFactoryResolver(_, tData, lData, tNode) {
        return multiResolve(this.multi, []);
      }
      /**
       * Use this with `multi` `viewProviders`.
       *
       * This factory knows how to concatenate itself with the existing `multi` `providers`.
       */


      function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
        var factories = this.multi;
        var result;

        if (this.providerFactory) {
          var componentCount = this.providerFactory.componentProviders;
          var multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component

          result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.

          multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives

          for (var i = componentCount; i < multiProviders.length; i++) {
            result.push(multiProviders[i]);
          }
        } else {
          result = []; // Insert the `viewProvider` instances.

          multiResolve(factories, result);
        }

        return result;
      }
      /**
       * Maps an array of factories into an array of values.
       */


      function multiResolve(factories, result) {
        for (var i = 0; i < factories.length; i++) {
          var factory = factories[i];
          result.push(factory());
        }

        return result;
      }
      /**
       * Creates a multi factory.
       */


      function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
        var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);
        factory.multi = [];
        factory.index = index;
        factory.componentProviders = 0;
        multiFactoryAdd(factory, f, isComponent && !isViewProvider);
        return factory;
      }
      /**
       * This feature resolves the providers of a directive (or component),
       * and publish them into the DI system, making it visible to others for injection.
       *
       * For example:
       * ```ts
       * class ComponentWithProviders {
       *   constructor(private greeter: GreeterDE) {}
       *
       *   static ɵcmp = defineComponent({
       *     type: ComponentWithProviders,
       *     selectors: [['component-with-providers']],
       *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
       *    decls: 1,
       *    vars: 1,
       *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
       *      if (fs & RenderFlags.Create) {
       *        ɵɵtext(0);
       *      }
       *      if (fs & RenderFlags.Update) {
       *        ɵɵtextInterpolate(ctx.greeter.greet());
       *      }
       *    },
       *    features: [ɵɵProvidersFeature([GreeterDE])]
       *  });
       * }
       * ```
       *
       * @param definition
       *
       * @codeGenApi
       */


      function ɵɵProvidersFeature(providers) {
        var viewProviders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return function (definition) {
          definition.providersResolver = function (def, processProvidersFn) {
            return providersResolver(def, //
            processProvidersFn ? processProvidersFn(providers) : providers, //
            viewProviders);
          };
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents a component created by a `ComponentFactory`.
       * Provides access to the component instance and related objects,
       * and provides the means of destroying the instance.
       *
       * @publicApi
       */


      var ComponentRef = function ComponentRef() {
        _classCallCheck(this, ComponentRef);
      };
      /**
       * Base class for a factory that can create a component dynamically.
       * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
       * Use the resulting `ComponentFactory.create()` method to create a component of that type.
       *
       * @see [Dynamic Components](guide/dynamic-component-loader)
       *
       * @publicApi
       */


      var ComponentFactory = function ComponentFactory() {
        _classCallCheck(this, ComponentFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function noComponentFactoryError(component) {
        var error = Error("No component factory found for ".concat(stringify(component), ". Did you add it to @NgModule.entryComponents?"));
        error[ERROR_COMPONENT] = component;
        return error;
      }

      var ERROR_COMPONENT = 'ngComponent';

      function getComponent$1(error) {
        return error[ERROR_COMPONENT];
      }

      var _NullComponentFactoryResolver = /*#__PURE__*/function () {
        function _NullComponentFactoryResolver() {
          _classCallCheck(this, _NullComponentFactoryResolver);
        }

        _createClass2(_NullComponentFactoryResolver, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            throw noComponentFactoryError(component);
          }
        }]);

        return _NullComponentFactoryResolver;
      }();
      /**
       * A simple registry that maps `Components` to generated `ComponentFactory` classes
       * that can be used to create instances of components.
       * Use to obtain the factory for a given component type,
       * then use the factory's `create()` method to create a component of that type.
       *
       * @see [Dynamic Components](guide/dynamic-component-loader)
       * @publicApi
       */


      var ComponentFactoryResolver = function ComponentFactoryResolver() {
        _classCallCheck(this, ComponentFactoryResolver);
      };

      ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();

      var CodegenComponentFactoryResolver = /*#__PURE__*/function () {
        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
          _classCallCheck(this, CodegenComponentFactoryResolver);

          this._parent = _parent;
          this._ngModule = _ngModule;
          this._factories = new Map();

          for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];

            this._factories.set(factory.componentType, factory);
          }
        }

        _createClass2(CodegenComponentFactoryResolver, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            var factory = this._factories.get(component);

            if (!factory && this._parent) {
              factory = this._parent.resolveComponentFactory(component);
            }

            if (!factory) {
              throw noComponentFactoryError(component);
            }

            return new ComponentFactoryBoundToModule(factory, this._ngModule);
          }
        }]);

        return CodegenComponentFactoryResolver;
      }();

      var ComponentFactoryBoundToModule = /*#__PURE__*/function (_ComponentFactory) {
        _inherits(ComponentFactoryBoundToModule, _ComponentFactory);

        var _super117 = _createSuper(ComponentFactoryBoundToModule);

        function ComponentFactoryBoundToModule(factory, ngModule) {
          var _this150;

          _classCallCheck(this, ComponentFactoryBoundToModule);

          _this150 = _super117.call(this);
          _this150.factory = factory;
          _this150.ngModule = ngModule;
          _this150.selector = factory.selector;
          _this150.componentType = factory.componentType;
          _this150.ngContentSelectors = factory.ngContentSelectors;
          _this150.inputs = factory.inputs;
          _this150.outputs = factory.outputs;
          return _this150;
        }

        _createClass2(ComponentFactoryBoundToModule, [{
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
          }
        }]);

        return ComponentFactoryBoundToModule;
      }(ComponentFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function noop() {// Do nothing.
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Creates an ElementRef from the most recent node.
       *
       * @returns The ElementRef instance to use
       */


      function injectElementRef() {
        return createElementRef(getCurrentTNode(), getLView());
      }
      /**
       * Creates an ElementRef given a node.
       *
       * @param tNode The node for which you'd like an ElementRef
       * @param lView The view to which the node belongs
       * @returns The ElementRef instance to use
       */


      function createElementRef(tNode, lView) {
        return new ElementRef(getNativeByTNode(tNode, lView));
      }

      var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;
      var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
      /**
       * A wrapper around a native element inside of a View.
       *
       * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
       * element.
       *
       * @security Permitting direct access to the DOM can make your application more vulnerable to
       * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
       * [Security Guide](https://g.co/ng/security).
       *
       * @publicApi
       */
      // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
      // i.e. users have to ask for what they need. With that, we can build better analysis tools
      // and could do better codegen in the future.

      var ElementRef = function ElementRef(nativeElement) {
        _classCallCheck(this, ElementRef);

        this.nativeElement = nativeElement;
      };
      /**
       * @internal
       * @nocollapse
       */


      ElementRef.__NG_ELEMENT_ID__ = SWITCH_ELEMENT_REF_FACTORY;
      /**
       * Unwraps `ElementRef` and return the `nativeElement`.
       *
       * @param value value to unwrap
       * @returns `nativeElement` if `ElementRef` otherwise returns value as is.
       */

      function unwrapElementRef(value) {
        return value instanceof ElementRef ? value.nativeElement : value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
      /**
       * Creates and initializes a custom renderer that implements the `Renderer2` base class.
       *
       * @publicApi
       */

      var RendererFactory2 = function RendererFactory2() {
        _classCallCheck(this, RendererFactory2);
      };
      /**
       * Extend this base class to implement custom rendering. By default, Angular
       * renders a template into DOM. You can use custom rendering to intercept
       * rendering calls, or to render to something other than DOM.
       *
       * Create your custom renderer using `RendererFactory2`.
       *
       * Use a custom renderer to bypass Angular's templating and
       * make custom UI changes that can't be expressed declaratively.
       * For example if you need to set a property or an attribute whose name is
       * not statically known, use the `setProperty()` or
       * `setAttribute()` method.
       *
       * @publicApi
       */


      var Renderer2 = function Renderer2() {
        _classCallCheck(this, Renderer2);
      };
      /**
       * @internal
       * @nocollapse
       */


      Renderer2.__NG_ELEMENT_ID__ = function () {
        return SWITCH_RENDERER2_FACTORY();
      };

      var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;
      var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;
      var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;
      /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */

      function getOrCreateRenderer2(lView) {
        var renderer = lView[RENDERER];

        if (ngDevMode && !isProceduralRenderer(renderer)) {
          throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
        }

        return renderer;
      }
      /** Injects a Renderer2 for the current component. */


      function injectRenderer2() {
        // We need the Renderer to be based on the component that it's being injected into, however since
        // DI happens before we've entered its view, `getLView` will return the parent view instead.
        var lView = getLView();
        var tNode = getCurrentTNode();
        var nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
        return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Sanitizer is used by the views to sanitize potentially dangerous values.
       *
       * @publicApi
       */


      var Sanitizer = function Sanitizer() {
        _classCallCheck(this, Sanitizer);
      };
      /** @nocollapse */


      Sanitizer.ɵprov = ɵɵdefineInjectable({
        token: Sanitizer,
        providedIn: 'root',
        factory: function factory() {
          return null;
        }
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description Represents the version of Angular
       *
       * @publicApi
       */

      var Version = function Version(full) {
        _classCallCheck(this, Version);

        this.full = full;
        this.major = full.split('.')[0];
        this.minor = full.split('.')[1];
        this.patch = full.split('.').slice(2).join('.');
      };
      /**
       * @publicApi
       */


      var VERSION = new Version('11.2.6');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var DefaultIterableDifferFactory = /*#__PURE__*/function () {
        function DefaultIterableDifferFactory() {
          _classCallCheck(this, DefaultIterableDifferFactory);
        }

        _createClass2(DefaultIterableDifferFactory, [{
          key: "supports",
          value: function supports(obj) {
            return isListLikeIterable(obj);
          }
        }, {
          key: "create",
          value: function create(trackByFn) {
            return new DefaultIterableDiffer(trackByFn);
          }
        }]);

        return DefaultIterableDifferFactory;
      }();

      var trackByIdentity = function trackByIdentity(index, item) {
        return item;
      };

      var ɵ0$b = trackByIdentity;
      /**
       * @deprecated v4.0.0 - Should not be part of public API.
       * @publicApi
       */

      var DefaultIterableDiffer = /*#__PURE__*/function () {
        function DefaultIterableDiffer(trackByFn) {
          _classCallCheck(this, DefaultIterableDiffer);

          this.length = 0; // Keeps track of the used records at any point in time (during & across `_check()` calls)

          this._linkedRecords = null; // Keeps track of the removed records at any point in time during `_check()` calls.

          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null; // Keeps track of records where custom track by is the same, but item identity has changed

          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = trackByFn || trackByIdentity;
        }

        _createClass2(DefaultIterableDiffer, [{
          key: "forEachItem",
          value: function forEachItem(fn) {
            var record;

            for (record = this._itHead; record !== null; record = record._next) {
              fn(record);
            }
          }
        }, {
          key: "forEachOperation",
          value: function forEachOperation(fn) {
            var nextIt = this._itHead;
            var nextRemove = this._removalsHead;
            var addRemoveOffset = 0;
            var moveOffsets = null;

            while (nextIt || nextRemove) {
              // Figure out which is the next record to process
              // Order: remove, add, move
              var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
              var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
              var currentIndex = record.currentIndex; // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary

              if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
              } else {
                nextIt = nextIt._next;

                if (record.previousIndex == null) {
                  addRemoveOffset++;
                } else {
                  // INVARIANT:  currentIndex < previousIndex
                  if (!moveOffsets) moveOffsets = [];
                  var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                  var localCurrentIndex = currentIndex - addRemoveOffset;

                  if (localMovePreviousIndex != localCurrentIndex) {
                    for (var i = 0; i < localMovePreviousIndex; i++) {
                      var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                      var index = offset + i;

                      if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                        moveOffsets[i] = offset + 1;
                      }
                    }

                    var previousIndex = record.previousIndex;
                    moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                  }
                }
              }

              if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
              }
            }
          }
        }, {
          key: "forEachPreviousItem",
          value: function forEachPreviousItem(fn) {
            var record;

            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
              fn(record);
            }
          }
        }, {
          key: "forEachAddedItem",
          value: function forEachAddedItem(fn) {
            var record;

            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
            }
          }
        }, {
          key: "forEachMovedItem",
          value: function forEachMovedItem(fn) {
            var record;

            for (record = this._movesHead; record !== null; record = record._nextMoved) {
              fn(record);
            }
          }
        }, {
          key: "forEachRemovedItem",
          value: function forEachRemovedItem(fn) {
            var record;

            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
            }
          }
        }, {
          key: "forEachIdentityChange",
          value: function forEachIdentityChange(fn) {
            var record;

            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
              fn(record);
            }
          }
        }, {
          key: "diff",
          value: function diff(collection) {
            if (collection == null) collection = [];

            if (!isListLikeIterable(collection)) {
              throw new Error("Error trying to diff '".concat(stringify(collection), "'. Only arrays and iterables are allowed"));
            }

            if (this.check(collection)) {
              return this;
            } else {
              return null;
            }
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {}
        }, {
          key: "check",
          value: function check(collection) {
            var _this151 = this;

            this._reset();

            var record = this._itHead;
            var mayBeDirty = false;
            var index;
            var item;
            var itemTrackBy;

            if (Array.isArray(collection)) {
              this.length = collection.length;

              for (var _index3 = 0; _index3 < this.length; _index3++) {
                item = collection[_index3];
                itemTrackBy = this._trackByFn(_index3, item);

                if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                  record = this._mismatch(record, item, itemTrackBy, _index3);
                  mayBeDirty = true;
                } else {
                  if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = this._verifyReinsertion(record, item, itemTrackBy, _index3);
                  }

                  if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
                }

                record = record._next;
              }
            } else {
              index = 0;
              iterateListLike(collection, function (item) {
                itemTrackBy = _this151._trackByFn(index, item);

                if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                  record = _this151._mismatch(record, item, itemTrackBy, index);
                  mayBeDirty = true;
                } else {
                  if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = _this151._verifyReinsertion(record, item, itemTrackBy, index);
                  }

                  if (!Object.is(record.item, item)) _this151._addIdentityChange(record, item);
                }

                record = record._next;
                index++;
              });
              this.length = index;
            }

            this._truncate(record);

            this.collection = collection;
            return this.isDirty;
          }
          /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
           * changes.
           */

        }, {
          key: "isDirty",
          get: function get() {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
          }
          /**
           * Reset the state of the change objects to show no changes. This means set previousKey to
           * currentKey, and clear all of the queues (additions, moves, removals).
           * Set the previousIndexes of moved and added items to their currentIndexes
           * Reset the list of additions, moves and removals
           *
           * @internal
           */

        }, {
          key: "_reset",
          value: function _reset() {
            if (this.isDirty) {
              var record;

              for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
              }

              for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
              }

              this._additionsHead = this._additionsTail = null;

              for (record = this._movesHead; record !== null; record = record._nextMoved) {
                record.previousIndex = record.currentIndex;
              }

              this._movesHead = this._movesTail = null;
              this._removalsHead = this._removalsTail = null;
              this._identityChangesHead = this._identityChangesTail = null; // TODO(vicb): when assert gets supported
              // assert(!this.isDirty);
            }
          }
          /**
           * This is the core function which handles differences between collections.
           *
           * - `record` is the record which we saw at this position last time. If null then it is a new
           *   item.
           * - `item` is the current item in the collection
           * - `index` is the position of the item in the collection
           *
           * @internal
           */

        }, {
          key: "_mismatch",
          value: function _mismatch(record, item, itemTrackBy, index) {
            // The previous record after which we will append the current one.
            var previousRecord;

            if (record === null) {
              previousRecord = this._itTail;
            } else {
              previousRecord = record._prev; // Remove the record from the collection since we know it does not match the item.

              this._remove(record);
            } // See if we have evicted the item, which used to be at some anterior position of _itHead list.


            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

            if (record !== null) {
              // It is an item which we have evicted earlier: reinsert it back into the list.
              // But first we need to check if identity changed, so we can update in view if necessary.
              if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

              this._reinsertAfter(record, previousRecord, index);
            } else {
              // Attempt to see if the item is at some posterior position of _itHead list.
              record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);

              if (record !== null) {
                // We have the item in _itHead at/after `index` position. We need to move it forward in the
                // collection.
                // But first we need to check if identity changed, so we can update in view if necessary.
                if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

                this._moveAfter(record, previousRecord, index);
              } else {
                // It is a new item: add it.
                record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
              }
            }

            return record;
          }
          /**
           * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
           *
           * Use case: `[a, a]` => `[b, a, a]`
           *
           * If we did not have this check then the insertion of `b` would:
           *   1) evict first `a`
           *   2) insert `b` at `0` index.
           *   3) leave `a` at index `1` as is. <-- this is wrong!
           *   3) reinsert `a` at index 2. <-- this is wrong!
           *
           * The correct behavior is:
           *   1) evict first `a`
           *   2) insert `b` at `0` index.
           *   3) reinsert `a` at index 1.
           *   3) move `a` at from `1` to `2`.
           *
           *
           * Double check that we have not evicted a duplicate item. We need to check if the item type may
           * have already been removed:
           * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
           * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
           * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
           * at the end.
           *
           * @internal
           */

        }, {
          key: "_verifyReinsertion",
          value: function _verifyReinsertion(record, item, itemTrackBy, index) {
            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

            if (reinsertRecord !== null) {
              record = this._reinsertAfter(reinsertRecord, record._prev, index);
            } else if (record.currentIndex != index) {
              record.currentIndex = index;

              this._addToMoves(record, index);
            }

            return record;
          }
          /**
           * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
           *
           * - `record` The first excess {@link IterableChangeRecord_}.
           *
           * @internal
           */

        }, {
          key: "_truncate",
          value: function _truncate(record) {
            // Anything after that needs to be removed;
            while (record !== null) {
              var nextRecord = record._next;

              this._addToRemovals(this._unlink(record));

              record = nextRecord;
            }

            if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.clear();
            }

            if (this._additionsTail !== null) {
              this._additionsTail._nextAdded = null;
            }

            if (this._movesTail !== null) {
              this._movesTail._nextMoved = null;
            }

            if (this._itTail !== null) {
              this._itTail._next = null;
            }

            if (this._removalsTail !== null) {
              this._removalsTail._nextRemoved = null;
            }

            if (this._identityChangesTail !== null) {
              this._identityChangesTail._nextIdentityChange = null;
            }
          }
          /** @internal */

        }, {
          key: "_reinsertAfter",
          value: function _reinsertAfter(record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.remove(record);
            }

            var prev = record._prevRemoved;
            var next = record._nextRemoved;

            if (prev === null) {
              this._removalsHead = next;
            } else {
              prev._nextRemoved = next;
            }

            if (next === null) {
              this._removalsTail = prev;
            } else {
              next._prevRemoved = prev;
            }

            this._insertAfter(record, prevRecord, index);

            this._addToMoves(record, index);

            return record;
          }
          /** @internal */

        }, {
          key: "_moveAfter",
          value: function _moveAfter(record, prevRecord, index) {
            this._unlink(record);

            this._insertAfter(record, prevRecord, index);

            this._addToMoves(record, index);

            return record;
          }
          /** @internal */

        }, {
          key: "_addAfter",
          value: function _addAfter(record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);

            if (this._additionsTail === null) {
              // TODO(vicb):
              // assert(this._additionsHead === null);
              this._additionsTail = this._additionsHead = record;
            } else {
              // TODO(vicb):
              // assert(_additionsTail._nextAdded === null);
              // assert(record._nextAdded === null);
              this._additionsTail = this._additionsTail._nextAdded = record;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_insertAfter",
          value: function _insertAfter(record, prevRecord, index) {
            // TODO(vicb):
            // assert(record != prevRecord);
            // assert(record._next === null);
            // assert(record._prev === null);
            var next = prevRecord === null ? this._itHead : prevRecord._next; // TODO(vicb):
            // assert(next != record);
            // assert(prevRecord != record);

            record._next = next;
            record._prev = prevRecord;

            if (next === null) {
              this._itTail = record;
            } else {
              next._prev = record;
            }

            if (prevRecord === null) {
              this._itHead = record;
            } else {
              prevRecord._next = record;
            }

            if (this._linkedRecords === null) {
              this._linkedRecords = new _DuplicateMap();
            }

            this._linkedRecords.put(record);

            record.currentIndex = index;
            return record;
          }
          /** @internal */

        }, {
          key: "_remove",
          value: function _remove(record) {
            return this._addToRemovals(this._unlink(record));
          }
          /** @internal */

        }, {
          key: "_unlink",
          value: function _unlink(record) {
            if (this._linkedRecords !== null) {
              this._linkedRecords.remove(record);
            }

            var prev = record._prev;
            var next = record._next; // TODO(vicb):
            // assert((record._prev = null) === null);
            // assert((record._next = null) === null);

            if (prev === null) {
              this._itHead = next;
            } else {
              prev._next = next;
            }

            if (next === null) {
              this._itTail = prev;
            } else {
              next._prev = prev;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_addToMoves",
          value: function _addToMoves(record, toIndex) {
            // TODO(vicb):
            // assert(record._nextMoved === null);
            if (record.previousIndex === toIndex) {
              return record;
            }

            if (this._movesTail === null) {
              // TODO(vicb):
              // assert(_movesHead === null);
              this._movesTail = this._movesHead = record;
            } else {
              // TODO(vicb):
              // assert(_movesTail._nextMoved === null);
              this._movesTail = this._movesTail._nextMoved = record;
            }

            return record;
          }
        }, {
          key: "_addToRemovals",
          value: function _addToRemovals(record) {
            if (this._unlinkedRecords === null) {
              this._unlinkedRecords = new _DuplicateMap();
            }

            this._unlinkedRecords.put(record);

            record.currentIndex = null;
            record._nextRemoved = null;

            if (this._removalsTail === null) {
              // TODO(vicb):
              // assert(_removalsHead === null);
              this._removalsTail = this._removalsHead = record;
              record._prevRemoved = null;
            } else {
              // TODO(vicb):
              // assert(_removalsTail._nextRemoved === null);
              // assert(record._nextRemoved === null);
              record._prevRemoved = this._removalsTail;
              this._removalsTail = this._removalsTail._nextRemoved = record;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_addIdentityChange",
          value: function _addIdentityChange(record, item) {
            record.item = item;

            if (this._identityChangesTail === null) {
              this._identityChangesTail = this._identityChangesHead = record;
            } else {
              this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }

            return record;
          }
        }]);

        return DefaultIterableDiffer;
      }();

      var IterableChangeRecord_ = function IterableChangeRecord_(item, trackById) {
        _classCallCheck(this, IterableChangeRecord_);

        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */

        this._nextPrevious = null;
        /** @internal */

        this._prev = null;
        /** @internal */

        this._next = null;
        /** @internal */

        this._prevDup = null;
        /** @internal */

        this._nextDup = null;
        /** @internal */

        this._prevRemoved = null;
        /** @internal */

        this._nextRemoved = null;
        /** @internal */

        this._nextAdded = null;
        /** @internal */

        this._nextMoved = null;
        /** @internal */

        this._nextIdentityChange = null;
      }; // A linked list of IterableChangeRecords with the same IterableChangeRecord_.item


      var _DuplicateItemRecordList = /*#__PURE__*/function () {
        function _DuplicateItemRecordList() {
          _classCallCheck(this, _DuplicateItemRecordList);

          /** @internal */
          this._head = null;
          /** @internal */

          this._tail = null;
        }
        /**
         * Append the record to the list of duplicates.
         *
         * Note: by design all records in the list of duplicates hold the same value in record.item.
         */


        _createClass2(_DuplicateItemRecordList, [{
          key: "add",
          value: function add(record) {
            if (this._head === null) {
              this._head = this._tail = record;
              record._nextDup = null;
              record._prevDup = null;
            } else {
              // TODO(vicb):
              // assert(record.item ==  _head.item ||
              //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
              this._tail._nextDup = record;
              record._prevDup = this._tail;
              record._nextDup = null;
              this._tail = record;
            }
          } // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
          // IterableChangeRecord_.currentIndex >= atOrAfterIndex

        }, {
          key: "get",
          value: function get(trackById, atOrAfterIndex) {
            var record;

            for (record = this._head; record !== null; record = record._nextDup) {
              if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
                return record;
              }
            }

            return null;
          }
          /**
           * Remove one {@link IterableChangeRecord_} from the list of duplicates.
           *
           * Returns whether the list of duplicates is empty.
           */

        }, {
          key: "remove",
          value: function remove(record) {
            // TODO(vicb):
            // assert(() {
            //  // verify that the record being removed is in the list.
            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
            //    if (identical(cursor, record)) return true;
            //  }
            //  return false;
            //});
            var prev = record._prevDup;
            var next = record._nextDup;

            if (prev === null) {
              this._head = next;
            } else {
              prev._nextDup = next;
            }

            if (next === null) {
              this._tail = prev;
            } else {
              next._prevDup = prev;
            }

            return this._head === null;
          }
        }]);

        return _DuplicateItemRecordList;
      }();

      var _DuplicateMap = /*#__PURE__*/function () {
        function _DuplicateMap() {
          _classCallCheck(this, _DuplicateMap);

          this.map = new Map();
        }

        _createClass2(_DuplicateMap, [{
          key: "put",
          value: function put(record) {
            var key = record.trackById;
            var duplicates = this.map.get(key);

            if (!duplicates) {
              duplicates = new _DuplicateItemRecordList();
              this.map.set(key, duplicates);
            }

            duplicates.add(record);
          }
          /**
           * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
           * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
           *
           * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
           * have any more `a`s needs to return the second `a`.
           */

        }, {
          key: "get",
          value: function get(trackById, atOrAfterIndex) {
            var key = trackById;
            var recordList = this.map.get(key);
            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
          }
          /**
           * Removes a {@link IterableChangeRecord_} from the list of duplicates.
           *
           * The list of duplicates also is removed from the map if it gets empty.
           */

        }, {
          key: "remove",
          value: function remove(record) {
            var key = record.trackById;
            var recordList = this.map.get(key); // Remove the list of duplicates when it gets empty

            if (recordList.remove(record)) {
              this.map["delete"](key);
            }

            return record;
          }
        }, {
          key: "isEmpty",
          get: function get() {
            return this.map.size === 0;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.map.clear();
          }
        }]);

        return _DuplicateMap;
      }();

      function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var previousIndex = item.previousIndex;
        if (previousIndex === null) return previousIndex;
        var moveOffset = 0;

        if (moveOffsets && previousIndex < moveOffsets.length) {
          moveOffset = moveOffsets[previousIndex];
        }

        return previousIndex + addRemoveOffset + moveOffset;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DefaultKeyValueDifferFactory = /*#__PURE__*/function () {
        function DefaultKeyValueDifferFactory() {
          _classCallCheck(this, DefaultKeyValueDifferFactory);
        }

        _createClass2(DefaultKeyValueDifferFactory, [{
          key: "supports",
          value: function supports(obj) {
            return obj instanceof Map || isJsObject(obj);
          }
        }, {
          key: "create",
          value: function create() {
            return new DefaultKeyValueDiffer();
          }
        }]);

        return DefaultKeyValueDifferFactory;
      }();

      var DefaultKeyValueDiffer = /*#__PURE__*/function () {
        function DefaultKeyValueDiffer() {
          _classCallCheck(this, DefaultKeyValueDiffer);

          this._records = new Map();
          this._mapHead = null; // _appendAfter is used in the check loop

          this._appendAfter = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
        }

        _createClass2(DefaultKeyValueDiffer, [{
          key: "isDirty",
          get: function get() {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
          }
        }, {
          key: "forEachItem",
          value: function forEachItem(fn) {
            var record;

            for (record = this._mapHead; record !== null; record = record._next) {
              fn(record);
            }
          }
        }, {
          key: "forEachPreviousItem",
          value: function forEachPreviousItem(fn) {
            var record;

            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
              fn(record);
            }
          }
        }, {
          key: "forEachChangedItem",
          value: function forEachChangedItem(fn) {
            var record;

            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              fn(record);
            }
          }
        }, {
          key: "forEachAddedItem",
          value: function forEachAddedItem(fn) {
            var record;

            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
            }
          }
        }, {
          key: "forEachRemovedItem",
          value: function forEachRemovedItem(fn) {
            var record;

            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
            }
          }
        }, {
          key: "diff",
          value: function diff(map) {
            if (!map) {
              map = new Map();
            } else if (!(map instanceof Map || isJsObject(map))) {
              throw new Error("Error trying to diff '".concat(stringify(map), "'. Only maps and objects are allowed"));
            }

            return this.check(map) ? this : null;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {}
          /**
           * Check the current state of the map vs the previous.
           * The algorithm is optimised for when the keys do no change.
           */

        }, {
          key: "check",
          value: function check(map) {
            var _this152 = this;

            this._reset();

            var insertBefore = this._mapHead;
            this._appendAfter = null;

            this._forEach(map, function (value, key) {
              if (insertBefore && insertBefore.key === key) {
                _this152._maybeAddToChanges(insertBefore, value);

                _this152._appendAfter = insertBefore;
                insertBefore = insertBefore._next;
              } else {
                var record = _this152._getOrCreateRecordForKey(key, value);

                insertBefore = _this152._insertBeforeOrAppend(insertBefore, record);
              }
            }); // Items remaining at the end of the list have been deleted


            if (insertBefore) {
              if (insertBefore._prev) {
                insertBefore._prev._next = null;
              }

              this._removalsHead = insertBefore;

              for (var record = insertBefore; record !== null; record = record._nextRemoved) {
                if (record === this._mapHead) {
                  this._mapHead = null;
                }

                this._records["delete"](record.key);

                record._nextRemoved = record._next;
                record.previousValue = record.currentValue;
                record.currentValue = null;
                record._prev = null;
                record._next = null;
              }
            } // Make sure tails have no next records from previous runs


            if (this._changesTail) this._changesTail._nextChanged = null;
            if (this._additionsTail) this._additionsTail._nextAdded = null;
            return this.isDirty;
          }
          /**
           * Inserts a record before `before` or append at the end of the list when `before` is null.
           *
           * Notes:
           * - This method appends at `this._appendAfter`,
           * - This method updates `this._appendAfter`,
           * - The return value is the new value for the insertion pointer.
           */

        }, {
          key: "_insertBeforeOrAppend",
          value: function _insertBeforeOrAppend(before, record) {
            if (before) {
              var prev = before._prev;
              record._next = before;
              record._prev = prev;
              before._prev = record;

              if (prev) {
                prev._next = record;
              }

              if (before === this._mapHead) {
                this._mapHead = record;
              }

              this._appendAfter = before;
              return before;
            }

            if (this._appendAfter) {
              this._appendAfter._next = record;
              record._prev = this._appendAfter;
            } else {
              this._mapHead = record;
            }

            this._appendAfter = record;
            return null;
          }
        }, {
          key: "_getOrCreateRecordForKey",
          value: function _getOrCreateRecordForKey(key, value) {
            if (this._records.has(key)) {
              var _record = this._records.get(key);

              this._maybeAddToChanges(_record, value);

              var prev = _record._prev;
              var next = _record._next;

              if (prev) {
                prev._next = next;
              }

              if (next) {
                next._prev = prev;
              }

              _record._next = null;
              _record._prev = null;
              return _record;
            }

            var record = new KeyValueChangeRecord_(key);

            this._records.set(key, record);

            record.currentValue = value;

            this._addToAdditions(record);

            return record;
          }
          /** @internal */

        }, {
          key: "_reset",
          value: function _reset() {
            if (this.isDirty) {
              var record; // let `_previousMapHead` contain the state of the map before the changes

              this._previousMapHead = this._mapHead;

              for (record = this._previousMapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
              } // Update `record.previousValue` with the value of the item before the changes
              // We need to update all changed items (that's those which have been added and changed)


              for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
              }

              for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
              }

              this._changesHead = this._changesTail = null;
              this._additionsHead = this._additionsTail = null;
              this._removalsHead = null;
            }
          } // Add the record or a given key to the list of changes only when the value has actually changed

        }, {
          key: "_maybeAddToChanges",
          value: function _maybeAddToChanges(record, newValue) {
            if (!Object.is(newValue, record.currentValue)) {
              record.previousValue = record.currentValue;
              record.currentValue = newValue;

              this._addToChanges(record);
            }
          }
        }, {
          key: "_addToAdditions",
          value: function _addToAdditions(record) {
            if (this._additionsHead === null) {
              this._additionsHead = this._additionsTail = record;
            } else {
              this._additionsTail._nextAdded = record;
              this._additionsTail = record;
            }
          }
        }, {
          key: "_addToChanges",
          value: function _addToChanges(record) {
            if (this._changesHead === null) {
              this._changesHead = this._changesTail = record;
            } else {
              this._changesTail._nextChanged = record;
              this._changesTail = record;
            }
          }
          /** @internal */

        }, {
          key: "_forEach",
          value: function _forEach(obj, fn) {
            if (obj instanceof Map) {
              obj.forEach(fn);
            } else {
              Object.keys(obj).forEach(function (k) {
                return fn(obj[k], k);
              });
            }
          }
        }]);

        return DefaultKeyValueDiffer;
      }();

      var KeyValueChangeRecord_ = function KeyValueChangeRecord_(key) {
        _classCallCheck(this, KeyValueChangeRecord_);

        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */

        this._nextPrevious = null;
        /** @internal */

        this._next = null;
        /** @internal */

        this._prev = null;
        /** @internal */

        this._nextAdded = null;
        /** @internal */

        this._nextRemoved = null;
        /** @internal */

        this._nextChanged = null;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function defaultIterableDiffersFactory() {
        return new IterableDiffers([new DefaultIterableDifferFactory()]);
      }
      /**
       * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
       *
       * @publicApi
       */


      var IterableDiffers = /*#__PURE__*/function () {
        function IterableDiffers(factories) {
          _classCallCheck(this, IterableDiffers);

          this.factories = factories;
        }

        _createClass2(IterableDiffers, [{
          key: "find",
          value: function find(iterable) {
            var factory = this.factories.find(function (f) {
              return f.supports(iterable);
            });

            if (factory != null) {
              return factory;
            } else {
              throw new Error("Cannot find a differ supporting object '".concat(iterable, "' of type '").concat(getTypeNameForDebugging(iterable), "'"));
            }
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent != null) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new IterableDiffers(factories);
          }
          /**
           * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
           * inherited {@link IterableDiffers} instance with the provided factories and return a new
           * {@link IterableDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link IterableDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     IterableDiffers.extend([new ImmutableListDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: IterableDiffers,
              useFactory: function useFactory(parent) {
                // if parent is null, it means that we are in the root injector and we have just overridden
                // the default injection mechanism for IterableDiffers, in such a case just assume
                // `defaultIterableDiffersFactory`.
                return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
            };
          }
        }]);

        return IterableDiffers;
      }();
      /** @nocollapse */


      IterableDiffers.ɵprov = ɵɵdefineInjectable({
        token: IterableDiffers,
        providedIn: 'root',
        factory: defaultIterableDiffersFactory
      });

      function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function defaultKeyValueDiffersFactory() {
        return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
      }
      /**
       * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
       *
       * @publicApi
       */


      var KeyValueDiffers = /*#__PURE__*/function () {
        function KeyValueDiffers(factories) {
          _classCallCheck(this, KeyValueDiffers);

          this.factories = factories;
        }

        _createClass2(KeyValueDiffers, [{
          key: "find",
          value: function find(kv) {
            var factory = this.factories.find(function (f) {
              return f.supports(kv);
            });

            if (factory) {
              return factory;
            }

            throw new Error("Cannot find a differ supporting object '".concat(kv, "'"));
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new KeyValueDiffers(factories);
          }
          /**
           * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
           * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
           * {@link KeyValueDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link KeyValueDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: KeyValueDiffers,
              useFactory: function useFactory(parent) {
                // if parent is null, it means that we are in the root injector and we have just overridden
                // the default injection mechanism for KeyValueDiffers, in such a case just assume
                // `defaultKeyValueDiffersFactory`.
                return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
            };
          }
        }]);

        return KeyValueDiffers;
      }();
      /** @nocollapse */


      KeyValueDiffers.ɵprov = ɵɵdefineInjectable({
        token: KeyValueDiffers,
        providedIn: 'root',
        factory: defaultKeyValueDiffersFactory
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function collectNativeNodes(tView, lView, tNode, result) {
        var isProjection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        while (tNode !== null) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 16
          /* Projection */
          | 32
          /* Icu */
          );
          var lNode = lView[tNode.index];

          if (lNode !== null) {
            result.push(unwrapRNode(lNode));
          } // A given lNode can represent either a native node or a LContainer (when it is a host of a
          // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
          // from the views in this container.


          if (isLContainer(lNode)) {
            for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
              var lViewInAContainer = lNode[i];
              var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;

              if (lViewFirstChildTNode !== null) {
                collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
              }
            }
          }

          var tNodeType = tNode.type;

          if (tNodeType & 8
          /* ElementContainer */
          ) {
              collectNativeNodes(tView, lView, tNode.child, result);
            } else if (tNodeType & 32
          /* Icu */
          ) {
              var nextRNode = icuContainerIterate(tNode, lView);
              var rNode = void 0;

              while (rNode = nextRNode()) {
                result.push(rNode);
              }
            } else if (tNodeType & 16
          /* Projection */
          ) {
              var nodesInSlot = getProjectionNodes(lView, tNode);

              if (Array.isArray(nodesInSlot)) {
                result.push.apply(result, _toConsumableArray(nodesInSlot));
              } else {
                var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
                ngDevMode && assertParentView(parentView);
                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
              }
            }

          tNode = isProjection ? tNode.projectionNext : tNode.next;
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ViewRef = /*#__PURE__*/function () {
        function ViewRef(
        /**
         * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
         *
         * When ViewRef is created for a dynamic component, this also represents the `LView` for the
         * component.
         *
         * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
         * view.
         *
         * @internal
         */
        _lView,
        /**
         * This represents the `LView` associated with the point where `ChangeDetectorRef` was
         * requested.
         *
         * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
         */
        _cdRefInjectingView) {
          _classCallCheck(this, ViewRef);

          this._lView = _lView;
          this._cdRefInjectingView = _cdRefInjectingView;
          this._appRef = null;
          this._attachedToViewContainer = false;
        }

        _createClass2(ViewRef, [{
          key: "rootNodes",
          get: function get() {
            var lView = this._lView;
            var tView = lView[TVIEW];
            return collectNativeNodes(tView, lView, tView.firstChild, []);
          }
        }, {
          key: "context",
          get: function get() {
            return this._lView[CONTEXT];
          }
        }, {
          key: "destroyed",
          get: function get() {
            return (this._lView[FLAGS] & 256
            /* Destroyed */
            ) === 256
            /* Destroyed */
            ;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._appRef) {
              this._appRef.detachView(this);
            } else if (this._attachedToViewContainer) {
              var parent = this._lView[PARENT];

              if (isLContainer(parent)) {
                var viewRefs = parent[VIEW_REFS];
                var index = viewRefs ? viewRefs.indexOf(this) : -1;

                if (index > -1) {
                  ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');
                  detachView(parent, index);
                  removeFromArray(viewRefs, index);
                }
              }

              this._attachedToViewContainer = false;
            }

            destroyLView(this._lView[TVIEW], this._lView);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
          }
          /**
           * Marks a view and all of its ancestors dirty.
           *
           * It also triggers change detection by calling `scheduleTick` internally, which coalesces
           * multiple `markForCheck` calls to into one change detection run.
           *
           * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
           * checked when it needs to be re-rendered but the two normal triggers haven't marked it
           * dirty (i.e. inputs haven't changed and events haven't fired in the view).
           *
           * <!-- TODO: Add a link to a chapter on OnPush components -->
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Component({
           *   selector: 'my-app',
           *   template: `Number of ticks: {{numberOfTicks}}`
           *   changeDetection: ChangeDetectionStrategy.OnPush,
           * })
           * class AppComponent {
           *   numberOfTicks = 0;
           *
           *   constructor(private ref: ChangeDetectorRef) {
           *     setInterval(() => {
           *       this.numberOfTicks++;
           *       // the following is required, otherwise the view will not be updated
           *       this.ref.markForCheck();
           *     }, 1000);
           *   }
           * }
           * ```
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            markViewDirty(this._cdRefInjectingView || this._lView);
          }
          /**
           * Detaches the view from the change detection tree.
           *
           * Detached views will not be checked during change detection runs until they are
           * re-attached, even if they are dirty. `detach` can be used in combination with
           * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
           * detection checks.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example defines a component with a large list of readonly data.
           * Imagine the data changes constantly, many times per second. For performance reasons,
           * we want to check and update the list every five seconds. We can do that by detaching
           * the component's change detector and doing a local check every five seconds.
           *
           * ```typescript
           * class DataProvider {
           *   // in a real application the returned data will be different every time
           *   get data() {
           *     return [1,2,3,4,5];
           *   }
           * }
           *
           * @Component({
           *   selector: 'giant-list',
           *   template: `
           *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
           *   `,
           * })
           * class GiantList {
           *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
           *     ref.detach();
           *     setInterval(() => {
           *       this.ref.detectChanges();
           *     }, 5000);
           *   }
           * }
           *
           * @Component({
           *   selector: 'app',
           *   providers: [DataProvider],
           *   template: `
           *     <giant-list><giant-list>
           *   `,
           * })
           * class App {
           * }
           * ```
           */

        }, {
          key: "detach",
          value: function detach() {
            this._lView[FLAGS] &= ~128
            /* Attached */
            ;
          }
          /**
           * Re-attaches a view to the change detection tree.
           *
           * This can be used to re-attach views that were previously detached from the tree
           * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example creates a component displaying `live` data. The component will detach
           * its change detector from the main change detector tree when the component's live property
           * is set to false.
           *
           * ```typescript
           * class DataProvider {
           *   data = 1;
           *
           *   constructor() {
           *     setInterval(() => {
           *       this.data = this.data * 2;
           *     }, 500);
           *   }
           * }
           *
           * @Component({
           *   selector: 'live-data',
           *   inputs: ['live'],
           *   template: 'Data: {{dataProvider.data}}'
           * })
           * class LiveData {
           *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
           *
           *   set live(value) {
           *     if (value) {
           *       this.ref.reattach();
           *     } else {
           *       this.ref.detach();
           *     }
           *   }
           * }
           *
           * @Component({
           *   selector: 'my-app',
           *   providers: [DataProvider],
           *   template: `
           *     Live Update: <input type="checkbox" [(ngModel)]="live">
           *     <live-data [live]="live"><live-data>
           *   `,
           * })
           * class AppComponent {
           *   live = true;
           * }
           * ```
           */

        }, {
          key: "reattach",
          value: function reattach() {
            this._lView[FLAGS] |= 128
            /* Attached */
            ;
          }
          /**
           * Checks the view and its children.
           *
           * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
           * local change detection checks.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example defines a component with a large list of readonly data.
           * Imagine, the data changes constantly, many times per second. For performance reasons,
           * we want to check and update the list every five seconds.
           *
           * We can do that by detaching the component's change detector and doing a local change detection
           * check every five seconds.
           *
           * See {@link ChangeDetectorRef#detach detach} for more information.
           */

        }, {
          key: "detectChanges",
          value: function detectChanges() {
            detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
          }
          /**
           * Checks the change detector and its children, and throws if any changes are detected.
           *
           * This is used in development mode to verify that running change detection doesn't
           * introduce other changes.
           */

        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
          }
        }, {
          key: "attachToViewContainerRef",
          value: function attachToViewContainerRef() {
            if (this._appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
            }

            this._attachedToViewContainer = true;
          }
        }, {
          key: "detachFromAppRef",
          value: function detachFromAppRef() {
            this._appRef = null;
            renderDetachView(this._lView[TVIEW], this._lView);
          }
        }, {
          key: "attachToAppRef",
          value: function attachToAppRef(appRef) {
            if (this._attachedToViewContainer) {
              throw new Error('This view is already attached to a ViewContainer!');
            }

            this._appRef = appRef;
          }
        }]);

        return ViewRef;
      }();
      /** @internal */


      var RootViewRef = /*#__PURE__*/function (_ViewRef) {
        _inherits(RootViewRef, _ViewRef);

        var _super118 = _createSuper(RootViewRef);

        function RootViewRef(_view) {
          var _this153;

          _classCallCheck(this, RootViewRef);

          _this153 = _super118.call(this, _view);
          _this153._view = _view;
          return _this153;
        }

        _createClass2(RootViewRef, [{
          key: "detectChanges",
          value: function detectChanges() {
            detectChangesInRootView(this._view);
          }
        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            checkNoChangesInRootView(this._view);
          }
        }, {
          key: "context",
          get: function get() {
            return null;
          }
        }]);

        return RootViewRef;
      }(ViewRef);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;
      var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
      /**
       * Base class that provides change detection functionality.
       * A change-detection tree collects all views that are to be checked for changes.
       * Use the methods to add and remove views from the tree, initiate change-detection,
       * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.
       *
       * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)
       * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)
       *
       * @usageNotes
       *
       * The following examples demonstrate how to modify default change-detection behavior
       * to perform explicit detection when needed.
       *
       * ### Use `markForCheck()` with `CheckOnce` strategy
       *
       * The following example sets the `OnPush` change-detection strategy for a component
       * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
       * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).
       *
       * <code-example path="core/ts/change_detect/change-detection.ts"
       * region="mark-for-check"></code-example>
       *
       * ### Detach change detector to limit how often check occurs
       *
       * The following example defines a component with a large list of read-only data
       * that is expected to change constantly, many times per second.
       * To improve performance, we want to check and update the list
       * less often than the changes actually occur. To do that, we detach
       * the component's change detector and perform an explicit local check every five seconds.
       *
       * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
       *
       *
       * ### Reattaching a detached component
       *
       * The following example creates a component displaying live data.
       * The component detaches its change detector from the main change detector tree
       * when the `live` property is set to false, and reattaches it when the property
       * becomes true.
       *
       * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
       *
       * @publicApi
       */

      var ChangeDetectorRef = function ChangeDetectorRef() {
        _classCallCheck(this, ChangeDetectorRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      ChangeDetectorRef.__NG_ELEMENT_ID__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY;
      /**
       * This marker is need so that the JIT compiler can correctly identify this class as special.
       *
       * @internal
       * @nocollapse
       */

      ChangeDetectorRef.__ChangeDetectorRef__ = true;
      /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */

      function injectChangeDetectorRef() {
        var isPipe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return createViewRef(getCurrentTNode(), getLView(), isPipe);
      }
      /**
       * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
       *
       * @param tNode The node that is requesting a ChangeDetectorRef
       * @param lView The view to which the node belongs
       * @param isPipe Whether the view is being injected into a pipe.
       * @returns The ChangeDetectorRef to use
       */


      function createViewRef(tNode, lView, isPipe) {
        // `isComponentView` will be true for Component and Directives (but not for Pipes).
        // See https://github.com/angular/angular/pull/33072 for proper fix
        var isComponentView = !isPipe && isComponentHost(tNode);

        if (isComponentView) {
          // The LView represents the location where the component is declared.
          // Instead we want the LView for the component View and so we need to look it up.
          var componentView = getComponentLViewByIndex(tNode.index, lView); // look down

          return new ViewRef(componentView, componentView);
        } else if (tNode.type & (3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        | 32
        /* Icu */
        )) {
          // The LView represents the location where the injection is requested from.
          // We need to locate the containing LView (in case where the `lView` is an embedded view)
          var hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up

          return new ViewRef(hostComponentView, lView);
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Structural diffing for `Object`s and `Map`s.
       */


      var keyValDiff = [new DefaultKeyValueDifferFactory()];
      /**
       * Structural diffing for `Iterable` types such as `Array`s.
       */

      var iterableDiff = [new DefaultIterableDifferFactory()];
      var defaultIterableDiffers = new IterableDiffers(iterableDiff);
      var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;
      var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;
      /**
       * Represents an embedded template that can be used to instantiate embedded views.
       * To instantiate embedded views based on a template, use the `ViewContainerRef`
       * method `createEmbeddedView()`.
       *
       * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
       * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
       * is injected into the constructor of the directive,
       * using the `TemplateRef` token.
       *
       * You can also use a `Query` to find a `TemplateRef` associated with
       * a component or a directive.
       *
       * @see `ViewContainerRef`
       * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
       *
       * @publicApi
       */

      var TemplateRef = function TemplateRef() {
        _classCallCheck(this, TemplateRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      TemplateRef.__NG_ELEMENT_ID__ = SWITCH_TEMPLATE_REF_FACTORY;
      var ViewEngineTemplateRef = TemplateRef;

      var R3TemplateRef = /*#__PURE__*/function (_ViewEngineTemplateRe) {
        _inherits(TemplateRef, _ViewEngineTemplateRe);

        var _super119 = _createSuper(TemplateRef);

        function TemplateRef(_declarationLView, _declarationTContainer, elementRef) {
          var _this154;

          _classCallCheck(this, TemplateRef);

          _this154 = _super119.call(this);
          _this154._declarationLView = _declarationLView;
          _this154._declarationTContainer = _declarationTContainer;
          _this154.elementRef = elementRef;
          return _this154;
        }

        _createClass2(TemplateRef, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(context) {
            var embeddedTView = this._declarationTContainer.tViews;
            var embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16
            /* CheckAlways */
            , null, embeddedTView.declTNode, null, null, null, null);
            var declarationLContainer = this._declarationLView[this._declarationTContainer.index];
            ngDevMode && assertLContainer(declarationLContainer);
            embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
            var declarationViewLQueries = this._declarationLView[QUERIES];

            if (declarationViewLQueries !== null) {
              embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
            }

            renderView(embeddedTView, embeddedLView, context);
            return new ViewRef(embeddedLView);
          }
        }]);

        return TemplateRef;
      }(ViewEngineTemplateRef);
      /**
       * Creates a TemplateRef given a node.
       *
       * @returns The TemplateRef instance to use
       */


      function injectTemplateRef() {
        return createTemplateRef(getCurrentTNode(), getLView());
      }
      /**
       * Creates a TemplateRef and stores it on the injector.
       *
       * @param hostTNode The node on which a TemplateRef is requested
       * @param hostLView The `LView` to which the node belongs
       * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
       */


      function createTemplateRef(hostTNode, hostLView) {
        if (hostTNode.type & 4
        /* Container */
        ) {
            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
            return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
          }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
       * Provides access to the `NgModule` instance and related objects.
       *
       * @publicApi
       */


      var NgModuleRef = function NgModuleRef() {
        _classCallCheck(this, NgModuleRef);
      };
      /**
       * @publicApi
       */


      var NgModuleFactory = function NgModuleFactory() {
        _classCallCheck(this, NgModuleFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;
      var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
      /**
       * Represents a container where one or more views can be attached to a component.
       *
       * Can contain *host views* (created by instantiating a
       * component with the `createComponent()` method), and *embedded views*
       * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
       *
       * A view container instance can contain other view containers,
       * creating a [view hierarchy](guide/glossary#view-tree).
       *
       * @see `ComponentRef`
       * @see `EmbeddedViewRef`
       *
       * @publicApi
       */

      var ViewContainerRef = function ViewContainerRef() {
        _classCallCheck(this, ViewContainerRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      ViewContainerRef.__NG_ELEMENT_ID__ = SWITCH_VIEW_CONTAINER_REF_FACTORY;
      /**
       * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
       * already exists, retrieves the existing ViewContainerRef.
       *
       * @returns The ViewContainerRef instance to use
       */

      function injectViewContainerRef() {
        var previousTNode = getCurrentTNode();
        return createContainerRef(previousTNode, getLView());
      }

      var VE_ViewContainerRef = ViewContainerRef;

      var R3ViewContainerRef = /*#__PURE__*/function (_VE_ViewContainerRef) {
        _inherits(ViewContainerRef, _VE_ViewContainerRef);

        var _super120 = _createSuper(ViewContainerRef);

        function ViewContainerRef(_lContainer, _hostTNode, _hostLView) {
          var _this155;

          _classCallCheck(this, ViewContainerRef);

          _this155 = _super120.call(this);
          _this155._lContainer = _lContainer;
          _this155._hostTNode = _hostTNode;
          _this155._hostLView = _hostLView;
          return _this155;
        }

        _createClass2(ViewContainerRef, [{
          key: "element",
          get: function get() {
            return createElementRef(this._hostTNode, this._hostLView);
          }
        }, {
          key: "injector",
          get: function get() {
            return new NodeInjector(this._hostTNode, this._hostLView);
          }
          /** @deprecated No replacement */

        }, {
          key: "parentInjector",
          get: function get() {
            var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);

            if (hasParentInjector(parentLocation)) {
              var parentView = getParentInjectorView(parentLocation, this._hostLView);
              var injectorIndex = getParentInjectorIndex(parentLocation);
              ngDevMode && assertNodeInjector(parentView, injectorIndex);
              var parentTNode = parentView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ];
              return new NodeInjector(parentTNode, parentView);
            } else {
              return new NodeInjector(null, this._hostLView);
            }
          }
        }, {
          key: "clear",
          value: function clear() {
            while (this.length > 0) {
              this.remove(this.length - 1);
            }
          }
        }, {
          key: "get",
          value: function get(index) {
            var viewRefs = getViewRefs(this._lContainer);
            return viewRefs !== null && viewRefs[index] || null;
          }
        }, {
          key: "length",
          get: function get() {
            return this._lContainer.length - CONTAINER_HEADER_OFFSET;
          }
        }, {
          key: "createEmbeddedView",
          value: function createEmbeddedView(templateRef, context, index) {
            var viewRef = templateRef.createEmbeddedView(context || {});
            this.insert(viewRef, index);
            return viewRef;
          }
        }, {
          key: "createComponent",
          value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;

            if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {
              // DO NOT REFACTOR. The code here used to have a `value || undefined` expression
              // which seems to cause internal google apps to fail. This is documented in the
              // following internal bug issue: go/b/142967802
              var result = contextInjector.get(NgModuleRef, null);

              if (result) {
                ngModuleRef = result;
              }
            }

            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
          }
        }, {
          key: "insert",
          value: function insert(viewRef, index) {
            var lView = viewRef._lView;
            var tView = lView[TVIEW];

            if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }

            if (viewAttachedToContainer(lView)) {
              // If view is already attached, detach it first so we clean up references appropriately.
              var prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for
              // those cases will be:
              // equal to -1 for views attached to this ViewContainerRef
              // >= 0 for views attached to a different ViewContainerRef

              if (prevIdx !== -1) {
                this.detach(prevIdx);
              } else {
                var prevLContainer = lView[PARENT];
                ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on
                // LView (nor anywhere else).

                var prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
                prevVCRef.detach(prevVCRef.indexOf(viewRef));
              }
            } // Logical operation of adding `LView` to `LContainer`


            var adjustedIdx = this._adjustIndex(index);

            var lContainer = this._lContainer;
            insertView(tView, lView, lContainer, adjustedIdx); // Physical operation of adding the DOM nodes.

            var beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);
            var renderer = lView[RENDERER];
            var parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);

            if (parentRNode !== null) {
              addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
            }

            viewRef.attachToViewContainerRef();
            addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
            return viewRef;
          }
        }, {
          key: "move",
          value: function move(viewRef, newIndex) {
            if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot move a destroyed View in a ViewContainer!');
            }

            return this.insert(viewRef, newIndex);
          }
        }, {
          key: "indexOf",
          value: function indexOf(viewRef) {
            var viewRefsArr = getViewRefs(this._lContainer);
            return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
          }
        }, {
          key: "remove",
          value: function remove(index) {
            var adjustedIdx = this._adjustIndex(index, -1);

            var detachedView = detachView(this._lContainer, adjustedIdx);

            if (detachedView) {
              // Before destroying the view, remove it from the container's array of `ViewRef`s.
              // This ensures the view container length is updated before calling
              // `destroyLView`, which could recursively call view container methods that
              // rely on an accurate container length.
              // (e.g. a method on this view container being called by a child directive's OnDestroy
              // lifecycle hook)
              removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
              destroyLView(detachedView[TVIEW], detachedView);
            }
          }
        }, {
          key: "detach",
          value: function detach(index) {
            var adjustedIdx = this._adjustIndex(index, -1);

            var view = detachView(this._lContainer, adjustedIdx);
            var wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
            return wasDetached ? new ViewRef(view) : null;
          }
        }, {
          key: "_adjustIndex",
          value: function _adjustIndex(index) {
            var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (index == null) {
              return this.length + shift;
            }

            if (ngDevMode) {
              assertGreaterThan(index, -1, "ViewRef index must be positive, got ".concat(index)); // +1 because it's legal to insert at the end.

              assertLessThan(index, this.length + 1 + shift, 'index');
            }

            return index;
          }
        }]);

        return ViewContainerRef;
      }(VE_ViewContainerRef);

      function getViewRefs(lContainer) {
        return lContainer[VIEW_REFS];
      }

      function getOrCreateViewRefs(lContainer) {
        return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
      }
      /**
       * Creates a ViewContainerRef and stores it on the injector.
       *
       * @param ViewContainerRefToken The ViewContainerRef type
       * @param ElementRefToken The ElementRef type
       * @param hostTNode The node that is requesting a ViewContainerRef
       * @param hostLView The view to which the node belongs
       * @returns The ViewContainerRef instance to use
       */


      function createContainerRef(hostTNode, hostLView) {
        ngDevMode && assertTNodeType(hostTNode, 12
        /* AnyContainer */
        | 3
        /* AnyRNode */
        );
        var lContainer;
        var slotValue = hostLView[hostTNode.index];

        if (isLContainer(slotValue)) {
          // If the host is a container, we don't need to create a new LContainer
          lContainer = slotValue;
        } else {
          var commentNode; // If the host is an element container, the native host element is guaranteed to be a
          // comment and we can reuse that comment as anchor element for the new LContainer.
          // The comment node in question is already part of the DOM structure so we don't need to append
          // it again.

          if (hostTNode.type & 8
          /* ElementContainer */
          ) {
              commentNode = unwrapRNode(slotValue);
            } else {
            // If the host is a regular element, we have to insert a comment node manually which will
            // be used as an anchor when inserting elements. In this specific case we use low-level DOM
            // manipulation to insert it.
            var renderer = hostLView[RENDERER];
            ngDevMode && ngDevMode.rendererCreateComment++;
            commentNode = renderer.createComment(ngDevMode ? 'container' : '');
            var hostNative = getNativeByTNode(hostTNode, hostLView);
            var parentOfHostNative = nativeParentNode(renderer, hostNative);
            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
          }

          hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);
          addToViewTree(hostLView, lContainer);
        }

        return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '".concat(oldValue, "'. Current value: '").concat(currValue, "'.");

        if (isFirstCheck) {
          msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
        }

        return viewDebugError(msg, context);
      }

      function viewWrappedDebugError(err, context) {
        if (!(err instanceof Error)) {
          // errors that are not Error instances don't have a stack,
          // so it is ok to wrap them into a new Error object...
          err = new Error(err.toString());
        }

        _addDebugContext(err, context);

        return err;
      }

      function viewDebugError(msg, context) {
        var err = new Error(msg);

        _addDebugContext(err, context);

        return err;
      }

      function _addDebugContext(err, context) {
        err[ERROR_DEBUG_CONTEXT] = context;
        err[ERROR_LOGGER] = context.logError.bind(context);
      }

      function isViewDebugError(err) {
        return !!getDebugContext(err);
      }

      function viewDestroyedError(action) {
        return new Error("ViewDestroyedError: Attempt to use a destroyed view: ".concat(action));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Called before each cycle of a view's check to detect whether this is in the
      // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
      // lifecycle methods. Returns true if this check cycle should call lifecycle
      // methods.


      function shiftInitState(view, priorInitState, newInitState) {
        // Only update the InitState if we are currently in the prior state.
        // For example, only move into CallingInit if we are in BeforeInit. Only
        // move into CallingContentInit if we are in CallingInit. Normally this will
        // always be true because of how checkCycle is called in checkAndUpdateView.
        // However, if checkAndUpdateView is called recursively or if an exception is
        // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
        // from the beginning. This ensures the state is monotonically increasing,
        // terminating in the AfterInit state, which ensures the Init methods are called
        // at least once and only once.
        var state = view.state;
        var initState = state & 1792
        /* InitState_Mask */
        ;

        if (initState === priorInitState) {
          view.state = state & ~1792
          /* InitState_Mask */
          | newInitState;
          view.initIndex = -1;
          return true;
        }

        return initState === newInitState;
      } // Returns true if the lifecycle init method should be called for the node with
      // the given init index.


      function shouldCallLifecycleInitHook(view, initState, index) {
        if ((view.state & 1792
        /* InitState_Mask */
        ) === initState && view.initIndex <= index) {
          view.initIndex = index + 1;
          return true;
        }

        return false;
      }
      /**
       * Node instance data.
       *
       * We have a separate type per NodeType to save memory
       * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
       *
       * To keep our code monomorphic,
       * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
       * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
       * purposes.
       */


      var NodeData = function NodeData() {
        _classCallCheck(this, NodeData);
      };
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asTextData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asElementData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asProviderData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asPureExpressionData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asQueryList(view, index) {
        return view.nodes[index];
      }

      var DebugContext = function DebugContext() {
        _classCallCheck(this, DebugContext);
      };
      /**
       * This object is used to prevent cycles in the source files and to have a place where
       * debug mode can hook it. It is lazily filled when `isDevMode` is known.
       */


      var Services = {
        setCurrentNode: undefined,
        createRootView: undefined,
        createEmbeddedView: undefined,
        createComponentView: undefined,
        createNgModuleRef: undefined,
        overrideProvider: undefined,
        overrideComponentView: undefined,
        clearOverrides: undefined,
        checkAndUpdateView: undefined,
        checkNoChangesView: undefined,
        destroyView: undefined,
        resolveDep: undefined,
        createDebugContext: undefined,
        handleEvent: undefined,
        updateDirectives: undefined,
        updateRenderer: undefined,
        dirtyParentQueries: undefined
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var NOOP = function NOOP() {};

      var _tokenKeyCache = new Map();

      function tokenKey(token) {
        var key = _tokenKeyCache.get(token);

        if (!key) {
          key = stringify(token) + '_' + _tokenKeyCache.size;

          _tokenKeyCache.set(token, key);
        }

        return key;
      }

      function unwrapValue(view, nodeIdx, bindingIdx, value) {
        if (WrappedValue.isWrapped(value)) {
          value = WrappedValue.unwrap(value);
          var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
          var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
          view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
        }

        return value;
      }

      var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
      var EMPTY_RENDERER_TYPE_ID = '$$empty'; // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!

      function createRendererType2(values) {
        return {
          id: UNDEFINED_RENDERER_TYPE_ID,
          styles: values.styles,
          encapsulation: values.encapsulation,
          data: values.data
        };
      }

      var _renderCompCount$1 = 0;

      function resolveRendererType2(type) {
        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
          // first time we see this RendererType2. Initialize it...
          var isFilled = type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;

          if (isFilled) {
            type.id = "c".concat(_renderCompCount$1++);
          } else {
            type.id = EMPTY_RENDERER_TYPE_ID;
          }
        }

        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
          type = null;
        }

        return type || null;
      }

      function checkBinding(view, def, bindingIdx, value) {
        var oldValues = view.oldValues;

        if (view.state & 2
        /* FirstCheck */
        || !Object.is(oldValues[def.bindingIndex + bindingIdx], value)) {
          return true;
        }

        return false;
      }

      function checkAndUpdateBinding(view, def, bindingIdx, value) {
        if (checkBinding(view, def, bindingIdx, value)) {
          view.oldValues[def.bindingIndex + bindingIdx] = value;
          return true;
        }

        return false;
      }

      function checkBindingNoChanges(view, def, bindingIdx, value) {
        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];

        if (view.state & 1
        /* BeforeFirstCheck */
        || !devModeEqual(oldValue, value)) {
          var bindingName = def.bindings[bindingIdx].name;
          throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), "".concat(bindingName, ": ").concat(oldValue), "".concat(bindingName, ": ").concat(value), (view.state & 1
          /* BeforeFirstCheck */
          ) !== 0);
        }
      }

      function markParentViewsForCheck(view) {
        var currView = view;

        while (currView) {
          if (currView.def.flags & 2
          /* OnPush */
          ) {
              currView.state |= 8
              /* ChecksEnabled */
              ;
            }

          currView = currView.viewContainerParent || currView.parent;
        }
      }

      function markParentViewsForCheckProjectedViews(view, endView) {
        var currView = view;

        while (currView && currView !== endView) {
          currView.state |= 64
          /* CheckProjectedViews */
          ;
          currView = currView.viewContainerParent || currView.parent;
        }
      }

      function dispatchEvent(view, nodeIndex, eventName, event) {
        try {
          var nodeDef = view.def.nodes[nodeIndex];
          var startView = nodeDef.flags & 33554432
          /* ComponentView */
          ? asElementData(view, nodeIndex).componentView : view;
          markParentViewsForCheck(startView);
          return Services.handleEvent(view, nodeIndex, eventName, event);
        } catch (e) {
          // Attention: Don't rethrow, as it would cancel Observable subscriptions!
          view.root.errorHandler.handleError(e);
        }
      }

      function declaredViewContainer(view) {
        if (view.parent) {
          var parentView = view.parent;
          return asElementData(parentView, view.parentNodeDef.nodeIndex);
        }

        return null;
      }
      /**
       * for component views, this is the host element.
       * for embedded views, this is the index of the parent node
       * that contains the view container.
       */


      function viewParentEl(view) {
        var parentView = view.parent;

        if (parentView) {
          return view.parentNodeDef.parent;
        } else {
          return null;
        }
      }

      function renderNode(view, def) {
        switch (def.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return asElementData(view, def.nodeIndex).renderElement;

          case 2
          /* TypeText */
          :
            return asTextData(view, def.nodeIndex).renderText;
        }
      }

      function elementEventFullName(target, name) {
        return target ? "".concat(target, ":").concat(name) : name;
      }

      function isComponentView(view) {
        return !!view.parent && !!(view.parentNodeDef.flags & 32768
        /* Component */
        );
      }

      function isEmbeddedView(view) {
        return !!view.parent && !(view.parentNodeDef.flags & 32768
        /* Component */
        );
      }

      function filterQueryId(queryId) {
        return 1 << queryId % 32;
      }

      function splitMatchedQueriesDsl(matchedQueriesDsl) {
        var matchedQueries = {};
        var matchedQueryIds = 0;
        var references = {};

        if (matchedQueriesDsl) {
          matchedQueriesDsl.forEach(function (_ref6) {
            var _ref7 = _slicedToArray(_ref6, 2),
                queryId = _ref7[0],
                valueType = _ref7[1];

            if (typeof queryId === 'number') {
              matchedQueries[queryId] = valueType;
              matchedQueryIds |= filterQueryId(queryId);
            } else {
              references[queryId] = valueType;
            }
          });
        }

        return {
          matchedQueries: matchedQueries,
          references: references,
          matchedQueryIds: matchedQueryIds
        };
      }

      function splitDepsDsl(deps, sourceName) {
        return deps.map(function (value) {
          var token;
          var flags;

          if (Array.isArray(value)) {
            var _value3 = _slicedToArray(value, 2);

            flags = _value3[0];
            token = _value3[1];
          } else {
            flags = 0
            /* None */
            ;
            token = value;
          }

          if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
            Object.defineProperty(token, SOURCE, {
              value: sourceName,
              configurable: true
            });
          }

          return {
            flags: flags,
            token: token,
            tokenKey: tokenKey(token)
          };
        });
      }

      function getParentRenderElement(view, renderHost, def) {
        var renderParent = def.renderParent;

        if (renderParent) {
          if ((renderParent.flags & 1
          /* TypeElement */
          ) === 0 || (renderParent.flags & 33554432
          /* ComponentView */
          ) === 0 || renderParent.element.componentRendererType && (renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom || // TODO(FW-2290): remove the `encapsulation === 1` fallback logic in v12.
          renderParent.element.componentRendererType.encapsulation === 1)) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, def.renderParent.nodeIndex).renderElement;
          }
        } else {
          return renderHost;
        }
      }

      var DEFINITION_CACHE = new WeakMap();

      function resolveDefinition(factory) {
        var value = DEFINITION_CACHE.get(factory);

        if (!value) {
          value = factory(function () {
            return NOOP;
          });
          value.factory = factory;
          DEFINITION_CACHE.set(factory, value);
        }

        return value;
      }

      function rootRenderNodes(view) {
        var renderNodes = [];
        visitRootRenderNodes(view, 0
        /* Collect */
        , undefined, undefined, renderNodes);
        return renderNodes;
      }

      function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
        // We need to re-compute the parent node in case the nodes have been moved around manually
        if (action === 3
        /* RemoveChild */
        ) {
            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
          }

        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
      }

      function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & (1
          /* TypeElement */
          | 2
          /* TypeText */
          | 8
          /* TypeNgContent */
          )) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
          } // jump to next sibling


          i += nodeDef.childCount;
        }
      }

      function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
        var compView = view;

        while (compView && !isComponentView(compView)) {
          compView = compView.parent;
        }

        var hostView = compView.parent;
        var hostElDef = viewParentEl(compView);
        var startIndex = hostElDef.nodeIndex + 1;
        var endIndex = hostElDef.nodeIndex + hostElDef.childCount;

        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = hostView.def.nodes[i];

          if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
          } // jump to next sibling


          i += nodeDef.childCount;
        }

        if (!hostView.parent) {
          // a root view
          var projectedNodes = view.root.projectableNodes[ngContentIndex];

          if (projectedNodes) {
            for (var _i13 = 0; _i13 < projectedNodes.length; _i13++) {
              execRenderNodeAction(view, projectedNodes[_i13], action, parentNode, nextSibling, target);
            }
          }
        }
      }

      function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
        if (nodeDef.flags & 8
        /* TypeNgContent */
        ) {
            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
          } else {
          var rn = renderNode(view, nodeDef);

          if (action === 3
          /* RemoveChild */
          && nodeDef.flags & 33554432
          /* ComponentView */
          && nodeDef.bindingFlags & 48
          /* CatSyntheticProperty */
          ) {
            // Note: we might need to do both actions.
            if (nodeDef.bindingFlags & 16
            /* SyntheticProperty */
            ) {
              execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }

            if (nodeDef.bindingFlags & 32
            /* SyntheticHostProperty */
            ) {
              var compView = asElementData(view, nodeDef.nodeIndex).componentView;
              execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
            }
          } else {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
          }

          if (nodeDef.flags & 16777216
          /* EmbeddedViews */
          ) {
              var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;

              for (var k = 0; k < embeddedViews.length; k++) {
                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
              }
            }

          if (nodeDef.flags & 1
          /* TypeElement */
          && !nodeDef.element.name) {
            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
          }
        }
      }

      function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
        var renderer = view.renderer;

        switch (action) {
          case 1
          /* AppendChild */
          :
            renderer.appendChild(parentNode, renderNode);
            break;

          case 2
          /* InsertBefore */
          :
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;

          case 3
          /* RemoveChild */
          :
            renderer.removeChild(parentNode, renderNode);
            break;

          case 0
          /* Collect */
          :
            target.push(renderNode);
            break;
        }
      }

      var NS_PREFIX_RE = /^:([^:]+):(.+)$/;

      function splitNamespace(name) {
        if (name[0] === ':') {
          var match = name.match(NS_PREFIX_RE);
          return [match[1], match[2]];
        }

        return ['', name];
      }

      function calcBindingFlags(bindings) {
        var flags = 0;

        for (var i = 0; i < bindings.length; i++) {
          flags |= bindings[i].flags;
        }

        return flags;
      }

      function interpolate(valueCount, constAndInterp) {
        var result = '';

        for (var i = 0; i < valueCount * 2; i = i + 2) {
          result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
        }

        return result + constAndInterp[valueCount * 2];
      }

      function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
        switch (valueCount) {
          case 1:
            return c0 + _toStringWithNull(a1) + c1;

          case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

          case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

          case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

          case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

          case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

          case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

          case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

          case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

          default:
            throw new Error("Does not support more than 9 expressions");
        }
      }

      function _toStringWithNull(v) {
        return v != null ? v.toString() : '';
      }

      var EMPTY_ARRAY$4 = [];
      var EMPTY_MAP = {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var UNDEFINED_VALUE = {};
      var InjectorRefTokenKey = tokenKey(Injector);
      var INJECTORRefTokenKey = tokenKey(INJECTOR$1);
      var NgModuleRefTokenKey = tokenKey(NgModuleRef);

      function moduleProvideDef(flags, token, value, deps) {
        // Need to resolve forwardRefs as e.g. for `useValue` we
        // lowered the expression and then stopped evaluating it,
        // i.e. also didn't unwrap it.
        value = resolveForwardRef(value);
        var depDefs = splitDepsDsl(deps, stringify(token));
        return {
          // will bet set by the module definition
          index: -1,
          deps: depDefs,
          flags: flags,
          token: token,
          value: value
        };
      }

      function moduleDef(providers) {
        var providersByKey = {};
        var modules = [];
        var scope = null;

        for (var i = 0; i < providers.length; i++) {
          var provider = providers[i];

          if (provider.token === INJECTOR_SCOPE) {
            scope = provider.value;
          }

          if (provider.flags & 1073741824
          /* TypeNgModule */
          ) {
              modules.push(provider.token);
            }

          provider.index = i;
          providersByKey[tokenKey(provider.token)] = provider;
        }

        return {
          // Will be filled later...
          factory: null,
          providersByKey: providersByKey,
          providers: providers,
          modules: modules,
          scope: scope
        };
      }

      function initNgModule(data) {
        var def = data._def;
        var providers = data._providers = newArray(def.providers.length);

        for (var i = 0; i < def.providers.length; i++) {
          var provDef = def.providers[i];

          if (!(provDef.flags & 4096
          /* LazyProvider */
          )) {
            // Make sure the provider has not been already initialized outside this loop.
            if (providers[i] === undefined) {
              providers[i] = _createProviderInstance(data, provDef);
            }
          }
        }
      }

      function resolveNgModuleDep(data, depDef) {
        var notFoundValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Injector.THROW_IF_NOT_FOUND;
        var former = setCurrentInjector(data);

        try {
          if (depDef.flags & 8
          /* Value */
          ) {
              return depDef.token;
            }

          if (depDef.flags & 2
          /* Optional */
          ) {
              notFoundValue = null;
            }

          if (depDef.flags & 1
          /* SkipSelf */
          ) {
              return data._parent.get(depDef.token, notFoundValue);
            }

          var _tokenKey = depDef.tokenKey;

          switch (_tokenKey) {
            case InjectorRefTokenKey:
            case INJECTORRefTokenKey:
            case NgModuleRefTokenKey:
              return data;
          }

          var _providerDef = data._def.providersByKey[_tokenKey];
          var injectableDef;

          if (_providerDef) {
            var providerInstance = data._providers[_providerDef.index];

            if (providerInstance === undefined) {
              providerInstance = data._providers[_providerDef.index] = _createProviderInstance(data, _providerDef);
            }

            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
          } else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
            var index = data._providers.length;
            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
              flags: 1024
              /* TypeFactoryProvider */
              | 4096
              /* LazyProvider */
              ,
              value: injectableDef.factory,
              deps: [],
              index: index,
              token: depDef.token
            };
            data._providers[index] = UNDEFINED_VALUE;
            return data._providers[index] = _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]);
          } else if (depDef.flags & 4
          /* Self */
          ) {
              return notFoundValue;
            }

          return data._parent.get(depDef.token, notFoundValue);
        } finally {
          setCurrentInjector(former);
        }
      }

      function moduleTransitivelyPresent(ngModule, scope) {
        return ngModule._def.modules.indexOf(scope) > -1;
      }

      function targetsModule(ngModule, def) {
        var providedIn = def.providedIn;
        return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope || moduleTransitivelyPresent(ngModule, providedIn));
      }

      function _createProviderInstance(ngModule, providerDef) {
        var injectable;

        switch (providerDef.flags & 201347067
        /* Types */
        ) {
          case 512
          /* TypeClassProvider */
          :
            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
            break;

          case 1024
          /* TypeFactoryProvider */
          :
            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
            break;

          case 2048
          /* TypeUseExistingProvider */
          :
            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
            break;

          case 256
          /* TypeValueProvider */
          :
            injectable = providerDef.value;
            break;
        } // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
        // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
        // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
        // set (ngOnDestroy was detected statically).


        if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' && !(providerDef.flags & 131072
        /* OnDestroy */
        ) && typeof injectable.ngOnDestroy === 'function') {
          providerDef.flags |= 131072
          /* OnDestroy */
          ;
        }

        return injectable === undefined ? UNDEFINED_VALUE : injectable;
      }

      function _createClass(ngModule, ctor, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return new ctor();

          case 1:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]));

          case 2:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

          case 3:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }

            return _construct(ctor, depValues);
        }
      }

      function _callFactory(ngModule, factory, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return factory();

          case 1:
            return factory(resolveNgModuleDep(ngModule, deps[0]));

          case 2:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

          case 3:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }

            return factory.apply(void 0, depValues);
        }
      }

      function callNgModuleLifecycle(ngModule, lifecycles) {
        var def = ngModule._def;
        var destroyed = new Set();

        for (var i = 0; i < def.providers.length; i++) {
          var provDef = def.providers[i];

          if (provDef.flags & 131072
          /* OnDestroy */
          ) {
              var instance = ngModule._providers[i];

              if (instance && instance !== UNDEFINED_VALUE) {
                var onDestroy = instance.ngOnDestroy;

                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
                  onDestroy.apply(instance);
                  destroyed.add(instance);
                }
              }
            }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function attachEmbeddedView(parentView, elementData, viewIndex, view) {
        var embeddedViews = elementData.viewContainer._embeddedViews;

        if (viewIndex === null || viewIndex === undefined) {
          viewIndex = embeddedViews.length;
        }

        view.viewContainerParent = parentView;
        addToArray(embeddedViews, viewIndex, view);
        attachProjectedView(elementData, view);
        Services.dirtyParentQueries(view);
        var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
      }

      function attachProjectedView(vcElementData, view) {
        var dvcElementData = declaredViewContainer(view);

        if (!dvcElementData || dvcElementData === vcElementData || view.state & 16
        /* IsProjectedView */
        ) {
            return;
          } // Note: For performance reasons, we
        // - add a view to template._projectedViews only 1x throughout its lifetime,
        //   and remove it not until the view is destroyed.
        //   (hard, as when a parent view is attached/detached we would need to attach/detach all
        //    nested projected views as well, even across component boundaries).
        // - don't track the insertion order of views in the projected views array
        //   (hard, as when the views of the same template are inserted different view containers)


        view.state |= 16
        /* IsProjectedView */
        ;
        var projectedViews = dvcElementData.template._projectedViews;

        if (!projectedViews) {
          projectedViews = dvcElementData.template._projectedViews = [];
        }

        projectedViews.push(view); // Note: we are changing the NodeDef here as we cannot calculate
        // the fact whether a template is used for projection during compilation.

        markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
      }

      function markNodeAsProjectedTemplate(viewDef, nodeDef) {
        if (nodeDef.flags & 4
        /* ProjectedTemplate */
        ) {
            return;
          }

        viewDef.nodeFlags |= 4
        /* ProjectedTemplate */
        ;
        nodeDef.flags |= 4
        /* ProjectedTemplate */
        ;
        var parentNodeDef = nodeDef.parent;

        while (parentNodeDef) {
          parentNodeDef.childFlags |= 4
          /* ProjectedTemplate */
          ;
          parentNodeDef = parentNodeDef.parent;
        }
      }

      function detachEmbeddedView(elementData, viewIndex) {
        var embeddedViews = elementData.viewContainer._embeddedViews;

        if (viewIndex == null || viewIndex >= embeddedViews.length) {
          viewIndex = embeddedViews.length - 1;
        }

        if (viewIndex < 0) {
          return null;
        }

        var view = embeddedViews[viewIndex];
        view.viewContainerParent = null;
        removeFromArray(embeddedViews, viewIndex); // See attachProjectedView for why we don't update projectedViews here.

        Services.dirtyParentQueries(view);
        renderDetachView$1(view);
        return view;
      }

      function detachProjectedView(view) {
        if (!(view.state & 16
        /* IsProjectedView */
        )) {
          return;
        }

        var dvcElementData = declaredViewContainer(view);

        if (dvcElementData) {
          var projectedViews = dvcElementData.template._projectedViews;

          if (projectedViews) {
            removeFromArray(projectedViews, projectedViews.indexOf(view));
            Services.dirtyParentQueries(view);
          }
        }
      }

      function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
        var embeddedViews = elementData.viewContainer._embeddedViews;
        var view = embeddedViews[oldViewIndex];
        removeFromArray(embeddedViews, oldViewIndex);

        if (newViewIndex == null) {
          newViewIndex = embeddedViews.length;
        }

        addToArray(embeddedViews, newViewIndex, view); // Note: Don't need to change projectedViews as the order in there
        // as always invalid...

        Services.dirtyParentQueries(view);
        renderDetachView$1(view);
        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
        return view;
      }

      function renderAttachEmbeddedView(elementData, prevView, view) {
        var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
        var parentNode = view.renderer.parentNode(prevRenderNode);
        var nextSibling = view.renderer.nextSibling(prevRenderNode); // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
        // However, browsers automatically do `appendChild` when there is no `nextSibling`.

        visitRootRenderNodes(view, 2
        /* InsertBefore */
        , parentNode, nextSibling, undefined);
      }

      function renderDetachView$1(view) {
        visitRootRenderNodes(view, 3
        /* RemoveChild */
        , null, null, undefined);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_CONTEXT = {}; // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!

      function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
      }

      function getComponentViewDefinitionFactory(componentFactory) {
        return componentFactory.viewDefFactory;
      }

      var ComponentFactory_ = /*#__PURE__*/function (_ComponentFactory2) {
        _inherits(ComponentFactory_, _ComponentFactory2);

        var _super121 = _createSuper(ComponentFactory_);

        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
          var _this156;

          _classCallCheck(this, ComponentFactory_);

          // Attention: this ctor is called as top level function.
          // Putting any logic in here will destroy closure tree shaking!
          _this156 = _super121.call(this);
          _this156.selector = selector;
          _this156.componentType = componentType;
          _this156._inputs = _inputs;
          _this156._outputs = _outputs;
          _this156.ngContentSelectors = ngContentSelectors;
          _this156.viewDefFactory = viewDefFactory;
          return _this156;
        }

        _createClass2(ComponentFactory_, [{
          key: "inputs",
          get: function get() {
            var inputsArr = [];
            var inputs = this._inputs;

            for (var propName in inputs) {
              var templateName = inputs[propName];
              inputsArr.push({
                propName: propName,
                templateName: templateName
              });
            }

            return inputsArr;
          }
        }, {
          key: "outputs",
          get: function get() {
            var outputsArr = [];

            for (var propName in this._outputs) {
              var templateName = this._outputs[propName];
              outputsArr.push({
                propName: propName,
                templateName: templateName
              });
            }

            return outputsArr;
          }
          /**
           * Creates a new component.
           */

        }, {
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            if (!ngModule) {
              throw new Error('ngModule should be provided');
            }

            var viewDef = resolveDefinition(this.viewDefFactory);
            var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
            var component = asProviderData(view, componentNodeIndex).instance;

            if (rootSelectorOrNode) {
              view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
            }

            return new ComponentRef_(view, new ViewRef_(view), component);
          }
        }]);

        return ComponentFactory_;
      }(ComponentFactory);

      var ComponentRef_ = /*#__PURE__*/function (_ComponentRef) {
        _inherits(ComponentRef_, _ComponentRef);

        var _super122 = _createSuper(ComponentRef_);

        function ComponentRef_(_view, _viewRef, _component) {
          var _this157;

          _classCallCheck(this, ComponentRef_);

          _this157 = _super122.call(this);
          _this157._view = _view;
          _this157._viewRef = _viewRef;
          _this157._component = _component;
          _this157._elDef = _this157._view.def.nodes[0];
          _this157.hostView = _viewRef;
          _this157.changeDetectorRef = _viewRef;
          _this157.instance = _component;
          return _this157;
        }

        _createClass2(ComponentRef_, [{
          key: "location",
          get: function get() {
            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
          }
        }, {
          key: "injector",
          get: function get() {
            return new Injector_(this._view, this._elDef);
          }
        }, {
          key: "componentType",
          get: function get() {
            return this._component.constructor;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._viewRef.destroy();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._viewRef.onDestroy(callback);
          }
        }]);

        return ComponentRef_;
      }(ComponentRef);

      function createViewContainerData(view, elDef, elData) {
        return new ViewContainerRef_(view, elDef, elData);
      }

      var ViewContainerRef_ = /*#__PURE__*/function () {
        function ViewContainerRef_(_view, _elDef, _data) {
          _classCallCheck(this, ViewContainerRef_);

          this._view = _view;
          this._elDef = _elDef;
          this._data = _data;
          /**
           * @internal
           */

          this._embeddedViews = [];
        }

        _createClass2(ViewContainerRef_, [{
          key: "element",
          get: function get() {
            return new ElementRef(this._data.renderElement);
          }
        }, {
          key: "injector",
          get: function get() {
            return new Injector_(this._view, this._elDef);
          }
          /** @deprecated No replacement */

        }, {
          key: "parentInjector",
          get: function get() {
            var view = this._view;
            var elDef = this._elDef.parent;

            while (!elDef && view) {
              elDef = viewParentEl(view);
              view = view.parent;
            }

            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
          }
        }, {
          key: "clear",
          value: function clear() {
            var len = this._embeddedViews.length;

            for (var i = len - 1; i >= 0; i--) {
              var view = detachEmbeddedView(this._data, i);
              Services.destroyView(view);
            }
          }
        }, {
          key: "get",
          value: function get(index) {
            var view = this._embeddedViews[index];

            if (view) {
              var ref = new ViewRef_(view);
              ref.attachToViewContainerRef(this);
              return ref;
            }

            return null;
          }
        }, {
          key: "length",
          get: function get() {
            return this._embeddedViews.length;
          }
        }, {
          key: "createEmbeddedView",
          value: function createEmbeddedView(templateRef, context, index) {
            var viewRef = templateRef.createEmbeddedView(context || {});
            this.insert(viewRef, index);
            return viewRef;
          }
        }, {
          key: "createComponent",
          value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;

            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
              ngModuleRef = contextInjector.get(NgModuleRef);
            }

            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
          }
        }, {
          key: "insert",
          value: function insert(viewRef, index) {
            if (viewRef.destroyed) {
              throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }

            var viewRef_ = viewRef;
            var viewData = viewRef_._view;
            attachEmbeddedView(this._view, this._data, index, viewData);
            viewRef_.attachToViewContainerRef(this);
            return viewRef;
          }
        }, {
          key: "move",
          value: function move(viewRef, currentIndex) {
            if (viewRef.destroyed) {
              throw new Error('Cannot move a destroyed View in a ViewContainer!');
            }

            var previousIndex = this._embeddedViews.indexOf(viewRef._view);

            moveEmbeddedView(this._data, previousIndex, currentIndex);
            return viewRef;
          }
        }, {
          key: "indexOf",
          value: function indexOf(viewRef) {
            return this._embeddedViews.indexOf(viewRef._view);
          }
        }, {
          key: "remove",
          value: function remove(index) {
            var viewData = detachEmbeddedView(this._data, index);

            if (viewData) {
              Services.destroyView(viewData);
            }
          }
        }, {
          key: "detach",
          value: function detach(index) {
            var view = detachEmbeddedView(this._data, index);
            return view ? new ViewRef_(view) : null;
          }
        }]);

        return ViewContainerRef_;
      }();

      function createChangeDetectorRef(view) {
        return new ViewRef_(view);
      }

      var ViewRef_ = /*#__PURE__*/function () {
        function ViewRef_(_view) {
          _classCallCheck(this, ViewRef_);

          this._view = _view;
          this._viewContainerRef = null;
          this._appRef = null;
        }

        _createClass2(ViewRef_, [{
          key: "rootNodes",
          get: function get() {
            return rootRenderNodes(this._view);
          }
        }, {
          key: "context",
          get: function get() {
            return this._view.context;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return (this._view.state & 128
            /* Destroyed */
            ) !== 0;
          }
        }, {
          key: "markForCheck",
          value: function markForCheck() {
            markParentViewsForCheck(this._view);
          }
        }, {
          key: "detach",
          value: function detach() {
            this._view.state &= ~4
            /* Attached */
            ;
          }
        }, {
          key: "detectChanges",
          value: function detectChanges() {
            var fs = this._view.root.rendererFactory;

            if (fs.begin) {
              fs.begin();
            }

            try {
              Services.checkAndUpdateView(this._view);
            } finally {
              if (fs.end) {
                fs.end();
              }
            }
          }
        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            Services.checkNoChangesView(this._view);
          }
        }, {
          key: "reattach",
          value: function reattach() {
            this._view.state |= 4
            /* Attached */
            ;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            if (!this._view.disposables) {
              this._view.disposables = [];
            }

            this._view.disposables.push(callback);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._appRef) {
              this._appRef.detachView(this);
            } else if (this._viewContainerRef) {
              this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
            }

            Services.destroyView(this._view);
          }
        }, {
          key: "detachFromAppRef",
          value: function detachFromAppRef() {
            this._appRef = null;
            renderDetachView$1(this._view);
            Services.dirtyParentQueries(this._view);
          }
        }, {
          key: "attachToAppRef",
          value: function attachToAppRef(appRef) {
            if (this._viewContainerRef) {
              throw new Error('This view is already attached to a ViewContainer!');
            }

            this._appRef = appRef;
          }
        }, {
          key: "attachToViewContainerRef",
          value: function attachToViewContainerRef(vcRef) {
            if (this._appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
            }

            this._viewContainerRef = vcRef;
          }
        }]);

        return ViewRef_;
      }();

      function createTemplateData(view, def) {
        return new TemplateRef_(view, def);
      }

      var TemplateRef_ = /*#__PURE__*/function (_TemplateRef) {
        _inherits(TemplateRef_, _TemplateRef);

        var _super123 = _createSuper(TemplateRef_);

        function TemplateRef_(_parentView, _def) {
          var _this158;

          _classCallCheck(this, TemplateRef_);

          _this158 = _super123.call(this);
          _this158._parentView = _parentView;
          _this158._def = _def;
          return _this158;
        }

        _createClass2(TemplateRef_, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(context) {
            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
          }
        }, {
          key: "elementRef",
          get: function get() {
            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
          }
        }]);

        return TemplateRef_;
      }(TemplateRef);

      function createInjector$1(view, elDef) {
        return new Injector_(view, elDef);
      }

      var Injector_ = /*#__PURE__*/function () {
        function Injector_(view, elDef) {
          _classCallCheck(this, Injector_);

          this.view = view;
          this.elDef = elDef;
        }

        _createClass2(Injector_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
            var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432
            /* ComponentView */
            ) !== 0 : false;
            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {
              flags: 0
              /* None */
              ,
              token: token,
              tokenKey: tokenKey(token)
            }, notFoundValue);
          }
        }]);

        return Injector_;
      }();

      function nodeValue(view, index) {
        var def = view.def.nodes[index];

        if (def.flags & 1
        /* TypeElement */
        ) {
            var elData = asElementData(view, def.nodeIndex);
            return def.element.template ? elData.template : elData.renderElement;
          } else if (def.flags & 2
        /* TypeText */
        ) {
            return asTextData(view, def.nodeIndex).renderText;
          } else if (def.flags & (20224
        /* CatProvider */
        | 16
        /* TypePipe */
        )) {
          return asProviderData(view, def.nodeIndex).instance;
        }

        throw new Error("Illegal state: read nodeValue for node index ".concat(index));
      }

      function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
      }

      var NgModuleRef_ = /*#__PURE__*/function () {
        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
          _classCallCheck(this, NgModuleRef_);

          this._moduleType = _moduleType;
          this._parent = _parent;
          this._bootstrapComponents = _bootstrapComponents;
          this._def = _def;
          this._destroyListeners = [];
          this._destroyed = false;
          this.injector = this;
          initNgModule(this);
        }

        _createClass2(NgModuleRef_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
            var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
            var flags = 0
            /* None */
            ;

            if (injectFlags & InjectFlags.SkipSelf) {
              flags |= 1
              /* SkipSelf */
              ;
            } else if (injectFlags & InjectFlags.Self) {
              flags |= 4
              /* Self */
              ;
            }

            return resolveNgModuleDep(this, {
              token: token,
              tokenKey: tokenKey(token),
              flags: flags
            }, notFoundValue);
          }
        }, {
          key: "instance",
          get: function get() {
            return this.get(this._moduleType);
          }
        }, {
          key: "componentFactoryResolver",
          get: function get() {
            return this.get(ComponentFactoryResolver);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) {
              throw new Error("The ng module ".concat(stringify(this.instance.constructor), " has already been destroyed."));
            }

            this._destroyed = true;
            callNgModuleLifecycle(this, 131072
            /* OnDestroy */
            );

            this._destroyListeners.forEach(function (listener) {
              return listener();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
          }
        }]);

        return NgModuleRef_;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Renderer2TokenKey = tokenKey(Renderer2);
      var ElementRefTokenKey = tokenKey(ElementRef);
      var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
      var TemplateRefTokenKey = tokenKey(TemplateRef);
      var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
      var InjectorRefTokenKey$1 = tokenKey(Injector);
      var INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);

      function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
        var bindings = [];

        if (props) {
          for (var prop in props) {
            var _props$prop = _slicedToArray(props[prop], 2),
                bindingIndex = _props$prop[0],
                nonMinifiedName = _props$prop[1];

            bindings[bindingIndex] = {
              flags: 8
              /* TypeProperty */
              ,
              name: prop,
              nonMinifiedName: nonMinifiedName,
              ns: null,
              securityContext: null,
              suffix: null
            };
          }
        }

        var outputDefs = [];

        if (outputs) {
          for (var propName in outputs) {
            outputDefs.push({
              type: 1
              /* DirectiveOutput */
              ,
              propName: propName,
              target: null,
              eventName: outputs[propName]
            });
          }
        }

        flags |= 16384
        /* TypeDirective */
        ;
        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
      }

      function pipeDef(flags, ctor, deps) {
        flags |= 16
        /* TypePipe */
        ;
        return _def(-1, flags, null, 0, ctor, ctor, deps);
      }

      function providerDef(flags, matchedQueries, token, value, deps) {
        return _def(-1, flags, matchedQueries, 0, token, value, deps);
      }

      function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
        var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD.matchedQueries,
            references = _splitMatchedQueriesD.references,
            matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;

        if (!outputs) {
          outputs = [];
        }

        if (!bindings) {
          bindings = [];
        } // Need to resolve forwardRefs as e.g. for `useValue` we
        // lowered the expression and then stopped evaluating it,
        // i.e. also didn't unwrap it.


        value = resolveForwardRef(value);
        var depDefs = splitDepsDsl(deps, stringify(token));
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: -1,
          childCount: childCount,
          bindings: bindings,
          bindingFlags: calcBindingFlags(bindings),
          outputs: outputs,
          element: null,
          provider: {
            token: token,
            value: value,
            deps: depDefs
          },
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createProviderInstance(view, def) {
        return _createProviderInstance$1(view, def);
      }

      function createPipeInstance(view, def) {
        // deps are looked up from component.
        var compView = view;

        while (compView.parent && !isComponentView(compView)) {
          compView = compView.parent;
        } // pipes can see the private services of the component


        var allowPrivateServices = true; // pipes are always eager and classes!

        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
      }

      function createDirectiveInstance(view, def) {
        // components can see other private services, other directives can't.
        var allowPrivateServices = (def.flags & 32768
        /* Component */
        ) > 0; // directives are always eager and classes!

        var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);

        if (def.outputs.length) {
          for (var i = 0; i < def.outputs.length; i++) {
            var output = def.outputs[i];
            var outputObservable = instance[output.propName];

            if (isObservable(outputObservable)) {
              var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
              view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
            } else {
              throw new Error("@Output ".concat(output.propName, " not initialized in '").concat(instance.constructor.name, "'."));
            }
          }
        }

        return instance;
      }

      function eventHandlerClosure(view, index, eventName) {
        return function (event) {
          return dispatchEvent(view, index, eventName, event);
        };
      }

      function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var providerData = asProviderData(view, def.nodeIndex);
        var directive = providerData.instance;
        var changed = false;
        var changes = undefined;
        var bindLen = def.bindings.length;

        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
          changed = true;
          changes = updateProp(view, providerData, def, 0, v0, changes);
        }

        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
          changed = true;
          changes = updateProp(view, providerData, def, 1, v1, changes);
        }

        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
          changed = true;
          changes = updateProp(view, providerData, def, 2, v2, changes);
        }

        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
          changed = true;
          changes = updateProp(view, providerData, def, 3, v3, changes);
        }

        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
          changed = true;
          changes = updateProp(view, providerData, def, 4, v4, changes);
        }

        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
          changed = true;
          changes = updateProp(view, providerData, def, 5, v5, changes);
        }

        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
          changed = true;
          changes = updateProp(view, providerData, def, 6, v6, changes);
        }

        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
          changed = true;
          changes = updateProp(view, providerData, def, 7, v7, changes);
        }

        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
          changed = true;
          changes = updateProp(view, providerData, def, 8, v8, changes);
        }

        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
          changed = true;
          changes = updateProp(view, providerData, def, 9, v9, changes);
        }

        if (changes) {
          directive.ngOnChanges(changes);
        }

        if (def.flags & 65536
        /* OnInit */
        && shouldCallLifecycleInitHook(view, 256
        /* InitState_CallingOnInit */
        , def.nodeIndex)) {
          directive.ngOnInit();
        }

        if (def.flags & 262144
        /* DoCheck */
        ) {
            directive.ngDoCheck();
          }

        return changed;
      }

      function checkAndUpdateDirectiveDynamic(view, def, values) {
        var providerData = asProviderData(view, def.nodeIndex);
        var directive = providerData.instance;
        var changed = false;
        var changes = undefined;

        for (var i = 0; i < values.length; i++) {
          if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
          }
        }

        if (changes) {
          directive.ngOnChanges(changes);
        }

        if (def.flags & 65536
        /* OnInit */
        && shouldCallLifecycleInitHook(view, 256
        /* InitState_CallingOnInit */
        , def.nodeIndex)) {
          directive.ngOnInit();
        }

        if (def.flags & 262144
        /* DoCheck */
        ) {
            directive.ngDoCheck();
          }

        return changed;
      }

      function _createProviderInstance$1(view, def) {
        // private services can see other private services
        var allowPrivateServices = (def.flags & 8192
        /* PrivateProvider */
        ) > 0;
        var providerDef = def.provider;

        switch (def.flags & 201347067
        /* Types */
        ) {
          case 512
          /* TypeClassProvider */
          :
            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

          case 1024
          /* TypeFactoryProvider */
          :
            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

          case 2048
          /* TypeUseExistingProvider */
          :
            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);

          case 256
          /* TypeValueProvider */
          :
            return providerDef.value;
        }
      }

      function createClass(view, elDef, allowPrivateServices, ctor, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return new ctor();

          case 1:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));

          case 2:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

          case 3:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }

            return _construct(ctor, depValues);
        }
      }

      function callFactory(view, elDef, allowPrivateServices, factory, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return factory();

          case 1:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));

          case 2:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

          case 3:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }

            return factory.apply(void 0, depValues);
        }
      } // This default value is when checking the hierarchy for a token.
      //
      // It means both:
      // - the token is not provided by the current injector,
      // - only the element injectors should be checked (ie do not check module injectors
      //
      //          mod1
      //         /
      //       el1   mod2
      //         \  /
      //         el2
      //
      // When requesting el2.injector.get(token), we should check in the following order and return the
      // first found value:
      // - el2.injector.get(token, default)
      // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
      // - mod2.injector.get(token, default)


      var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};

      function resolveDep(view, elDef, allowPrivateServices, depDef) {
        var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Injector.THROW_IF_NOT_FOUND;

        if (depDef.flags & 8
        /* Value */
        ) {
            return depDef.token;
          }

        var startView = view;

        if (depDef.flags & 2
        /* Optional */
        ) {
            notFoundValue = null;
          }

        var tokenKey = depDef.tokenKey;

        if (tokenKey === ChangeDetectorRefTokenKey) {
          // directives on the same element as a component should be able to control the change detector
          // of that component as well.
          allowPrivateServices = !!(elDef && elDef.element.componentView);
        }

        if (elDef && depDef.flags & 1
        /* SkipSelf */
        ) {
          allowPrivateServices = false;
          elDef = elDef.parent;
        }

        var searchView = view;

        while (searchView) {
          if (elDef) {
            switch (tokenKey) {
              case Renderer2TokenKey:
                {
                  var compView = findCompView(searchView, elDef, allowPrivateServices);
                  return compView.renderer;
                }

              case ElementRefTokenKey:
                return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);

              case ViewContainerRefTokenKey:
                return asElementData(searchView, elDef.nodeIndex).viewContainer;

              case TemplateRefTokenKey:
                {
                  if (elDef.element.template) {
                    return asElementData(searchView, elDef.nodeIndex).template;
                  }

                  break;
                }

              case ChangeDetectorRefTokenKey:
                {
                  var cdView = findCompView(searchView, elDef, allowPrivateServices);
                  return createChangeDetectorRef(cdView);
                }

              case InjectorRefTokenKey$1:
              case INJECTORRefTokenKey$1:
                return createInjector$1(searchView, elDef);

              default:
                var _providerDef2 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];

                if (_providerDef2) {
                  var providerData = asProviderData(searchView, _providerDef2.nodeIndex);

                  if (!providerData) {
                    providerData = {
                      instance: _createProviderInstance$1(searchView, _providerDef2)
                    };
                    searchView.nodes[_providerDef2.nodeIndex] = providerData;
                  }

                  return providerData.instance;
                }

            }
          }

          allowPrivateServices = isComponentView(searchView);
          elDef = viewParentEl(searchView);
          searchView = searchView.parent;

          if (depDef.flags & 4
          /* Self */
          ) {
              searchView = null;
            }
        }

        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);

        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
          // Return the value from the root element injector when
          // - it provides it
          //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
          // - the module injector should not be checked
          //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
          return value;
        }

        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
      }

      function findCompView(view, elDef, allowPrivateServices) {
        var compView;

        if (allowPrivateServices) {
          compView = asElementData(view, elDef.nodeIndex).componentView;
        } else {
          compView = view;

          while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
          }
        }

        return compView;
      }

      function updateProp(view, providerData, def, bindingIdx, value, changes) {
        if (def.flags & 32768
        /* Component */
        ) {
            var compView = asElementData(view, def.parent.nodeIndex).componentView;

            if (compView.def.flags & 2
            /* OnPush */
            ) {
                compView.state |= 8
                /* ChecksEnabled */
                ;
              }
          }

        var binding = def.bindings[bindingIdx];
        var propName = binding.name; // Note: This is still safe with Closure Compiler as
        // the user passed in the property name as an object has to `providerDef`,
        // so Closure Compiler will have renamed the property correctly already.

        providerData.instance[propName] = value;

        if (def.flags & 524288
        /* OnChanges */
        ) {
            changes = changes || {};
            var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
            var _binding = def.bindings[bindingIdx];
            changes[_binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 2
            /* FirstCheck */
            ) !== 0);
          }

        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return changes;
      } // This function calls the ngAfterContentCheck, ngAfterContentInit,
      // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
      // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
      // called during a pre-order traversal of the view tree (that is calling the
      // parent hooks before the child hooks) these events are sent in using a
      // post-order traversal of the tree (children before parents). This changes the
      // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
      // expected nodeIndex which a ngOnInit should be called. When sending
      // ngAfterContentInit and ngAfterViewInit it is the expected count of
      // ngAfterContentInit or ngAfterViewInit methods that have been called. This
      // ensure that despite being called recursively or after picking up after an
      // exception, the ngAfterContentInit or ngAfterViewInit will be called on the
      // correct nodes. Consider for example, the following (where E is an element
      // and D is a directive)
      //  Tree:       pre-order index  post-order index
      //    E1        0                6
      //      E2      1                1
      //       D3     2                0
      //      E4      3                5
      //       E5     4                4
      //        E6    5                2
      //        E7    6                3
      // As can be seen, the post-order index has an unclear relationship to the
      // pre-order index (postOrderIndex === preOrderIndex - parentCount +
      // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
      // are stable (will be the same for the same view regardless of exceptions or
      // recursion) we just need to count them which will roughly correspond to the
      // post-order index (it skips elements and directives that do not have
      // lifecycle hooks).
      //
      // For example, if an exception is raised in the E6.onAfterViewInit() the
      // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
      // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
      // not have their ngAfterViewInit() called but, starting with E7, the rest of
      // the view will begin getting ngAfterViewInit() called until a check and
      // pass is complete.
      //
      // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
      // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
      // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
      // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
      // When the recursion returns the initIndex will be 7 so E1 is skipped as it
      // has already been called in the recursively called checkAnUpdateView().


      function callLifecycleHooksChildrenFirst(view, lifecycles) {
        if (!(view.def.nodeFlags & lifecycles)) {
          return;
        }

        var nodes = view.def.nodes;
        var initIndex = 0;

        for (var i = 0; i < nodes.length; i++) {
          var nodeDef = nodes[i];
          var parent = nodeDef.parent;

          if (!parent && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
          }

          if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
          }

          while (parent && parent.flags & 1
          /* TypeElement */
          && i === parent.nodeIndex + parent.childCount) {
            // last child of an element
            if (parent.directChildFlags & lifecycles) {
              initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);
            }

            parent = parent.parent;
          }
        }
      }

      function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
        for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
          } // only visit direct children


          i += nodeDef.childCount;
        }

        return initIndex;
      }

      function callProviderLifecycles(view, index, lifecycles, initIndex) {
        var providerData = asProviderData(view, index);

        if (!providerData) {
          return;
        }

        var provider = providerData.instance;

        if (!provider) {
          return;
        }

        Services.setCurrentNode(view, index);

        if (lifecycles & 1048576
        /* AfterContentInit */
        && shouldCallLifecycleInitHook(view, 512
        /* InitState_CallingAfterContentInit */
        , initIndex)) {
          provider.ngAfterContentInit();
        }

        if (lifecycles & 2097152
        /* AfterContentChecked */
        ) {
            provider.ngAfterContentChecked();
          }

        if (lifecycles & 4194304
        /* AfterViewInit */
        && shouldCallLifecycleInitHook(view, 768
        /* InitState_CallingAfterViewInit */
        , initIndex)) {
          provider.ngAfterViewInit();
        }

        if (lifecycles & 8388608
        /* AfterViewChecked */
        ) {
            provider.ngAfterViewChecked();
          }

        if (lifecycles & 131072
        /* OnDestroy */
        ) {
            provider.ngOnDestroy();
          }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ComponentFactoryResolver$1 = /*#__PURE__*/function (_ComponentFactoryReso) {
        _inherits(ComponentFactoryResolver$1, _ComponentFactoryReso);

        var _super124 = _createSuper(ComponentFactoryResolver$1);

        /**
         * @param ngModule The NgModuleRef to which all resolved factories are bound.
         */
        function ComponentFactoryResolver$1(ngModule) {
          var _this159;

          _classCallCheck(this, ComponentFactoryResolver$1);

          _this159 = _super124.call(this);
          _this159.ngModule = ngModule;
          return _this159;
        }

        _createClass2(ComponentFactoryResolver$1, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            ngDevMode && assertComponentType(component);
            var componentDef = getComponentDef(component);
            return new ComponentFactory$1(componentDef, this.ngModule);
          }
        }]);

        return ComponentFactoryResolver$1;
      }(ComponentFactoryResolver);

      function toRefArray(map) {
        var array = [];

        for (var nonMinified in map) {
          if (map.hasOwnProperty(nonMinified)) {
            var minified = map[nonMinified];
            array.push({
              propName: minified,
              templateName: nonMinified
            });
          }
        }

        return array;
      }

      function getNamespace$1(elementName) {
        var name = elementName.toLowerCase();
        return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;
      }
      /**
       * A change detection scheduler token for {@link RootContext}. This token is the default value used
       * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.
       */


      var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {
        providedIn: 'root',
        factory: function factory() {
          return defaultScheduler;
        }
      });

      function createChainedInjector(rootViewInjector, moduleInjector) {
        return {
          get: function get(token, notFoundValue, flags) {
            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);

            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
              // Return the value from the root element injector when
              // - it provides it
              //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
              // - the module injector should not be checked
              //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
              return value;
            }

            return moduleInjector.get(token, notFoundValue, flags);
          }
        };
      }
      /**
       * Render3 implementation of {@link viewEngine_ComponentFactory}.
       */


      var ComponentFactory$1 = /*#__PURE__*/function (_ComponentFactory3) {
        _inherits(ComponentFactory$1, _ComponentFactory3);

        var _super125 = _createSuper(ComponentFactory$1);

        /**
         * @param componentDef The component definition.
         * @param ngModule The NgModuleRef to which the factory is bound.
         */
        function ComponentFactory$1(componentDef, ngModule) {
          var _this160;

          _classCallCheck(this, ComponentFactory$1);

          _this160 = _super125.call(this);
          _this160.componentDef = componentDef;
          _this160.ngModule = ngModule;
          _this160.componentType = componentDef.type;
          _this160.selector = stringifyCSSSelectorList(componentDef.selectors);
          _this160.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
          _this160.isBoundToModule = !!ngModule;
          return _this160;
        }

        _createClass2(ComponentFactory$1, [{
          key: "inputs",
          get: function get() {
            return toRefArray(this.componentDef.inputs);
          }
        }, {
          key: "outputs",
          get: function get() {
            return toRefArray(this.componentDef.outputs);
          }
        }, {
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            ngModule = ngModule || this.ngModule;
            var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
            var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
            var sanitizer = rootViewInjector.get(Sanitizer, null);
            var hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created
            // dynamically. Default to 'div' if this component did not specify any tag name in its selector.

            var elementName = this.componentDef.selectors[0][0] || 'div';
            var hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace$1(elementName));
            var rootFlags = this.componentDef.onPush ? 64
            /* Dirty */
            | 512
            /* IsRoot */
            : 16
            /* CheckAlways */
            | 512
            /* IsRoot */
            ;
            var rootContext = createRootContext(); // Create the root view. Uses empty TView and ContentTemplate.

            var rootTView = createTView(0
            /* Root */
            , null, null, 1, 0, null, null, null, null, null);
            var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector); // rootView is the parent when bootstrapping
            // TODO(misko): it looks like we are entering view here but we don't really need to as
            // `renderView` does that. However as the code is written it is needed because
            // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
            // issues would allow us to drop this.

            enterView(rootLView);
            var component;
            var tElementNode;

            try {
              var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);

              if (hostRNode) {
                if (rootSelectorOrNode) {
                  setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
                } else {
                  // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
                  // is not defined), also apply attributes and classes extracted from component selector.
                  // Extract attributes and classes from the first selector only to match VE behavior.
                  var _extractAttrsAndClass = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]),
                      attrs = _extractAttrsAndClass.attrs,
                      classes = _extractAttrsAndClass.classes;

                  if (attrs) {
                    setUpAttributes(hostRenderer, hostRNode, attrs);
                  }

                  if (classes && classes.length > 0) {
                    writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
                  }
                }
              }

              tElementNode = getTNode(rootTView, HEADER_OFFSET);

              if (projectableNodes !== undefined) {
                var projection = tElementNode.projection = [];

                for (var i = 0; i < this.ngContentSelectors.length; i++) {
                  var nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
                  // case). Here we do normalize passed data structure to be an array of arrays to avoid
                  // complex checks down the line.
                  // We also normalize the length of the passed in projectable nodes (to match the number of
                  // <ng-container> slots defined by a component).

                  projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
                }
              } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
              // executed here?
              // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref


              component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
              renderView(rootTView, rootLView, null);
            } finally {
              leaveView();
            }

            return new ComponentRef$1(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
          }
        }]);

        return ComponentFactory$1;
      }(ComponentFactory);

      var componentFactoryResolver = new ComponentFactoryResolver$1();
      /**
       * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
       * ComponentFactoryResolver
       * already exists, retrieves the existing ComponentFactoryResolver.
       *
       * @returns The ComponentFactoryResolver instance to use
       */

      function injectComponentFactoryResolver() {
        return componentFactoryResolver;
      }
      /**
       * Represents an instance of a Component created via a {@link ComponentFactory}.
       *
       * `ComponentRef` provides access to the Component Instance as well other objects related to this
       * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
       * method.
       *
       */


      var ComponentRef$1 = /*#__PURE__*/function (_ComponentRef2) {
        _inherits(ComponentRef$1, _ComponentRef2);

        var _super126 = _createSuper(ComponentRef$1);

        function ComponentRef$1(componentType, instance, location, _rootLView, _tNode) {
          var _this161;

          _classCallCheck(this, ComponentRef$1);

          _this161 = _super126.call(this);
          _this161.location = location;
          _this161._rootLView = _rootLView;
          _this161._tNode = _tNode;
          _this161.instance = instance;
          _this161.hostView = _this161.changeDetectorRef = new RootViewRef(_rootLView);
          _this161.componentType = componentType;
          return _this161;
        }

        _createClass2(ComponentRef$1, [{
          key: "injector",
          get: function get() {
            return new NodeInjector(this._tNode, this._rootLView);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.hostView.destroy();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this.hostView.onDestroy(callback);
          }
        }]);

        return ComponentRef$1;
      }(ComponentRef);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds decorator, constructor, and property metadata to a given type via static metadata fields
       * on the type.
       *
       * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
       *
       * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments
       * being tree-shaken away during production builds.
       */


      function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
        return noSideEffects(function () {
          var clazz = type;

          if (decorators !== null) {
            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {
              var _clazz$decorators;

              (_clazz$decorators = clazz.decorators).push.apply(_clazz$decorators, _toConsumableArray(decorators));
            } else {
              clazz.decorators = decorators;
            }
          }

          if (ctorParameters !== null) {
            // Rather than merging, clobber the existing parameters. If other projects exist which
            // use tsickle-style annotations and reflect over them in the same way, this could
            // cause issues, but that is vanishingly unlikely.
            clazz.ctorParameters = ctorParameters;
          }

          if (propDecorators !== null) {
            // The property decorator objects are merged as it is possible different fields have
            // different decorator types. Decorators on individual fields are not merged, as it's
            // also incredibly unlikely that a field will be decorated both with an Angular
            // decorator and a non-Angular decorator that's also been downleveled.
            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {
              clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
            } else {
              clazz.propDecorators = propDecorators;
            }
          }
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Map of module-id to the corresponding NgModule.
       * - In pre Ivy we track NgModuleFactory,
       * - In post Ivy we track the NgModuleType
       */


      var modules = new Map();
      /**
       * Registers a loaded module. Should only be called from generated NgModuleFactory code.
       * @publicApi
       */

      function registerModuleFactory(id, factory) {
        var existing = modules.get(id);
        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
        modules.set(id, factory);
      }

      function assertSameOrNotExisting(id, type, incoming) {
        if (type && type !== incoming) {
          throw new Error("Duplicate module registered for ".concat(id, " - ").concat(stringify(type), " vs ").concat(stringify(type.name)));
        }
      }

      function registerNgModuleType(ngModuleType) {
        var visited = new Set();
        recurse(ngModuleType);

        function recurse(ngModuleType) {
          // The imports array of an NgModule must refer to other NgModules,
          // so an error is thrown if no module definition is available.
          var def = getNgModuleDef(ngModuleType,
          /* throwNotFound */
          true);
          var id = def.id;

          if (id !== null) {
            var existing = modules.get(id);
            assertSameOrNotExisting(id, existing, ngModuleType);
            modules.set(id, ngModuleType);
          }

          var imports = maybeUnwrapFn(def.imports);

          var _iterator7 = _createForOfIteratorHelper(imports),
              _step6;

          try {
            for (_iterator7.s(); !(_step6 = _iterator7.n()).done;) {
              var i = _step6.value;

              if (!visited.has(i)) {
                visited.add(i);
                recurse(i);
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }
      }

      function clearModulesForTest() {
        modules.clear();
      }

      function getRegisteredNgModuleType(id) {
        return modules.get(id) || autoRegisterModuleById[id];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NgModuleRef$1 = /*#__PURE__*/function (_NgModuleRef) {
        _inherits(NgModuleRef$1, _NgModuleRef);

        var _super127 = _createSuper(NgModuleRef$1);

        function NgModuleRef$1(ngModuleType, _parent) {
          var _this162;

          _classCallCheck(this, NgModuleRef$1);

          _this162 = _super127.call(this);
          _this162._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore

          _this162._bootstrapComponents = [];
          _this162.injector = _assertThisInitialized(_this162);
          _this162.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:
          // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
          // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
          // circular dependency which will result in a runtime error, because the injector doesn't
          // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
          // and providing it, rather than letting the injector resolve it.

          _this162.componentFactoryResolver = new ComponentFactoryResolver$1(_assertThisInitialized(_this162));
          var ngModuleDef = getNgModuleDef(ngModuleType);
          ngDevMode && assertDefined(ngModuleDef, "NgModule '".concat(stringify(ngModuleType), "' is not a subtype of 'NgModuleType'."));
          var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
          ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
          _this162._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
          _this162._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
            provide: NgModuleRef,
            useValue: _assertThisInitialized(_this162)
          }, {
            provide: ComponentFactoryResolver,
            useValue: _this162.componentFactoryResolver
          }], stringify(ngModuleType)); // We need to resolve the injector types separately from the injector creation, because
          // the module might be trying to use this ref in its contructor for DI which will cause a
          // circular error that will eventually error out, because the injector isn't created yet.

          _this162._r3Injector._resolveInjectorDefTypes();

          _this162.instance = _this162.get(ngModuleType);
          return _this162;
        }

        _createClass2(NgModuleRef$1, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
            var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;

            if (token === Injector || token === NgModuleRef || token === INJECTOR$1) {
              return this;
            }

            return this._r3Injector.get(token, notFoundValue, injectFlags);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            var injector = this._r3Injector;
            !injector.destroyed && injector.destroy();
            this.destroyCbs.forEach(function (fn) {
              return fn();
            });
            this.destroyCbs = null;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            this.destroyCbs.push(callback);
          }
        }]);

        return NgModuleRef$1;
      }(NgModuleRef);

      var NgModuleFactory$1 = /*#__PURE__*/function (_NgModuleFactory) {
        _inherits(NgModuleFactory$1, _NgModuleFactory);

        var _super128 = _createSuper(NgModuleFactory$1);

        function NgModuleFactory$1(moduleType) {
          var _this163;

          _classCallCheck(this, NgModuleFactory$1);

          _this163 = _super128.call(this);
          _this163.moduleType = moduleType;
          var ngModuleDef = getNgModuleDef(moduleType);

          if (ngModuleDef !== null) {
            // Register the NgModule with Angular's module registry. The location (and hence timing) of
            // this call is critical to ensure this works correctly (modules get registered when expected)
            // without bloating bundles (modules are registered when otherwise not referenced).
            //
            // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
            // several practical consequences:
            //
            // - If an .ngfactory file is not imported from, the module won't be registered (and can be
            //   tree shaken).
            // - If an .ngfactory file is imported from, the module will be registered even if an instance
            //   is not actually created (via `create` below).
            // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
            //   imports,
            //
            // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
            // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
            // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
            // the side effect of registration is added here, in the constructor of NgModuleFactory,
            // ensuring no matter how a factory is created, the module is registered correctly.
            //
            // An alternative would be to include the registration side effect inline following the actual
            // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
            // will be registered and retained even if they're otherwise never referenced.
            registerNgModuleType(moduleType);
          }

          return _this163;
        }

        _createClass2(NgModuleFactory$1, [{
          key: "create",
          value: function create(parentInjector) {
            return new NgModuleRef$1(this.moduleType, parentInjector);
          }
        }]);

        return NgModuleFactory$1;
      }(NgModuleFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Bindings for pure functions are stored after regular bindings.
       *
       * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
       * ------------------------------------------------------------------------------------------
       * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
       * ------------------------------------------------------------------------------------------
       *                    ^                      ^
       *      TView.bindingStartIndex      TView.expandoStartIndex
       *
       * Pure function instructions are given an offset from the binding root. Adding the offset to the
       * binding root gives the first index where the bindings are stored. In component views, the binding
       * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
       * any directive instances + any hostVars in directives evaluated before it.
       *
       * See VIEW_DATA.md for more information about host binding resolution.
       */

      /**
       * If the value hasn't been saved, calls the pure function to store and return the
       * value. If it has been saved, returns the saved value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns a value
       * @param thisArg Optional calling context of pureFn
       * @returns value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
      }
      /**
       * If the value of the provided exp has changed, calls the pure function to return
       * an updated value. Or if the value has not changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns an updated value
       * @param exp Updated expression value
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {
        return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
        return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
        return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
        return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param exp7
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param exp7
       * @param exp8
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
      }
      /**
       * pureFunction instruction that can support any number of bindings.
       *
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn A pure function that takes binding values and builds an object or array
       * containing those values.
       * @param exps An array of binding values
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
        return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
      }
      /**
       * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
       * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
       * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
       * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
       * it to `undefined`.
       */


      function getPureFunctionReturnValue(lView, returnValueIndex) {
        ngDevMode && assertIndexInRange(lView, returnValueIndex);
        var lastReturnValue = lView[returnValueIndex];
        return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
      }
      /**
       * If the value of the provided exp has changed, calls the pure function to return
       * an updated value. Or if the value has not changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns an updated value
       * @param exp Updated expression value
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       */


      function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
      }
      /**
       * pureFunction instruction that can support any number of bindings.
       *
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn A pure function that takes binding values and builds an object or array
       * containing those values.
       * @param exps An array of binding values
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        var different = false;

        for (var i = 0; i < exps.length; i++) {
          bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
        }

        return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create a pipe.
       *
       * @param index Pipe index where the pipe will be stored.
       * @param pipeName The name of the pipe
       * @returns T the instance of the pipe.
       *
       * @codeGenApi
       */


      function ɵɵpipe(index, pipeName) {
        var tView = getTView();
        var pipeDef;
        var adjustedIndex = index + HEADER_OFFSET;

        if (tView.firstCreatePass) {
          pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);
          tView.data[adjustedIndex] = pipeDef;

          if (pipeDef.onDestroy) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
          }
        } else {
          pipeDef = tView.data[adjustedIndex];
        }

        var pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
        var previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);

        try {
          // DI for pipes is supposed to behave like directives when placed on a component
          // host node, which means that we have to disable access to `viewProviders`.
          var previousIncludeViewProviders = setIncludeViewProviders(false);
          var pipeInstance = pipeFactory();
          setIncludeViewProviders(previousIncludeViewProviders);
          store(tView, getLView(), adjustedIndex, pipeInstance);
          return pipeInstance;
        } finally {
          // we have to restore the injector implementation in finally, just in case the creation of the
          // pipe throws an error.
          setInjectImplementation(previousInjectImplementation);
        }
      }
      /**
       * Searches the pipe registry for a pipe with the given name. If one is found,
       * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
       *
       * @param name Name of pipe to resolve
       * @param registry Full list of available pipes
       * @returns Matching PipeDef
       */


      function getPipeDef$1(name, registry) {
        if (registry) {
          for (var i = registry.length - 1; i >= 0; i--) {
            var _pipeDef = registry[i];

            if (name === _pipeDef.name) {
              return _pipeDef;
            }
          }
        }

        throw new RuntimeError("302"
        /* PIPE_NOT_FOUND */
        , "The pipe '".concat(name, "' could not be found!"));
      }
      /**
       * Invokes a pipe with 1 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function ɵɵpipeBind1(index, slotOffset, v1) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1));
      }
      /**
       * Invokes a pipe with 2 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function ɵɵpipeBind2(index, slotOffset, v1, v2) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2));
      }
      /**
       * Invokes a pipe with 3 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       * @param v3 4rd argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3));
      }
      /**
       * Invokes a pipe with 4 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       * @param v3 3rd argument to {@link PipeTransform#transform}.
       * @param v4 4th argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4));
      }
      /**
       * Invokes a pipe with variable number of arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
       *
       * @codeGenApi
       */


      function ɵɵpipeBindV(index, slotOffset, values) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values));
      }

      function isPure(lView, index) {
        return lView[TVIEW].data[index].pure;
      }
      /**
       * Unwrap the output of a pipe transformation.
       * In order to trick change detection into considering that the new value is always different from
       * the old one, the old value is overwritten by NO_CHANGE.
       *
       * @param newValue the pipe transformation output.
       */


      function unwrapValue$1(lView, newValue) {
        if (WrappedValue.isWrapped(newValue)) {
          newValue = WrappedValue.unwrap(newValue); // The NO_CHANGE value needs to be written at the index where the impacted binding value is
          // stored

          var bindingToInvalidateIdx = getBindingIndex();
          lView[bindingToInvalidateIdx] = NO_CHANGE;
        }

        return newValue;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EventEmitter_ = /*#__PURE__*/function (_rxjs__WEBPACK_IMPORT) {
        _inherits(EventEmitter_, _rxjs__WEBPACK_IMPORT);

        var _super129 = _createSuper(EventEmitter_);

        function EventEmitter_() {
          var _this164;

          var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck(this, EventEmitter_);

          _this164 = _super129.call(this);
          _this164.__isAsync = isAsync;
          return _this164;
        }

        _createClass2(EventEmitter_, [{
          key: "emit",
          value: function emit(value) {
            _get(_getPrototypeOf(EventEmitter_.prototype), "next", this).call(this, value);
          }
        }, {
          key: "subscribe",
          value: function subscribe(observerOrNext, error, complete) {
            var schedulerFn;

            var errorFn = function errorFn(err) {
              return null;
            };

            var completeFn = function completeFn() {
              return null;
            };

            if (observerOrNext && typeof observerOrNext === 'object') {
              schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () {
                  return observerOrNext.next(value);
                });
              } : function (value) {
                observerOrNext.next(value);
              };

              if (observerOrNext.error) {
                errorFn = this.__isAsync ? function (err) {
                  setTimeout(function () {
                    return observerOrNext.error(err);
                  });
                } : function (err) {
                  observerOrNext.error(err);
                };
              }

              if (observerOrNext.complete) {
                completeFn = this.__isAsync ? function () {
                  setTimeout(function () {
                    return observerOrNext.complete();
                  });
                } : function () {
                  observerOrNext.complete();
                };
              }
            } else {
              schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () {
                  return observerOrNext(value);
                });
              } : function (value) {
                observerOrNext(value);
              };

              if (error) {
                errorFn = this.__isAsync ? function (err) {
                  setTimeout(function () {
                    return error(err);
                  });
                } : function (err) {
                  error(err);
                };
              }

              if (complete) {
                completeFn = this.__isAsync ? function () {
                  setTimeout(function () {
                    return complete();
                  });
                } : function () {
                  complete();
                };
              }
            }

            var sink = _get(_getPrototypeOf(EventEmitter_.prototype), "subscribe", this).call(this, schedulerFn, errorFn, completeFn);

            if (observerOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Subscription"]) {
              observerOrNext.add(sink);
            }

            return sink;
          }
        }]);

        return EventEmitter_;
      }(rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]);
      /**
       * @publicApi
       */


      var EventEmitter = EventEmitter_;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function symbolIterator() {
        return this._results[getSymbolIterator()]();
      }
      /**
       * An unmodifiable list of items that Angular keeps up to date when the state
       * of the application changes.
       *
       * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
       * provide.
       *
       * Implements an iterable interface, therefore it can be used in both ES6
       * javascript `for (var i of items)` loops as well as in Angular templates with
       * `*ngFor="let i of myList"`.
       *
       * Changes can be observed by subscribing to the changes `Observable`.
       *
       * NOTE: In the future this class will implement an `Observable` interface.
       *
       * @usageNotes
       * ### Example
       * ```typescript
       * @Component({...})
       * class Container {
       *   @ViewChildren(Item) items:QueryList<Item>;
       * }
       * ```
       *
       * @publicApi
       */


      var QueryList = /*#__PURE__*/function () {
        /**
         * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
         *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
         *     the same result) This is set to `false` for backwards compatibility but will be changed to
         *     true in v12.
         */
        function QueryList() {
          var _emitDistinctChangesOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck(this, QueryList);

          this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
          this.dirty = true;
          this._results = [];
          this._changesDetected = false;
          this._changes = null;
          this.length = 0;
          this.first = undefined;
          this.last = undefined; // This function should be declared on the prototype, but doing so there will cause the class
          // declaration to have side-effects and become not tree-shakable. For this reason we do it in
          // the constructor.
          // [getSymbolIterator()](): Iterator<T> { ... }

          var symbol = getSymbolIterator();
          var proto = QueryList.prototype;
          if (!proto[symbol]) proto[symbol] = symbolIterator;
        }
        /**
         * Returns `Observable` of `QueryList` notifying the subscriber of changes.
         */


        _createClass2(QueryList, [{
          key: "changes",
          get: function get() {
            return this._changes || (this._changes = new EventEmitter());
          }
          /**
           * Returns the QueryList entry at `index`.
           */

        }, {
          key: "get",
          value: function get(index) {
            return this._results[index];
          }
          /**
           * See
           * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
           */

        }, {
          key: "map",
          value: function map(fn) {
            return this._results.map(fn);
          }
          /**
           * See
           * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
           */

        }, {
          key: "filter",
          value: function filter(fn) {
            return this._results.filter(fn);
          }
          /**
           * See
           * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
           */

        }, {
          key: "find",
          value: function find(fn) {
            return this._results.find(fn);
          }
          /**
           * See
           * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
           */

        }, {
          key: "reduce",
          value: function reduce(fn, init) {
            return this._results.reduce(fn, init);
          }
          /**
           * See
           * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
           */

        }, {
          key: "forEach",
          value: function forEach(fn) {
            this._results.forEach(fn);
          }
          /**
           * See
           * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
           */

        }, {
          key: "some",
          value: function some(fn) {
            return this._results.some(fn);
          }
          /**
           * Returns a copy of the internal results list as an Array.
           */

        }, {
          key: "toArray",
          value: function toArray() {
            return this._results.slice();
          }
        }, {
          key: "toString",
          value: function toString() {
            return this._results.toString();
          }
          /**
           * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
           * on change detection, it will not notify of changes to the queries, unless a new change
           * occurs.
           *
           * @param resultsTree The query results to store
           * @param identityAccessor Optional function for extracting stable object identity from a value
           *    in the array. This function is executed for each element of the query result list while
           *    comparing current query list with the new one (provided as a first argument of the `reset`
           *    function) to detect if the lists are different. If the function is not provided, elements
           *    are compared as is (without any pre-processing).
           */

        }, {
          key: "reset",
          value: function reset(resultsTree, identityAccessor) {
            // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of
            // QueryList (but not for QueryList itself.)
            var self = this;
            self.dirty = false;
            var newResultFlat = flatten(resultsTree);

            if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {
              self._results = newResultFlat;
              self.length = newResultFlat.length;
              self.last = newResultFlat[this.length - 1];
              self.first = newResultFlat[0];
            }
          }
          /**
           * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
           */

        }, {
          key: "notifyOnChanges",
          value: function notifyOnChanges() {
            if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);
          }
          /** internal */

        }, {
          key: "setDirty",
          value: function setDirty() {
            this.dirty = true;
          }
          /** internal */

        }, {
          key: "destroy",
          value: function destroy() {
            this.changes.complete();
            this.changes.unsubscribe();
          }
        }]);

        return QueryList;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$7 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$8 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;

      var LQuery_ = /*#__PURE__*/function () {
        function LQuery_(queryList) {
          _classCallCheck(this, LQuery_);

          this.queryList = queryList;
          this.matches = null;
        }

        _createClass2(LQuery_, [{
          key: "clone",
          value: function clone() {
            return new LQuery_(this.queryList);
          }
        }, {
          key: "setDirty",
          value: function setDirty() {
            this.queryList.setDirty();
          }
        }]);

        return LQuery_;
      }();

      var LQueries_ = /*#__PURE__*/function () {
        function LQueries_() {
          var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, LQueries_);

          this.queries = queries;
        }

        _createClass2(LQueries_, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(tView) {
            var tQueries = tView.queries;

            if (tQueries !== null) {
              var noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
              var viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the
              // TQueries collection and up until a first content query declared in the embedded view. Only
              // propagated LQueries are created at this point (LQuery corresponding to declared content
              // queries will be instantiated from the content query instructions for each directive).

              for (var i = 0; i < noOfInheritedQueries; i++) {
                var tQuery = tQueries.getByIndex(i);
                var parentLQuery = this.queries[tQuery.indexInDeclarationView];
                viewLQueries.push(parentLQuery.clone());
              }

              return new LQueries_(viewLQueries);
            }

            return null;
          }
        }, {
          key: "insertView",
          value: function insertView(tView) {
            this.dirtyQueriesWithMatches(tView);
          }
        }, {
          key: "detachView",
          value: function detachView(tView) {
            this.dirtyQueriesWithMatches(tView);
          }
        }, {
          key: "dirtyQueriesWithMatches",
          value: function dirtyQueriesWithMatches(tView) {
            for (var i = 0; i < this.queries.length; i++) {
              if (getTQuery(tView, i).matches !== null) {
                this.queries[i].setDirty();
              }
            }
          }
        }]);

        return LQueries_;
      }();

      var TQueryMetadata_ = function TQueryMetadata_(predicate, flags) {
        var read = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, TQueryMetadata_);

        this.predicate = predicate;
        this.flags = flags;
        this.read = read;
      };

      var TQueries_ = /*#__PURE__*/function () {
        function TQueries_() {
          var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, TQueries_);

          this.queries = queries;
        }

        _createClass2(TQueries_, [{
          key: "elementStart",
          value: function elementStart(tView, tNode) {
            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].elementStart(tView, tNode);
            }
          }
        }, {
          key: "elementEnd",
          value: function elementEnd(tNode) {
            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].elementEnd(tNode);
            }
          }
        }, {
          key: "embeddedTView",
          value: function embeddedTView(tNode) {
            var queriesForTemplateRef = null;

            for (var i = 0; i < this.length; i++) {
              var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
              var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);

              if (tqueryClone) {
                tqueryClone.indexInDeclarationView = i;

                if (queriesForTemplateRef !== null) {
                  queriesForTemplateRef.push(tqueryClone);
                } else {
                  queriesForTemplateRef = [tqueryClone];
                }
              }
            }

            return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
          }
        }, {
          key: "template",
          value: function template(tView, tNode) {
            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].template(tView, tNode);
            }
          }
        }, {
          key: "getByIndex",
          value: function getByIndex(index) {
            ngDevMode && assertIndexInRange(this.queries, index);
            return this.queries[index];
          }
        }, {
          key: "length",
          get: function get() {
            return this.queries.length;
          }
        }, {
          key: "track",
          value: function track(tquery) {
            this.queries.push(tquery);
          }
        }]);

        return TQueries_;
      }();

      var TQuery_ = /*#__PURE__*/function () {
        function TQuery_(metadata) {
          var nodeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

          _classCallCheck(this, TQuery_);

          this.metadata = metadata;
          this.matches = null;
          this.indexInDeclarationView = -1;
          this.crossesNgTemplate = false;
          /**
           * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
           * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
           * elements in a template.
           */

          this._appliesToNextNode = true;
          this._declarationNodeIndex = nodeIndex;
        }

        _createClass2(TQuery_, [{
          key: "elementStart",
          value: function elementStart(tView, tNode) {
            if (this.isApplyingToNode(tNode)) {
              this.matchTNode(tView, tNode);
            }
          }
        }, {
          key: "elementEnd",
          value: function elementEnd(tNode) {
            if (this._declarationNodeIndex === tNode.index) {
              this._appliesToNextNode = false;
            }
          }
        }, {
          key: "template",
          value: function template(tView, tNode) {
            this.elementStart(tView, tNode);
          }
        }, {
          key: "embeddedTView",
          value: function embeddedTView(tNode, childQueryIndex) {
            if (this.isApplyingToNode(tNode)) {
              this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from
              // embedded views created based on this `<ng-template>`).

              this.addMatch(-tNode.index, childQueryIndex);
              return new TQuery_(this.metadata);
            }

            return null;
          }
        }, {
          key: "isApplyingToNode",
          value: function isApplyingToNode(tNode) {
            if (this._appliesToNextNode && (this.metadata.flags & 1
            /* descendants */
            ) !== 1
            /* descendants */
            ) {
                var declarationNodeIdx = this._declarationNodeIndex;
                var parent = tNode.parent; // Determine if a given TNode is a "direct" child of a node on which a content query was
                // declared (only direct children of query's host node can match with the descendants: false
                // option). There are 3 main use-case / conditions to consider here:
                // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
                // host node;
                // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
                // here <i #target> parent node is null;
                // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
                // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
                // up past the query's host node!).

                while (parent !== null && parent.type & 8
                /* ElementContainer */
                && parent.index !== declarationNodeIdx) {
                  parent = parent.parent;
                }

                return declarationNodeIdx === (parent !== null ? parent.index : -1);
              }

            return this._appliesToNextNode;
          }
        }, {
          key: "matchTNode",
          value: function matchTNode(tView, tNode) {
            var predicate = this.metadata.predicate;

            if (Array.isArray(predicate)) {
              for (var i = 0; i < predicate.length; i++) {
                var name = predicate[i];
                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.

                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
              }
            } else {
              if (predicate === TemplateRef) {
                if (tNode.type & 4
                /* Container */
                ) {
                    this.matchTNodeWithReadOption(tView, tNode, -1);
                  }
              } else {
                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
              }
            }
          }
        }, {
          key: "matchTNodeWithReadOption",
          value: function matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
            if (nodeMatchIdx !== null) {
              var read = this.metadata.read;

              if (read !== null) {
                if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4
                /* Container */
                ) {
                  this.addMatch(tNode.index, -2);
                } else {
                  var directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);

                  if (directiveOrProviderIdx !== null) {
                    this.addMatch(tNode.index, directiveOrProviderIdx);
                  }
                }
              } else {
                this.addMatch(tNode.index, nodeMatchIdx);
              }
            }
          }
        }, {
          key: "addMatch",
          value: function addMatch(tNodeIdx, matchIdx) {
            if (this.matches === null) {
              this.matches = [tNodeIdx, matchIdx];
            } else {
              this.matches.push(tNodeIdx, matchIdx);
            }
          }
        }]);

        return TQuery_;
      }();
      /**
       * Iterates over local names for a given node and returns directive index
       * (or -1 if a local name points to an element).
       *
       * @param tNode static data of a node to check
       * @param selector selector to match
       * @returns directive index, -1 or null if a selector didn't match any of the local names
       */


      function getIdxOfMatchingSelector(tNode, selector) {
        var localNames = tNode.localNames;

        if (localNames !== null) {
          for (var i = 0; i < localNames.length; i += 2) {
            if (localNames[i] === selector) {
              return localNames[i + 1];
            }
          }
        }

        return null;
      }

      function createResultByTNodeType(tNode, currentView) {
        if (tNode.type & (3
        /* AnyRNode */
        | 8
        /* ElementContainer */
        )) {
          return createElementRef(tNode, currentView);
        } else if (tNode.type & 4
        /* Container */
        ) {
            return createTemplateRef(tNode, currentView);
          }

        return null;
      }

      function createResultForNode(lView, tNode, matchingIdx, read) {
        if (matchingIdx === -1) {
          // if read token and / or strategy is not specified, detect it using appropriate tNode type
          return createResultByTNodeType(tNode, lView);
        } else if (matchingIdx === -2) {
          // read a special token from a node injector
          return createSpecialToken(lView, tNode, read);
        } else {
          // read a token
          return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
        }
      }

      function createSpecialToken(lView, tNode, read) {
        if (read === ElementRef) {
          return createElementRef(tNode, lView);
        } else if (read === TemplateRef) {
          return createTemplateRef(tNode, lView);
        } else if (read === ViewContainerRef) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          );
          return createContainerRef(tNode, lView);
        } else {
          ngDevMode && throwError("Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ".concat(stringify(read), "."));
        }
      }
      /**
       * A helper function that creates query results for a given view. This function is meant to do the
       * processing once and only once for a given view instance (a set of results for a given view
       * doesn't change).
       */


      function materializeViewResults(tView, lView, tQuery, queryIndex) {
        var lQuery = lView[QUERIES].queries[queryIndex];

        if (lQuery.matches === null) {
          var tViewData = tView.data;
          var tQueryMatches = tQuery.matches;
          var result = [];

          for (var i = 0; i < tQueryMatches.length; i += 2) {
            var matchedNodeIdx = tQueryMatches[i];

            if (matchedNodeIdx < 0) {
              // we at the <ng-template> marker which might have results in views created based on this
              // <ng-template> - those results will be in separate views though, so here we just leave
              // null as a placeholder
              result.push(null);
            } else {
              ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
              var tNode = tViewData[matchedNodeIdx];
              result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
            }
          }

          lQuery.matches = result;
        }

        return lQuery.matches;
      }
      /**
       * A helper function that collects (already materialized) query results from a tree of views,
       * starting with a provided LView.
       */


      function collectQueryResults(tView, lView, queryIndex, result) {
        var tQuery = tView.queries.getByIndex(queryIndex);
        var tQueryMatches = tQuery.matches;

        if (tQueryMatches !== null) {
          var lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);

          for (var i = 0; i < tQueryMatches.length; i += 2) {
            var tNodeIdx = tQueryMatches[i];

            if (tNodeIdx > 0) {
              result.push(lViewResults[i / 2]);
            } else {
              var childQueryIndex = tQueryMatches[i + 1];
              var declarationLContainer = lView[-tNodeIdx];
              ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container

              for (var _i14 = CONTAINER_HEADER_OFFSET; _i14 < declarationLContainer.length; _i14++) {
                var embeddedLView = declarationLContainer[_i14];

                if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
                  collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                }
              } // collect matches for views created from this declaration container and inserted into
              // different containers


              if (declarationLContainer[MOVED_VIEWS] !== null) {
                var embeddedLViews = declarationLContainer[MOVED_VIEWS];

                for (var _i15 = 0; _i15 < embeddedLViews.length; _i15++) {
                  var _embeddedLView = embeddedLViews[_i15];
                  collectQueryResults(_embeddedLView[TVIEW], _embeddedLView, childQueryIndex, result);
                }
              }
            }
          }
        }

        return result;
      }
      /**
       * Refreshes a query by combining matches from all active views and removing matches from deleted
       * views.
       *
       * @returns `true` if a query got dirty during change detection or if this is a static query
       * resolving in creation mode, `false` otherwise.
       *
       * @codeGenApi
       */


      function ɵɵqueryRefresh(queryList) {
        var lView = getLView();
        var tView = getTView();
        var queryIndex = getCurrentQueryIndex();
        setCurrentQueryIndex(queryIndex + 1);
        var tQuery = getTQuery(tView, queryIndex);

        if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2
        /* isStatic */
        ) === 2
        /* isStatic */
        )) {
          if (tQuery.matches === null) {
            queryList.reset([]);
          } else {
            var result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
            queryList.reset(result, unwrapElementRef);
            queryList.notifyOnChanges();
          }

          return true;
        }

        return false;
      }
      /**
       * Creates new QueryList, stores the reference in LView and returns QueryList.
       *
       * @param predicate The type for which the query will search
       * @param flags Flags associated with the query
       * @param read What to save in the query
       *
       * @codeGenApi
       */


      function ɵɵviewQuery(predicate, flags, read) {
        ngDevMode && assertNumber(flags, 'Expecting flags');
        var tView = getTView();

        if (tView.firstCreatePass) {
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);

          if ((flags & 2
          /* isStatic */
          ) === 2
          /* isStatic */
          ) {
              tView.staticViewQueries = true;
            }
        }

        createLQuery(tView, getLView(), flags);
      }
      /**
       * Registers a QueryList, associated with a content query, for later refresh (part of a view
       * refresh).
       *
       * @param directiveIndex Current directive index
       * @param predicate The type for which the query will search
       * @param flags Flags associated with the query
       * @param read What to save in the query
       * @returns QueryList<T>
       *
       * @codeGenApi
       */


      function ɵɵcontentQuery(directiveIndex, predicate, flags, read) {
        ngDevMode && assertNumber(flags, 'Expecting flags');
        var tView = getTView();

        if (tView.firstCreatePass) {
          var tNode = getCurrentTNode();
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
          saveContentQueryAndDirectiveIndex(tView, directiveIndex);

          if ((flags & 2
          /* isStatic */
          ) === 2
          /* isStatic */
          ) {
              tView.staticContentQueries = true;
            }
        }

        createLQuery(tView, getLView(), flags);
      }
      /**
       * Loads a QueryList corresponding to the current view or content query.
       *
       * @codeGenApi
       */


      function ɵɵloadQuery() {
        return loadQueryInternal(getLView(), getCurrentQueryIndex());
      }

      function loadQueryInternal(lView, queryIndex) {
        ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
        ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
        return lView[QUERIES].queries[queryIndex].queryList;
      }

      function createLQuery(tView, lView, flags) {
        var queryList = new QueryList((flags & 4
        /* emitDistinctChangesOnly */
        ) === 4
        /* emitDistinctChangesOnly */
        );
        storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
        if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();
        lView[QUERIES].queries.push(new LQuery_(queryList));
      }

      function createTQuery(tView, metadata, nodeIndex) {
        if (tView.queries === null) tView.queries = new TQueries_();
        tView.queries.track(new TQuery_(metadata, nodeIndex));
      }

      function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
        var lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;

        if (directiveIndex !== lastSavedDirectiveIndex) {
          tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
        }
      }

      function getTQuery(tView, index) {
        ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
        return tView.queries.getByIndex(index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
       * `<ng-template>` element.
       *
       * @codeGenApi
       */


      function ɵɵtemplateRefExtractor(tNode, lView) {
        return createTemplateRef(tNode, lView);
      }
      /**
       * Returns the appropriate `ChangeDetectorRef` for a pipe.
       *
       * @codeGenApi
       */


      function ɵɵinjectPipeChangeDetectorRef() {
        var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InjectFlags.Default;
        var value = injectChangeDetectorRef(true);

        if (value == null && !(flags & InjectFlags.Optional)) {
          throwProviderNotFoundError('ChangeDetectorRef');
        } else {
          return value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$c = function ɵ0$c() {
        return {
          'ɵɵattribute': ɵɵattribute,
          'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,
          'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,
          'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,
          'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,
          'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,
          'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,
          'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,
          'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,
          'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,
          'ɵɵdefineComponent': ɵɵdefineComponent,
          'ɵɵdefineDirective': ɵɵdefineDirective,
          'ɵɵdefineInjectable': ɵɵdefineInjectable,
          'ɵɵdefineInjector': ɵɵdefineInjector,
          'ɵɵdefineNgModule': ɵɵdefineNgModule,
          'ɵɵdefinePipe': ɵɵdefinePipe,
          'ɵɵdirectiveInject': ɵɵdirectiveInject,
          'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,
          'ɵɵinject': ɵɵinject,
          'ɵɵinjectAttribute': ɵɵinjectAttribute,
          'ɵɵinvalidFactory': ɵɵinvalidFactory,
          'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
          'ɵɵinjectPipeChangeDetectorRef': ɵɵinjectPipeChangeDetectorRef,
          'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,
          'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,
          'ɵɵProvidersFeature': ɵɵProvidersFeature,
          'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,
          'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,
          'ɵɵnextContext': ɵɵnextContext,
          'ɵɵnamespaceHTML': ɵɵnamespaceHTML,
          'ɵɵnamespaceMathML': ɵɵnamespaceMathML,
          'ɵɵnamespaceSVG': ɵɵnamespaceSVG,
          'ɵɵenableBindings': ɵɵenableBindings,
          'ɵɵdisableBindings': ɵɵdisableBindings,
          'ɵɵelementStart': ɵɵelementStart,
          'ɵɵelementEnd': ɵɵelementEnd,
          'ɵɵelement': ɵɵelement,
          'ɵɵelementContainerStart': ɵɵelementContainerStart,
          'ɵɵelementContainerEnd': ɵɵelementContainerEnd,
          'ɵɵelementContainer': ɵɵelementContainer,
          'ɵɵpureFunction0': ɵɵpureFunction0,
          'ɵɵpureFunction1': ɵɵpureFunction1,
          'ɵɵpureFunction2': ɵɵpureFunction2,
          'ɵɵpureFunction3': ɵɵpureFunction3,
          'ɵɵpureFunction4': ɵɵpureFunction4,
          'ɵɵpureFunction5': ɵɵpureFunction5,
          'ɵɵpureFunction6': ɵɵpureFunction6,
          'ɵɵpureFunction7': ɵɵpureFunction7,
          'ɵɵpureFunction8': ɵɵpureFunction8,
          'ɵɵpureFunctionV': ɵɵpureFunctionV,
          'ɵɵgetCurrentView': ɵɵgetCurrentView,
          'ɵɵrestoreView': ɵɵrestoreView,
          'ɵɵlistener': ɵɵlistener,
          'ɵɵprojection': ɵɵprojection,
          'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,
          'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,
          'ɵɵpipeBind1': ɵɵpipeBind1,
          'ɵɵpipeBind2': ɵɵpipeBind2,
          'ɵɵpipeBind3': ɵɵpipeBind3,
          'ɵɵpipeBind4': ɵɵpipeBind4,
          'ɵɵpipeBindV': ɵɵpipeBindV,
          'ɵɵprojectionDef': ɵɵprojectionDef,
          'ɵɵhostProperty': ɵɵhostProperty,
          'ɵɵproperty': ɵɵproperty,
          'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,
          'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,
          'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,
          'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,
          'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,
          'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,
          'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,
          'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,
          'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,
          'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,
          'ɵɵpipe': ɵɵpipe,
          'ɵɵqueryRefresh': ɵɵqueryRefresh,
          'ɵɵviewQuery': ɵɵviewQuery,
          'ɵɵloadQuery': ɵɵloadQuery,
          'ɵɵcontentQuery': ɵɵcontentQuery,
          'ɵɵreference': ɵɵreference,
          'ɵɵclassMap': ɵɵclassMap,
          'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,
          'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,
          'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,
          'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,
          'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,
          'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,
          'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,
          'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,
          'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,
          'ɵɵstyleMap': ɵɵstyleMap,
          'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,
          'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,
          'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,
          'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,
          'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,
          'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,
          'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,
          'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,
          'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,
          'ɵɵstyleProp': ɵɵstyleProp,
          'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,
          'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,
          'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,
          'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,
          'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,
          'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,
          'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,
          'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,
          'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,
          'ɵɵclassProp': ɵɵclassProp,
          'ɵɵadvance': ɵɵadvance,
          'ɵɵtemplate': ɵɵtemplate,
          'ɵɵtext': ɵɵtext,
          'ɵɵtextInterpolate': ɵɵtextInterpolate,
          'ɵɵtextInterpolate1': ɵɵtextInterpolate1,
          'ɵɵtextInterpolate2': ɵɵtextInterpolate2,
          'ɵɵtextInterpolate3': ɵɵtextInterpolate3,
          'ɵɵtextInterpolate4': ɵɵtextInterpolate4,
          'ɵɵtextInterpolate5': ɵɵtextInterpolate5,
          'ɵɵtextInterpolate6': ɵɵtextInterpolate6,
          'ɵɵtextInterpolate7': ɵɵtextInterpolate7,
          'ɵɵtextInterpolate8': ɵɵtextInterpolate8,
          'ɵɵtextInterpolateV': ɵɵtextInterpolateV,
          'ɵɵi18n': ɵɵi18n,
          'ɵɵi18nAttributes': ɵɵi18nAttributes,
          'ɵɵi18nExp': ɵɵi18nExp,
          'ɵɵi18nStart': ɵɵi18nStart,
          'ɵɵi18nEnd': ɵɵi18nEnd,
          'ɵɵi18nApply': ɵɵi18nApply,
          'ɵɵi18nPostprocess': ɵɵi18nPostprocess,
          'ɵɵresolveWindow': ɵɵresolveWindow,
          'ɵɵresolveDocument': ɵɵresolveDocument,
          'ɵɵresolveBody': ɵɵresolveBody,
          'ɵɵsetComponentScope': ɵɵsetComponentScope,
          'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,
          'ɵɵsanitizeHtml': ɵɵsanitizeHtml,
          'ɵɵsanitizeStyle': ɵɵsanitizeStyle,
          'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,
          'ɵɵsanitizeScript': ɵɵsanitizeScript,
          'ɵɵsanitizeUrl': ɵɵsanitizeUrl,
          'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,
          'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,
          'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,
          'forwardRef': forwardRef,
          'resolveForwardRef': resolveForwardRef
        };
      };
      /**
       * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
       *
       * This should be kept up to date with the public exports of @angular/core.
       */


      var angularCoreEnv = ɵ0$c();
      var jitOptions = null;

      function setJitOptions(options) {
        if (jitOptions !== null) {
          if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
            ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
            return;
          }

          if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
            ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
            return;
          }
        }

        jitOptions = options;
      }

      function getJitOptions() {
        return jitOptions;
      }

      function resetJitOptions() {
        jitOptions = null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_ARRAY$5 = [];
      var moduleQueue = [];
      /**
       * Enqueues moduleDef to be checked later to see if scope can be set on its
       * component declarations.
       */

      function enqueueModuleForDelayedScoping(moduleType, ngModule) {
        moduleQueue.push({
          moduleType: moduleType,
          ngModule: ngModule
        });
      }

      var flushingModuleQueue = false;
      /**
       * Loops over queued module definitions, if a given module definition has all of its
       * declarations resolved, it dequeues that module definition and sets the scope on
       * its declarations.
       */

      function flushModuleScopingQueueAsMuchAsPossible() {
        if (!flushingModuleQueue) {
          flushingModuleQueue = true;

          try {
            for (var i = moduleQueue.length - 1; i >= 0; i--) {
              var _moduleQueue$i = moduleQueue[i],
                  moduleType = _moduleQueue$i.moduleType,
                  ngModule = _moduleQueue$i.ngModule;

              if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
                // dequeue
                moduleQueue.splice(i, 1);
                setScopeOnDeclaredComponents(moduleType, ngModule);
              }
            }
          } finally {
            flushingModuleQueue = false;
          }
        }
      }
      /**
       * Returns truthy if a declaration has resolved. If the declaration happens to be
       * an array of declarations, it will recurse to check each declaration in that array
       * (which may also be arrays).
       */


      function isResolvedDeclaration(declaration) {
        if (Array.isArray(declaration)) {
          return declaration.every(isResolvedDeclaration);
        }

        return !!resolveForwardRef(declaration);
      }
      /**
       * Compiles a module in JIT mode.
       *
       * This function automatically gets called when a class has a `@NgModule` decorator.
       */


      function compileNgModule(moduleType) {
        var ngModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        compileNgModuleDefs(moduleType, ngModule); // Because we don't know if all declarations have resolved yet at the moment the
        // NgModule decorator is executing, we're enqueueing the setting of module scope
        // on its declarations to be run at a later time when all declarations for the module,
        // including forward refs, have resolved.

        enqueueModuleForDelayedScoping(moduleType, ngModule);
      }
      /**
       * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.
       *
       * It's possible to compile a module via this API which will allow duplicate declarations in its
       * root.
       */


      function compileNgModuleDefs(moduleType, ngModule) {
        var allowDuplicateDeclarationsInRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        ngDevMode && assertDefined(moduleType, 'Required value moduleType');
        ngDevMode && assertDefined(ngModule, 'Required value ngModule');
        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
        var ngModuleDef = null;
        Object.defineProperty(moduleType, NG_MOD_DEF, {
          configurable: true,
          get: function get() {
            if (ngModuleDef === null) {
              if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
                // We need to assert this immediately, because allowing it to continue will cause it to
                // go into an infinite loop before we've reached the point where we throw all the errors.
                throw new Error("'".concat(stringifyForError(moduleType), "' module can't import itself"));
              }

              ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275mod.js"), {
                type: moduleType,
                bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$5).map(resolveForwardRef),
                declarations: declarations.map(resolveForwardRef),
                imports: flatten(ngModule.imports || EMPTY_ARRAY$5).map(resolveForwardRef).map(expandModuleWithProviders),
                exports: flatten(ngModule.exports || EMPTY_ARRAY$5).map(resolveForwardRef).map(expandModuleWithProviders),
                schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
                id: ngModule.id || null
              }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
              // should verify that there are no unknown elements in a template. In AOT mode, that check
              // happens at compile time and `schemas` information is not present on Component and Module
              // defs after compilation (so the check doesn't happen the second time at runtime).

              if (!ngModuleDef.schemas) {
                ngModuleDef.schemas = [];
              }
            }

            return ngModuleDef;
          }
        });
        var ngFactoryDef = null;
        Object.defineProperty(moduleType, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275fac.js"), {
                name: moduleType.name,
                type: moduleType,
                deps: reflectDependencies(moduleType),
                injectFn: 'inject',
                target: compiler.R3FactoryTarget.NgModule,
                typeArgumentCount: 0
              });
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
        var ngInjectorDef = null;
        Object.defineProperty(moduleType, NG_INJ_DEF, {
          get: function get() {
            if (ngInjectorDef === null) {
              ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
              var meta = {
                name: moduleType.name,
                type: moduleType,
                providers: ngModule.providers || EMPTY_ARRAY$5,
                imports: [(ngModule.imports || EMPTY_ARRAY$5).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY$5).map(resolveForwardRef)]
              };
              ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275inj.js"), meta);
            }

            return ngInjectorDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
        if (verifiedNgModule.get(moduleType)) return;
        verifiedNgModule.set(moduleType, true);
        moduleType = resolveForwardRef(moduleType);
        var ngModuleDef;

        if (importingModule) {
          ngModuleDef = getNgModuleDef(moduleType);

          if (!ngModuleDef) {
            throw new Error("Unexpected value '".concat(moduleType.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }
        } else {
          ngModuleDef = getNgModuleDef(moduleType, true);
        }

        var errors = [];
        var declarations = maybeUnwrapFn(ngModuleDef.declarations);
        var imports = maybeUnwrapFn(ngModuleDef.imports);
        flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
          verifySemanticsOfNgModuleImport(mod, moduleType);
          verifySemanticsOfNgModuleDef(mod, false, moduleType);
        });
        var exports = maybeUnwrapFn(ngModuleDef.exports);
        declarations.forEach(verifyDeclarationsHaveDefinitions);
        declarations.forEach(verifyDirectivesHaveSelector);
        var combinedDeclarations = [].concat(_toConsumableArray(declarations.map(resolveForwardRef)), _toConsumableArray(flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)));
        exports.forEach(verifyExportsAreDeclaredOrReExported);
        declarations.forEach(function (decl) {
          return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot);
        });
        declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
        var ngModule = getAnnotation(moduleType, 'NgModule');

        if (ngModule) {
          ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
            verifySemanticsOfNgModuleImport(mod, moduleType);
            verifySemanticsOfNgModuleDef(mod, false, moduleType);
          });
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
          ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
        } // Throw Error if any errors were detected.


        if (errors.length) {
          throw new Error(errors.join('\n'));
        } ////////////////////////////////////////////////////////////////////////////////////////////////


        function verifyDeclarationsHaveDefinitions(type) {
          type = resolveForwardRef(type);
          var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);

          if (!def) {
            errors.push("Unexpected value '".concat(stringifyForError(type), "' declared by the module '").concat(stringifyForError(moduleType), "'. Please add a @Pipe/@Directive/@Component annotation."));
          }
        }

        function verifyDirectivesHaveSelector(type) {
          type = resolveForwardRef(type);
          var def = getDirectiveDef(type);

          if (!getComponentDef(type) && def && def.selectors.length == 0) {
            errors.push("Directive ".concat(stringifyForError(type), " has no selector, please add it!"));
          }
        }

        function verifyExportsAreDeclaredOrReExported(type) {
          type = resolveForwardRef(type);
          var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef(type) && 'pipe';

          if (kind) {
            // only checked if we are declared as Component, Directive, or Pipe
            // Modules don't need to be declared or imported.
            if (combinedDeclarations.lastIndexOf(type) === -1) {
              // We are exporting something which we don't explicitly declare or import.
              errors.push("Can't export ".concat(kind, " ").concat(stringifyForError(type), " from ").concat(stringifyForError(moduleType), " as it was neither declared nor imported!"));
            }
          }
        }

        function verifyDeclarationIsUnique(type, suppressErrors) {
          type = resolveForwardRef(type);
          var existingModule = ownerNgModule.get(type);

          if (existingModule && existingModule !== moduleType) {
            if (!suppressErrors) {
              var _modules = [existingModule, moduleType].map(stringifyForError).sort();

              errors.push("Type ".concat(stringifyForError(type), " is part of the declarations of 2 modules: ").concat(_modules[0], " and ").concat(_modules[1], "! ") + "Please consider moving ".concat(stringifyForError(type), " to a higher module that imports ").concat(_modules[0], " and ").concat(_modules[1], ". ") + "You can also create a new NgModule that exports and includes ".concat(stringifyForError(type), " then import that NgModule in ").concat(_modules[0], " and ").concat(_modules[1], "."));
            }
          } else {
            // Mark type as having owner.
            ownerNgModule.set(type, moduleType);
          }
        }

        function verifyComponentIsPartOfNgModule(type) {
          type = resolveForwardRef(type);
          var existingModule = ownerNgModule.get(type);

          if (!existingModule) {
            errors.push("Component ".concat(stringifyForError(type), " is not part of any NgModule or the module has not been imported into your module."));
          }
        }

        function verifyCorrectBootstrapType(type) {
          type = resolveForwardRef(type);

          if (!getComponentDef(type)) {
            errors.push("".concat(stringifyForError(type), " cannot be used as an entry component."));
          }
        }

        function verifyComponentEntryComponentsIsPartOfNgModule(type) {
          type = resolveForwardRef(type);

          if (getComponentDef(type)) {
            // We know we are component
            var component = getAnnotation(type, 'Component');

            if (component && component.entryComponents) {
              deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
            }
          }
        }

        function verifySemanticsOfNgModuleImport(type, importingModule) {
          type = resolveForwardRef(type);

          if (getComponentDef(type) || getDirectiveDef(type)) {
            throw new Error("Unexpected directive '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }

          if (getPipeDef(type)) {
            throw new Error("Unexpected pipe '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }
        }
      }

      function unwrapModuleWithProvidersImports(typeOrWithProviders) {
        typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
        return typeOrWithProviders.ngModule || typeOrWithProviders;
      }

      function getAnnotation(type, name) {
        var annotation = null;
        collect(type.__annotations__);
        collect(type.decorators);
        return annotation;

        function collect(annotations) {
          if (annotations) {
            annotations.forEach(readAnnotation);
          }
        }

        function readAnnotation(decorator) {
          if (!annotation) {
            var proto = Object.getPrototypeOf(decorator);

            if (proto.ngMetadataName == name) {
              annotation = decorator;
            } else if (decorator.type) {
              var _proto = Object.getPrototypeOf(decorator.type);

              if (_proto.ngMetadataName == name) {
                annotation = decorator.args[0];
              }
            }
          }
        }
      }
      /**
       * Keep track of compiled components. This is needed because in tests we often want to compile the
       * same component with more than one NgModule. This would cause an error unless we reset which
       * NgModule the component belongs to. We keep the list of compiled components here so that the
       * TestBed can reset it later.
       */


      var ownerNgModule = new Map();
      var verifiedNgModule = new Map();

      function resetCompiledComponents() {
        ownerNgModule = new Map();
        verifiedNgModule = new Map();
        moduleQueue.length = 0;
      }
      /**
       * Computes the combined declarations of explicit declarations, as well as declarations inherited by
       * traversing the exports of imported modules.
       * @param type
       */


      function computeCombinedExports(type) {
        type = resolveForwardRef(type);
        var ngModuleDef = getNgModuleDef(type, true);
        return _toConsumableArray(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {
          var ngModuleDef = getNgModuleDef(type);

          if (ngModuleDef) {
            verifySemanticsOfNgModuleDef(type, false);
            return computeCombinedExports(type);
          } else {
            return type;
          }
        })));
      }
      /**
       * Some declared components may be compiled asynchronously, and thus may not have their
       * ɵcmp set yet. If this is the case, then a reference to the module is written into
       * the `ngSelectorScope` property of the declared type.
       */


      function setScopeOnDeclaredComponents(moduleType, ngModule) {
        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
        var transitiveScopes = transitiveScopesFor(moduleType);
        declarations.forEach(function (declaration) {
          if (declaration.hasOwnProperty(NG_COMP_DEF)) {
            // A `ɵcmp` field exists - go ahead and patch the component directly.
            var component = declaration;
            var componentDef = getComponentDef(component);
            patchComponentDefWithScope(componentDef, transitiveScopes);
          } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
            // Set `ngSelectorScope` for future reference when the component compilation finishes.
            declaration.ngSelectorScope = moduleType;
          }
        });
      }
      /**
       * Patch the definition of a component with directives and pipes from the compilation scope of
       * a given module.
       */


      function patchComponentDefWithScope(componentDef, transitiveScopes) {
        componentDef.directiveDefs = function () {
          return Array.from(transitiveScopes.compilation.directives).map(function (dir) {
            return dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir);
          }).filter(function (def) {
            return !!def;
          });
        };

        componentDef.pipeDefs = function () {
          return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) {
            return getPipeDef(pipe);
          });
        };

        componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
        // may face a problem where previously compiled defs available to a given Component/Directive
        // are cached in TView and may become stale (in case any of these defs gets recompiled). In
        // order to avoid this problem, we force fresh TView to be created.

        componentDef.tView = null;
      }
      /**
       * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
       *
       * This operation is memoized and the result is cached on the module's definition. This function can
       * be called on modules with components that have not fully compiled yet, but the result should not
       * be used until they have.
       *
       * @param moduleType module that transitive scope should be calculated for.
       */


      function transitiveScopesFor(moduleType) {
        if (!isNgModule(moduleType)) {
          throw new Error("".concat(moduleType.name, " does not have a module def (\u0275mod property)"));
        }

        var def = getNgModuleDef(moduleType);

        if (def.transitiveCompileScopes !== null) {
          return def.transitiveCompileScopes;
        }

        var scopes = {
          schemas: def.schemas || null,
          compilation: {
            directives: new Set(),
            pipes: new Set()
          },
          exported: {
            directives: new Set(),
            pipes: new Set()
          }
        };
        maybeUnwrapFn(def.imports).forEach(function (imported) {
          var importedType = imported;

          if (!isNgModule(importedType)) {
            throw new Error("Importing ".concat(importedType.name, " which does not have a \u0275mod property"));
          } // When this module imports another, the imported module's exported directives and pipes are
          // added to the compilation scope of this module.


          var importedScope = transitiveScopesFor(importedType);
          importedScope.exported.directives.forEach(function (entry) {
            return scopes.compilation.directives.add(entry);
          });
          importedScope.exported.pipes.forEach(function (entry) {
            return scopes.compilation.pipes.add(entry);
          });
        });
        maybeUnwrapFn(def.declarations).forEach(function (declared) {
          var declaredWithDefs = declared;

          if (getPipeDef(declaredWithDefs)) {
            scopes.compilation.pipes.add(declared);
          } else {
            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
            // had its template compiled yet. In either case, it gets added to the compilation's
            // directives.
            scopes.compilation.directives.add(declared);
          }
        });
        maybeUnwrapFn(def.exports).forEach(function (exported) {
          var exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a
          // ɵcmp as it might be compiled asynchronously).

          if (isNgModule(exportedType)) {
            // When this module exports another, the exported module's exported directives and pipes are
            // added to both the compilation and exported scopes of this module.
            var exportedScope = transitiveScopesFor(exportedType);
            exportedScope.exported.directives.forEach(function (entry) {
              scopes.compilation.directives.add(entry);
              scopes.exported.directives.add(entry);
            });
            exportedScope.exported.pipes.forEach(function (entry) {
              scopes.compilation.pipes.add(entry);
              scopes.exported.pipes.add(entry);
            });
          } else if (getPipeDef(exportedType)) {
            scopes.exported.pipes.add(exportedType);
          } else {
            scopes.exported.directives.add(exportedType);
          }
        });
        def.transitiveCompileScopes = scopes;
        return scopes;
      }

      function expandModuleWithProviders(value) {
        if (isModuleWithProviders(value)) {
          return value.ngModule;
        }

        return value;
      }

      function isModuleWithProviders(value) {
        return value.ngModule !== undefined;
      }

      function isNgModule(value) {
        return !!getNgModuleDef(value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
       * matters in the following scenario:
       *
       * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
       * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
       * potentially triggering compilation of 'B'. If this nested compilation were to trigger
       * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
       * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
       * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
       * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
       * all compilations have finished.
       */


      var compilationDepth = 0;
      /**
       * Compile an Angular component according to its decorator metadata, and patch the resulting
       * component def (ɵcmp) onto the component type.
       *
       * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
       * other resources, for example). In the event that compilation is not immediate, `compileComponent`
       * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
       * until the global queue has been resolved with a call to `resolveComponentResources`.
       */

      function compileComponent(type, metadata) {
        // Initialize ngDevMode. This must be the first statement in compileComponent.
        // See the `initNgDevMode` docstring for more information.
        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
        var ngComponentDef = null; // Metadata may have resources which need to be resolved.

        maybeQueueResolutionOfComponentResources(type, metadata); // Note that we're using the same function as `Directive`, because that's only subset of metadata
        // that we need to create the ngFactoryDef. We're avoiding using the component metadata
        // because we'd have to resolve the asynchronous templates.

        addDirectiveFactoryDef(type, metadata);
        Object.defineProperty(type, NG_COMP_DEF, {
          get: function get() {
            if (ngComponentDef === null) {
              var compiler = getCompilerFacade();

              if (componentNeedsResolution(metadata)) {
                var error = ["Component '".concat(type.name, "' is not resolved:")];

                if (metadata.templateUrl) {
                  error.push(" - templateUrl: ".concat(metadata.templateUrl));
                }

                if (metadata.styleUrls && metadata.styleUrls.length) {
                  error.push(" - styleUrls: ".concat(JSON.stringify(metadata.styleUrls)));
                }

                error.push("Did you run and wait for 'resolveComponentResources()'?");
                throw new Error(error.join('\n'));
              } // This const was called `jitOptions` previously but had to be renamed to `options` because
              // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
              // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
              // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.


              var options = getJitOptions();
              var preserveWhitespaces = metadata.preserveWhitespaces;

              if (preserveWhitespaces === undefined) {
                if (options !== null && options.preserveWhitespaces !== undefined) {
                  preserveWhitespaces = options.preserveWhitespaces;
                } else {
                  preserveWhitespaces = false;
                }
              }

              var encapsulation = metadata.encapsulation;

              if (encapsulation === undefined) {
                if (options !== null && options.defaultEncapsulation !== undefined) {
                  encapsulation = options.defaultEncapsulation;
                } else {
                  encapsulation = ViewEncapsulation.Emulated;
                }
              }

              var templateUrl = metadata.templateUrl || "ng:///".concat(type.name, "/template.html");
              var meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), {
                typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
                template: metadata.template || '',
                preserveWhitespaces: preserveWhitespaces,
                styles: metadata.styles || EMPTY_ARRAY$1,
                animations: metadata.animations,
                directives: [],
                changeDetection: metadata.changeDetection,
                pipes: new Map(),
                encapsulation: encapsulation,
                interpolation: metadata.interpolation,
                viewProviders: metadata.viewProviders || null
              });
              compilationDepth++;

              try {
                if (meta.usesInheritance) {
                  addDirectiveDefToUndecoratedParents(type);
                }

                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
              } finally {
                // Ensure that the compilation depth is decremented even when the compilation failed.
                compilationDepth--;
              }

              if (compilationDepth === 0) {
                // When NgModule decorator executed, we enqueued the module definition such that
                // it would only dequeue and add itself as module scope to all of its declarations,
                // but only if  if all of its declarations had resolved. This call runs the check
                // to see if any modules that are in the queue can be dequeued and add scope to
                // their declarations.
                flushModuleScopingQueueAsMuchAsPossible();
              } // If component compilation is async, then the @NgModule annotation which declares the
              // component may execute and set an ngSelectorScope property on the component type. This
              // allows the component to patch itself with directiveDefs from the module after it
              // finishes compiling.


              if (hasSelectorScope(type)) {
                var scopes = transitiveScopesFor(type.ngSelectorScope);
                patchComponentDefWithScope(ngComponentDef, scopes);
              }
            }

            return ngComponentDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function hasSelectorScope(component) {
        return component.ngSelectorScope !== undefined;
      }
      /**
       * Compile an Angular directive according to its decorator metadata, and patch the resulting
       * directive def onto the component type.
       *
       * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
       * will resolve when compilation completes and the directive becomes usable.
       */


      function compileDirective(type, directive) {
        var ngDirectiveDef = null;
        addDirectiveFactoryDef(type, directive || {});
        Object.defineProperty(type, NG_DIR_DEF, {
          get: function get() {
            if (ngDirectiveDef === null) {
              // `directive` can be null in the case of abstract directives as a base class
              // that use `@Directive()` with no selector. In that case, pass empty object to the
              // `directiveMetadata` function instead of null.
              var meta = getDirectiveMetadata(type, directive || {});
              ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
            }

            return ngDirectiveDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function getDirectiveMetadata(type, metadata) {
        var name = type && type.name;
        var sourceMapUrl = "ng:///".concat(name, "/\u0275dir.js");
        var compiler = getCompilerFacade();
        var facade = directiveMetadata(type, metadata);
        facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);

        if (facade.usesInheritance) {
          addDirectiveDefToUndecoratedParents(type);
        }

        return {
          metadata: facade,
          sourceMapUrl: sourceMapUrl
        };
      }

      function addDirectiveFactoryDef(type, metadata) {
        var ngFactoryDef = null;
        Object.defineProperty(type, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var meta = getDirectiveMetadata(type, metadata);
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(type.name, "/\u0275fac.js"), Object.assign(Object.assign({}, meta.metadata), {
                injectFn: 'directiveInject',
                target: compiler.R3FactoryTarget.Directive
              }));
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function extendsDirectlyFromObject(type) {
        return Object.getPrototypeOf(type.prototype) === Object.prototype;
      }
      /**
       * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
       * `Component`).
       */


      function directiveMetadata(type, metadata) {
        // Reflect inputs and outputs.
        var reflect = getReflect();
        var propMetadata = reflect.ownPropMetadata(type);
        return {
          name: type.name,
          type: type,
          typeArgumentCount: 0,
          selector: metadata.selector !== undefined ? metadata.selector : null,
          deps: reflectDependencies(type),
          host: metadata.host || EMPTY_OBJ,
          propMetadata: propMetadata,
          inputs: metadata.inputs || EMPTY_ARRAY$1,
          outputs: metadata.outputs || EMPTY_ARRAY$1,
          queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
          lifecycle: {
            usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')
          },
          typeSourceSpan: null,
          usesInheritance: !extendsDirectlyFromObject(type),
          exportAs: extractExportAs(metadata.exportAs),
          providers: metadata.providers || null,
          viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
        };
      }
      /**
       * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
       */


      function addDirectiveDefToUndecoratedParents(type) {
        var objPrototype = Object.prototype;
        var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

        while (parent && parent !== objPrototype) {
          // Since inheritance works if the class was annotated already, we only need to add
          // the def if there are no annotations and the def hasn't been created already.
          if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
            compileDirective(parent, null);
          }

          parent = Object.getPrototypeOf(parent);
        }
      }

      function convertToR3QueryPredicate(selector) {
        return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
      }

      function convertToR3QueryMetadata(propertyName, ann) {
        return {
          propertyName: propertyName,
          predicate: convertToR3QueryPredicate(ann.selector),
          descendants: ann.descendants,
          first: ann.first,
          read: ann.read ? ann.read : null,
          "static": !!ann["static"],
          emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly
        };
      }

      function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
        var queriesMeta = [];

        var _loop3 = function _loop3(field) {
          if (propMetadata.hasOwnProperty(field)) {
            var annotations = propMetadata[field];
            annotations.forEach(function (ann) {
              if (isQueryAnn(ann)) {
                if (!ann.selector) {
                  throw new Error("Can't construct a query for the property \"".concat(field, "\" of ") + "\"".concat(stringifyForError(type), "\" since the query selector wasn't defined."));
                }

                if (annotations.some(isInputAnnotation)) {
                  throw new Error("Cannot combine @Input decorators with query decorators");
                }

                queriesMeta.push(convertToR3QueryMetadata(field, ann));
              }
            });
          }
        };

        for (var field in propMetadata) {
          _loop3(field);
        }

        return queriesMeta;
      }

      function extractExportAs(exportAs) {
        return exportAs === undefined ? null : splitByComma(exportAs);
      }

      function isContentQuery(value) {
        var name = value.ngMetadataName;
        return name === 'ContentChild' || name === 'ContentChildren';
      }

      function isViewQuery(value) {
        var name = value.ngMetadataName;
        return name === 'ViewChild' || name === 'ViewChildren';
      }

      function isInputAnnotation(value) {
        return value.ngMetadataName === 'Input';
      }

      function splitByComma(value) {
        return value.split(',').map(function (piece) {
          return piece.trim();
        });
      }

      var LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];

      function shouldAddAbstractDirective(type) {
        var reflect = getReflect();

        if (LIFECYCLE_HOOKS.some(function (hookName) {
          return reflect.hasLifecycleHook(type, hookName);
        })) {
          return true;
        }

        var propMetadata = reflect.propMetadata(type);

        for (var field in propMetadata) {
          var annotations = propMetadata[field];

          for (var i = 0; i < annotations.length; i++) {
            var current = annotations[i];
            var metadataName = current.ngMetadataName;

            if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {
              return true;
            }
          }
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function compilePipe(type, meta) {
        var ngPipeDef = null;
        var ngFactoryDef = null;
        Object.defineProperty(type, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var metadata = getPipeMetadata(type, meta);
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275fac.js"), Object.assign(Object.assign({}, metadata), {
                injectFn: 'directiveInject',
                target: compiler.R3FactoryTarget.Pipe
              }));
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
        Object.defineProperty(type, NG_PIPE_DEF, {
          get: function get() {
            if (ngPipeDef === null) {
              var metadata = getPipeMetadata(type, meta);
              ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275pipe.js"), metadata);
            }

            return ngPipeDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function getPipeMetadata(type, meta) {
        return {
          type: type,
          typeArgumentCount: 0,
          name: type.name,
          deps: reflectDependencies(type),
          pipeName: meta.name,
          pure: meta.pure !== undefined ? meta.pure : true
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$d = function ɵ0$d() {
        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return dir;
      },
          ɵ1$2 = function ɵ1$2(type, meta) {
        return SWITCH_COMPILE_DIRECTIVE(type, meta);
      };
      /**
       * Type of the Directive metadata.
       *
       * @publicApi
       */


      var Directive = makeDecorator('Directive', ɵ0$d, undefined, undefined, ɵ1$2);

      var ɵ2$1 = function ɵ2$1() {
        var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return Object.assign({
          changeDetection: ChangeDetectionStrategy.Default
        }, c);
      },
          ɵ3$1 = function ɵ3$1(type, meta) {
        return SWITCH_COMPILE_COMPONENT(type, meta);
      };
      /**
       * Component decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var Component = makeDecorator('Component', ɵ2$1, Directive, undefined, ɵ3$1);

      var ɵ4 = function ɵ4(p) {
        return Object.assign({
          pure: true
        }, p);
      },
          ɵ5 = function ɵ5(type, meta) {
        return SWITCH_COMPILE_PIPE(type, meta);
      };
      /**
       * @Annotation
       * @publicApi
       */


      var Pipe = makeDecorator('Pipe', ɵ4, undefined, undefined, ɵ5);

      var ɵ6 = function ɵ6(bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var Input = makePropDecorator('Input', ɵ6);

      var ɵ7 = function ɵ7(bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var Output = makePropDecorator('Output', ɵ7);

      var ɵ8 = function ɵ8(hostPropertyName) {
        return {
          hostPropertyName: hostPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var HostBinding = makePropDecorator('HostBinding', ɵ8);

      var ɵ9 = function ɵ9(eventName, args) {
        return {
          eventName: eventName,
          args: args
        };
      };
      /**
       * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
       * Angular invokes the supplied handler method when the host element emits the specified event,
       * and updates the bound element with the result.
       *
       * If the handler method returns false, applies `preventDefault` on the bound element.
       *
       * @usageNotes
       *
       * The following example declares a directive
       * that attaches a click listener to a button and counts clicks.
       *
       * ```ts
       * @Directive({selector: 'button[counting]'})
       * class CountClicks {
       *   numberOfClicks = 0;
       *
       *   @HostListener('click', ['$event.target'])
       *   onClick(btn) {
       *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
       *  }
       * }
       *
       * @Component({
       *   selector: 'app',
       *   template: '<button counting>Increment</button>',
       * })
       * class App {}
       *
       * ```
       *
       * The following example registers another DOM event handler that listens for key-press events.
       * ``` ts
       * import { HostListener, Component } from "@angular/core";
       *
       * @Component({
       *   selector: 'app',
       *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
       * increment the counter.
       *   <button (click)="resetCounter()">Reset Counter</button>`
       * })
       * class AppComponent {
       *   counter = 0;
       *   @HostListener('window:keydown', ['$event'])
       *   handleKeyDown(event: KeyboardEvent) {
       *     this.counter++;
       *   }
       *   resetCounter() {
       *     this.counter = 0;
       *   }
       * }
       * ```
       *
       * @Annotation
       * @publicApi
       */


      var HostListener = makePropDecorator('HostListener', ɵ9);
      var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;
      var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;
      var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;
      var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;
      var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;
      var SWITCH_COMPILE_PIPE__PRE_R3__ = noop;
      var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;
      var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;
      var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ɵ0$e = function ɵ0$e(ngModule) {
        return ngModule;
      },
          ɵ1$3 =
      /**
       * Decorator that marks the following class as an NgModule, and supplies
       * configuration metadata for it.
       *
       * * The `declarations` and `entryComponents` options configure the compiler
       * with information about what belongs to the NgModule.
       * * The `providers` options configures the NgModule's injector to provide
       * dependencies the NgModule members.
       * * The `imports` and `exports` options bring in members from other modules, and make
       * this module's members available to others.
       */
      function ɵ1$3(type, meta) {
        return SWITCH_COMPILE_NGMODULE(type, meta);
      };
      /**
       * @Annotation
       * @publicApi
       */


      var NgModule = makeDecorator('NgModule', ɵ0$e, undefined, undefined, ɵ1$3);

      function preR3NgModuleCompile(moduleType, metadata) {
        var imports = metadata && metadata.imports || [];

        if (metadata && metadata.exports) {
          imports = [].concat(_toConsumableArray(imports), [metadata.exports]);
        }

        var moduleInjectorType = moduleType;
        moduleInjectorType.ɵfac = convertInjectableProviderToFactory(moduleType, {
          useClass: moduleType
        });
        moduleInjectorType.ɵinj = ɵɵdefineInjector({
          providers: metadata && metadata.providers,
          imports: imports
        });
      }

      var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;
      var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
      var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
       * one or more initialization functions.
       *
       * The provided functions are injected at application startup and executed during
       * app initialization. If any of these functions returns a Promise, initialization
       * does not complete until the Promise is resolved.
       *
       * You can, for example, create a factory function that loads language data
       * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
       * The function is executed during the application bootstrap process,
       * and the needed data is available on startup.
       *
       * @see `ApplicationInitStatus`
       *
       * @publicApi
       */

      var APP_INITIALIZER = new InjectionToken('Application Initializer');
      /**
       * A class that reflects the state of running {@link APP_INITIALIZER} functions.
       *
       * @publicApi
       */

      var ApplicationInitStatus = /*#__PURE__*/function () {
        function ApplicationInitStatus(appInits) {
          var _this165 = this;

          _classCallCheck(this, ApplicationInitStatus);

          this.appInits = appInits;
          this.resolve = noop;
          this.reject = noop;
          this.initialized = false;
          this.done = false;
          this.donePromise = new Promise(function (res, rej) {
            _this165.resolve = res;
            _this165.reject = rej;
          });
        }
        /** @internal */


        _createClass2(ApplicationInitStatus, [{
          key: "runInitializers",
          value: function runInitializers() {
            var _this166 = this;

            if (this.initialized) {
              return;
            }

            var asyncInitPromises = [];

            var complete = function complete() {
              _this166.done = true;

              _this166.resolve();
            };

            if (this.appInits) {
              for (var i = 0; i < this.appInits.length; i++) {
                var initResult = this.appInits[i]();

                if (isPromise(initResult)) {
                  asyncInitPromises.push(initResult);
                }
              }
            }

            Promise.all(asyncInitPromises).then(function () {
              complete();
            })["catch"](function (e) {
              _this166.reject(e);
            });

            if (asyncInitPromises.length === 0) {
              complete();
            }

            this.initialized = true;
          }
        }]);

        return ApplicationInitStatus;
      }();

      ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {
        return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));
      };

      ApplicationInitStatus.ɵprov = ɵɵdefineInjectable({
        token: ApplicationInitStatus,
        factory: ApplicationInitStatus.ɵfac
      });

      ApplicationInitStatus.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [APP_INITIALIZER]
          }, {
            type: Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
          type: Injectable
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: Inject,
              args: [APP_INITIALIZER]
            }, {
              type: Optional
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
       * primarily for prefixing application attributes and CSS styles when
       * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
       *
       * BY default, the value is randomly generated and assigned to the application by Angular.
       * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
       * the root {@link Injector} that uses this token.
       *
       * @publicApi
       */


      var APP_ID = new InjectionToken('AppId');

      function _appIdRandomProviderFactory() {
        return "".concat(_randomChar()).concat(_randomChar()).concat(_randomChar());
      }
      /**
       * Providers that generate a random `APP_ID_TOKEN`.
       * @publicApi
       */


      var APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      };

      function _randomChar() {
        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
      }
      /**
       * A function that is executed when a platform is initialized.
       * @publicApi
       */


      var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
      /**
       * A token that indicates an opaque platform ID.
       * @publicApi
       */

      var PLATFORM_ID = new InjectionToken('Platform ID');
      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
       * be called for every component that is bootstrapped.
       *
       * Each callback must take a `ComponentRef` instance and return nothing.
       *
       * `(componentRef: ComponentRef) => void`
       *
       * @publicApi
       */

      var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
       * the application
       * @publicApi
       */

      var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var Console = /*#__PURE__*/function () {
        function Console() {
          _classCallCheck(this, Console);
        }

        _createClass2(Console, [{
          key: "log",
          value: function log(message) {
            // tslint:disable-next-line:no-console
            console.log(message);
          } // Note: for reporting errors use `DOM.logError()` as it is platform specific

        }, {
          key: "warn",
          value: function warn(message) {
            // tslint:disable-next-line:no-console
            console.warn(message);
          }
        }]);

        return Console;
      }();

      Console.ɵfac = function Console_Factory(t) {
        return new (t || Console)();
      };

      Console.ɵprov = ɵɵdefineInjectable({
        token: Console,
        factory: Console.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
          type: Injectable
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provide this token to set the locale of your application.
       * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
       * DecimalPipe and PercentPipe) and by ICU expressions.
       *
       * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { LOCALE_ID } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
       * });
       * ```
       *
       * @publicApi
       */


      var LOCALE_ID$1 = new InjectionToken('LocaleId');
      /**
       * Provide this token to set the default currency code your application uses for
       * CurrencyPipe when there is no currency code passed into it. This is only used by
       * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
       *
       * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
       *
       * <div class="alert is-helpful">
       *
       * **Deprecation notice:**
       *
       * The default currency code is currently always `USD` but this is deprecated from v9.
       *
       * **In v10 the default currency code will be taken from the current locale.**
       *
       * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
       * your application `NgModule`:
       *
       * ```ts
       * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
       * ```
       *
       * </div>
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
       * });
       * ```
       *
       * @publicApi
       */

      var DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode');
      /**
       * Use this token at bootstrap to provide the content of your translation file (`xtb`,
       * `xlf` or `xlf2`) when you want to translate your application in another language.
       *
       * See the [i18n guide](guide/i18n#merge) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { TRANSLATIONS } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * // content of your translation file
       * const translations = '....';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: TRANSLATIONS, useValue: translations }]
       * });
       * ```
       *
       * @publicApi
       */

      var TRANSLATIONS = new InjectionToken('Translations');
      /**
       * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
       * `xlf` or `xlf2`.
       *
       * See the [i18n guide](guide/i18n#merge) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { TRANSLATIONS_FORMAT } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
       * });
       * ```
       *
       * @publicApi
       */

      var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
      /**
       * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
       * that the compiler should use in case of missing translations:
       * - Error: throw if you have missing translations.
       * - Warning (default): show a warning in the console and/or shell.
       * - Ignore: do nothing.
       *
       * See the [i18n guide](guide/i18n#missing-translation) for more information.
       *
       * @usageNotes
       * ### Example
       * ```typescript
       * import { MissingTranslationStrategy } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   missingTranslation: MissingTranslationStrategy.Error
       * });
       * ```
       *
       * @publicApi
       */

      var MissingTranslationStrategy;

      (function (MissingTranslationStrategy) {
        MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
        MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
        MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
      })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_IVY_ENABLED__POST_R3__ = true;
      var SWITCH_IVY_ENABLED__PRE_R3__ = false;
      var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Combination of NgModuleFactory and ComponentFactories.
       *
       * @publicApi
       */

      var ModuleWithComponentFactories = function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
        _classCallCheck(this, ModuleWithComponentFactories);

        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
      };

      function _throwError() {
        throw new Error("Runtime compiler is not loaded");
      }

      var Compiler_compileModuleSync__PRE_R3__ = _throwError;

      var Compiler_compileModuleSync__POST_R3__ = function Compiler_compileModuleSync__POST_R3__(moduleType) {
        return new NgModuleFactory$1(moduleType);
      };

      var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;
      var Compiler_compileModuleAsync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAsync__POST_R3__ = function Compiler_compileModuleAsync__POST_R3__(moduleType) {
        return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));
      };

      var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;
      var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType) {
        var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);
        var moduleDef = getNgModuleDef(moduleType);
        var componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce(function (factories, declaration) {
          var componentDef = getComponentDef(declaration);
          componentDef && factories.push(new ComponentFactory$1(componentDef));
          return factories;
        }, []);
        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      };

      var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;
      var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function Compiler_compileModuleAndAllComponentsAsync__POST_R3__(moduleType) {
        return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));
      };

      var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
      /**
       * Low-level service for running the angular compiler during runtime
       * to create {@link ComponentFactory}s, which
       * can later be used to create and render a Component instance.
       *
       * Each `@NgModule` provides an own `Compiler` to its injector,
       * that will use the directives/pipes of the ng module for compilation
       * of components.
       *
       * @publicApi
       */

      var Compiler = /*#__PURE__*/function () {
        function Compiler() {
          _classCallCheck(this, Compiler);

          /**
           * Compiles the given NgModule and all of its components. All templates of the components listed
           * in `entryComponents` have to be inlined.
           */
          this.compileModuleSync = Compiler_compileModuleSync;
          /**
           * Compiles the given NgModule and all of its components
           */

          this.compileModuleAsync = Compiler_compileModuleAsync;
          /**
           * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
          /**
           * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
        }
        /**
         * Clears all caches.
         */


        _createClass2(Compiler, [{
          key: "clearCache",
          value: function clearCache() {}
          /**
           * Clears the cache for the given component/ngModule.
           */

        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(type) {}
          /**
           * Returns the id for a given NgModule, if one is defined and known to the compiler.
           */

        }, {
          key: "getModuleId",
          value: function getModuleId(moduleType) {
            return undefined;
          }
        }]);

        return Compiler;
      }();

      Compiler.ɵfac = function Compiler_Factory(t) {
        return new (t || Compiler)();
      };

      Compiler.ɵprov = ɵɵdefineInjectable({
        token: Compiler,
        factory: Compiler.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
          type: Injectable
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Token to provide CompilerOptions in the platform injector.
       *
       * @publicApi
       */


      var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
      /**
       * A factory for creating a Compiler
       *
       * @publicApi
       */

      var CompilerFactory = function CompilerFactory() {
        _classCallCheck(this, CompilerFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var promise = function () {
        return Promise.resolve(0);
      }();

      function scheduleMicroTask(fn) {
        if (typeof Zone === 'undefined') {
          // use promise to schedule microTask instead of use Zone
          promise.then(function () {
            fn && fn.apply(null, null);
          });
        } else {
          Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getNativeRequestAnimationFrame() {
        var nativeRequestAnimationFrame = _global['requestAnimationFrame'];
        var nativeCancelAnimationFrame = _global['cancelAnimationFrame'];

        if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
          // use unpatched version of requestAnimationFrame(native delegate) if possible
          // to avoid another Change detection
          var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];

          if (unpatchedRequestAnimationFrame) {
            nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
          }

          var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];

          if (unpatchedCancelAnimationFrame) {
            nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
          }
        }

        return {
          nativeRequestAnimationFrame: nativeRequestAnimationFrame,
          nativeCancelAnimationFrame: nativeCancelAnimationFrame
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An injectable service for executing work inside or outside of the Angular zone.
       *
       * The most common use of this service is to optimize performance when starting a work consisting of
       * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
       * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
       * can reenter the Angular zone via {@link #run}.
       *
       * <!-- TODO: add/fix links to:
       *   - docs explaining zones and the use of zones in Angular and change-detection
       *   - link to runOutsideAngular/run (throughout this file!)
       *   -->
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * import {Component, NgZone} from '@angular/core';
       * import {NgIf} from '@angular/common';
       *
       * @Component({
       *   selector: 'ng-zone-demo',
       *   template: `
       *     <h2>Demo: NgZone</h2>
       *
       *     <p>Progress: {{progress}}%</p>
       *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
       *
       *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
       *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
       *   `,
       * })
       * export class NgZoneDemo {
       *   progress: number = 0;
       *   label: string;
       *
       *   constructor(private _ngZone: NgZone) {}
       *
       *   // Loop inside the Angular zone
       *   // so the UI DOES refresh after each setTimeout cycle
       *   processWithinAngularZone() {
       *     this.label = 'inside';
       *     this.progress = 0;
       *     this._increaseProgress(() => console.log('Inside Done!'));
       *   }
       *
       *   // Loop outside of the Angular zone
       *   // so the UI DOES NOT refresh after each setTimeout cycle
       *   processOutsideOfAngularZone() {
       *     this.label = 'outside';
       *     this.progress = 0;
       *     this._ngZone.runOutsideAngular(() => {
       *       this._increaseProgress(() => {
       *         // reenter the Angular zone and display done
       *         this._ngZone.run(() => { console.log('Outside Done!'); });
       *       });
       *     });
       *   }
       *
       *   _increaseProgress(doneCallback: () => void) {
       *     this.progress += 1;
       *     console.log(`Current progress: ${this.progress}%`);
       *
       *     if (this.progress < 100) {
       *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
       *     } else {
       *       doneCallback();
       *     }
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var NgZone = /*#__PURE__*/function () {
        function NgZone(_ref8) {
          var _ref8$enableLongStack = _ref8.enableLongStackTrace,
              enableLongStackTrace = _ref8$enableLongStack === void 0 ? false : _ref8$enableLongStack,
              _ref8$shouldCoalesceE = _ref8.shouldCoalesceEventChangeDetection,
              shouldCoalesceEventChangeDetection = _ref8$shouldCoalesceE === void 0 ? false : _ref8$shouldCoalesceE,
              _ref8$shouldCoalesceR = _ref8.shouldCoalesceRunChangeDetection,
              shouldCoalesceRunChangeDetection = _ref8$shouldCoalesceR === void 0 ? false : _ref8$shouldCoalesceR;

          _classCallCheck(this, NgZone);

          this.hasPendingMacrotasks = false;
          this.hasPendingMicrotasks = false;
          /**
           * Whether there are no outstanding microtasks or macrotasks.
           */

          this.isStable = true;
          /**
           * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
           */

          this.onUnstable = new EventEmitter(false);
          /**
           * Notifies when there is no more microtasks enqueued in the current VM Turn.
           * This is a hint for Angular to do change detection, which may enqueue more microtasks.
           * For this reason this event can fire multiple times per VM Turn.
           */

          this.onMicrotaskEmpty = new EventEmitter(false);
          /**
           * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
           * implies we are about to relinquish VM turn.
           * This event gets called just once.
           */

          this.onStable = new EventEmitter(false);
          /**
           * Notifies that an error has been delivered.
           */

          this.onError = new EventEmitter(false);

          if (typeof Zone == 'undefined') {
            throw new Error("In this configuration Angular requires Zone.js");
          }

          Zone.assertZonePatched();
          var self = this;
          self._nesting = 0;
          self._outer = self._inner = Zone.current;

          if (Zone['TaskTrackingZoneSpec']) {
            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());
          }

          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
          } // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be
          // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.


          self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
          self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
          self.lastRequestAnimationFrameId = -1;
          self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
          forkInnerZoneWithAngularBehavior(self);
        }

        _createClass2(NgZone, [{
          key: "run",
          value:
          /**
           * Executes the `fn` function synchronously within the Angular zone and returns value returned by
           * the function.
           *
           * Running functions via `run` allows you to reenter Angular zone from a task that was executed
           * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * within the Angular zone.
           *
           * If a synchronous error happens it will be rethrown and not reported via `onError`.
           */
          function run(fn, applyThis, applyArgs) {
            return this._inner.run(fn, applyThis, applyArgs);
          }
          /**
           * Executes the `fn` function synchronously within the Angular zone as a task and returns value
           * returned by the function.
           *
           * Running functions via `run` allows you to reenter Angular zone from a task that was executed
           * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * within the Angular zone.
           *
           * If a synchronous error happens it will be rethrown and not reported via `onError`.
           */

        }, {
          key: "runTask",
          value: function runTask(fn, applyThis, applyArgs, name) {
            var zone = this._inner;
            var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);

            try {
              return zone.runTask(task, applyThis, applyArgs);
            } finally {
              zone.cancelTask(task);
            }
          }
          /**
           * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
           * rethrown.
           */

        }, {
          key: "runGuarded",
          value: function runGuarded(fn, applyThis, applyArgs) {
            return this._inner.runGuarded(fn, applyThis, applyArgs);
          }
          /**
           * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
           * the function.
           *
           * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
           * work that
           * doesn't trigger Angular change-detection or is subject to Angular's error handling.
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * outside of the Angular zone.
           *
           * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
           */

        }, {
          key: "runOutsideAngular",
          value: function runOutsideAngular(fn) {
            return this._outer.run(fn);
          }
        }], [{
          key: "isInAngularZone",
          value: function isInAngularZone() {
            return Zone.current.get('isAngularZone') === true;
          }
        }, {
          key: "assertInAngularZone",
          value: function assertInAngularZone() {
            if (!NgZone.isInAngularZone()) {
              throw new Error('Expected to be in Angular Zone, but it is not!');
            }
          }
        }, {
          key: "assertNotInAngularZone",
          value: function assertNotInAngularZone() {
            if (NgZone.isInAngularZone()) {
              throw new Error('Expected to not be in Angular Zone, but it is!');
            }
          }
        }]);

        return NgZone;
      }();

      var EMPTY_PAYLOAD = {};

      function checkStable(zone) {
        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
          try {
            zone._nesting++;
            zone.onMicrotaskEmpty.emit(null);
          } finally {
            zone._nesting--;

            if (!zone.hasPendingMicrotasks) {
              try {
                zone.runOutsideAngular(function () {
                  return zone.onStable.emit(null);
                });
              } finally {
                zone.isStable = true;
              }
            }
          }
        }
      }

      function delayChangeDetectionForEvents(zone) {
        if (zone.lastRequestAnimationFrameId !== -1) {
          return;
        }

        zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, function () {
          // This is a work around for https://github.com/angular/angular/issues/36839.
          // The core issue is that when event coalescing is enabled it is possible for microtasks
          // to get flushed too early (As is the case with `Promise.then`) between the
          // coalescing eventTasks.
          //
          // To workaround this we schedule a "fake" eventTask before we process the
          // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
          //  will prevent the microtasks queue from getting drained in between the coalescing
          // eventTask execution.
          if (!zone.fakeTopEventTask) {
            zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', function () {
              zone.lastRequestAnimationFrameId = -1;
              updateMicroTaskStatus(zone);
              checkStable(zone);
            }, undefined, function () {}, function () {});
          }

          zone.fakeTopEventTask.invoke();
        });
        updateMicroTaskStatus(zone);
      }

      function forkInnerZoneWithAngularBehavior(zone) {
        var delayChangeDetectionForEventsDelegate = function delayChangeDetectionForEventsDelegate() {
          delayChangeDetectionForEvents(zone);
        };

        zone._inner = zone._inner.fork({
          name: 'angular',
          properties: {
            'isAngularZone': true
          },
          onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
            try {
              onEnter(zone);
              return delegate.invokeTask(target, task, applyThis, applyArgs);
            } finally {
              if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {
                delayChangeDetectionForEventsDelegate();
              }

              onLeave(zone);
            }
          },
          onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
            try {
              onEnter(zone);
              return delegate.invoke(target, callback, applyThis, applyArgs, source);
            } finally {
              if (zone.shouldCoalesceRunChangeDetection) {
                delayChangeDetectionForEventsDelegate();
              }

              onLeave(zone);
            }
          },
          onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
            delegate.hasTask(target, hasTaskState);

            if (current === target) {
              // We are only interested in hasTask events which originate from our zone
              // (A child hasTask event is not interesting to us)
              if (hasTaskState.change == 'microTask') {
                zone._hasPendingMicrotasks = hasTaskState.microTask;
                updateMicroTaskStatus(zone);
                checkStable(zone);
              } else if (hasTaskState.change == 'macroTask') {
                zone.hasPendingMacrotasks = hasTaskState.macroTask;
              }
            }
          },
          onHandleError: function onHandleError(delegate, current, target, error) {
            delegate.handleError(target, error);
            zone.runOutsideAngular(function () {
              return zone.onError.emit(error);
            });
            return false;
          }
        });
      }

      function updateMicroTaskStatus(zone) {
        if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
          zone.hasPendingMicrotasks = true;
        } else {
          zone.hasPendingMicrotasks = false;
        }
      }

      function onEnter(zone) {
        zone._nesting++;

        if (zone.isStable) {
          zone.isStable = false;
          zone.onUnstable.emit(null);
        }
      }

      function onLeave(zone) {
        zone._nesting--;
        checkStable(zone);
      }
      /**
       * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
       * to framework to perform rendering.
       */


      var NoopNgZone = /*#__PURE__*/function () {
        function NoopNgZone() {
          _classCallCheck(this, NoopNgZone);

          this.hasPendingMicrotasks = false;
          this.hasPendingMacrotasks = false;
          this.isStable = true;
          this.onUnstable = new EventEmitter();
          this.onMicrotaskEmpty = new EventEmitter();
          this.onStable = new EventEmitter();
          this.onError = new EventEmitter();
        }

        _createClass2(NoopNgZone, [{
          key: "run",
          value: function run(fn, applyThis, applyArgs) {
            return fn.apply(applyThis, applyArgs);
          }
        }, {
          key: "runGuarded",
          value: function runGuarded(fn, applyThis, applyArgs) {
            return fn.apply(applyThis, applyArgs);
          }
        }, {
          key: "runOutsideAngular",
          value: function runOutsideAngular(fn) {
            return fn();
          }
        }, {
          key: "runTask",
          value: function runTask(fn, applyThis, applyArgs, name) {
            return fn.apply(applyThis, applyArgs);
          }
        }]);

        return NoopNgZone;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Testability service provides testing hooks that can be accessed from
       * the browser and by services such as Protractor. Each bootstrapped Angular
       * application on the page will have an instance of Testability.
       * @publicApi
       */


      var Testability = /*#__PURE__*/function () {
        function Testability(_ngZone) {
          var _this167 = this;

          _classCallCheck(this, Testability);

          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          /**
           * Whether any work was done since the last 'whenStable' callback. This is
           * useful to detect if this could have potentially destabilized another
           * component while it is stabilizing.
           * @internal
           */

          this._didWork = false;
          this._callbacks = [];
          this.taskTrackingZone = null;

          this._watchAngularEvents();

          _ngZone.run(function () {
            _this167.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
          });
        }

        _createClass2(Testability, [{
          key: "_watchAngularEvents",
          value: function _watchAngularEvents() {
            var _this168 = this;

            this._ngZone.onUnstable.subscribe({
              next: function next() {
                _this168._didWork = true;
                _this168._isZoneStable = false;
              }
            });

            this._ngZone.runOutsideAngular(function () {
              _this168._ngZone.onStable.subscribe({
                next: function next() {
                  NgZone.assertNotInAngularZone();
                  scheduleMicroTask(function () {
                    _this168._isZoneStable = true;

                    _this168._runCallbacksIfReady();
                  });
                }
              });
            });
          }
          /**
           * Increases the number of pending request
           * @deprecated pending requests are now tracked with zones.
           */

        }, {
          key: "increasePendingRequestCount",
          value: function increasePendingRequestCount() {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
          }
          /**
           * Decreases the number of pending request
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "decreasePendingRequestCount",
          value: function decreasePendingRequestCount() {
            this._pendingCount -= 1;

            if (this._pendingCount < 0) {
              throw new Error('pending async requests below zero');
            }

            this._runCallbacksIfReady();

            return this._pendingCount;
          }
          /**
           * Whether an associated application is stable
           */

        }, {
          key: "isStable",
          value: function isStable() {
            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
          }
        }, {
          key: "_runCallbacksIfReady",
          value: function _runCallbacksIfReady() {
            var _this169 = this;

            if (this.isStable()) {
              // Schedules the call backs in a new frame so that it is always async.
              scheduleMicroTask(function () {
                while (_this169._callbacks.length !== 0) {
                  var cb = _this169._callbacks.pop();

                  clearTimeout(cb.timeoutId);
                  cb.doneCb(_this169._didWork);
                }

                _this169._didWork = false;
              });
            } else {
              // Still not stable, send updates.
              var pending = this.getPendingTasks();
              this._callbacks = this._callbacks.filter(function (cb) {
                if (cb.updateCb && cb.updateCb(pending)) {
                  clearTimeout(cb.timeoutId);
                  return false;
                }

                return true;
              });
              this._didWork = true;
            }
          }
        }, {
          key: "getPendingTasks",
          value: function getPendingTasks() {
            if (!this.taskTrackingZone) {
              return [];
            } // Copy the tasks data so that we don't leak tasks.


            return this.taskTrackingZone.macroTasks.map(function (t) {
              return {
                source: t.source,
                // From TaskTrackingZone:
                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
                creationLocation: t.creationLocation,
                data: t.data
              };
            });
          }
        }, {
          key: "addCallback",
          value: function addCallback(cb, timeout, updateCb) {
            var _this170 = this;

            var timeoutId = -1;

            if (timeout && timeout > 0) {
              timeoutId = setTimeout(function () {
                _this170._callbacks = _this170._callbacks.filter(function (cb) {
                  return cb.timeoutId !== timeoutId;
                });
                cb(_this170._didWork, _this170.getPendingTasks());
              }, timeout);
            }

            this._callbacks.push({
              doneCb: cb,
              timeoutId: timeoutId,
              updateCb: updateCb
            });
          }
          /**
           * Wait for the application to be stable with a timeout. If the timeout is reached before that
           * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
           *
           * @param doneCb The callback to invoke when Angular is stable or the timeout expires
           *    whichever comes first.
           * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
           *    specified, whenStable() will wait forever.
           * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
           *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
           *    and no further updates will be issued.
           */

        }, {
          key: "whenStable",
          value: function whenStable(doneCb, timeout, updateCb) {
            if (updateCb && !this.taskTrackingZone) {
              throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');
            } // These arguments are 'Function' above to keep the public API simple.


            this.addCallback(doneCb, timeout, updateCb);

            this._runCallbacksIfReady();
          }
          /**
           * Get the number of pending requests
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "getPendingRequestCount",
          value: function getPendingRequestCount() {
            return this._pendingCount;
          }
          /**
           * Find providers by name
           * @param using The root element to search from
           * @param provider The name of binding variable
           * @param exactMatch Whether using exactMatch
           */

        }, {
          key: "findProviders",
          value: function findProviders(using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
          }
        }]);

        return Testability;
      }();

      Testability.ɵfac = function Testability_Factory(t) {
        return new (t || Testability)(ɵɵinject(NgZone));
      };

      Testability.ɵprov = ɵɵdefineInjectable({
        token: Testability,
        factory: Testability.ɵfac
      });

      Testability.ctorParameters = function () {
        return [{
          type: NgZone
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
          type: Injectable
        }], function () {
          return [{
            type: NgZone
          }];
        }, null);
      })();
      /**
       * A global registry of {@link Testability} instances for specific elements.
       * @publicApi
       */


      var TestabilityRegistry = /*#__PURE__*/function () {
        function TestabilityRegistry() {
          _classCallCheck(this, TestabilityRegistry);

          /** @internal */
          this._applications = new Map();

          _testabilityGetter.addToWindow(this);
        }
        /**
         * Registers an application with a testability hook so that it can be tracked
         * @param token token of application, root element
         * @param testability Testability hook
         */


        _createClass2(TestabilityRegistry, [{
          key: "registerApplication",
          value: function registerApplication(token, testability) {
            this._applications.set(token, testability);
          }
          /**
           * Unregisters an application.
           * @param token token of application, root element
           */

        }, {
          key: "unregisterApplication",
          value: function unregisterApplication(token) {
            this._applications["delete"](token);
          }
          /**
           * Unregisters all applications
           */

        }, {
          key: "unregisterAllApplications",
          value: function unregisterAllApplications() {
            this._applications.clear();
          }
          /**
           * Get a testability hook associated with the application
           * @param elem root element
           */

        }, {
          key: "getTestability",
          value: function getTestability(elem) {
            return this._applications.get(elem) || null;
          }
          /**
           * Get all registered testabilities
           */

        }, {
          key: "getAllTestabilities",
          value: function getAllTestabilities() {
            return Array.from(this._applications.values());
          }
          /**
           * Get all registered applications(root elements)
           */

        }, {
          key: "getAllRootElements",
          value: function getAllRootElements() {
            return Array.from(this._applications.keys());
          }
          /**
           * Find testability of a node in the Tree
           * @param elem node
           * @param findInAncestors whether finding testability in ancestors if testability was not found in
           * current node
           */

        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(elem) {
            var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
          }
        }]);

        return TestabilityRegistry;
      }();

      TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {
        return new (t || TestabilityRegistry)();
      };

      TestabilityRegistry.ɵprov = ɵɵdefineInjectable({
        token: TestabilityRegistry,
        factory: TestabilityRegistry.ɵfac
      });

      TestabilityRegistry.ctorParameters = function () {
        return [];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
          type: Injectable
        }], function () {
          return [];
        }, null);
      })();

      var _NoopGetTestability = /*#__PURE__*/function () {
        function _NoopGetTestability() {
          _classCallCheck(this, _NoopGetTestability);
        }

        _createClass2(_NoopGetTestability, [{
          key: "addToWindow",
          value: function addToWindow(registry) {}
        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(registry, elem, findInAncestors) {
            return null;
          }
        }]);

        return _NoopGetTestability;
      }();
      /**
       * Set the {@link GetTestability} implementation used by the Angular testing framework.
       * @publicApi
       */


      function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
      }

      var _testabilityGetter = new _NoopGetTestability();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
       *
       * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
       * please see [BAZEL.md](./docs/BAZEL.md).
       */


      var _devMode = true;
      var _runModeLocked = false;
      /**
       * Returns whether Angular is in development mode. After called once,
       * the value is locked and won't change any more.
       *
       * By default, this is true, unless a user calls `enableProdMode` before calling this.
       *
       * @publicApi
       */

      function isDevMode() {
        _runModeLocked = true;
        return _devMode;
      }
      /**
       * Disable Angular's development mode, which turns off assertions and other
       * checks within the framework.
       *
       * One important assertion this disables verifies that a change detection pass
       * does not result in additional changes to any bindings (also known as
       * unidirectional data flow).
       *
       * @publicApi
       */


      function enableProdMode() {
        if (_runModeLocked) {
          throw new Error('Cannot enable prod mode after platform setup.');
        } // The below check is there so when ngDevMode is set via terser
        // `global['ngDevMode'] = false;` is also dropped.


        if (typeof ngDevMode === undefined || !!ngDevMode) {
          _global['ngDevMode'] = false;
        }

        _devMode = false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _platform;

      var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;

      function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
        var compilerFactory = injector.get(CompilerFactory);
        var compiler = compilerFactory.createCompiler([options]);
        return compiler.compileModuleAsync(moduleType);
      }

      function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {
        ngDevMode && assertNgModuleType(moduleType);
        var moduleFactory = new NgModuleFactory$1(moduleType); // All of the logic below is irrelevant for AOT-compiled code.

        if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
          return Promise.resolve(moduleFactory);
        }

        var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options); // Configure the compiler to use the provided options. This call may fail when multiple modules
        // are bootstrapped with incompatible options, as a component can only be compiled according to
        // a single set of options.

        setJitOptions({
          defaultEncapsulation: _lastDefined(compilerOptions.map(function (opts) {
            return opts.defaultEncapsulation;
          })),
          preserveWhitespaces: _lastDefined(compilerOptions.map(function (opts) {
            return opts.preserveWhitespaces;
          }))
        });

        if (isComponentResourceResolutionQueueEmpty()) {
          return Promise.resolve(moduleFactory);
        }

        var compilerProviders = _mergeArrays(compilerOptions.map(function (o) {
          return o.providers;
        })); // In case there are no compiler providers, we just return the module factory as
        // there won't be any resource loader. This can happen with Ivy, because AOT compiled
        // modules can be still passed through "bootstrapModule". In that case we shouldn't
        // unnecessarily require the JIT compiler.


        if (compilerProviders.length === 0) {
          return Promise.resolve(moduleFactory);
        }

        var compiler = getCompilerFacade();
        var compilerInjector = Injector.create({
          providers: compilerProviders
        });
        var resourceLoader = compilerInjector.get(compiler.ResourceLoader); // The resource loader can also return a string while the "resolveComponentResources"
        // always expects a promise. Therefore we need to wrap the returned value in a promise.

        return resolveComponentResources(function (url) {
          return Promise.resolve(resourceLoader.get(url));
        }).then(function () {
          return moduleFactory;
        });
      } // the `window.ng` global utilities are only available in non-VE versions of
      // Angular. The function switch below will make sure that the code is not
      // included into Angular when PRE mode is active.


      function publishDefaultGlobalUtils__PRE_R3__() {}

      function publishDefaultGlobalUtils__POST_R3__() {
        ngDevMode && publishDefaultGlobalUtils();
      }

      var publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;
      var isBoundToModule = isBoundToModule__POST_R3__;

      function isBoundToModule__PRE_R3__(cf) {
        return cf instanceof ComponentFactoryBoundToModule;
      }

      function isBoundToModule__POST_R3__(cf) {
        return cf.isBoundToModule;
      }

      var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
      /**
       * A token for third-party components that can register themselves with NgProbe.
       *
       * @publicApi
       */

      var NgProbeToken = function NgProbeToken(name, token) {
        _classCallCheck(this, NgProbeToken);

        this.name = name;
        this.token = token;
      };
      /**
       * Creates a platform.
       * Platforms must be created on launch using this function.
       *
       * @publicApi
       */


      function createPlatform(injector) {
        if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
          throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
        }

        publishDefaultGlobalUtils$1();
        _platform = injector.get(PlatformRef);
        var inits = injector.get(PLATFORM_INITIALIZER, null);
        if (inits) inits.forEach(function (init) {
          return init();
        });
        return _platform;
      }
      /**
       * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
       * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
       * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
       * to build up configurations that might be required by different libraries or parts of the
       * application.
       * @param name Identifies the new platform factory.
       * @param providers A set of dependency providers for platforms created with the new factory.
       *
       * @publicApi
       */


      function createPlatformFactory(parentPlatformFactory, name) {
        var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var desc = "Platform: ".concat(name);
        var marker = new InjectionToken(desc);
        return function () {
          var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var platform = getPlatform();

          if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
              parentPlatformFactory(providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              }));
            } else {
              var injectedProviders = providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              }, {
                provide: INJECTOR_SCOPE,
                useValue: 'platform'
              });
              createPlatform(Injector.create({
                providers: injectedProviders,
                name: desc
              }));
            }
          }

          return assertPlatform(marker);
        };
      }
      /**
       * Checks that there is currently a platform that contains the given token as a provider.
       *
       * @publicApi
       */


      function assertPlatform(requiredToken) {
        var platform = getPlatform();

        if (!platform) {
          throw new Error('No platform exists!');
        }

        if (!platform.injector.get(requiredToken, null)) {
          throw new Error('A platform with a different configuration has been created. Please destroy it first.');
        }

        return platform;
      }
      /**
       * Destroys the current Angular platform and all Angular applications on the page.
       * Destroys all modules and listeners registered with the platform.
       *
       * @publicApi
       */


      function destroyPlatform() {
        if (_platform && !_platform.destroyed) {
          _platform.destroy();
        }
      }
      /**
       * Returns the current platform.
       *
       * @publicApi
       */


      function getPlatform() {
        return _platform && !_platform.destroyed ? _platform : null;
      }
      /**
       * The Angular platform is the entry point for Angular on a web page.
       * Each page has exactly one platform. Services (such as reflection) which are common
       * to every Angular application running on the page are bound in its scope.
       * A page's platform is initialized implicitly when a platform is created using a platform
       * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.
       *
       * @publicApi
       */


      var PlatformRef = /*#__PURE__*/function () {
        /** @internal */
        function PlatformRef(_injector) {
          _classCallCheck(this, PlatformRef);

          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        /**
         * Creates an instance of an `@NgModule` for the given platform for offline compilation.
         *
         * @usageNotes
         *
         * The following example creates the NgModule for a browser platform.
         *
         * ```typescript
         * my_module.ts:
         *
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {platformBrowser} from '@angular/platform-browser';
         *
         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         */


        _createClass2(PlatformRef, [{
          key: "bootstrapModuleFactory",
          value: function bootstrapModuleFactory(moduleFactory, options) {
            var _this171 = this;

            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            var ngZoneOption = options ? options.ngZone : undefined;
            var ngZoneEventCoalescing = options && options.ngZoneEventCoalescing || false;
            var ngZoneRunCoalescing = options && options.ngZoneRunCoalescing || false;
            var ngZone = getNgZone(ngZoneOption, {
              ngZoneEventCoalescing: ngZoneEventCoalescing,
              ngZoneRunCoalescing: ngZoneRunCoalescing
            });
            var providers = [{
              provide: NgZone,
              useValue: ngZone
            }]; // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are
            // created within the Angular zone
            // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be
            // created outside of the Angular zone.

            return ngZone.run(function () {
              var ngZoneInjector = Injector.create({
                providers: providers,
                parent: _this171.injector,
                name: moduleFactory.moduleType.name
              });
              var moduleRef = moduleFactory.create(ngZoneInjector);
              var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);

              if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
              }

              ngZone.runOutsideAngular(function () {
                var subscription = ngZone.onError.subscribe({
                  next: function next(error) {
                    exceptionHandler.handleError(error);
                  }
                });
                moduleRef.onDestroy(function () {
                  remove(_this171._modules, moduleRef);
                  subscription.unsubscribe();
                });
              });
              return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
                var initStatus = moduleRef.injector.get(ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then(function () {
                  if (ivyEnabled) {
                    // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
                    var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
                    setLocaleId(localeId || DEFAULT_LOCALE_ID);
                  }

                  _this171._moduleDoBootstrap(moduleRef);

                  return moduleRef;
                });
              });
            });
          }
          /**
           * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
           *
           * @usageNotes
           * ### Simple Example
           *
           * ```typescript
           * @NgModule({
           *   imports: [BrowserModule]
           * })
           * class MyModule {}
           *
           * let moduleRef = platformBrowser().bootstrapModule(MyModule);
           * ```
           *
           */

        }, {
          key: "bootstrapModule",
          value: function bootstrapModule(moduleType) {
            var _this172 = this;

            var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var options = optionsReducer({}, compilerOptions);
            return compileNgModuleFactory(this.injector, options, moduleType).then(function (moduleFactory) {
              return _this172.bootstrapModuleFactory(moduleFactory, options);
            });
          }
        }, {
          key: "_moduleDoBootstrap",
          value: function _moduleDoBootstrap(moduleRef) {
            var appRef = moduleRef.injector.get(ApplicationRef);

            if (moduleRef._bootstrapComponents.length > 0) {
              moduleRef._bootstrapComponents.forEach(function (f) {
                return appRef.bootstrap(f);
              });
            } else if (moduleRef.instance.ngDoBootstrap) {
              moduleRef.instance.ngDoBootstrap(appRef);
            } else {
              throw new Error("The module ".concat(stringify(moduleRef.instance.constructor), " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
            }

            this._modules.push(moduleRef);
          }
          /**
           * Registers a listener to be called when the platform is destroyed.
           */

        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
          }
          /**
           * Retrieves the platform {@link Injector}, which is the parent injector for
           * every Angular application on the page and provides singleton providers.
           */

        }, {
          key: "injector",
          get: function get() {
            return this._injector;
          }
          /**
           * Destroys the current Angular platform and all Angular applications on the page.
           * Destroys all modules and listeners registered with the platform.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) {
              throw new Error('The platform has already been destroyed!');
            }

            this._modules.slice().forEach(function (module) {
              return module.destroy();
            });

            this._destroyListeners.forEach(function (listener) {
              return listener();
            });

            this._destroyed = true;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return this._destroyed;
          }
        }]);

        return PlatformRef;
      }();

      PlatformRef.ɵfac = function PlatformRef_Factory(t) {
        return new (t || PlatformRef)(ɵɵinject(Injector));
      };

      PlatformRef.ɵprov = ɵɵdefineInjectable({
        token: PlatformRef,
        factory: PlatformRef.ɵfac
      });

      PlatformRef.ctorParameters = function () {
        return [{
          type: Injector
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
          type: Injectable
        }], function () {
          return [{
            type: Injector
          }];
        }, null);
      })();

      function getNgZone(ngZoneOption, extra) {
        var ngZone;

        if (ngZoneOption === 'noop') {
          ngZone = new NoopNgZone();
        } else {
          ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
            enableLongStackTrace: isDevMode(),
            shouldCoalesceEventChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneEventCoalescing),
            shouldCoalesceRunChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneRunCoalescing)
          });
        }

        return ngZone;
      }

      function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
        try {
          var result = callback();

          if (isPromise(result)) {
            return result["catch"](function (e) {
              ngZone.runOutsideAngular(function () {
                return errorHandler.handleError(e);
              }); // rethrow as the exception handler might not do it

              throw e;
            });
          }

          return result;
        } catch (e) {
          ngZone.runOutsideAngular(function () {
            return errorHandler.handleError(e);
          }); // rethrow as the exception handler might not do it

          throw e;
        }
      }

      function optionsReducer(dst, objs) {
        if (Array.isArray(objs)) {
          dst = objs.reduce(optionsReducer, dst);
        } else {
          dst = Object.assign(Object.assign({}, dst), objs);
        }

        return dst;
      }
      /**
       * A reference to an Angular application running on a page.
       *
       * @usageNotes
       *
       * {@a is-stable-examples}
       * ### isStable examples and caveats
       *
       * Note two important points about `isStable`, demonstrated in the examples below:
       * - the application will never be stable if you start any kind
       * of recurrent asynchronous task when the application starts
       * (for example for a polling process, started with a `setInterval`, a `setTimeout`
       * or using RxJS operators like `interval`);
       * - the `isStable` Observable runs outside of the Angular zone.
       *
       * Let's imagine that you start a recurrent task
       * (here incrementing a counter, using RxJS `interval`),
       * and at the same time subscribe to `isStable`.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *      filter(stable => stable)
       *   ).subscribe(() => console.log('App is stable now');
       *   interval(1000).subscribe(counter => console.log(counter));
       * }
       * ```
       * In this example, `isStable` will never emit `true`,
       * and the trace "App is stable now" will never get logged.
       *
       * If you want to execute something when the app is stable,
       * you have to wait for the application to be stable
       * before starting your polling process.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     tap(stable => console.log('App is stable now')),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => console.log(counter));
       * }
       * ```
       * In this example, the trace "App is stable now" will be logged
       * and then the counter starts incrementing every second.
       *
       * Note also that this Observable runs outside of the Angular zone,
       * which means that the code in the subscription
       * to this Observable will not trigger the change detection.
       *
       * Let's imagine that instead of logging the counter value,
       * you update a field of your component
       * and display it in its template.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => this.value = counter);
       * }
       * ```
       * As the `isStable` Observable runs outside the zone,
       * the `value` field will be updated properly,
       * but the template will not be refreshed!
       *
       * You'll have to manually trigger the change detection to update the template.
       *
       * ```
       * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => {
       *     this.value = counter;
       *     cd.detectChanges();
       *   });
       * }
       * ```
       *
       * Or make the subscription callback run inside the zone.
       *
       * ```
       * constructor(appRef: ApplicationRef, zone: NgZone) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => zone.run(() => this.value = counter));
       * }
       * ```
       *
       * @publicApi
       */


      var ApplicationRef = /*#__PURE__*/function () {
        /** @internal */
        function ApplicationRef(_zone, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
          var _this173 = this;

          _classCallCheck(this, ApplicationRef);

          this._zone = _zone;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          /** @internal */

          this._bootstrapListeners = [];
          this._views = [];
          this._runningTick = false;
          this._stable = true;
          /**
           * Get a list of component types registered to this application.
           * This list is populated even before the component is created.
           */

          this.componentTypes = [];
          /**
           * Get a list of components registered to this application.
           */

          this.components = [];
          this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
            next: function next() {
              _this173._zone.run(function () {
                _this173.tick();
              });
            }
          });
          var isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (observer) {
            _this173._stable = _this173._zone.isStable && !_this173._zone.hasPendingMacrotasks && !_this173._zone.hasPendingMicrotasks;

            _this173._zone.runOutsideAngular(function () {
              observer.next(_this173._stable);
              observer.complete();
            });
          });
          var isStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (observer) {
            // Create the subscription to onStable outside the Angular Zone so that
            // the callback is run outside the Angular Zone.
            var stableSub;

            _this173._zone.runOutsideAngular(function () {
              stableSub = _this173._zone.onStable.subscribe(function () {
                NgZone.assertNotInAngularZone(); // Check whether there are no pending macro/micro tasks in the next tick
                // to allow for NgZone to update the state.

                scheduleMicroTask(function () {
                  if (!_this173._stable && !_this173._zone.hasPendingMacrotasks && !_this173._zone.hasPendingMicrotasks) {
                    _this173._stable = true;
                    observer.next(true);
                  }
                });
              });
            });

            var unstableSub = _this173._zone.onUnstable.subscribe(function () {
              NgZone.assertInAngularZone();

              if (_this173._stable) {
                _this173._stable = false;

                _this173._zone.runOutsideAngular(function () {
                  observer.next(false);
                });
              }
            });

            return function () {
              stableSub.unsubscribe();
              unstableSub.unsubscribe();
            };
          });
          this.isStable = Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["merge"])(isCurrentlyStable, isStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["share"])()));
        }
        /**
         * Bootstrap a new component at the root level of the application.
         *
         * @usageNotes
         * ### Bootstrap process
         *
         * When bootstrapping a new root component into an application, Angular mounts the
         * specified application component onto DOM elements identified by the componentType's
         * selector and kicks off automatic change detection to finish initializing the component.
         *
         * Optionally, a component can be mounted onto a DOM element that does not match the
         * componentType's selector.
         *
         * ### Example
         * {@example core/ts/platform/platform.ts region='longform'}
         */


        _createClass2(ApplicationRef, [{
          key: "bootstrap",
          value: function bootstrap(componentOrFactory, rootSelectorOrNode) {
            var _this174 = this;

            if (!this._initStatus.done) {
              throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }

            var componentFactory;

            if (componentOrFactory instanceof ComponentFactory) {
              componentFactory = componentOrFactory;
            } else {
              componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
            }

            this.componentTypes.push(componentFactory.componentType); // Create a factory associated with the current module if it's not bound to some other

            var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);
            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
            var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
            var nativeElement = compRef.location.nativeElement;
            var testability = compRef.injector.get(Testability, null);
            var testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);

            if (testability && testabilityRegistry) {
              testabilityRegistry.registerApplication(nativeElement, testability);
            }

            compRef.onDestroy(function () {
              _this174.detachView(compRef.hostView);

              remove(_this174.components, compRef);

              if (testabilityRegistry) {
                testabilityRegistry.unregisterApplication(nativeElement);
              }
            });

            this._loadComponent(compRef); // Note that we have still left the `isDevMode()` condition in order to avoid
            // creating a breaking change for projects that still use the View Engine.


            if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {
              var _console = this._injector.get(Console);

              _console.log("Angular is running in development mode. Call enableProdMode() to enable production mode.");
            }

            return compRef;
          }
          /**
           * Invoke this method to explicitly process change detection and its side-effects.
           *
           * In development mode, `tick()` also performs a second change detection cycle to ensure that no
           * further changes are detected. If additional changes are picked up during this second cycle,
           * bindings in the app have side-effects that cannot be resolved in a single change detection
           * pass.
           * In this case, Angular throws an error, since an Angular application can only have one change
           * detection pass during which all change detection must complete.
           */

        }, {
          key: "tick",
          value: function tick() {
            var _this175 = this;

            if (this._runningTick) {
              throw new Error('ApplicationRef.tick is called recursively');
            }

            try {
              this._runningTick = true;

              var _iterator8 = _createForOfIteratorHelper(this._views),
                  _step7;

              try {
                for (_iterator8.s(); !(_step7 = _iterator8.n()).done;) {
                  var _view2 = _step7.value;

                  _view2.detectChanges();
                } // Note that we have still left the `isDevMode()` condition in order to avoid
                // creating a breaking change for projects that still use the View Engine.

              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }

              if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {
                var _iterator9 = _createForOfIteratorHelper(this._views),
                    _step8;

                try {
                  for (_iterator9.s(); !(_step8 = _iterator9.n()).done;) {
                    var view = _step8.value;
                    view.checkNoChanges();
                  }
                } catch (err) {
                  _iterator9.e(err);
                } finally {
                  _iterator9.f();
                }
              }
            } catch (e) {
              // Attention: Don't rethrow as it could cancel subscriptions to Observables!
              this._zone.runOutsideAngular(function () {
                return _this175._exceptionHandler.handleError(e);
              });
            } finally {
              this._runningTick = false;
            }
          }
          /**
           * Attaches a view so that it will be dirty checked.
           * The view will be automatically detached when it is destroyed.
           * This will throw if the view is already attached to a ViewContainer.
           */

        }, {
          key: "attachView",
          value: function attachView(viewRef) {
            var view = viewRef;

            this._views.push(view);

            view.attachToAppRef(this);
          }
          /**
           * Detaches a view from dirty checking again.
           */

        }, {
          key: "detachView",
          value: function detachView(viewRef) {
            var view = viewRef;
            remove(this._views, view);
            view.detachFromAppRef();
          }
        }, {
          key: "_loadComponent",
          value: function _loadComponent(componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this.components.push(componentRef); // Get the listeners lazily to prevent DI cycles.

            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);

            listeners.forEach(function (listener) {
              return listener(componentRef);
            });
          }
          /** @internal */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._views.slice().forEach(function (view) {
              return view.destroy();
            });

            this._onMicrotaskEmptySubscription.unsubscribe();
          }
          /**
           * Returns the number of attached views.
           */

        }, {
          key: "viewCount",
          get: function get() {
            return this._views.length;
          }
        }]);

        return ApplicationRef;
      }();

      ApplicationRef.ɵfac = function ApplicationRef_Factory(t) {
        return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus));
      };

      ApplicationRef.ɵprov = ɵɵdefineInjectable({
        token: ApplicationRef,
        factory: ApplicationRef.ɵfac
      });

      ApplicationRef.ctorParameters = function () {
        return [{
          type: NgZone
        }, {
          type: Injector
        }, {
          type: ErrorHandler
        }, {
          type: ComponentFactoryResolver
        }, {
          type: ApplicationInitStatus
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
          type: Injectable
        }], function () {
          return [{
            type: NgZone
          }, {
            type: Injector
          }, {
            type: ErrorHandler
          }, {
            type: ComponentFactoryResolver
          }, {
            type: ApplicationInitStatus
          }];
        }, null);
      })();

      function remove(list, el) {
        var index = list.indexOf(el);

        if (index > -1) {
          list.splice(index, 1);
        }
      }

      function _lastDefined(args) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (args[i] !== undefined) {
            return args[i];
          }
        }

        return undefined;
      }

      function _mergeArrays(parts) {
        var result = [];
        parts.forEach(function (part) {
          return part && result.push.apply(result, _toConsumableArray(part));
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to load ng module factories.
       *
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is
       * part of its implementation. See `LoadChildren` for more details.
       */


      var NgModuleFactoryLoader = function NgModuleFactoryLoader() {
        _classCallCheck(this, NgModuleFactoryLoader);
      };

      function getModuleFactory__PRE_R3__(id) {
        var factory = getRegisteredNgModuleType(id);
        if (!factory) throw noModuleError(id);
        return factory;
      }

      function getModuleFactory__POST_R3__(id) {
        var type = getRegisteredNgModuleType(id);
        if (!type) throw noModuleError(id);
        return new NgModuleFactory$1(type);
      }
      /**
       * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
       * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
       * cannot be found.
       * @publicApi
       */


      var getModuleFactory = getModuleFactory__POST_R3__;

      function noModuleError(id) {
        return new Error("No module with ID ".concat(id, " loaded"));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _SEPARATOR = '#';
      var FACTORY_CLASS_SUFFIX = 'NgFactory';
      /**
       * Configuration for SystemJsNgModuleLoader.
       * token.
       *
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
       * is part of its implementation. See `LoadChildren` for more details.
       */

      var SystemJsNgModuleLoaderConfig = function SystemJsNgModuleLoaderConfig() {
        _classCallCheck(this, SystemJsNgModuleLoaderConfig);
      };

      var DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory'
      };
      /**
       * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is
       * part of its implementation. See `LoadChildren` for more details.
       */

      var SystemJsNgModuleLoader = /*#__PURE__*/function () {
        function SystemJsNgModuleLoader(_compiler, config) {
          _classCallCheck(this, SystemJsNgModuleLoader);

          this._compiler = _compiler;
          this._config = config || DEFAULT_CONFIG;
        }

        _createClass2(SystemJsNgModuleLoader, [{
          key: "load",
          value: function load(path) {
            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;
            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
          }
        }, {
          key: "loadAndCompile",
          value: function loadAndCompile(path) {
            var _this176 = this;

            var _path$split = path.split(_SEPARATOR),
                _path$split2 = _slicedToArray(_path$split, 2),
                module = _path$split2[0],
                exportName = _path$split2[1];

            if (exportName === undefined) {
              exportName = 'default';
            }

            return __webpack_require__("zn8P")(module).then(function (module) {
              return module[exportName];
            }).then(function (type) {
              return checkNotEmpty(type, module, exportName);
            }).then(function (type) {
              return _this176._compiler.compileModuleAsync(type);
            });
          }
        }, {
          key: "loadFactory",
          value: function loadFactory(path) {
            var _path$split3 = path.split(_SEPARATOR),
                _path$split4 = _slicedToArray(_path$split3, 2),
                module = _path$split4[0],
                exportName = _path$split4[1];

            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;

            if (exportName === undefined) {
              exportName = 'default';
              factoryClassSuffix = '';
            }

            return __webpack_require__("zn8P")(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
              return module[exportName + factoryClassSuffix];
            }).then(function (factory) {
              return checkNotEmpty(factory, module, exportName);
            });
          }
        }]);

        return SystemJsNgModuleLoader;
      }();

      SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) {
        return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8));
      };

      SystemJsNgModuleLoader.ɵprov = ɵɵdefineInjectable({
        token: SystemJsNgModuleLoader,
        factory: SystemJsNgModuleLoader.ɵfac
      });

      SystemJsNgModuleLoader.ctorParameters = function () {
        return [{
          type: Compiler
        }, {
          type: SystemJsNgModuleLoaderConfig,
          decorators: [{
            type: Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SystemJsNgModuleLoader, [{
          type: Injectable
        }], function () {
          return [{
            type: Compiler
          }, {
            type: SystemJsNgModuleLoaderConfig,
            decorators: [{
              type: Optional
            }]
          }];
        }, null);
      })();

      function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
          throw new Error("Cannot find '".concat(exportName, "' in '").concat(modulePath, "'"));
        }

        return value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents an Angular [view](guide/glossary#view "Definition").
       *
       * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
       *
       * @publicApi
       */


      var ViewRef$1 = /*#__PURE__*/function (_ChangeDetectorRef) {
        _inherits(ViewRef$1, _ChangeDetectorRef);

        var _super130 = _createSuper(ViewRef$1);

        function ViewRef$1() {
          _classCallCheck(this, ViewRef$1);

          return _super130.apply(this, arguments);
        }

        return ViewRef$1;
      }(ChangeDetectorRef);
      /**
       * Represents an Angular [view](guide/glossary#view) in a view container.
       * An [embedded view](guide/glossary#view-tree) can be referenced from a component
       * other than the hosting component whose template defines it, or it can be defined
       * independently by a `TemplateRef`.
       *
       * Properties of elements in a view can change, but the structure (number and order) of elements in
       * a view cannot. Change the structure of elements by inserting, moving, or
       * removing nested views in a view container.
       *
       * @see `ViewContainerRef`
       *
       * @usageNotes
       *
       * The following template breaks down into two separate `TemplateRef` instances,
       * an outer one and an inner one.
       *
       * ```
       * Count: {{items.length}}
       * <ul>
       *   <li *ngFor="let  item of items">{{item}}</li>
       * </ul>
       * ```
       *
       * This is the outer `TemplateRef`:
       *
       * ```
       * Count: {{items.length}}
       * <ul>
       *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
       * </ul>
       * ```
       *
       * This is the inner `TemplateRef`:
       *
       * ```
       *   <li>{{item}}</li>
       * ```
       *
       * The outer and inner `TemplateRef` instances are assembled into views as follows:
       *
       * ```
       * <!-- ViewRef: outer-0 -->
       * Count: 2
       * <ul>
       *   <ng-template view-container-ref></ng-template>
       *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
       *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
       * </ul>
       * <!-- /ViewRef: outer-0 -->
       * ```
       * @publicApi
       */


      var EmbeddedViewRef = /*#__PURE__*/function (_ViewRef$) {
        _inherits(EmbeddedViewRef, _ViewRef$);

        var _super131 = _createSuper(EmbeddedViewRef);

        function EmbeddedViewRef() {
          _classCallCheck(this, EmbeddedViewRef);

          return _super131.apply(this, arguments);
        }

        return EmbeddedViewRef;
      }(ViewRef$1);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var DebugEventListener = function DebugEventListener(name, callback) {
        _classCallCheck(this, DebugEventListener);

        this.name = name;
        this.callback = callback;
      };

      var DebugNode__PRE_R3__ = /*#__PURE__*/function () {
        function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {
          _classCallCheck(this, DebugNode__PRE_R3__);

          this.listeners = [];
          this.parent = null;
          this._debugContext = _debugContext;
          this.nativeNode = nativeNode;

          if (parent && parent instanceof DebugElement__PRE_R3__) {
            parent.addChild(this);
          }
        }

        _createClass2(DebugNode__PRE_R3__, [{
          key: "injector",
          get: function get() {
            return this._debugContext.injector;
          }
        }, {
          key: "componentInstance",
          get: function get() {
            return this._debugContext.component;
          }
        }, {
          key: "context",
          get: function get() {
            return this._debugContext.context;
          }
        }, {
          key: "references",
          get: function get() {
            return this._debugContext.references;
          }
        }, {
          key: "providerTokens",
          get: function get() {
            return this._debugContext.providerTokens;
          }
        }]);

        return DebugNode__PRE_R3__;
      }();

      var DebugElement__PRE_R3__ = /*#__PURE__*/function (_DebugNode__PRE_R3__) {
        _inherits(DebugElement__PRE_R3__, _DebugNode__PRE_R3__);

        var _super132 = _createSuper(DebugElement__PRE_R3__);

        function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {
          var _this177;

          _classCallCheck(this, DebugElement__PRE_R3__);

          _this177 = _super132.call(this, nativeNode, parent, _debugContext);
          _this177.properties = {};
          _this177.attributes = {};
          _this177.classes = {};
          _this177.styles = {};
          _this177.childNodes = [];
          _this177.nativeElement = nativeNode;
          return _this177;
        }

        _createClass2(DebugElement__PRE_R3__, [{
          key: "addChild",
          value: function addChild(child) {
            if (child) {
              this.childNodes.push(child);
              child.parent = this;
            }
          }
        }, {
          key: "removeChild",
          value: function removeChild(child) {
            var childIndex = this.childNodes.indexOf(child);

            if (childIndex !== -1) {
              child.parent = null;
              this.childNodes.splice(childIndex, 1);
            }
          }
        }, {
          key: "insertChildrenAfter",
          value: function insertChildrenAfter(child, newChildren) {
            var _this178 = this;

            var siblingIndex = this.childNodes.indexOf(child);

            if (siblingIndex !== -1) {
              var _this$childNodes;

              (_this$childNodes = this.childNodes).splice.apply(_this$childNodes, [siblingIndex + 1, 0].concat(_toConsumableArray(newChildren)));

              newChildren.forEach(function (c) {
                if (c.parent) {
                  c.parent.removeChild(c);
                }

                child.parent = _this178;
              });
            }
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(refChild, newChild) {
            var refIndex = this.childNodes.indexOf(refChild);

            if (refIndex === -1) {
              this.addChild(newChild);
            } else {
              if (newChild.parent) {
                newChild.parent.removeChild(newChild);
              }

              newChild.parent = this;
              this.childNodes.splice(refIndex, 0, newChild);
            }
          }
        }, {
          key: "query",
          value: function query(predicate) {
            var results = this.queryAll(predicate);
            return results[0] || null;
          }
        }, {
          key: "queryAll",
          value: function queryAll(predicate) {
            var matches = [];

            _queryElementChildren(this, predicate, matches);

            return matches;
          }
        }, {
          key: "queryAllNodes",
          value: function queryAllNodes(predicate) {
            var matches = [];

            _queryNodeChildren(this, predicate, matches);

            return matches;
          }
        }, {
          key: "children",
          get: function get() {
            return this.childNodes //
            .filter(function (node) {
              return node instanceof DebugElement__PRE_R3__;
            });
          }
        }, {
          key: "triggerEventHandler",
          value: function triggerEventHandler(eventName, eventObj) {
            this.listeners.forEach(function (listener) {
              if (listener.name == eventName) {
                listener.callback(eventObj);
              }
            });
          }
        }]);

        return DebugElement__PRE_R3__;
      }(DebugNode__PRE_R3__);
      /**
       * @publicApi
       */


      function asNativeElements(debugEls) {
        return debugEls.map(function (el) {
          return el.nativeElement;
        });
      }

      function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
          if (node instanceof DebugElement__PRE_R3__) {
            if (predicate(node)) {
              matches.push(node);
            }

            _queryElementChildren(node, predicate, matches);
          }
        });
      }

      function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement__PRE_R3__) {
          parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
              matches.push(node);
            }

            if (node instanceof DebugElement__PRE_R3__) {
              _queryNodeChildren(node, predicate, matches);
            }
          });
        }
      }

      var DebugNode__POST_R3__ = /*#__PURE__*/function () {
        function DebugNode__POST_R3__(nativeNode) {
          _classCallCheck(this, DebugNode__POST_R3__);

          this.nativeNode = nativeNode;
        }

        _createClass2(DebugNode__POST_R3__, [{
          key: "parent",
          get: function get() {
            var parent = this.nativeNode.parentNode;
            return parent ? new DebugElement__POST_R3__(parent) : null;
          }
        }, {
          key: "injector",
          get: function get() {
            return getInjector(this.nativeNode);
          }
        }, {
          key: "componentInstance",
          get: function get() {
            var nativeElement = this.nativeNode;
            return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));
          }
        }, {
          key: "context",
          get: function get() {
            return getComponent(this.nativeNode) || getContext(this.nativeNode);
          }
        }, {
          key: "listeners",
          get: function get() {
            return getListeners(this.nativeNode).filter(function (listener) {
              return listener.type === 'dom';
            });
          }
        }, {
          key: "references",
          get: function get() {
            return getLocalRefs(this.nativeNode);
          }
        }, {
          key: "providerTokens",
          get: function get() {
            return getInjectionTokens(this.nativeNode);
          }
        }]);

        return DebugNode__POST_R3__;
      }();

      var DebugElement__POST_R3__ = /*#__PURE__*/function (_DebugNode__POST_R3__) {
        _inherits(DebugElement__POST_R3__, _DebugNode__POST_R3__);

        var _super133 = _createSuper(DebugElement__POST_R3__);

        function DebugElement__POST_R3__(nativeNode) {
          _classCallCheck(this, DebugElement__POST_R3__);

          ngDevMode && assertDomNode(nativeNode);
          return _super133.call(this, nativeNode);
        }

        _createClass2(DebugElement__POST_R3__, [{
          key: "nativeElement",
          get: function get() {
            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
          }
        }, {
          key: "name",
          get: function get() {
            try {
              var context = loadLContext(this.nativeNode);
              var lView = context.lView;
              var tData = lView[TVIEW].data;
              var tNode = tData[context.nodeIndex];
              return tNode.value;
            } catch (e) {
              return this.nativeNode.nodeName;
            }
          }
          /**
           *  Gets a map of property names to property values for an element.
           *
           *  This map includes:
           *  - Regular property bindings (e.g. `[id]="id"`)
           *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
           *  - Interpolated property bindings (e.g. `id="{{ value }}")
           *
           *  It does not include:
           *  - input property bindings (e.g. `[myCustomInput]="value"`)
           *  - attribute bindings (e.g. `[attr.role]="menu"`)
           */

        }, {
          key: "properties",
          get: function get() {
            var context = loadLContext(this.nativeNode, false);

            if (context == null) {
              return {};
            }

            var lView = context.lView;
            var tData = lView[TVIEW].data;
            var tNode = tData[context.nodeIndex];
            var properties = {}; // Collect properties from the DOM.

            copyDomProperties(this.nativeElement, properties); // Collect properties from the bindings. This is needed for animation renderer which has
            // synthetic properties which don't get reflected into the DOM.

            collectPropertyBindings(properties, tNode, lView, tData);
            return properties;
          }
        }, {
          key: "attributes",
          get: function get() {
            var attributes = {};
            var element = this.nativeElement;

            if (!element) {
              return attributes;
            }

            var context = loadLContext(element, false);

            if (context == null) {
              return {};
            }

            var lView = context.lView;
            var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
            var lowercaseTNodeAttrs = []; // For debug nodes we take the element's attribute directly from the DOM since it allows us
            // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
            // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
            // however since we have the attributes already on the TNode, we can preserve the case by going
            // through them once, adding them to the `attributes` map and putting their lower-cased name
            // into an array. Afterwards when we're going through the native DOM attributes, we can check
            // whether we haven't run into an attribute already through the TNode.

            if (tNodeAttrs) {
              var i = 0;

              while (i < tNodeAttrs.length) {
                var attrName = tNodeAttrs[i]; // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
                // else will be handled below when we read the final attributes off the DOM.

                if (typeof attrName !== 'string') break;
                var attrValue = tNodeAttrs[i + 1];
                attributes[attrName] = attrValue;
                lowercaseTNodeAttrs.push(attrName.toLowerCase());
                i += 2;
              }
            }

            var eAttrs = element.attributes;

            for (var _i16 = 0; _i16 < eAttrs.length; _i16++) {
              var attr = eAttrs[_i16];
              var lowercaseName = attr.name.toLowerCase(); // Make sure that we don't assign the same attribute both in its
              // case-sensitive form and the lower-cased one from the browser.

              if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
                // Save the lowercase name to align the behavior between browsers.
                // IE preserves the case, while all other browser convert it to lower case.
                attributes[lowercaseName] = attr.value;
              }
            }

            return attributes;
          }
        }, {
          key: "styles",
          get: function get() {
            if (this.nativeElement && this.nativeElement.style) {
              return this.nativeElement.style;
            }

            return {};
          }
        }, {
          key: "classes",
          get: function get() {
            var result = {};
            var element = this.nativeElement; // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.

            var className = element.className;
            var classes = className && typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
            classes.forEach(function (value) {
              return result[value] = true;
            });
            return result;
          }
        }, {
          key: "childNodes",
          get: function get() {
            var childNodes = this.nativeNode.childNodes;
            var children = [];

            for (var i = 0; i < childNodes.length; i++) {
              var element = childNodes[i];
              children.push(getDebugNode__POST_R3__(element));
            }

            return children;
          }
        }, {
          key: "children",
          get: function get() {
            var nativeElement = this.nativeElement;
            if (!nativeElement) return [];
            var childNodes = nativeElement.children;
            var children = [];

            for (var i = 0; i < childNodes.length; i++) {
              var element = childNodes[i];
              children.push(getDebugNode__POST_R3__(element));
            }

            return children;
          }
        }, {
          key: "query",
          value: function query(predicate) {
            var results = this.queryAll(predicate);
            return results[0] || null;
          }
        }, {
          key: "queryAll",
          value: function queryAll(predicate) {
            var matches = [];

            _queryAllR3(this, predicate, matches, true);

            return matches;
          }
        }, {
          key: "queryAllNodes",
          value: function queryAllNodes(predicate) {
            var matches = [];

            _queryAllR3(this, predicate, matches, false);

            return matches;
          }
        }, {
          key: "triggerEventHandler",
          value: function triggerEventHandler(eventName, eventObj) {
            var node = this.nativeNode;
            var invokedListeners = [];
            this.listeners.forEach(function (listener) {
              if (listener.name === eventName) {
                var callback = listener.callback;
                callback.call(node, eventObj);
                invokedListeners.push(callback);
              }
            }); // We need to check whether `eventListeners` exists, because it's something
            // that Zone.js only adds to `EventTarget` in browser environments.

            if (typeof node.eventListeners === 'function') {
              // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
              // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
              // listener.
              node.eventListeners(eventName).forEach(function (listener) {
                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
                // use `toString` on the listener and see if it contains the token. We use this approach to
                // ensure that it still worked with compiled code since it cannot remove or rename string
                // literals. We also considered using a special function name (i.e. if(listener.name ===
                // special)) but that was more cumbersome and we were also concerned the compiled code could
                // strip the name, turning the condition in to ("" === "") and always returning true.
                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
                  var unwrappedListener = listener('__ngUnwrap__');
                  return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
                }
              });
            }
          }
        }]);

        return DebugElement__POST_R3__;
      }(DebugNode__POST_R3__);

      function copyDomProperties(element, properties) {
        if (element) {
          // Skip own properties (as those are patched)
          var obj = Object.getPrototypeOf(element);
          var NodePrototype = Node.prototype;

          while (obj !== null && obj !== NodePrototype) {
            var descriptors = Object.getOwnPropertyDescriptors(obj);

            for (var key in descriptors) {
              if (!key.startsWith('__') && !key.startsWith('on')) {
                // don't include properties starting with `__` and `on`.
                // `__` are patched values which should not be included.
                // `on` are listeners which also should not be included.
                var value = element[key];

                if (isPrimitiveValue(value)) {
                  properties[key] = value;
                }
              }
            }

            obj = Object.getPrototypeOf(obj);
          }
        }
      }

      function isPrimitiveValue(value) {
        return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;
      }

      function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
        var context = loadLContext(parentElement.nativeNode, false);

        if (context !== null) {
          var parentTNode = context.lView[TVIEW].data[context.nodeIndex];

          _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
        } else {
          // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
          // APIs.
          _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
        }
      }
      /**
       * Recursively match the current TNode against the predicate, and goes on with the next ones.
       *
       * @param tNode the current TNode
       * @param lView the LView of this TNode
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        var nativeNode = getNativeByTNodeOrNull(tNode, lView); // For each type of TNode, specific logic is executed.

        if (tNode.type & (3
        /* AnyRNode */
        | 8
        /* ElementContainer */
        )) {
          // Case 1: the TNode is an element
          // The native node has to be checked.
          _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);

          if (isComponentHost(tNode)) {
            // If the element is the host of a component, then all nodes in its view have to be processed.
            // Note: the component's content (tNode.child) will be processed from the insertion points.
            var componentView = getComponentLViewByIndex(tNode.index, lView);

            if (componentView && componentView[TVIEW].firstChild) {
              _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
            }
          } else {
            if (tNode.child) {
              // Otherwise, its children have to be processed.
              _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
            } // We also have to query the DOM directly in order to catch elements inserted through
            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
            // times. ViewEngine could do it more efficiently, because all the insertions go through
            // Renderer2, however that's not the case in Ivy. This approach is being used because:
            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
            // 2. We would have to make `Renderer3` "know" about debug nodes.
            // 3. It allows us to capture nodes that were inserted directly via the DOM.


            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
          } // In all cases, if a dynamic container exists for this node, each view inside it has to be
          // processed.


          var nodeOrContainer = lView[tNode.index];

          if (isLContainer(nodeOrContainer)) {
            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
          }
        } else if (tNode.type & 4
        /* Container */
        ) {
            // Case 2: the TNode is a container
            // The native node has to be checked.
            var lContainer = lView[tNode.index];

            _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode); // Each view inside the container has to be processed.


            _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
          } else if (tNode.type & 16
        /* Projection */
        ) {
            // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
            // The nodes projected at this location all need to be processed.
            var _componentView = lView[DECLARATION_COMPONENT_VIEW];
            var componentHost = _componentView[T_HOST];
            var head = componentHost.projection[tNode.projection];

            if (Array.isArray(head)) {
              var _iterator10 = _createForOfIteratorHelper(head),
                  _step9;

              try {
                for (_iterator10.s(); !(_step9 = _iterator10.n()).done;) {
                  var _nativeNode2 = _step9.value;

                  _addQueryMatchR3(_nativeNode2, predicate, matches, elementsOnly, rootNativeNode);
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
            } else if (head) {
              var nextLView = _componentView[PARENT];
              var nextTNode = nextLView[TVIEW].data[head.index];

              _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
            }
          } else if (tNode.child) {
          // Case 4: the TNode is a view.
          _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
        } // We don't want to go to the next sibling of the root node.


        if (rootNativeNode !== nativeNode) {
          // To determine the next node to be processed, we need to use the next or the projectionNext
          // link, depending on whether the current node has been projected.
          var _nextTNode = tNode.flags & 4
          /* isProjected */
          ? tNode.projectionNext : tNode.next;

          if (_nextTNode) {
            _queryNodeChildrenR3(_nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
          }
        }
      }
      /**
       * Process all TNodes in a given container.
       *
       * @param lContainer the container to be processed
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var childView = lContainer[i];
          var firstChild = childView[TVIEW].firstChild;

          if (firstChild) {
            _queryNodeChildrenR3(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
          }
        }
      }
      /**
       * Match the current native node against the predicate.
       *
       * @param nativeNode the current native node
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
        if (rootNativeNode !== nativeNode) {
          var debugNode = getDebugNode$1(nativeNode);

          if (!debugNode) {
            return;
          } // Type of the "predicate and "matches" array are set based on the value of
          // the "elementsOnly" parameter. TypeScript is not able to properly infer these
          // types with generics, so we manually cast the parameters accordingly.


          if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          }
        }
      }
      /**
       * Match all the descendants of a DOM node against a predicate.
       *
       * @param nativeNode the current native node
       * @param predicate the predicate to match
       * @param matches the list where matches are stored
       * @param elementsOnly whether only elements should be searched
       */


      function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
        var nodes = parentNode.childNodes;
        var length = nodes.length;

        for (var i = 0; i < length; i++) {
          var node = nodes[i];
          var debugNode = getDebugNode$1(node);

          if (debugNode) {
            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
            } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
            }

            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
          }
        }
      }
      /**
       * Iterates through the property bindings for a given node and generates
       * a map of property names to values. This map only contains property bindings
       * defined in templates, not in host bindings.
       */


      function collectPropertyBindings(properties, tNode, lView, tData) {
        var bindingIndexes = tNode.propertyBindings;

        if (bindingIndexes !== null) {
          for (var i = 0; i < bindingIndexes.length; i++) {
            var bindingIndex = bindingIndexes[i];
            var propMetadata = tData[bindingIndex];
            var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
            var propertyName = metadataParts[0];

            if (metadataParts.length > 1) {
              var value = metadataParts[1];

              for (var j = 1; j < metadataParts.length - 1; j++) {
                value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
              }

              properties[propertyName] = value;
            } else {
              properties[propertyName] = lView[bindingIndex];
            }
          }
        }
      } // Need to keep the nodes in a global Map so that multiple angular apps are supported.


      var _nativeNodeToDebugNode = new Map();

      function getDebugNode__PRE_R3__(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode) || null;
      }

      var NG_DEBUG_PROPERTY = '__ng_debug__';

      function getDebugNode__POST_R3__(nativeNode) {
        if (nativeNode instanceof Node) {
          if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
            nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement__POST_R3__(nativeNode) : new DebugNode__POST_R3__(nativeNode);
          }

          return nativeNode[NG_DEBUG_PROPERTY];
        }

        return null;
      }
      /**
       * @publicApi
       */


      var getDebugNode$1 = getDebugNode__POST_R3__;

      function getDebugNodeR2__PRE_R3__(nativeNode) {
        return getDebugNode__PRE_R3__(nativeNode);
      }

      function getDebugNodeR2__POST_R3__(_nativeNode) {
        return null;
      }

      var getDebugNodeR2 = getDebugNodeR2__POST_R3__;

      function getAllDebugNodes() {
        return Array.from(_nativeNodeToDebugNode.values());
      }

      function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
      }

      function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode["delete"](node.nativeNode);
      }
      /**
       * @publicApi
       */


      var DebugNode = DebugNode__POST_R3__;
      /**
       * @publicApi
       */

      var DebugElement = DebugElement__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var _CORE_PLATFORM_PROVIDERS = [// Set a default platform name for platforms that don't set it explicitly.
      {
        provide: PLATFORM_ID,
        useValue: 'unknown'
      }, {
        provide: PlatformRef,
        deps: [Injector]
      }, {
        provide: TestabilityRegistry,
        deps: []
      }, {
        provide: Console,
        deps: []
      }];
      /**
       * This platform has to be included in any other platform
       *
       * @publicApi
       */

      var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function _iterableDiffersFactory() {
        return defaultIterableDiffers;
      }

      function _keyValueDiffersFactory() {
        return defaultKeyValueDiffers;
      }

      function _localeFactory(locale) {
        locale = locale || getGlobalLocale();

        if (ivyEnabled) {
          setLocaleId(locale);
        }

        return locale;
      }
      /**
       * Work out the locale from the potential global properties.
       *
       * * Closure Compiler: use `goog.LOCALE`.
       * * Ivy enabled: use `$localize.locale`
       */


      function getGlobalLocale() {
        if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
          // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
          // * In order to preserve backwards compatibility, we use Angular default value over
          //   Closure Compiler's one.
          return goog.LOCALE;
        } else {
          // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
          // COMPILE-TIME INLINER.
          //
          // * During compile time inlining of translations the expression will be replaced
          //   with a string literal that is the current locale. Other forms of this expression are not
          //   guaranteed to be replaced.
          //
          // * During runtime translation evaluation, the developer is required to set `$localize.locale`
          //   if required, or just to provide their own `LOCALE_ID` provider.
          return ivyEnabled && typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;
        }
      }

      var ɵ0$f = USD_CURRENCY_CODE;
      /**
       * A built-in [dependency injection token](guide/glossary#di-token)
       * that is used to configure the root injector for bootstrapping.
       */

      var APPLICATION_MODULE_PROVIDERS = [{
        provide: ApplicationRef,
        useClass: ApplicationRef,
        deps: [NgZone, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]
      }, {
        provide: SCHEDULER,
        deps: [NgZone],
        useFactory: zoneSchedulerFactory
      }, {
        provide: ApplicationInitStatus,
        useClass: ApplicationInitStatus,
        deps: [[new Optional(), APP_INITIALIZER]]
      }, {
        provide: Compiler,
        useClass: Compiler,
        deps: []
      }, APP_ID_RANDOM_PROVIDER, {
        provide: IterableDiffers,
        useFactory: _iterableDiffersFactory,
        deps: []
      }, {
        provide: KeyValueDiffers,
        useFactory: _keyValueDiffersFactory,
        deps: []
      }, {
        provide: LOCALE_ID$1,
        useFactory: _localeFactory,
        deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]
      }, {
        provide: DEFAULT_CURRENCY_CODE,
        useValue: ɵ0$f
      }];
      /**
       * Schedule work at next available slot.
       *
       * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
       * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
       * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
       *
       * @param ngZone NgZone to use for scheduling.
       */

      function zoneSchedulerFactory(ngZone) {
        var queue = [];
        ngZone.onStable.subscribe(function () {
          while (queue.length) {
            queue.pop()();
          }
        });
        return function (fn) {
          queue.push(fn);
        };
      }
      /**
       * Configures the root injector for an app with
       * providers of `@angular/core` dependencies that `ApplicationRef` needs
       * to bootstrap components.
       *
       * Re-exported by `BrowserModule`, which is included automatically in the root
       * `AppModule` when you create a new app with the CLI `new` command.
       *
       * @publicApi
       */


      var ApplicationModule = // Inject ApplicationRef to make it eager...
      function ApplicationModule(appRef) {
        _classCallCheck(this, ApplicationModule);
      };

      ApplicationModule.ɵfac = function ApplicationModule_Factory(t) {
        return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));
      };

      ApplicationModule.ɵmod = ɵɵdefineNgModule({
        type: ApplicationModule
      });
      ApplicationModule.ɵinj = ɵɵdefineInjector({
        providers: APPLICATION_MODULE_PROVIDERS
      });

      ApplicationModule.ctorParameters = function () {
        return [{
          type: ApplicationRef
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
          type: NgModule,
          args: [{
            providers: APPLICATION_MODULE_PROVIDERS
          }]
        }], function () {
          return [{
            type: ApplicationRef
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
        flags |= 1
        /* TypeElement */
        ;

        var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD2.matchedQueries,
            references = _splitMatchedQueriesD2.references,
            matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;

        var template = templateFactory ? resolveDefinition(templateFactory) : null;
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          flags: flags,
          checkIndex: -1,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: ngContentIndex,
          childCount: childCount,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: {
            ns: null,
            name: null,
            attrs: null,
            template: template,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
          },
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {
        var fixedAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
        var bindings = arguments.length > 7 ? arguments[7] : undefined;
        var outputs = arguments.length > 8 ? arguments[8] : undefined;
        var handleEvent = arguments.length > 9 ? arguments[9] : undefined;
        var componentView = arguments.length > 10 ? arguments[10] : undefined;
        var componentRendererType = arguments.length > 11 ? arguments[11] : undefined;

        if (!handleEvent) {
          handleEvent = NOOP;
        }

        var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD3.matchedQueries,
            references = _splitMatchedQueriesD3.references,
            matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;

        var ns = null;
        var name = null;

        if (namespaceAndName) {
          var _splitNamespace = splitNamespace(namespaceAndName);

          var _splitNamespace2 = _slicedToArray(_splitNamespace, 2);

          ns = _splitNamespace2[0];
          name = _splitNamespace2[1];
        }

        bindings = bindings || [];
        var bindingDefs = [];

        for (var i = 0; i < bindings.length; i++) {
          var _bindings$i = _slicedToArray(bindings[i], 3),
              bindingFlags = _bindings$i[0],
              _namespaceAndName = _bindings$i[1],
              suffixOrSecurityContext = _bindings$i[2];

          var _splitNamespace3 = splitNamespace(_namespaceAndName),
              _splitNamespace4 = _slicedToArray(_splitNamespace3, 2),
              _ns = _splitNamespace4[0],
              _name2 = _splitNamespace4[1];

          var securityContext = undefined;
          var suffix = undefined;

          switch (bindingFlags & 15
          /* Types */
          ) {
            case 4
            /* TypeElementStyle */
            :
              suffix = suffixOrSecurityContext;
              break;

            case 1
            /* TypeElementAttribute */
            :
            case 8
            /* TypeProperty */
            :
              securityContext = suffixOrSecurityContext;
              break;
          }

          bindingDefs[i] = {
            flags: bindingFlags,
            ns: _ns,
            name: _name2,
            nonMinifiedName: _name2,
            securityContext: securityContext,
            suffix: suffix
          };
        }

        outputs = outputs || [];
        var outputDefs = [];

        for (var _i17 = 0; _i17 < outputs.length; _i17++) {
          var _outputs$_i = _slicedToArray(outputs[_i17], 2),
              target = _outputs$_i[0],
              eventName = _outputs$_i[1];

          outputDefs[_i17] = {
            type: 0
            /* ElementOutput */
            ,
            target: target,
            eventName: eventName,
            propName: null
          };
        }

        fixedAttrs = fixedAttrs || [];
        var attrs = fixedAttrs.map(function (_ref9) {
          var _ref10 = _slicedToArray(_ref9, 2),
              namespaceAndName = _ref10[0],
              value = _ref10[1];

          var _splitNamespace5 = splitNamespace(namespaceAndName),
              _splitNamespace6 = _slicedToArray(_splitNamespace5, 2),
              ns = _splitNamespace6[0],
              name = _splitNamespace6[1];

          return [ns, name, value];
        });
        componentRendererType = resolveRendererType2(componentRendererType);

        if (componentView) {
          flags |= 33554432
          /* ComponentView */
          ;
        }

        flags |= 1
        /* TypeElement */
        ;
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: ngContentIndex,
          childCount: childCount,
          bindings: bindingDefs,
          bindingFlags: calcBindingFlags(bindingDefs),
          outputs: outputDefs,
          element: {
            ns: ns,
            name: name,
            attrs: attrs,
            template: null,
            // will bet set by the view definition
            componentProvider: null,
            componentView: componentView || null,
            componentRendererType: componentRendererType,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
          },
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createElement(view, renderHost, def) {
        var elDef = def.element;
        var rootSelectorOrNode = view.root.selectorOrNode;
        var renderer = view.renderer;
        var el;

        if (view.parent || !rootSelectorOrNode) {
          if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
          } else {
            el = renderer.createComment('');
          }

          var parentEl = getParentRenderElement(view, renderHost, def);

          if (parentEl) {
            renderer.appendChild(parentEl, el);
          }
        } else {
          // when using native Shadow DOM, do not clear the root element contents to allow slot projection
          var preserveContent = !!elDef.componentRendererType && elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom;
          el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
        }

        if (elDef.attrs) {
          for (var i = 0; i < elDef.attrs.length; i++) {
            var _elDef$attrs$i = _slicedToArray(elDef.attrs[i], 3),
                ns = _elDef$attrs$i[0],
                name = _elDef$attrs$i[1],
                value = _elDef$attrs$i[2];

            renderer.setAttribute(el, name, value, ns);
          }
        }

        return el;
      }

      function listenToElementOutputs(view, compView, def, el) {
        for (var i = 0; i < def.outputs.length; i++) {
          var output = def.outputs[i];
          var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
          var listenTarget = output.target;
          var listenerView = view;

          if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
          }

          var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
          view.disposables[def.outputIndex + i] = disposable;
        }
      }

      function renderEventHandlerClosure(view, index, eventName) {
        return function (event) {
          return dispatchEvent(view, index, eventName, event);
        };
      }

      function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = def.bindings.length;
        var changed = false;
        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
        return changed;
      }

      function checkAndUpdateElementDynamic(view, def, values) {
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
        }

        return changed;
      }

      function checkAndUpdateElementValue(view, def, bindingIdx, value) {
        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
          return false;
        }

        var binding = def.bindings[bindingIdx];
        var elData = asElementData(view, def.nodeIndex);
        var renderNode = elData.renderElement;
        var name = binding.name;

        switch (binding.flags & 15
        /* Types */
        ) {
          case 1
          /* TypeElementAttribute */
          :
            setElementAttribute$1(view, binding, renderNode, binding.ns, name, value);
            break;

          case 2
          /* TypeElementClass */
          :
            setElementClass(view, renderNode, name, value);
            break;

          case 4
          /* TypeElementStyle */
          :
            setElementStyle(view, binding, renderNode, name, value);
            break;

          case 8
          /* TypeProperty */
          :
            var bindView = def.flags & 33554432
            /* ComponentView */
            && binding.flags & 32
            /* SyntheticHostProperty */
            ? elData.componentView : view;
            setElementProperty(bindView, binding, renderNode, name, value);
            break;
        }

        return true;
      }

      function setElementAttribute$1(view, binding, renderNode, ns, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        renderValue = renderValue != null ? renderValue.toString() : null;
        var renderer = view.renderer;

        if (value != null) {
          renderer.setAttribute(renderNode, name, renderValue, ns);
        } else {
          renderer.removeAttribute(renderNode, name, ns);
        }
      }

      function setElementClass(view, renderNode, name, value) {
        var renderer = view.renderer;

        if (value) {
          renderer.addClass(renderNode, name);
        } else {
          renderer.removeClass(renderNode, name);
        }
      }

      function setElementStyle(view, binding, renderNode, name, value) {
        var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);

        if (renderValue != null) {
          renderValue = renderValue.toString();
          var unit = binding.suffix;

          if (unit != null) {
            renderValue = renderValue + unit;
          }
        } else {
          renderValue = null;
        }

        var renderer = view.renderer;

        if (renderValue != null) {
          renderer.setStyle(renderNode, name, renderValue);
        } else {
          renderer.removeStyle(renderNode, name);
        }
      }

      function setElementProperty(view, binding, renderNode, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        view.renderer.setProperty(renderNode, name, renderValue);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function queryDef(flags, id, bindings) {
        var bindingDefs = [];

        for (var propName in bindings) {
          var bindingType = bindings[propName];
          bindingDefs.push({
            propName: propName,
            bindingType: bindingType
          });
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          // TODO(vicb): check
          checkIndex: -1,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          ngContentIndex: -1,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: {
            id: id,
            filterId: filterQueryId(id),
            bindings: bindingDefs
          },
          ngContent: null
        };
      }

      function createQuery(emitDistinctChangesOnly) {
        return new QueryList(emitDistinctChangesOnly);
      }

      function dirtyParentQueries(view) {
        var queryIds = view.def.nodeMatchedQueries;

        while (view.parent && isEmbeddedView(view)) {
          var tplDef = view.parentNodeDef;
          view = view.parent; // content queries

          var end = tplDef.nodeIndex + tplDef.childCount;

          for (var i = 0; i <= end; i++) {
            var nodeDef = view.def.nodes[i];

            if (nodeDef.flags & 67108864
            /* TypeContentQuery */
            && nodeDef.flags & 536870912
            /* DynamicQuery */
            && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
              asQueryList(view, i).setDirty();
            }

            if (nodeDef.flags & 1
            /* TypeElement */
            && i + nodeDef.childCount < tplDef.nodeIndex || !(nodeDef.childFlags & 67108864
            /* TypeContentQuery */
            ) || !(nodeDef.childFlags & 536870912
            /* DynamicQuery */
            )) {
              // skip elements that don't contain the template element or no query.
              i += nodeDef.childCount;
            }
          }
        } // view queries


        if (view.def.nodeFlags & 134217728
        /* TypeViewQuery */
        ) {
            for (var _i18 = 0; _i18 < view.def.nodes.length; _i18++) {
              var _nodeDef = view.def.nodes[_i18];

              if (_nodeDef.flags & 134217728
              /* TypeViewQuery */
              && _nodeDef.flags & 536870912
              /* DynamicQuery */
              ) {
                asQueryList(view, _i18).setDirty();
              } // only visit the root nodes


              _i18 += _nodeDef.childCount;
            }
          }
      }

      function checkAndUpdateQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.nodeIndex);

        if (!queryList.dirty) {
          return;
        }

        var directiveInstance;
        var newValues = undefined;

        if (nodeDef.flags & 67108864
        /* TypeContentQuery */
        ) {
            var _elementDef = nodeDef.parent.parent;
            newValues = calcQueryValues(view, _elementDef.nodeIndex, _elementDef.nodeIndex + _elementDef.childCount, nodeDef.query, []);
            directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
          } else if (nodeDef.flags & 134217728
        /* TypeViewQuery */
        ) {
            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
            directiveInstance = view.component;
          }

        queryList.reset(newValues, unwrapElementRef);
        var bindings = nodeDef.query.bindings;
        var notify = false;

        for (var i = 0; i < bindings.length; i++) {
          var binding = bindings[i];
          var boundValue = void 0;

          switch (binding.bindingType) {
            case 0
            /* First */
            :
              boundValue = queryList.first;
              break;

            case 1
            /* All */
            :
              boundValue = queryList;
              notify = true;
              break;
          }

          directiveInstance[binding.propName] = boundValue;
        }

        if (notify) {
          queryList.notifyOnChanges();
        }
      }

      function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = view.def.nodes[i];
          var valueType = nodeDef.matchedQueries[queryDef.id];

          if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
          }

          if (nodeDef.flags & 1
          /* TypeElement */
          && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
            var elementData = asElementData(view, i); // check embedded views that were attached at the place of their template,
            // but process child nodes first if some match the query (see issue #16568)

            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
              calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
              i += nodeDef.childCount;
            }

            if (nodeDef.flags & 16777216
            /* EmbeddedViews */
            ) {
                var embeddedViews = elementData.viewContainer._embeddedViews;

                for (var k = 0; k < embeddedViews.length; k++) {
                  var embeddedView = embeddedViews[k];
                  var dvc = declaredViewContainer(embeddedView);

                  if (dvc && dvc === elementData) {
                    calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                  }
                }
              }

            var projectedViews = elementData.template._projectedViews;

            if (projectedViews) {
              for (var _k = 0; _k < projectedViews.length; _k++) {
                var projectedView = projectedViews[_k];
                calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
              }
            }
          }

          if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
          }
        }

        return values;
      }

      function getQueryValue(view, nodeDef, queryValueType) {
        if (queryValueType != null) {
          // a match
          switch (queryValueType) {
            case 1
            /* RenderElement */
            :
              return asElementData(view, nodeDef.nodeIndex).renderElement;

            case 0
            /* ElementRef */
            :
              return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);

            case 2
            /* TemplateRef */
            :
              return asElementData(view, nodeDef.nodeIndex).template;

            case 3
            /* ViewContainerRef */
            :
              return asElementData(view, nodeDef.nodeIndex).viewContainer;

            case 4
            /* Provider */
            :
              return asProviderData(view, nodeDef.nodeIndex).instance;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function ngContentDef(ngContentIndex, index) {
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: -1,
          flags: 8
          /* TypeNgContent */
          ,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: ngContentIndex,
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: null,
          ngContent: {
            index: index
          }
        };
      }

      function appendNgContent(view, renderHost, def) {
        var parentEl = getParentRenderElement(view, renderHost, def);

        if (!parentEl) {
          // Nothing to do if there is no parent element.
          return;
        }

        var ngContentIndex = def.ngContent.index;
        visitProjectedRenderNodes(view, ngContentIndex, 1
        /* AppendChild */
        , parentEl, null, undefined);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function purePipeDef(checkIndex, argCount) {
        // argCount + 1 to include the pipe as first arg
        return _pureExpressionDef(128
        /* TypePurePipe */
        , checkIndex, newArray(argCount + 1));
      }

      function pureArrayDef(checkIndex, argCount) {
        return _pureExpressionDef(32
        /* TypePureArray */
        , checkIndex, newArray(argCount));
      }

      function pureObjectDef(checkIndex, propToIndex) {
        var keys = Object.keys(propToIndex);
        var nbKeys = keys.length;
        var propertyNames = [];

        for (var i = 0; i < nbKeys; i++) {
          var key = keys[i];
          var index = propToIndex[key];
          propertyNames.push(key);
        }

        return _pureExpressionDef(64
        /* TypePureObject */
        , checkIndex, propertyNames);
      }

      function _pureExpressionDef(flags, checkIndex, propertyNames) {
        var bindings = [];

        for (var i = 0; i < propertyNames.length; i++) {
          var prop = propertyNames[i];
          bindings.push({
            flags: 8
            /* TypeProperty */
            ,
            name: prop,
            ns: null,
            nonMinifiedName: prop,
            securityContext: null,
            suffix: null
          });
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: -1,
          childCount: 0,
          bindings: bindings,
          bindingFlags: calcBindingFlags(bindings),
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createPureExpression(view, def) {
        return {
          value: undefined
        };
      }

      function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindings = def.bindings;
        var changed = false;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

        if (changed) {
          var data = asPureExpressionData(view, def.nodeIndex);
          var value;

          switch (def.flags & 201347067
          /* Types */
          ) {
            case 32
            /* TypePureArray */
            :
              value = [];
              if (bindLen > 0) value.push(v0);
              if (bindLen > 1) value.push(v1);
              if (bindLen > 2) value.push(v2);
              if (bindLen > 3) value.push(v3);
              if (bindLen > 4) value.push(v4);
              if (bindLen > 5) value.push(v5);
              if (bindLen > 6) value.push(v6);
              if (bindLen > 7) value.push(v7);
              if (bindLen > 8) value.push(v8);
              if (bindLen > 9) value.push(v9);
              break;

            case 64
            /* TypePureObject */
            :
              value = {};
              if (bindLen > 0) value[bindings[0].name] = v0;
              if (bindLen > 1) value[bindings[1].name] = v1;
              if (bindLen > 2) value[bindings[2].name] = v2;
              if (bindLen > 3) value[bindings[3].name] = v3;
              if (bindLen > 4) value[bindings[4].name] = v4;
              if (bindLen > 5) value[bindings[5].name] = v5;
              if (bindLen > 6) value[bindings[6].name] = v6;
              if (bindLen > 7) value[bindings[7].name] = v7;
              if (bindLen > 8) value[bindings[8].name] = v8;
              if (bindLen > 9) value[bindings[9].name] = v9;
              break;

            case 128
            /* TypePurePipe */
            :
              var pipe = v0;

              switch (bindLen) {
                case 1:
                  value = pipe.transform(v0);
                  break;

                case 2:
                  value = pipe.transform(v1);
                  break;

                case 3:
                  value = pipe.transform(v1, v2);
                  break;

                case 4:
                  value = pipe.transform(v1, v2, v3);
                  break;

                case 5:
                  value = pipe.transform(v1, v2, v3, v4);
                  break;

                case 6:
                  value = pipe.transform(v1, v2, v3, v4, v5);
                  break;

                case 7:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6);
                  break;

                case 8:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                  break;

                case 9:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                  break;

                case 10:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                  break;
              }

              break;
          }

          data.value = value;
        }

        return changed;
      }

      function checkAndUpdatePureExpressionDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
          }
        }

        if (changed) {
          var data = asPureExpressionData(view, def.nodeIndex);
          var value;

          switch (def.flags & 201347067
          /* Types */
          ) {
            case 32
            /* TypePureArray */
            :
              value = values;
              break;

            case 64
            /* TypePureObject */
            :
              value = {};

              for (var _i19 = 0; _i19 < values.length; _i19++) {
                value[bindings[_i19].name] = values[_i19];
              }

              break;

            case 128
            /* TypePurePipe */
            :
              var pipe = values[0];
              var params = values.slice(1);
              value = pipe.transform.apply(pipe, _toConsumableArray(params));
              break;
          }

          data.value = value;
        }

        return changed;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function textDef(checkIndex, ngContentIndex, staticText) {
        var bindings = [];

        for (var i = 1; i < staticText.length; i++) {
          bindings[i - 1] = {
            flags: 8
            /* TypeProperty */
            ,
            name: null,
            ns: null,
            nonMinifiedName: null,
            securityContext: null,
            suffix: staticText[i]
          };
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: 2
          /* TypeText */
          ,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: ngContentIndex,
          childCount: 0,
          bindings: bindings,
          bindingFlags: 8
          /* TypeProperty */
          ,
          outputs: [],
          element: null,
          provider: null,
          text: {
            prefix: staticText[0]
          },
          query: null,
          ngContent: null
        };
      }

      function createText(view, renderHost, def) {
        var renderNode;
        var renderer = view.renderer;
        renderNode = renderer.createText(def.text.prefix);
        var parentEl = getParentRenderElement(view, renderHost, def);

        if (parentEl) {
          renderer.appendChild(parentEl, renderNode);
        }

        return {
          renderText: renderNode
        };
      }

      function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var changed = false;
        var bindings = def.bindings;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

        if (changed) {
          var value = def.text.prefix;
          if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
          if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
          if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
          if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
          if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
          if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
          if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
          if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
          if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
          if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
          var _renderNode = asTextData(view, def.nodeIndex).renderText;
          view.renderer.setValue(_renderNode, value);
        }

        return changed;
      }

      function checkAndUpdateTextDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
          }
        }

        if (changed) {
          var value = '';

          for (var _i20 = 0; _i20 < values.length; _i20++) {
            value = value + _addInterpolationPart(values[_i20], bindings[_i20]);
          }

          value = def.text.prefix + value;
          var _renderNode2 = asTextData(view, def.nodeIndex).renderText;
          view.renderer.setValue(_renderNode2, value);
        }

        return changed;
      }

      function _addInterpolationPart(value, binding) {
        var valueStr = value != null ? value.toString() : '';
        return valueStr + binding.suffix;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function viewDef(flags, nodes, updateDirectives, updateRenderer) {
        // clone nodes and set auto calculated values
        var viewBindingCount = 0;
        var viewDisposableCount = 0;
        var viewNodeFlags = 0;
        var viewRootNodeFlags = 0;
        var viewMatchedQueries = 0;
        var currentParent = null;
        var currentRenderParent = null;
        var currentElementHasPublicProviders = false;
        var currentElementHasPrivateProviders = false;
        var lastRenderRootNode = null;

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          node.nodeIndex = i;
          node.parent = currentParent;
          node.bindingIndex = viewBindingCount;
          node.outputIndex = viewDisposableCount;
          node.renderParent = currentRenderParent;
          viewNodeFlags |= node.flags;
          viewMatchedQueries |= node.matchedQueryIds;

          if (node.element) {
            var elDef = node.element;
            elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders; // Note: We assume that all providers of an element are before any child element!

            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;

            if (node.element.template) {
              viewMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
          }

          validateNode(currentParent, node, nodes.length);
          viewBindingCount += node.bindings.length;
          viewDisposableCount += node.outputs.length;

          if (!currentRenderParent && node.flags & 3
          /* CatRenderNode */
          ) {
            lastRenderRootNode = node;
          }

          if (node.flags & 20224
          /* CatProvider */
          ) {
              if (!currentElementHasPublicProviders) {
                currentElementHasPublicProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

                currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
                currentParent.element.allProviders = currentParent.element.publicProviders;
              }

              var isPrivateService = (node.flags & 8192
              /* PrivateProvider */
              ) !== 0;
              var isComponent = (node.flags & 32768
              /* Component */
              ) !== 0;

              if (!isPrivateService || isComponent) {
                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
              } else {
                if (!currentElementHasPrivateProviders) {
                  currentElementHasPrivateProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

                  currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
                }

                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
              }

              if (isComponent) {
                currentParent.element.componentProvider = node;
              }
            }

          if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;

            if (node.element && node.element.template) {
              currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
          } else {
            viewRootNodeFlags |= node.flags;
          }

          if (node.childCount > 0) {
            currentParent = node;

            if (!isNgContainer(node)) {
              currentRenderParent = node;
            }
          } else {
            // When the current node has no children, check if it is the last children of its parent.
            // When it is, propagate the flags up.
            // The loop is required because an element could be the last transitive children of several
            // elements. We loop to either the root or the highest opened element (= with remaining
            // children)
            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
              var newParent = currentParent.parent;

              if (newParent) {
                newParent.childFlags |= currentParent.childFlags;
                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
              }

              currentParent = newParent; // We also need to update the render parent & account for ng-container

              if (currentParent && isNgContainer(currentParent)) {
                currentRenderParent = currentParent.renderParent;
              } else {
                currentRenderParent = currentParent;
              }
            }
          }
        }

        var handleEvent = function handleEvent(view, nodeIndex, eventName, event) {
          return nodes[nodeIndex].element.handleEvent(view, eventName, event);
        };

        return {
          // Will be filled later...
          factory: null,
          nodeFlags: viewNodeFlags,
          rootNodeFlags: viewRootNodeFlags,
          nodeMatchedQueries: viewMatchedQueries,
          flags: flags,
          nodes: nodes,
          updateDirectives: updateDirectives || NOOP,
          updateRenderer: updateRenderer || NOOP,
          handleEvent: handleEvent,
          bindingCount: viewBindingCount,
          outputCount: viewDisposableCount,
          lastRenderRootNode: lastRenderRootNode
        };
      }

      function isNgContainer(node) {
        return (node.flags & 1
        /* TypeElement */
        ) !== 0 && node.element.name === null;
      }

      function validateNode(parent, node, nodeCount) {
        var template = node.element && node.element.template;

        if (template) {
          if (!template.lastRenderRootNode) {
            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
          }

          if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 16777216
          /* EmbeddedViews */
          ) {
              throw new Error("Illegal State: Last root node of a template can't have embedded views, at index ".concat(node.nodeIndex, "!"));
            }
        }

        if (node.flags & 20224
        /* CatProvider */
        ) {
            var parentFlags = parent ? parent.flags : 0;

            if ((parentFlags & 1
            /* TypeElement */
            ) === 0) {
              throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ".concat(node.nodeIndex, "!"));
            }
          }

        if (node.query) {
          if (node.flags & 67108864
          /* TypeContentQuery */
          && (!parent || (parent.flags & 16384
          /* TypeDirective */
          ) === 0)) {
            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index ".concat(node.nodeIndex, "!"));
          }

          if (node.flags & 134217728
          /* TypeViewQuery */
          && parent) {
            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index ".concat(node.nodeIndex, "!"));
          }
        }

        if (node.childCount) {
          var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;

          if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
            throw new Error("Illegal State: childCount of node leads outside of parent, at index ".concat(node.nodeIndex, "!"));
          }
        }
      }

      function createEmbeddedView(parent, anchorDef, viewDef, context) {
        // embedded views are seen as siblings to the anchor, so we need
        // to get the parent of the anchor and use it as parentIndex.
        var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
        initView(view, parent.component, context);
        createViewNodes(view);
        return view;
      }

      function createRootView(root, def, context) {
        var view = createView(root, root.renderer, null, null, def);
        initView(view, context, context);
        createViewNodes(view);
        return view;
      }

      function createComponentView(parentView, nodeDef, viewDef, hostElement) {
        var rendererType = nodeDef.element.componentRendererType;
        var compRenderer;

        if (!rendererType) {
          compRenderer = parentView.root.renderer;
        } else {
          compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
        }

        return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
      }

      function createView(root, renderer, parent, parentNodeDef, def) {
        var nodes = new Array(def.nodes.length);
        var disposables = def.outputCount ? new Array(def.outputCount) : null;
        var view = {
          def: def,
          parent: parent,
          viewContainerParent: null,
          parentNodeDef: parentNodeDef,
          context: null,
          component: null,
          nodes: nodes,
          state: 13
          /* CatInit */
          ,
          root: root,
          renderer: renderer,
          oldValues: new Array(def.bindingCount),
          disposables: disposables,
          initIndex: -1
        };
        return view;
      }

      function initView(view, component, context) {
        view.component = component;
        view.context = context;
      }

      function createViewNodes(view) {
        var renderHost;

        if (isComponentView(view)) {
          var hostDef = view.parentNodeDef;
          renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
        }

        var def = view.def;
        var nodes = view.nodes;

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];
          Services.setCurrentNode(view, i);
          var nodeData = void 0;

          switch (nodeDef.flags & 201347067
          /* Types */
          ) {
            case 1
            /* TypeElement */
            :
              var el = createElement(view, renderHost, nodeDef);
              var componentView = undefined;

              if (nodeDef.flags & 33554432
              /* ComponentView */
              ) {
                  var compViewDef = resolveDefinition(nodeDef.element.componentView);
                  componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                }

              listenToElementOutputs(view, componentView, nodeDef, el);
              nodeData = {
                renderElement: el,
                componentView: componentView,
                viewContainer: null,
                template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
              };

              if (nodeDef.flags & 16777216
              /* EmbeddedViews */
              ) {
                  nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                }

              break;

            case 2
            /* TypeText */
            :
              nodeData = createText(view, renderHost, nodeDef);
              break;

            case 512
            /* TypeClassProvider */
            :
            case 1024
            /* TypeFactoryProvider */
            :
            case 2048
            /* TypeUseExistingProvider */
            :
            case 256
            /* TypeValueProvider */
            :
              {
                nodeData = nodes[i];

                if (!nodeData && !(nodeDef.flags & 4096
                /* LazyProvider */
                )) {
                  var instance = createProviderInstance(view, nodeDef);
                  nodeData = {
                    instance: instance
                  };
                }

                break;
              }

            case 16
            /* TypePipe */
            :
              {
                var _instance = createPipeInstance(view, nodeDef);

                nodeData = {
                  instance: _instance
                };
                break;
              }

            case 16384
            /* TypeDirective */
            :
              {
                nodeData = nodes[i];

                if (!nodeData) {
                  var _instance2 = createDirectiveInstance(view, nodeDef);

                  nodeData = {
                    instance: _instance2
                  };
                }

                if (nodeDef.flags & 32768
                /* Component */
                ) {
                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
                    initView(compView, nodeData.instance, nodeData.instance);
                  }

                break;
              }

            case 32
            /* TypePureArray */
            :
            case 64
            /* TypePureObject */
            :
            case 128
            /* TypePurePipe */
            :
              nodeData = createPureExpression(view, nodeDef);
              break;

            case 67108864
            /* TypeContentQuery */
            :
            case 134217728
            /* TypeViewQuery */
            :
              nodeData = createQuery((nodeDef.flags & -2147483648
              /* EmitDistinctChangesOnly */
              ) === -2147483648
              /* EmitDistinctChangesOnly */
              );
              break;

            case 8
            /* TypeNgContent */
            :
              appendNgContent(view, renderHost, nodeDef); // no runtime data needed for NgContent...

              nodeData = undefined;
              break;
          }

          nodes[i] = nodeData;
        } // Create the ViewData.nodes of component views after we created everything else,
        // so that e.g. ng-content works


        execComponentViewsAction(view, ViewAction.CreateViewNodes); // fill static content and view queries

        execQueriesAction(view, 67108864
        /* TypeContentQuery */
        | 134217728
        /* TypeViewQuery */
        , 268435456
        /* StaticQuery */
        , 0
        /* CheckAndUpdate */
        );
      }

      function checkNoChangesView(view) {
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 1
        /* CheckNoChanges */
        );
        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
        Services.updateRenderer(view, 1
        /* CheckNoChanges */
        );
        execComponentViewsAction(view, ViewAction.CheckNoChanges); // Note: We don't check queries for changes as we didn't do this in v2.x.
        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.

        view.state &= ~(64
        /* CheckProjectedViews */
        | 32
        /* CheckProjectedView */
        );
      }

      function checkAndUpdateView(view) {
        if (view.state & 1
        /* BeforeFirstCheck */
        ) {
            view.state &= ~1
            /* BeforeFirstCheck */
            ;
            view.state |= 2
            /* FirstCheck */
            ;
          } else {
          view.state &= ~2
          /* FirstCheck */
          ;
        }

        shiftInitState(view, 0
        /* InitState_BeforeInit */
        , 256
        /* InitState_CallingOnInit */
        );
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 0
        /* CheckAndUpdate */
        );
        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 67108864
        /* TypeContentQuery */
        , 536870912
        /* DynamicQuery */
        , 0
        /* CheckAndUpdate */
        );
        var callInit = shiftInitState(view, 256
        /* InitState_CallingOnInit */
        , 512
        /* InitState_CallingAfterContentInit */
        );
        callLifecycleHooksChildrenFirst(view, 2097152
        /* AfterContentChecked */
        | (callInit ? 1048576
        /* AfterContentInit */
        : 0));
        Services.updateRenderer(view, 0
        /* CheckAndUpdate */
        );
        execComponentViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 134217728
        /* TypeViewQuery */
        , 536870912
        /* DynamicQuery */
        , 0
        /* CheckAndUpdate */
        );
        callInit = shiftInitState(view, 512
        /* InitState_CallingAfterContentInit */
        , 768
        /* InitState_CallingAfterViewInit */
        );
        callLifecycleHooksChildrenFirst(view, 8388608
        /* AfterViewChecked */
        | (callInit ? 4194304
        /* AfterViewInit */
        : 0));

        if (view.def.flags & 2
        /* OnPush */
        ) {
            view.state &= ~8
            /* ChecksEnabled */
            ;
          }

        view.state &= ~(64
        /* CheckProjectedViews */
        | 32
        /* CheckProjectedView */
        );
        shiftInitState(view, 768
        /* InitState_CallingAfterViewInit */
        , 1024
        /* InitState_AfterInit */
        );
      }

      function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0
        /* Inline */
        ) {
            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
          } else {
          return checkAndUpdateNodeDynamic(view, nodeDef, v0);
        }
      }

      function markProjectedViewsForCheck(view) {
        var def = view.def;

        if (!(def.nodeFlags & 4
        /* ProjectedTemplate */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 4
          /* ProjectedTemplate */
          ) {
              var projectedViews = asElementData(view, i).template._projectedViews;

              if (projectedViews) {
                for (var _i21 = 0; _i21 < projectedViews.length; _i21++) {
                  var projectedView = projectedViews[_i21];
                  projectedView.state |= 32
                  /* CheckProjectedView */
                  ;
                  markParentViewsForCheckProjectedViews(projectedView, view);
                }
              }
            } else if ((nodeDef.childFlags & 4
          /* ProjectedTemplate */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        switch (nodeDef.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 2
          /* TypeText */
          :
            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 16384
          /* TypeDirective */
          :
            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 32
          /* TypePureArray */
          :
          case 64
          /* TypePureObject */
          :
          case 128
          /* TypePurePipe */
          :
            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          default:
            throw 'unreachable';
        }
      }

      function checkAndUpdateNodeDynamic(view, nodeDef, values) {
        switch (nodeDef.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return checkAndUpdateElementDynamic(view, nodeDef, values);

          case 2
          /* TypeText */
          :
            return checkAndUpdateTextDynamic(view, nodeDef, values);

          case 16384
          /* TypeDirective */
          :
            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);

          case 32
          /* TypePureArray */
          :
          case 64
          /* TypePureObject */
          :
          case 128
          /* TypePurePipe */
          :
            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);

          default:
            throw 'unreachable';
        }
      }

      function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0
        /* Inline */
        ) {
            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
          } else {
          checkNoChangesNodeDynamic(view, nodeDef, v0);
        } // Returning false is ok here as we would have thrown in case of a change.


        return false;
      }

      function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = nodeDef.bindings.length;
        if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
        if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
        if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
        if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
        if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
        if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
        if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
        if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
        if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
        if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
      }

      function checkNoChangesNodeDynamic(view, nodeDef, values) {
        for (var i = 0; i < values.length; i++) {
          checkBindingNoChanges(view, nodeDef, i, values[i]);
        }
      }
      /**
       * Workaround https://github.com/angular/tsickle/issues/497
       * @suppress {misplacedTypeAnnotation}
       */


      function checkNoChangesQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.nodeIndex);

        if (queryList.dirty) {
          throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query ".concat(nodeDef.query.id, " not dirty"), "Query ".concat(nodeDef.query.id, " dirty"), (view.state & 1
          /* BeforeFirstCheck */
          ) !== 0);
        }
      }

      function destroyView(view) {
        if (view.state & 128
        /* Destroyed */
        ) {
            return;
          }

        execEmbeddedViewsAction(view, ViewAction.Destroy);
        execComponentViewsAction(view, ViewAction.Destroy);
        callLifecycleHooksChildrenFirst(view, 131072
        /* OnDestroy */
        );

        if (view.disposables) {
          for (var i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
          }
        }

        detachProjectedView(view);

        if (view.renderer.destroyNode) {
          destroyViewNodes(view);
        }

        if (isComponentView(view)) {
          view.renderer.destroy();
        }

        view.state |= 128
        /* Destroyed */
        ;
      }

      function destroyViewNodes(view) {
        var len = view.def.nodes.length;

        for (var i = 0; i < len; i++) {
          var def = view.def.nodes[i];

          if (def.flags & 1
          /* TypeElement */
          ) {
              view.renderer.destroyNode(asElementData(view, i).renderElement);
            } else if (def.flags & 2
          /* TypeText */
          ) {
              view.renderer.destroyNode(asTextData(view, i).renderText);
            } else if (def.flags & 67108864
          /* TypeContentQuery */
          || def.flags & 134217728
          /* TypeViewQuery */
          ) {
              asQueryList(view, i).destroy();
            }
        }
      }

      var ViewAction;

      (function (ViewAction) {
        ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
        ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
        ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
        ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
        ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
        ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
      })(ViewAction || (ViewAction = {}));

      function execComponentViewsAction(view, action) {
        var def = view.def;

        if (!(def.nodeFlags & 33554432
        /* ComponentView */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 33554432
          /* ComponentView */
          ) {
              // a leaf
              callViewAction(asElementData(view, i).componentView, action);
            } else if ((nodeDef.childFlags & 33554432
          /* ComponentView */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function execEmbeddedViewsAction(view, action) {
        var def = view.def;

        if (!(def.nodeFlags & 16777216
        /* EmbeddedViews */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 16777216
          /* EmbeddedViews */
          ) {
              // a leaf
              var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;

              for (var k = 0; k < embeddedViews.length; k++) {
                callViewAction(embeddedViews[k], action);
              }
            } else if ((nodeDef.childFlags & 16777216
          /* EmbeddedViews */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function callViewAction(view, action) {
        var viewState = view.state;

        switch (action) {
          case ViewAction.CheckNoChanges:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if ((viewState & 12
              /* CatDetectChanges */
              ) === 12
              /* CatDetectChanges */
              ) {
                  checkNoChangesView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                }
            }

            break;

          case ViewAction.CheckNoChangesProjectedViews:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if (viewState & 32
              /* CheckProjectedView */
              ) {
                  checkNoChangesView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, action);
                }
            }

            break;

          case ViewAction.CheckAndUpdate:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if ((viewState & 12
              /* CatDetectChanges */
              ) === 12
              /* CatDetectChanges */
              ) {
                  checkAndUpdateView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                }
            }

            break;

          case ViewAction.CheckAndUpdateProjectedViews:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if (viewState & 32
              /* CheckProjectedView */
              ) {
                  checkAndUpdateView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, action);
                }
            }

            break;

          case ViewAction.Destroy:
            // Note: destroyView recurses over all views,
            // so we don't need to special case projected views here.
            destroyView(view);
            break;

          case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
        }
      }

      function execProjectedViewsAction(view, action) {
        execEmbeddedViewsAction(view, action);
        execComponentViewsAction(view, action);
      }

      function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
          return;
        }

        var nodeCount = view.def.nodes.length;

        for (var i = 0; i < nodeCount; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
            Services.setCurrentNode(view, nodeDef.nodeIndex);

            switch (checkType) {
              case 0
              /* CheckAndUpdate */
              :
                checkAndUpdateQuery(view, nodeDef);
                break;

              case 1
              /* CheckNoChanges */
              :
                checkNoChangesQuery(view, nodeDef);
                break;
            }
          }

          if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var initialized = false;

      function initServicesIfNeeded() {
        if (initialized) {
          return;
        }

        initialized = true;
        var services = isDevMode() ? createDebugServices() : createProdServices();
        Services.setCurrentNode = services.setCurrentNode;
        Services.createRootView = services.createRootView;
        Services.createEmbeddedView = services.createEmbeddedView;
        Services.createComponentView = services.createComponentView;
        Services.createNgModuleRef = services.createNgModuleRef;
        Services.overrideProvider = services.overrideProvider;
        Services.overrideComponentView = services.overrideComponentView;
        Services.clearOverrides = services.clearOverrides;
        Services.checkAndUpdateView = services.checkAndUpdateView;
        Services.checkNoChangesView = services.checkNoChangesView;
        Services.destroyView = services.destroyView;
        Services.resolveDep = resolveDep;
        Services.createDebugContext = services.createDebugContext;
        Services.handleEvent = services.handleEvent;
        Services.updateDirectives = services.updateDirectives;
        Services.updateRenderer = services.updateRenderer;
        Services.dirtyParentQueries = dirtyParentQueries;
      }

      function createProdServices() {
        return {
          setCurrentNode: function setCurrentNode() {},
          createRootView: createProdRootView,
          createEmbeddedView: createEmbeddedView,
          createComponentView: createComponentView,
          createNgModuleRef: createNgModuleRef,
          overrideProvider: NOOP,
          overrideComponentView: NOOP,
          clearOverrides: NOOP,
          checkAndUpdateView: checkAndUpdateView,
          checkNoChangesView: checkNoChangesView,
          destroyView: destroyView,
          createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
          },
          handleEvent: function handleEvent(view, nodeIndex, eventName, event) {
            return view.def.handleEvent(view, nodeIndex, eventName, event);
          },
          updateDirectives: function updateDirectives(view, checkType) {
            return view.def.updateDirectives(checkType === 0
            /* CheckAndUpdate */
            ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
          },
          updateRenderer: function updateRenderer(view, checkType) {
            return view.def.updateRenderer(checkType === 0
            /* CheckAndUpdate */
            ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
          }
        };
      }

      function createDebugServices() {
        return {
          setCurrentNode: debugSetCurrentNode,
          createRootView: debugCreateRootView,
          createEmbeddedView: debugCreateEmbeddedView,
          createComponentView: debugCreateComponentView,
          createNgModuleRef: debugCreateNgModuleRef,
          overrideProvider: debugOverrideProvider,
          overrideComponentView: debugOverrideComponentView,
          clearOverrides: debugClearOverrides,
          checkAndUpdateView: debugCheckAndUpdateView,
          checkNoChangesView: debugCheckNoChangesView,
          destroyView: debugDestroyView,
          createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
          },
          handleEvent: debugHandleEvent,
          updateDirectives: debugUpdateDirectives,
          updateRenderer: debugUpdateRenderer
        };
      }

      function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(RendererFactory2);
        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
      }

      function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(RendererFactory2);
        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
        var defWithOverride = applyProviderOverridesToView(def);
        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
      }

      function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
        var sanitizer = ngModule.injector.get(Sanitizer);
        var errorHandler = ngModule.injector.get(ErrorHandler);
        var renderer = rendererFactory.createRenderer(null, null);
        return {
          ngModule: ngModule,
          injector: elInjector,
          projectableNodes: projectableNodes,
          selectorOrNode: rootSelectorOrNode,
          sanitizer: sanitizer,
          rendererFactory: rendererFactory,
          renderer: renderer,
          errorHandler: errorHandler
        };
      }

      function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
        var defWithOverride = applyProviderOverridesToView(viewDef);
        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
      }

      function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
        var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);

        if (overrideComponentView) {
          viewDef = overrideComponentView;
        } else {
          viewDef = applyProviderOverridesToView(viewDef);
        }

        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
      }

      function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
        var defWithOverride = applyProviderOverridesToNgModule(def);
        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
      }

      var providerOverrides = new Map();
      var providerOverridesWithScope = new Map();
      var viewDefOverrides = new Map();

      function debugOverrideProvider(override) {
        providerOverrides.set(override.token, override);
        var injectableDef;

        if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) && typeof injectableDef.providedIn === 'function') {
          providerOverridesWithScope.set(override.token, override);
        }
      }

      function debugOverrideComponentView(comp, compFactory) {
        var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
        var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
        viewDefOverrides.set(comp, compViewDef);
      }

      function debugClearOverrides() {
        providerOverrides.clear();
        providerOverridesWithScope.clear();
        viewDefOverrides.clear();
      } // Notes about the algorithm:
      // 1) Locate the providers of an element and check if one of them was overwritten
      // 2) Change the providers of that element
      //
      // We only create new datastructures if we need to, to keep perf impact
      // reasonable.


      function applyProviderOverridesToView(def) {
        if (providerOverrides.size === 0) {
          return def;
        }

        var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);

        if (elementIndicesWithOverwrittenProviders.length === 0) {
          return def;
        } // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.


        def = def.factory(function () {
          return NOOP;
        });

        for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
          applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
        }

        return def;

        function findElementIndicesWithOverwrittenProviders(def) {
          var elIndicesWithOverwrittenProviders = [];
          var lastElementDef = null;

          for (var _i22 = 0; _i22 < def.nodes.length; _i22++) {
            var nodeDef = def.nodes[_i22];

            if (nodeDef.flags & 1
            /* TypeElement */
            ) {
                lastElementDef = nodeDef;
              }

            if (lastElementDef && nodeDef.flags & 3840
            /* CatProviderNoDirective */
            && providerOverrides.has(nodeDef.provider.token)) {
              elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
              lastElementDef = null;
            }
          }

          return elIndicesWithOverwrittenProviders;
        }

        function applyProviderOverridesToElement(viewDef, elIndex) {
          for (var _i23 = elIndex + 1; _i23 < viewDef.nodes.length; _i23++) {
            var nodeDef = viewDef.nodes[_i23];

            if (nodeDef.flags & 1
            /* TypeElement */
            ) {
                // stop at the next element
                return;
              }

            if (nodeDef.flags & 3840
            /* CatProviderNoDirective */
            ) {
                var provider = nodeDef.provider;
                var override = providerOverrides.get(provider.token);

                if (override) {
                  nodeDef.flags = nodeDef.flags & ~3840
                  /* CatProviderNoDirective */
                  | override.flags;
                  provider.deps = splitDepsDsl(override.deps);
                  provider.value = override.value;
                }
              }
          }
        }
      } // Notes about the algorithm:
      // We only create new datastructures if we need to, to keep perf impact
      // reasonable.


      function applyProviderOverridesToNgModule(def) {
        var _calcHasOverrides = calcHasOverrides(def),
            hasOverrides = _calcHasOverrides.hasOverrides,
            hasDeprecatedOverrides = _calcHasOverrides.hasDeprecatedOverrides;

        if (!hasOverrides) {
          return def;
        } // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.


        def = def.factory(function () {
          return NOOP;
        });
        applyProviderOverrides(def);
        return def;

        function calcHasOverrides(def) {
          var hasOverrides = false;
          var hasDeprecatedOverrides = false;

          if (providerOverrides.size === 0) {
            return {
              hasOverrides: hasOverrides,
              hasDeprecatedOverrides: hasDeprecatedOverrides
            };
          }

          def.providers.forEach(function (node) {
            var override = providerOverrides.get(node.token);

            if (node.flags & 3840
            /* CatProviderNoDirective */
            && override) {
              hasOverrides = true;
              hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
            }
          });
          def.modules.forEach(function (module) {
            providerOverridesWithScope.forEach(function (override, token) {
              if (getInjectableDef(token).providedIn === module) {
                hasOverrides = true;
                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
              }
            });
          });
          return {
            hasOverrides: hasOverrides,
            hasDeprecatedOverrides: hasDeprecatedOverrides
          };
        }

        function applyProviderOverrides(def) {
          for (var i = 0; i < def.providers.length; i++) {
            var provider = def.providers[i];

            if (hasDeprecatedOverrides) {
              // We had a bug where me made
              // all providers lazy. Keep this logic behind a flag
              // for migrating existing users.
              provider.flags |= 4096
              /* LazyProvider */
              ;
            }

            var override = providerOverrides.get(provider.token);

            if (override) {
              provider.flags = provider.flags & ~3840
              /* CatProviderNoDirective */
              | override.flags;
              provider.deps = splitDepsDsl(override.deps);
              provider.value = override.value;
            }
          }

          if (providerOverridesWithScope.size > 0) {
            var moduleSet = new Set(def.modules);
            providerOverridesWithScope.forEach(function (override, token) {
              if (moduleSet.has(getInjectableDef(token).providedIn)) {
                var _provider = {
                  token: token,
                  flags: override.flags | (hasDeprecatedOverrides ? 4096
                  /* LazyProvider */
                  : 0
                  /* None */
                  ),
                  deps: splitDepsDsl(override.deps),
                  value: override.value,
                  index: def.providers.length
                };
                def.providers.push(_provider);
                def.providersByKey[tokenKey(token)] = _provider;
              }
            });
          }
        }
      }

      function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[checkIndex];
        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, checkIndex).value : undefined;
      }

      function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[checkIndex];
        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, checkIndex).value : undefined;
      }

      function debugCheckAndUpdateView(view) {
        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
      }

      function debugCheckNoChangesView(view) {
        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
      }

      function debugDestroyView(view) {
        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
      }

      var DebugAction;

      (function (DebugAction) {
        DebugAction[DebugAction["create"] = 0] = "create";
        DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
        DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
        DebugAction[DebugAction["destroy"] = 3] = "destroy";
        DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
      })(DebugAction || (DebugAction = {}));

      var _currentAction;

      var _currentView;

      var _currentNodeIndex;

      function debugSetCurrentNode(view, nodeIndex) {
        _currentView = view;
        _currentNodeIndex = nodeIndex;
      }

      function debugHandleEvent(view, nodeIndex, eventName, event) {
        debugSetCurrentNode(view, nodeIndex);
        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
      }

      function debugUpdateDirectives(view, checkType) {
        if (view.state & 128
        /* Destroyed */
        ) {
            throw viewDestroyedError(DebugAction[_currentAction]);
          }

        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
        return view.def.updateDirectives(debugCheckDirectivesFn, view);

        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
          var nodeDef = view.def.nodes[nodeIndex];

          for (var _len39 = arguments.length, values = new Array(_len39 > 3 ? _len39 - 3 : 0), _key39 = 3; _key39 < _len39; _key39++) {
            values[_key39 - 3] = arguments[_key39];
          }

          if (checkType === 0
          /* CheckAndUpdate */
          ) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }

          if (nodeDef.flags & 16384
          /* TypeDirective */
          ) {
              debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
            }

          return nodeDef.flags & 224
          /* CatPureExpression */
          ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
        }
      }

      function debugUpdateRenderer(view, checkType) {
        if (view.state & 128
        /* Destroyed */
        ) {
            throw viewDestroyedError(DebugAction[_currentAction]);
          }

        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
        return view.def.updateRenderer(debugCheckRenderNodeFn, view);

        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
          var nodeDef = view.def.nodes[nodeIndex];

          for (var _len40 = arguments.length, values = new Array(_len40 > 3 ? _len40 - 3 : 0), _key40 = 3; _key40 < _len40; _key40++) {
            values[_key40 - 3] = arguments[_key40];
          }

          if (checkType === 0
          /* CheckAndUpdate */
          ) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }

          if (nodeDef.flags & 3
          /* CatRenderNode */
          ) {
              debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
            }

          return nodeDef.flags & 224
          /* CatPureExpression */
          ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
        }
      }

      function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
        var changed = checkAndUpdateNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(givenValues)));

        if (changed) {
          var values = argStyle === 1
          /* Dynamic */
          ? givenValues[0] : givenValues;

          if (nodeDef.flags & 16384
          /* TypeDirective */
          ) {
              var bindingValues = {};

              for (var i = 0; i < nodeDef.bindings.length; i++) {
                var binding = nodeDef.bindings[i];
                var value = values[i];

                if (binding.flags & 8
                /* TypeProperty */
                ) {
                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
                  }
              }

              var elDef = nodeDef.parent;
              var el = asElementData(view, elDef.nodeIndex).renderElement;

              if (!elDef.element.name) {
                // a comment.
                view.renderer.setValue(el, escapeCommentText("bindings=".concat(JSON.stringify(bindingValues, null, 2))));
              } else {
                // a regular element.
                for (var attr in bindingValues) {
                  var _value4 = bindingValues[attr];

                  if (_value4 != null) {
                    view.renderer.setAttribute(el, attr, _value4);
                  } else {
                    view.renderer.removeAttribute(el, attr);
                  }
                }
              }
            }
        }
      }

      function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
        checkNoChangesNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(values)));
      }

      function nextDirectiveWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & 16384
          /* TypeDirective */
          && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
          }
        }

        return null;
      }

      function nextRenderNodeWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & 3
          /* CatRenderNode */
          && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
          }
        }

        return null;
      }

      var DebugContext_ = /*#__PURE__*/function () {
        function DebugContext_(view, nodeIndex) {
          _classCallCheck(this, DebugContext_);

          this.view = view;
          this.nodeIndex = nodeIndex;

          if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
          }

          this.nodeDef = view.def.nodes[nodeIndex];
          var elDef = this.nodeDef;
          var elView = view;

          while (elDef && (elDef.flags & 1
          /* TypeElement */
          ) === 0) {
            elDef = elDef.parent;
          }

          if (!elDef) {
            while (!elDef && elView) {
              elDef = viewParentEl(elView);
              elView = elView.parent;
            }
          }

          this.elDef = elDef;
          this.elView = elView;
        }

        _createClass2(DebugContext_, [{
          key: "elOrCompView",
          get: function get() {
            // Has to be done lazily as we use the DebugContext also during creation of elements...
            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
          }
        }, {
          key: "injector",
          get: function get() {
            return createInjector$1(this.elView, this.elDef);
          }
        }, {
          key: "component",
          get: function get() {
            return this.elOrCompView.component;
          }
        }, {
          key: "context",
          get: function get() {
            return this.elOrCompView.context;
          }
        }, {
          key: "providerTokens",
          get: function get() {
            var tokens = [];

            if (this.elDef) {
              for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                var childDef = this.elView.def.nodes[i];

                if (childDef.flags & 20224
                /* CatProvider */
                ) {
                    tokens.push(childDef.provider.token);
                  }

                i += childDef.childCount;
              }
            }

            return tokens;
          }
        }, {
          key: "references",
          get: function get() {
            var references = {};

            if (this.elDef) {
              collectReferences(this.elView, this.elDef, references);

              for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                var childDef = this.elView.def.nodes[i];

                if (childDef.flags & 20224
                /* CatProvider */
                ) {
                    collectReferences(this.elView, childDef, references);
                  }

                i += childDef.childCount;
              }
            }

            return references;
          }
        }, {
          key: "componentRenderElement",
          get: function get() {
            var elData = findHostElement(this.elOrCompView);
            return elData ? elData.renderElement : undefined;
          }
        }, {
          key: "renderNode",
          get: function get() {
            return this.nodeDef.flags & 2
            /* TypeText */
            ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
          }
        }, {
          key: "logError",
          value: function logError(console) {
            for (var _len41 = arguments.length, values = new Array(_len41 > 1 ? _len41 - 1 : 0), _key41 = 1; _key41 < _len41; _key41++) {
              values[_key41 - 1] = arguments[_key41];
            }

            var logViewDef;
            var logNodeIndex;

            if (this.nodeDef.flags & 2
            /* TypeText */
            ) {
                logViewDef = this.view.def;
                logNodeIndex = this.nodeDef.nodeIndex;
              } else {
              logViewDef = this.elView.def;
              logNodeIndex = this.elDef.nodeIndex;
            } // Note: we only generate a log function for text and element nodes
            // to make the generated code as small as possible.


            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
            var currRenderNodeIndex = -1;

            var nodeLogger = function nodeLogger() {
              currRenderNodeIndex++;

              if (currRenderNodeIndex === renderNodeIndex) {
                var _console$error;

                return (_console$error = console.error).bind.apply(_console$error, [console].concat(values));
              } else {
                return NOOP;
              }
            };

            logViewDef.factory(nodeLogger);

            if (currRenderNodeIndex < renderNodeIndex) {
              console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
              console.error.apply(console, values);
            }
          }
        }]);

        return DebugContext_;
      }();

      function getRenderNodeIndex(viewDef, nodeIndex) {
        var renderNodeIndex = -1;

        for (var i = 0; i <= nodeIndex; i++) {
          var nodeDef = viewDef.nodes[i];

          if (nodeDef.flags & 3
          /* CatRenderNode */
          ) {
              renderNodeIndex++;
            }
        }

        return renderNodeIndex;
      }

      function findHostElement(view) {
        while (view && !isComponentView(view)) {
          view = view.parent;
        }

        if (view.parent) {
          return asElementData(view.parent, viewParentEl(view).nodeIndex);
        }

        return null;
      }

      function collectReferences(view, nodeDef, references) {
        for (var refName in nodeDef.references) {
          references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
        }
      }

      function callWithDebugContext(action, fn, self, args) {
        var oldAction = _currentAction;
        var oldView = _currentView;
        var oldNodeIndex = _currentNodeIndex;

        try {
          _currentAction = action;
          var result = fn.apply(self, args);
          _currentView = oldView;
          _currentNodeIndex = oldNodeIndex;
          _currentAction = oldAction;
          return result;
        } catch (e) {
          if (isViewDebugError(e) || !_currentView) {
            throw e;
          }

          throw viewWrappedDebugError(e, getCurrentDebugContext());
        }
      }

      function getCurrentDebugContext() {
        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
      }

      var DebugRendererFactory2 = /*#__PURE__*/function () {
        function DebugRendererFactory2(delegate) {
          _classCallCheck(this, DebugRendererFactory2);

          this.delegate = delegate;
        }

        _createClass2(DebugRendererFactory2, [{
          key: "createRenderer",
          value: function createRenderer(element, renderData) {
            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
          }
        }, {
          key: "begin",
          value: function begin() {
            if (this.delegate.begin) {
              this.delegate.begin();
            }
          }
        }, {
          key: "end",
          value: function end() {
            if (this.delegate.end) {
              this.delegate.end();
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            if (this.delegate.whenRenderingDone) {
              return this.delegate.whenRenderingDone();
            }

            return Promise.resolve(null);
          }
        }]);

        return DebugRendererFactory2;
      }();

      var DebugRenderer2 = /*#__PURE__*/function () {
        function DebugRenderer2(delegate) {
          _classCallCheck(this, DebugRenderer2);

          this.delegate = delegate;
          /**
           * Factory function used to create a `DebugContext` when a node is created.
           *
           * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
           *
           * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
           * or a Render context.
           */

          this.debugContextFactory = getCurrentDebugContext;
          this.data = this.delegate.data;
        }

        _createClass2(DebugRenderer2, [{
          key: "createDebugContext",
          value: function createDebugContext(nativeElement) {
            return this.debugContextFactory(nativeElement);
          }
        }, {
          key: "destroyNode",
          value: function destroyNode(node) {
            var debugNode = getDebugNode$1(node);
            removeDebugNodeFromIndex(debugNode);

            if (debugNode instanceof DebugNode__PRE_R3__) {
              debugNode.listeners.length = 0;
            }

            if (this.delegate.destroyNode) {
              this.delegate.destroyNode(node);
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.delegate.destroy();
          }
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            var el = this.delegate.createElement(name, namespace);
            var debugCtx = this.createDebugContext(el);

            if (debugCtx) {
              var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
              debugEl.name = name;
              indexDebugNode(debugEl);
            }

            return el;
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            var comment = this.delegate.createComment(escapeCommentText(value));
            var debugCtx = this.createDebugContext(comment);

            if (debugCtx) {
              indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
            }

            return comment;
          }
        }, {
          key: "createText",
          value: function createText(value) {
            var text = this.delegate.createText(value);
            var debugCtx = this.createDebugContext(text);

            if (debugCtx) {
              indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
            }

            return text;
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(newChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.addChild(debugChildEl);
            }

            this.delegate.appendChild(parent, newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild, isMove) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(newChild);
            var debugRefEl = getDebugNode$1(refChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.insertBefore(debugRefEl, debugChildEl);
            }

            this.delegate.insertBefore(parent, newChild, refChild, isMove);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(oldChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.removeChild(debugChildEl);
            }

            this.delegate.removeChild(parent, oldChild);
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
            var debugCtx = getCurrentDebugContext();

            if (debugCtx) {
              indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
            }

            return el;
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              var fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = value;
            }

            this.delegate.setAttribute(el, name, value, namespace);
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              var fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = null;
            }

            this.delegate.removeAttribute(el, name, namespace);
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.classes[name] = true;
            }

            this.delegate.addClass(el, name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.classes[name] = false;
            }

            this.delegate.removeClass(el, name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.styles[style] = value;
            }

            this.delegate.setStyle(el, style, value, flags);
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.styles[style] = null;
            }

            this.delegate.removeStyle(el, style, flags);
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.properties[name] = value;
            }

            this.delegate.setProperty(el, name, value);
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            if (typeof target !== 'string') {
              var debugEl = getDebugNode$1(target);

              if (debugEl) {
                debugEl.listeners.push(new DebugEventListener(eventName, callback));
              }
            }

            return this.delegate.listen(target, eventName, callback);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.delegate.parentNode(node);
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            return this.delegate.setValue(node, value);
          }
        }]);

        return DebugRenderer2;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function overrideProvider(override) {
        initServicesIfNeeded();
        return Services.overrideProvider(override);
      }

      function overrideComponentView(comp, componentFactory) {
        initServicesIfNeeded();
        return Services.overrideComponentView(comp, componentFactory);
      }

      function clearOverrides() {
        initServicesIfNeeded();
        return Services.clearOverrides();
      } // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!


      function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
      }

      function cloneNgModuleDefinition(def) {
        var providers = Array.from(def.providers);
        var modules = Array.from(def.modules);
        var providersByKey = {};

        for (var key in def.providersByKey) {
          providersByKey[key] = def.providersByKey[key];
        }

        return {
          factory: def.factory,
          scope: def.scope,
          providers: providers,
          modules: modules,
          providersByKey: providersByKey
        };
      }

      var NgModuleFactory_ = /*#__PURE__*/function (_NgModuleFactory2) {
        _inherits(NgModuleFactory_, _NgModuleFactory2);

        var _super134 = _createSuper(NgModuleFactory_);

        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
          var _this179;

          _classCallCheck(this, NgModuleFactory_);

          // Attention: this ctor is called as top level function.
          // Putting any logic in here will destroy closure tree shaking!
          _this179 = _super134.call(this);
          _this179.moduleType = moduleType;
          _this179._bootstrapComponents = _bootstrapComponents;
          _this179._ngModuleDefFactory = _ngModuleDefFactory;
          return _this179;
        }

        _createClass2(NgModuleFactory_, [{
          key: "create",
          value: function create(parentInjector) {
            initServicesIfNeeded(); // Clone the NgModuleDefinition so that any tree shakeable provider definition
            // added to this instance of the NgModuleRef doesn't affect the cached copy.
            // See https://github.com/angular/angular/issues/25018.

            var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
            return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
          }
        }]);

        return NgModuleFactory_;
      }(NgModuleFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compiles a partial directive declaration object into a full directive definition object.
       *
       * @codeGenApi
       */


      function ɵɵngDeclareDirective(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileDirectiveDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275fac.js"), decl);
      }
      /**
       * Compiles a partial component declaration object into a full component definition object.
       *
       * @codeGenApi
       */


      function ɵɵngDeclareComponent(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileComponentDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275cmp.js"), decl);
      }
      /**
       * Compiles a partial pipe declaration object into a full pipe definition object.
       *
       * @codeGenApi
       */


      function ɵɵngDeclarePipe(decl) {
        var compiler = getCompilerFacade();
        return compiler.compilePipeDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275pipe.js"), decl);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // clang-format on

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      if (typeof ngDevMode !== 'undefined' && ngDevMode) {
        // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
        // installed `@angular/localize` in their app.
        // tslint:disable-next-line: no-toplevel-property-access
        _global.$localize = _global.$localize || function () {
          throw new Error('It looks like your application or one of its dependencies is using i18n.\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\n' + '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=core.js.map

      /***/

    },

    /***/
    "gRHU":
    /*!*********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Observer.js ***!
      \*********************************************************/

    /*! exports provided: empty */

    /***/
    function gRHU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "empty", function () {
        return empty;
      });
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./config */
      "2fFW");
      /* harmony import */


      var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/hostReportError */
      "NJ4a");

      var empty = {
        closed: true,
        next: function next(value) {},
        error: function error(err) {
          if (_config__WEBPACK_IMPORTED_MODULE_0__["config"].useDeprecatedSynchronousErrorHandling) {
            throw err;
          } else {
            Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__["hostReportError"])(err);
          }
        },
        complete: function complete() {}
      }; //# sourceMappingURL=Observer.js.map

      /***/
    },

    /***/
    "gcYM":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js ***!
      \***********************************************************************/

    /*! exports provided: throttleTime */

    /***/
    function gcYM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throttleTime", function () {
        return throttleTime;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./throttle */
      "yuhW");

      function throttleTime(duration) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _throttle__WEBPACK_IMPORTED_MODULE_2__["defaultThrottleConfig"];
        return function (source) {
          return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
        };
      }

      var ThrottleTimeOperator = /*#__PURE__*/function () {
        function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
          _classCallCheck(this, ThrottleTimeOperator);

          this.duration = duration;
          this.scheduler = scheduler;
          this.leading = leading;
          this.trailing = trailing;
        }

        _createClass2(ThrottleTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
          }
        }]);

        return ThrottleTimeOperator;
      }();

      var ThrottleTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_33) {
        _inherits(ThrottleTimeSubscriber, _Subscriber__WEBPACK_33);

        var _super135 = _createSuper(ThrottleTimeSubscriber);

        function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
          var _this180;

          _classCallCheck(this, ThrottleTimeSubscriber);

          _this180 = _super135.call(this, destination);
          _this180.duration = duration;
          _this180.scheduler = scheduler;
          _this180.leading = leading;
          _this180.trailing = trailing;
          _this180._hasTrailingValue = false;
          _this180._trailingValue = null;
          return _this180;
        }

        _createClass2(ThrottleTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.throttled) {
              if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
              }
            } else {
              this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
                subscriber: this
              }));

              if (this.leading) {
                this.destination.next(value);
              } else if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
              }
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (this._hasTrailingValue) {
              this.destination.next(this._trailingValue);
              this.destination.complete();
            } else {
              this.destination.complete();
            }
          }
        }, {
          key: "clearThrottle",
          value: function clearThrottle() {
            var throttled = this.throttled;

            if (throttled) {
              if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
              }

              throttled.unsubscribe();
              this.remove(throttled);
              this.throttled = null;
            }
          }
        }]);

        return ThrottleTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      function dispatchNext(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
      } //# sourceMappingURL=throttleTime.js.map

      /***/

    },

    /***/
    "hKy8":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/pairs.js ***!
      \*****************************************************************/

    /*! exports provided: pairs, dispatch */

    /***/
    function hKy8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pairs", function () {
        return pairs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dispatch", function () {
        return dispatch;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");

      function pairs(obj, scheduler) {
        if (!scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var keys = Object.keys(obj);

            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
              var key = keys[i];

              if (obj.hasOwnProperty(key)) {
                subscriber.next([key, obj[key]]);
              }
            }

            subscriber.complete();
          });
        } else {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            subscription.add(scheduler.schedule(dispatch, 0, {
              keys: keys,
              index: 0,
              subscriber: subscriber,
              subscription: subscription,
              obj: obj
            }));
            return subscription;
          });
        }
      }

      function dispatch(state) {
        var keys = state.keys,
            index = state.index,
            subscriber = state.subscriber,
            subscription = state.subscription,
            obj = state.obj;

        if (!subscriber.closed) {
          if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({
              keys: keys,
              index: index + 1,
              subscriber: subscriber,
              subscription: subscription,
              obj: obj
            }));
          } else {
            subscriber.complete();
          }
        }
      } //# sourceMappingURL=pairs.js.map

      /***/

    },

    /***/
    "iKkX":
    /*!*******************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js ***!
      \*******************************************************************************/

    /*! exports provided: VirtualTimeScheduler, VirtualAction */

    /***/
    function iKkX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function () {
        return VirtualTimeScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VirtualAction", function () {
        return VirtualAction;
      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      "3N8a");
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsyncScheduler */
      "IjjT");

      var VirtualTimeScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP3) {
        _inherits(VirtualTimeScheduler, _AsyncScheduler__WEBP3);

        var _super136 = _createSuper(VirtualTimeScheduler);

        function VirtualTimeScheduler() {
          var _this181;

          var SchedulerAction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : VirtualAction;
          var maxFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

          _classCallCheck(this, VirtualTimeScheduler);

          _this181 = _super136.call(this, SchedulerAction, function () {
            return _this181.frame;
          });
          _this181.maxFrames = maxFrames;
          _this181.frame = 0;
          _this181.index = -1;
          return _this181;
        }

        _createClass2(VirtualTimeScheduler, [{
          key: "flush",
          value: function flush() {
            var actions = this.actions,
                maxFrames = this.maxFrames;
            var error, action;

            while ((action = actions[0]) && action.delay <= maxFrames) {
              actions.shift();
              this.frame = action.delay;

              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            }

            if (error) {
              while (action = actions.shift()) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return VirtualTimeScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"]);

      VirtualTimeScheduler.frameTimeFactor = 10;

      var VirtualAction = /*#__PURE__*/function (_AsyncAction__WEBPACK4) {
        _inherits(VirtualAction, _AsyncAction__WEBPACK4);

        var _super137 = _createSuper(VirtualAction);

        function VirtualAction(scheduler, work) {
          var _this182;

          var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : scheduler.index += 1;

          _classCallCheck(this, VirtualAction);

          _this182 = _super137.call(this, scheduler, work);
          _this182.scheduler = scheduler;
          _this182.work = work;
          _this182.index = index;
          _this182.active = true;
          _this182.index = scheduler.index = index;
          return _this182;
        }

        _createClass2(VirtualAction, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (!this.id) {
              return _get(_getPrototypeOf(VirtualAction.prototype), "schedule", this).call(this, state, delay);
            }

            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
          }
        }, {
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            return undefined;
          }
        }, {
          key: "_execute",
          value: function _execute(state, delay) {
            if (this.active === true) {
              return _get(_getPrototypeOf(VirtualAction.prototype), "_execute", this).call(this, state, delay);
            }
          }
        }], [{
          key: "sortActions",
          value: function sortActions(a, b) {
            if (a.delay === b.delay) {
              if (a.index === b.index) {
                return 0;
              } else if (a.index > b.index) {
                return 1;
              } else {
                return -1;
              }
            } else if (a.delay > b.delay) {
              return 1;
            } else {
              return -1;
            }
          }
        }]);

        return VirtualAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=VirtualTimeScheduler.js.map

      /***/

    },

    /***/
    "itXk":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js ***!
      \*************************************************************************/

    /*! exports provided: combineLatest, CombineLatestOperator, CombineLatestSubscriber */

    /***/
    function itXk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
        return combineLatest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CombineLatestOperator", function () {
        return CombineLatestOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CombineLatestSubscriber", function () {
        return CombineLatestSubscriber;
      });
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      "z+Ro");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./fromArray */
      "yCtX");

      var NONE = {};

      function combineLatest() {
        for (var _len42 = arguments.length, observables = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {
          observables[_key42] = arguments[_key42];
        }

        var resultSelector = undefined;
        var scheduler = undefined;

        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(observables[observables.length - 1])) {
          scheduler = observables.pop();
        }

        if (typeof observables[observables.length - 1] === 'function') {
          resultSelector = observables.pop();
        }

        if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(observables[0])) {
          observables = observables[0];
        }

        return Object(_fromArray__WEBPACK_IMPORTED_MODULE_4__["fromArray"])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
      }

      var CombineLatestOperator = /*#__PURE__*/function () {
        function CombineLatestOperator(resultSelector) {
          _classCallCheck(this, CombineLatestOperator);

          this.resultSelector = resultSelector;
        }

        _createClass2(CombineLatestOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
          }
        }]);

        return CombineLatestOperator;
      }();

      var CombineLatestSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB4) {
        _inherits(CombineLatestSubscriber, _OuterSubscriber__WEB4);

        var _super138 = _createSuper(CombineLatestSubscriber);

        function CombineLatestSubscriber(destination, resultSelector) {
          var _this183;

          _classCallCheck(this, CombineLatestSubscriber);

          _this183 = _super138.call(this, destination);
          _this183.resultSelector = resultSelector;
          _this183.active = 0;
          _this183.values = [];
          _this183.observables = [];
          return _this183;
        }

        _createClass2(CombineLatestSubscriber, [{
          key: "_next",
          value: function _next(observable) {
            this.values.push(NONE);
            this.observables.push(observable);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var observables = this.observables;
            var len = observables.length;

            if (len === 0) {
              this.destination.complete();
            } else {
              this.active = len;
              this.toRespond = len;

              for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, undefined, i));
              }
            }
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(unused) {
            if ((this.active -= 1) === 0) {
              this.destination.complete();
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, outerIndex) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;

            if (toRespond === 0) {
              if (this.resultSelector) {
                this._tryResultSelector(values);
              } else {
                this.destination.next(values.slice());
              }
            }
          }
        }, {
          key: "_tryResultSelector",
          value: function _tryResultSelector(values) {
            var result;

            try {
              result = this.resultSelector.apply(this, values);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return CombineLatestSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=combineLatest.js.map

      /***/

    },

    /***/
    "jZKg":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js ***!
      \************************************************************************/

    /*! exports provided: scheduleArray */

    /***/
    function jZKg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scheduleArray", function () {
        return scheduleArray;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");

      function scheduleArray(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          var i = 0;
          sub.add(scheduler.schedule(function () {
            if (i === input.length) {
              subscriber.complete();
              return;
            }

            subscriber.next(input[i++]);

            if (!subscriber.closed) {
              sub.add(this.schedule());
            }
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleArray.js.map

      /***/

    },

    /***/
    "jhN1":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js ***!
      \******************************************************************************************/

    /*! exports provided: ɵgetDOM, BrowserModule, BrowserTransferStateModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, Title, TransferState, VERSION, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, ɵBROWSER_SANITIZATION_PROVIDERS, ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__, ɵBrowserDomAdapter, ɵBrowserGetTestability, ɵDomEventsPlugin, ɵDomRendererFactory2, ɵDomSanitizerImpl, ɵDomSharedStylesHost, ɵELEMENT_PROBE_PROVIDERS, ɵELEMENT_PROBE_PROVIDERS__POST_R3__, ɵHAMMER_PROVIDERS__POST_R3__, ɵHammerGesturesPlugin, ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, ɵKeyEventsPlugin, ɵNAMESPACE_URIS, ɵSharedStylesHost, ɵTRANSITION_ID, ɵangular_packages_platform_browser_platform_browser_a, ɵangular_packages_platform_browser_platform_browser_b, ɵangular_packages_platform_browser_platform_browser_c, ɵangular_packages_platform_browser_platform_browser_d, ɵangular_packages_platform_browser_platform_browser_e, ɵangular_packages_platform_browser_platform_browser_f, ɵangular_packages_platform_browser_platform_browser_g, ɵangular_packages_platform_browser_platform_browser_h, ɵangular_packages_platform_browser_platform_browser_i, ɵangular_packages_platform_browser_platform_browser_j, ɵangular_packages_platform_browser_platform_browser_k, ɵangular_packages_platform_browser_platform_browser_l, ɵangular_packages_platform_browser_platform_browser_m, ɵangular_packages_platform_browser_platform_browser_n, ɵangular_packages_platform_browser_platform_browser_o, ɵescapeHtml, ɵflattenStyles, ɵinitDomAdapter, ɵshimContentAttribute, ɵshimHostAttribute */

    /***/
    function jhN1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BrowserModule", function () {
        return BrowserModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BrowserTransferStateModule", function () {
        return BrowserTransferStateModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "By", function () {
        return By;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DomSanitizer", function () {
        return DomSanitizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EVENT_MANAGER_PLUGINS", function () {
        return EVENT_MANAGER_PLUGINS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventManager", function () {
        return EventManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HAMMER_GESTURE_CONFIG", function () {
        return HAMMER_GESTURE_CONFIG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HAMMER_LOADER", function () {
        return HAMMER_LOADER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HammerGestureConfig", function () {
        return HammerGestureConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HammerModule", function () {
        return HammerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Meta", function () {
        return Meta;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Title", function () {
        return Title;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TransferState", function () {
        return TransferState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "disableDebugTools", function () {
        return disableDebugTools;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableDebugTools", function () {
        return enableDebugTools;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "makeStateKey", function () {
        return makeStateKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "platformBrowser", function () {
        return platformBrowser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS", function () {
        return BROWSER_SANITIZATION_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__", function () {
        return BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBrowserDomAdapter", function () {
        return BrowserDomAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBrowserGetTestability", function () {
        return BrowserGetTestability;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDomEventsPlugin", function () {
        return DomEventsPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDomRendererFactory2", function () {
        return DomRendererFactory2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDomSanitizerImpl", function () {
        return DomSanitizerImpl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDomSharedStylesHost", function () {
        return DomSharedStylesHost;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS", function () {
        return ELEMENT_PROBE_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS__POST_R3__", function () {
        return ELEMENT_PROBE_PROVIDERS__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵHAMMER_PROVIDERS__POST_R3__", function () {
        return HAMMER_PROVIDERS__POST_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵHammerGesturesPlugin", function () {
        return HammerGesturesPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS", function () {
        return INTERNAL_BROWSER_PLATFORM_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵKeyEventsPlugin", function () {
        return KeyEventsPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNAMESPACE_URIS", function () {
        return NAMESPACE_URIS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵSharedStylesHost", function () {
        return SharedStylesHost;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵTRANSITION_ID", function () {
        return TRANSITION_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_a", function () {
        return errorHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_b", function () {
        return _document;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_c", function () {
        return BROWSER_MODULE_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_d", function () {
        return createMeta;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_e", function () {
        return createTitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_f", function () {
        return initTransferState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_g", function () {
        return EventManagerPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_h", function () {
        return HAMMER_PROVIDERS__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_i", function () {
        return HAMMER_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_j", function () {
        return domSanitizerImplFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_k", function () {
        return appInitializerFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_l", function () {
        return SERVER_TRANSITION_PROVIDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_m", function () {
        return _createNgProbeR2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_n", function () {
        return ELEMENT_PROBE_PROVIDERS__PRE_R3__;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_o", function () {
        return GenericBrowserDomAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵescapeHtml", function () {
        return escapeHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵflattenStyles", function () {
        return flattenStyles;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵinitDomAdapter", function () {
        return initDomAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵshimContentAttribute", function () {
        return shimContentAttribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵshimHostAttribute", function () {
        return shimHostAttribute;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function () {
        return _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"];
      });
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides DOM operations in any browser environment.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */


      var GenericBrowserDomAdapter = /*#__PURE__*/function (_angular_common__WEBP) {
        _inherits(GenericBrowserDomAdapter, _angular_common__WEBP);

        var _super139 = _createSuper(GenericBrowserDomAdapter);

        function GenericBrowserDomAdapter() {
          _classCallCheck(this, GenericBrowserDomAdapter);

          return _super139.call(this);
        }

        _createClass2(GenericBrowserDomAdapter, [{
          key: "supportsDOMEvents",
          value: function supportsDOMEvents() {
            return true;
          }
        }]);

        return GenericBrowserDomAdapter;
      }(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵDomAdapter"]);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0 = function ɵ0() {
        if (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node']) {
          return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node'].prototype.contains || function (node) {
            return !!(this.compareDocumentPosition(node) & 16);
          };
        }

        return undefined;
      };

      var nodeContains = ɵ0();
      /**
       * A `DomAdapter` powered by full browser DOM APIs.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */

      /* tslint:disable:requireParameterType no-console */

      var BrowserDomAdapter = /*#__PURE__*/function (_GenericBrowserDomAda) {
        _inherits(BrowserDomAdapter, _GenericBrowserDomAda);

        var _super140 = _createSuper(BrowserDomAdapter);

        function BrowserDomAdapter() {
          _classCallCheck(this, BrowserDomAdapter);

          return _super140.apply(this, arguments);
        }

        _createClass2(BrowserDomAdapter, [{
          key: "getProperty",
          value: function getProperty(el, name) {
            return el[name];
          }
        }, {
          key: "log",
          value: function log(error) {
            if (window.console) {
              window.console.log && window.console.log(error);
            }
          }
        }, {
          key: "logGroup",
          value: function logGroup(error) {
            if (window.console) {
              window.console.group && window.console.group(error);
            }
          }
        }, {
          key: "logGroupEnd",
          value: function logGroupEnd() {
            if (window.console) {
              window.console.groupEnd && window.console.groupEnd();
            }
          }
        }, {
          key: "onAndCancel",
          value: function onAndCancel(el, evt, listener) {
            el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of
            // https://code.google.com/p/dart/issues/detail?id=17406

            return function () {
              el.removeEventListener(evt, listener, false);
            };
          }
        }, {
          key: "dispatchEvent",
          value: function dispatchEvent(el, evt) {
            el.dispatchEvent(evt);
          }
        }, {
          key: "remove",
          value: function remove(node) {
            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }

            return node;
          }
        }, {
          key: "getValue",
          value: function getValue(el) {
            return el.value;
          }
        }, {
          key: "createElement",
          value: function createElement(tagName, doc) {
            doc = doc || this.getDefaultDocument();
            return doc.createElement(tagName);
          }
        }, {
          key: "createHtmlDocument",
          value: function createHtmlDocument() {
            return document.implementation.createHTMLDocument('fakeTitle');
          }
        }, {
          key: "getDefaultDocument",
          value: function getDefaultDocument() {
            return document;
          }
        }, {
          key: "isElementNode",
          value: function isElementNode(node) {
            return node.nodeType === Node.ELEMENT_NODE;
          }
        }, {
          key: "isShadowRoot",
          value: function isShadowRoot(node) {
            return node instanceof DocumentFragment;
          }
        }, {
          key: "getGlobalEventTarget",
          value: function getGlobalEventTarget(doc, target) {
            if (target === 'window') {
              return window;
            }

            if (target === 'document') {
              return doc;
            }

            if (target === 'body') {
              return doc.body;
            }

            return null;
          }
        }, {
          key: "getHistory",
          value: function getHistory() {
            return window.history;
          }
        }, {
          key: "getLocation",
          value: function getLocation() {
            return window.location;
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref(doc) {
            var href = getBaseElementHref();
            return href == null ? null : relativePath(href);
          }
        }, {
          key: "resetBaseElement",
          value: function resetBaseElement() {
            baseElement = null;
          }
        }, {
          key: "getUserAgent",
          value: function getUserAgent() {
            return window.navigator.userAgent;
          }
        }, {
          key: "performanceNow",
          value: function performanceNow() {
            // performance.now() is not available in all browsers, see
            // https://caniuse.com/high-resolution-time
            return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
          }
        }, {
          key: "supportsCookies",
          value: function supportsCookies() {
            return true;
          }
        }, {
          key: "getCookie",
          value: function getCookie(name) {
            return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵparseCookieValue"])(document.cookie, name);
          }
        }], [{
          key: "makeCurrent",
          value: function makeCurrent() {
            Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new BrowserDomAdapter());
          }
        }]);

        return BrowserDomAdapter;
      }(GenericBrowserDomAdapter);

      var baseElement = null;

      function getBaseElementHref() {
        if (!baseElement) {
          baseElement = document.querySelector('base');

          if (!baseElement) {
            return null;
          }
        }

        return baseElement.getAttribute('href');
      } // based on urlUtils.js in AngularJS 1


      var urlParsingNode;

      function relativePath(url) {
        if (!urlParsingNode) {
          urlParsingNode = document.createElement('a');
        }

        urlParsingNode.setAttribute('href', url);
        return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An id that identifies a particular application being bootstrapped, that should
       * match across the client/server boundary.
       */


      var TRANSITION_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('TRANSITION_ID');

      function appInitializerFactory(transitionId, document, injector) {
        return function () {
          // Wait for all application initializers to be completed before removing the styles set by
          // the server.
          injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationInitStatus"]).donePromise.then(function () {
            var dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
            var styles = Array.prototype.slice.apply(document.querySelectorAll("style[ng-transition]"));
            styles.filter(function (el) {
              return el.getAttribute('ng-transition') === transitionId;
            }).forEach(function (el) {
              return dom.remove(el);
            });
          });
        };
      }

      var SERVER_TRANSITION_PROVIDERS = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
        useFactory: appInitializerFactory,
        deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]],
        multi: true
      }];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var BrowserGetTestability = /*#__PURE__*/function () {
        function BrowserGetTestability() {
          _classCallCheck(this, BrowserGetTestability);
        }

        _createClass2(BrowserGetTestability, [{
          key: "addToWindow",
          value: function addToWindow(registry) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAngularTestability'] = function (elem) {
              var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
              var testability = registry.findTestabilityInTree(elem, findInAncestors);

              if (testability == null) {
                throw new Error('Could not find testability for element.');
              }

              return testability;
            };

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities'] = function () {
              return registry.getAllTestabilities();
            };

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularRootElements'] = function () {
              return registry.getAllRootElements();
            };

            var whenAllStable = function whenAllStable(callback
            /** TODO #9100 */
            ) {
              var testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities']();

              var count = testabilities.length;
              var didWork = false;

              var decrement = function decrement(didWork_
              /** TODO #9100 */
              ) {
                didWork = didWork || didWork_;
                count--;

                if (count == 0) {
                  callback(didWork);
                }
              };

              testabilities.forEach(function (testability
              /** TODO #9100 */
              ) {
                testability.whenStable(decrement);
              });
            };

            if (!_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers']) {
              _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'] = [];
            }

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'].push(whenAllStable);
          }
        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(registry, elem, findInAncestors) {
            if (elem == null) {
              return null;
            }

            var t = registry.getTestability(elem);

            if (t != null) {
              return t;
            } else if (!findInAncestors) {
              return null;
            }

            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isShadowRoot(elem)) {
              return this.findTestabilityInTree(registry, elem.host, true);
            }

            return this.findTestabilityInTree(registry, elem.parentElement, true);
          }
        }], [{
          key: "init",
          value: function init() {
            Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["setTestabilityGetter"])(new BrowserGetTestability());
          }
        }]);

        return BrowserGetTestability;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CAMEL_CASE_REGEXP = /([A-Z])/g;
      var DASH_CASE_REGEXP = /-([a-z])/g;

      function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
          for (var _len43 = arguments.length, m = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {
            m[_key43] = arguments[_key43];
          }

          return '-' + m[1].toLowerCase();
        });
      }

      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          for (var _len44 = arguments.length, m = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {
            m[_key44] = arguments[_key44];
          }

          return m[1].toUpperCase();
        });
      }
      /**
       * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
       * `name` is `'probe'`.
       * @param name Name under which it will be exported. Keep in mind this will be a property of the
       * global `ng` object.
       * @param value The value to export.
       */


      function exportNgVar(name, value) {
        if (typeof COMPILED === 'undefined' || !COMPILED) {
          // Note: we can't export `ng` when using closure enhanced optimization as:
          // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
          // - we can't declare a closure extern as the namespace `ng` is already used within Google
          //   for typings for angularJS (via `goog.provide('ng....')`).
          var ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng'] = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng'] || {};
          ng[name] = value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$1 = function ɵ0$1() {
        return {
          'ApplicationRef': _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"],
          'NgZone': _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        };
      };

      var CORE_TOKENS = ɵ0$1();
      var INSPECT_GLOBAL_NAME = 'probe';
      var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
      /**
       * Returns a {@link DebugElement} for the given native DOM element, or
       * null if the given native element does not have an Angular view associated
       * with it.
       */

      function inspectNativeElementR2(element) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetDebugNodeR2"])(element);
      }

      function _createNgProbeR2(coreTokens) {
        exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
        exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign(Object.assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
        return function () {
          return inspectNativeElementR2;
        };
      }

      function _ngProbeTokensToMap(tokens) {
        return tokens.reduce(function (prev, t) {
          return prev[t.name] = t.token, prev;
        }, {});
      }
      /**
       * In Ivy, we don't support NgProbe because we have our own set of testing utilities
       * with more robust functionality.
       *
       * We shouldn't bring in NgProbe because it prevents DebugNode and friends from
       * tree-shaking properly.
       */


      var ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];
      /**
       * Providers which support debugging Angular applications (e.g. via `ng.probe`).
       */

      var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
        useFactory: _createNgProbeR2,
        deps: [[_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgProbeToken"], new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()]],
        multi: true
      }];
      var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The injection token for the event-manager plug-in service.
       *
       * @publicApi
       */

      var EVENT_MANAGER_PLUGINS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('EventManagerPlugins');
      /**
       * An injectable service that provides event management for Angular
       * through a browser plug-in.
       *
       * @publicApi
       */

      var EventManager = /*#__PURE__*/function () {
        /**
         * Initializes an instance of the event-manager service.
         */
        function EventManager(plugins, _zone) {
          var _this184 = this;

          _classCallCheck(this, EventManager);

          this._zone = _zone;
          this._eventNameToPlugin = new Map();
          plugins.forEach(function (p) {
            return p.manager = _this184;
          });
          this._plugins = plugins.slice().reverse();
        }
        /**
         * Registers a handler for a specific element and event.
         *
         * @param element The HTML element to receive event notifications.
         * @param eventName The name of the event to listen for.
         * @param handler A function to call when the notification occurs. Receives the
         * event object as an argument.
         * @returns  A callback function that can be used to remove the handler.
         */


        _createClass2(EventManager, [{
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addEventListener(element, eventName, handler);
          }
          /**
           * Registers a global handler for an event in a target view.
           *
           * @param target A target for global event notifications. One of "window", "document", or "body".
           * @param eventName The name of the event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns A callback function that can be used to remove the handler.
           */

        }, {
          key: "addGlobalEventListener",
          value: function addGlobalEventListener(target, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addGlobalEventListener(target, eventName, handler);
          }
          /**
           * Retrieves the compilation zone in which event listeners are registered.
           */

        }, {
          key: "getZone",
          value: function getZone() {
            return this._zone;
          }
          /** @internal */

        }, {
          key: "_findPluginFor",
          value: function _findPluginFor(eventName) {
            var plugin = this._eventNameToPlugin.get(eventName);

            if (plugin) {
              return plugin;
            }

            var plugins = this._plugins;

            for (var i = 0; i < plugins.length; i++) {
              var _plugin = plugins[i];

              if (_plugin.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, _plugin);

                return _plugin;
              }
            }

            throw new Error("No event manager plugin found for event ".concat(eventName));
          }
        }]);

        return EventManager;
      }();

      EventManager.ɵfac = function EventManager_Factory(t) {
        return new (t || EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      EventManager.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: EventManager,
        factory: EventManager.ɵfac
      });

      EventManager.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [EVENT_MANAGER_PLUGINS]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](EventManager, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [EVENT_MANAGER_PLUGINS]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, null);
      })();

      var EventManagerPlugin = /*#__PURE__*/function () {
        function EventManagerPlugin(_doc) {
          _classCallCheck(this, EventManagerPlugin);

          this._doc = _doc;
        }

        _createClass2(EventManagerPlugin, [{
          key: "addGlobalEventListener",
          value: function addGlobalEventListener(element, eventName, handler) {
            var target = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);

            if (!target) {
              throw new Error("Unsupported event target ".concat(target, " for event ").concat(eventName));
            }

            return this.addEventListener(target, eventName, handler);
          }
        }]);

        return EventManagerPlugin;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SharedStylesHost = /*#__PURE__*/function () {
        function SharedStylesHost() {
          _classCallCheck(this, SharedStylesHost);

          /** @internal */
          this._stylesSet = new Set();
        }

        _createClass2(SharedStylesHost, [{
          key: "addStyles",
          value: function addStyles(styles) {
            var _this185 = this;

            var additions = new Set();
            styles.forEach(function (style) {
              if (!_this185._stylesSet.has(style)) {
                _this185._stylesSet.add(style);

                additions.add(style);
              }
            });
            this.onStylesAdded(additions);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {}
        }, {
          key: "getAllStyles",
          value: function getAllStyles() {
            return Array.from(this._stylesSet);
          }
        }]);

        return SharedStylesHost;
      }();

      SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {
        return new (t || SharedStylesHost)();
      };

      SharedStylesHost.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: SharedStylesHost,
        factory: SharedStylesHost.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SharedStylesHost, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();

      var DomSharedStylesHost = /*#__PURE__*/function (_SharedStylesHost) {
        _inherits(DomSharedStylesHost, _SharedStylesHost);

        var _super141 = _createSuper(DomSharedStylesHost);

        function DomSharedStylesHost(_doc) {
          var _this186;

          _classCallCheck(this, DomSharedStylesHost);

          _this186 = _super141.call(this);
          _this186._doc = _doc;
          _this186._hostNodes = new Set();
          _this186._styleNodes = new Set();

          _this186._hostNodes.add(_doc.head);

          return _this186;
        }

        _createClass2(DomSharedStylesHost, [{
          key: "_addStylesToHost",
          value: function _addStylesToHost(styles, host) {
            var _this187 = this;

            styles.forEach(function (style) {
              var styleEl = _this187._doc.createElement('style');

              styleEl.textContent = style;

              _this187._styleNodes.add(host.appendChild(styleEl));
            });
          }
        }, {
          key: "addHost",
          value: function addHost(hostNode) {
            this._addStylesToHost(this._stylesSet, hostNode);

            this._hostNodes.add(hostNode);
          }
        }, {
          key: "removeHost",
          value: function removeHost(hostNode) {
            this._hostNodes["delete"](hostNode);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {
            var _this188 = this;

            this._hostNodes.forEach(function (hostNode) {
              return _this188._addStylesToHost(additions, hostNode);
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._styleNodes.forEach(function (styleNode) {
              return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().remove(styleNode);
            });
          }
        }]);

        return DomSharedStylesHost;
      }(SharedStylesHost);

      DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {
        return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomSharedStylesHost.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomSharedStylesHost,
        factory: DomSharedStylesHost.ɵfac
      });

      DomSharedStylesHost.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSharedStylesHost, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NAMESPACE_URIS = {
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml',
        'xlink': 'http://www.w3.org/1999/xlink',
        'xml': 'http://www.w3.org/XML/1998/namespace',
        'xmlns': 'http://www.w3.org/2000/xmlns/'
      };
      var COMPONENT_REGEX = /%COMP%/g;
      var NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
      var COMPONENT_VARIABLE = '%COMP%';
      var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
      var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);

      function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }

      function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }

      function flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
          var style = styles[i];

          if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
          } else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
          }
        }

        return target;
      }

      function decoratePreventDefault(eventHandler) {
        // `DebugNode.triggerEventHandler` needs to know if the listener was created with
        // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
        // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
        // the listener (see below).
        return function (event) {
          // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
          // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
          // can inspect the listener toString contents for the existence of this special token. Because
          // the token is a string literal, it is ensured to not be modified by compiled code.
          if (event === '__ngUnwrap__') {
            return eventHandler;
          }

          var allowDefaultBehavior = eventHandler(event);

          if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
          }

          return undefined;
        };
      }

      var hasLoggedNativeEncapsulationWarning = false;

      var DomRendererFactory2 = /*#__PURE__*/function () {
        function DomRendererFactory2(eventManager, sharedStylesHost, appId) {
          _classCallCheck(this, DomRendererFactory2);

          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.appId = appId;
          this.rendererByCompId = new Map();
          this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }

        _createClass2(DomRendererFactory2, [{
          key: "createRenderer",
          value: function createRenderer(element, type) {
            if (!element || !type) {
              return this.defaultRenderer;
            }

            switch (type.encapsulation) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].Emulated:
                {
                  var renderer = this.rendererByCompId.get(type.id);

                  if (!renderer) {
                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                    this.rendererByCompId.set(type.id, renderer);
                  }

                  renderer.applyToHost(element);
                  return renderer;
                }

              case 1:
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].ShadowDom:
                // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.
                if ((typeof ngDevMode === 'undefined' || ngDevMode) && !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {
                  hasLoggedNativeEncapsulationWarning = true;
                  console.warn('ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');
                }

                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

              default:
                {
                  if (!this.rendererByCompId.has(type.id)) {
                    var styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                  }

                  return this.defaultRenderer;
                }
            }
          }
        }, {
          key: "begin",
          value: function begin() {}
        }, {
          key: "end",
          value: function end() {}
        }]);

        return DomRendererFactory2;
      }();

      DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {
        return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]));
      };

      DomRendererFactory2.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomRendererFactory2,
        factory: DomRendererFactory2.ɵfac
      });

      DomRendererFactory2.ctorParameters = function () {
        return [{
          type: EventManager
        }, {
          type: DomSharedStylesHost
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomRendererFactory2, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: EventManager
          }, {
            type: DomSharedStylesHost
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
            }]
          }];
        }, null);
      })();

      var DefaultDomRenderer2 = /*#__PURE__*/function () {
        function DefaultDomRenderer2(eventManager) {
          _classCallCheck(this, DefaultDomRenderer2);

          this.eventManager = eventManager;
          this.data = Object.create(null);
        }

        _createClass2(DefaultDomRenderer2, [{
          key: "destroy",
          value: function destroy() {}
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            if (namespace) {
              // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
              // will result in undefined, so we just return the namespace here.
              return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
            }

            return document.createElement(name);
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            return document.createComment(value);
          }
        }, {
          key: "createText",
          value: function createText(value) {
            return document.createTextNode(value);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            parent.appendChild(newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            if (parent) {
              parent.insertBefore(newChild, refChild);
            }
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            if (parent) {
              parent.removeChild(oldChild);
            }
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;

            if (!el) {
              throw new Error("The selector \"".concat(selectorOrNode, "\" did not match any elements"));
            }

            if (!preserveContent) {
              el.textContent = '';
            }

            return el;
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return node.parentNode;
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return node.nextSibling;
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            if (namespace) {
              name = namespace + ':' + name; // TODO(FW-811): Ivy may cause issues here because it's passing around
              // full URIs for namespaces, therefore this lookup will fail.

              var namespaceUri = NAMESPACE_URIS[namespace];

              if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
              } else {
                el.setAttribute(name, value);
              }
            } else {
              el.setAttribute(name, value);
            }
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            if (namespace) {
              // TODO(FW-811): Ivy may cause issues here because it's passing around
              // full URIs for namespaces, therefore this lookup will fail.
              var namespaceUri = NAMESPACE_URIS[namespace];

              if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
              } else {
                // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                // which is wrong.
                el.removeAttribute("".concat(namespace, ":").concat(name));
              }
            } else {
              el.removeAttribute(name);
            }
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            el.classList.add(name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            el.classList.remove(name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            if (flags & (_angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase | _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].Important)) {
              el.style.setProperty(style, value, flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].Important ? 'important' : '');
            } else {
              el.style[style] = value;
            }
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase) {
              el.style.removeProperty(style);
            } else {
              // IE requires '' instead of null
              // see https://github.com/angular/angular/issues/7916
              el.style[style] = '';
            }
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
            el[name] = value;
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            node.nodeValue = value;
          }
        }, {
          key: "listen",
          value: function listen(target, event, callback) {
            NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');

            if (typeof target === 'string') {
              return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
            }

            return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
          }
        }]);

        return DefaultDomRenderer2;
      }();

      var ɵ0$2 = function ɵ0$2() {
        return '@'.charCodeAt(0);
      };

      var AT_CHARCODE = ɵ0$2();

      function checkNoSyntheticProp(name, nameKind) {
        if (name.charCodeAt(0) === AT_CHARCODE) {
          throw new Error("Found the synthetic ".concat(nameKind, " ").concat(name, ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application."));
        }
      }

      var EmulatedEncapsulationDomRenderer2 = /*#__PURE__*/function (_DefaultDomRenderer) {
        _inherits(EmulatedEncapsulationDomRenderer2, _DefaultDomRenderer);

        var _super142 = _createSuper(EmulatedEncapsulationDomRenderer2);

        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
          var _this189;

          _classCallCheck(this, EmulatedEncapsulationDomRenderer2);

          _this189 = _super142.call(this, eventManager);
          _this189.component = component;
          var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
          sharedStylesHost.addStyles(styles);
          _this189.contentAttr = shimContentAttribute(appId + '-' + component.id);
          _this189.hostAttr = shimHostAttribute(appId + '-' + component.id);
          return _this189;
        }

        _createClass2(EmulatedEncapsulationDomRenderer2, [{
          key: "applyToHost",
          value: function applyToHost(element) {
            _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, element, this.hostAttr, '');
          }
        }, {
          key: "createElement",
          value: function createElement(parent, name) {
            var el = _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "createElement", this).call(this, parent, name);

            _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, el, this.contentAttr, '');

            return el;
          }
        }]);

        return EmulatedEncapsulationDomRenderer2;
      }(DefaultDomRenderer2);

      var ShadowDomRenderer = /*#__PURE__*/function (_DefaultDomRenderer2) {
        _inherits(ShadowDomRenderer, _DefaultDomRenderer2);

        var _super143 = _createSuper(ShadowDomRenderer);

        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
          var _this190;

          _classCallCheck(this, ShadowDomRenderer);

          _this190 = _super143.call(this, eventManager);
          _this190.sharedStylesHost = sharedStylesHost;
          _this190.hostEl = hostEl;
          _this190.shadowRoot = hostEl.attachShadow({
            mode: 'open'
          });

          _this190.sharedStylesHost.addHost(_this190.shadowRoot);

          var styles = flattenStyles(component.id, component.styles, []);

          for (var i = 0; i < styles.length; i++) {
            var styleEl = document.createElement('style');
            styleEl.textContent = styles[i];

            _this190.shadowRoot.appendChild(styleEl);
          }

          return _this190;
        }

        _createClass2(ShadowDomRenderer, [{
          key: "nodeOrShadowRoot",
          value: function nodeOrShadowRoot(node) {
            return node === this.hostEl ? this.shadowRoot : node;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.sharedStylesHost.removeHost(this.shadowRoot);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "appendChild", this).call(this, this.nodeOrShadowRoot(parent), newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "insertBefore", this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "removeChild", this).call(this, this.nodeOrShadowRoot(parent), oldChild);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.nodeOrShadowRoot(_get(_getPrototypeOf(ShadowDomRenderer.prototype), "parentNode", this).call(this, this.nodeOrShadowRoot(node)));
          }
        }]);

        return ShadowDomRenderer;
      }(DefaultDomRenderer2);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DomEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin) {
        _inherits(DomEventsPlugin, _EventManagerPlugin);

        var _super144 = _createSuper(DomEventsPlugin);

        function DomEventsPlugin(doc) {
          _classCallCheck(this, DomEventsPlugin);

          return _super144.call(this, doc);
        } // This plugin should come last in the list of plugins, because it accepts all
        // events.


        _createClass2(DomEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this191 = this;

            element.addEventListener(eventName, handler, false);
            return function () {
              return _this191.removeEventListener(element, eventName, handler);
            };
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener(target, eventName, callback) {
            return target.removeEventListener(eventName, callback);
          }
        }]);

        return DomEventsPlugin;
      }(EventManagerPlugin);

      DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {
        return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomEventsPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomEventsPlugin,
        factory: DomEventsPlugin.ɵfac
      });

      DomEventsPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomEventsPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Supported HammerJS recognizer event names.
       */


      var EVENT_NAMES = {
        // pan
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        // pinch
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        // press
        'press': true,
        'pressup': true,
        // rotate
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        // swipe
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        // tap
        'tap': true,
        'doubletap': true
      };
      /**
       * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.
       * @see `HammerGestureConfig`
       *
       * @ngModule HammerModule
       * @publicApi
       */

      var HAMMER_GESTURE_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerGestureConfig');
      /**
       * Injection token used to provide a {@link HammerLoader} to Angular.
       *
       * @publicApi
       */

      var HAMMER_LOADER = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerLoader');
      /**
       * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
       * for gesture recognition. Configures specific event recognition.
       * @publicApi
       */

      var HammerGestureConfig = /*#__PURE__*/function () {
        function HammerGestureConfig() {
          _classCallCheck(this, HammerGestureConfig);

          /**
           * A set of supported event names for gestures to be used in Angular.
           * Angular supports all built-in recognizers, as listed in
           * [HammerJS documentation](https://hammerjs.github.io/).
           */
          this.events = [];
          /**
           * Maps gesture event names to a set of configuration options
           * that specify overrides to the default values for specific properties.
           *
           * The key is a supported event name to be configured,
           * and the options object contains a set of properties, with override values
           * to be applied to the named recognizer event.
           * For example, to disable recognition of the rotate event, specify
           *  `{"rotate": {"enable": false}}`.
           *
           * Properties that are not present take the HammerJS default values.
           * For information about which properties are supported for which events,
           * and their allowed and default values, see
           * [HammerJS documentation](https://hammerjs.github.io/).
           *
           */

          this.overrides = {};
        }
        /**
         * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
         * and attaches it to a given HTML element.
         * @param element The element that will recognize gestures.
         * @returns A HammerJS event-manager object.
         */


        _createClass2(HammerGestureConfig, [{
          key: "buildHammer",
          value: function buildHammer(element) {
            var mc = new Hammer(element, this.options);
            mc.get('pinch').set({
              enable: true
            });
            mc.get('rotate').set({
              enable: true
            });

            for (var eventName in this.overrides) {
              mc.get(eventName).set(this.overrides[eventName]);
            }

            return mc;
          }
        }]);

        return HammerGestureConfig;
      }();

      HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {
        return new (t || HammerGestureConfig)();
      };

      HammerGestureConfig.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: HammerGestureConfig,
        factory: HammerGestureConfig.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerGestureConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Event plugin that adds Hammer support to an application.
       *
       * @ngModule HammerModule
       */


      var HammerGesturesPlugin = /*#__PURE__*/function (_EventManagerPlugin2) {
        _inherits(HammerGesturesPlugin, _EventManagerPlugin2);

        var _super145 = _createSuper(HammerGesturesPlugin);

        function HammerGesturesPlugin(doc, _config, console, loader) {
          var _this192;

          _classCallCheck(this, HammerGesturesPlugin);

          _this192 = _super145.call(this, doc);
          _this192._config = _config;
          _this192.console = console;
          _this192.loader = loader;
          _this192._loaderPromise = null;
          return _this192;
        }

        _createClass2(HammerGesturesPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
              return false;
            }

            if (!window.Hammer && !this.loader) {
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                this.console.warn("The \"".concat(eventName, "\" event cannot be bound because Hammer.JS is not ") + "loaded and no custom loader has been specified.");
              }

              return false;
            }

            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this193 = this;

            var zone = this.manager.getZone();
            eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener
            // until Hammer is loaded.

            if (!window.Hammer && this.loader) {
              this._loaderPromise = this._loaderPromise || this.loader(); // This `addEventListener` method returns a function to remove the added listener.
              // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
              // than remove anything.

              var cancelRegistration = false;

              var deregister = function deregister() {
                cancelRegistration = true;
              };

              this._loaderPromise.then(function () {
                // If Hammer isn't actually loaded when the custom loader resolves, give up.
                if (!window.Hammer) {
                  if (typeof ngDevMode === 'undefined' || ngDevMode) {
                    _this193.console.warn("The custom HAMMER_LOADER completed, but Hammer.JS is not present.");
                  }

                  deregister = function deregister() {};

                  return;
                }

                if (!cancelRegistration) {
                  // Now that Hammer is loaded and the listener is being loaded for real,
                  // the deregistration function changes from canceling registration to removal.
                  deregister = _this193.addEventListener(element, eventName, handler);
                }
              })["catch"](function () {
                if (typeof ngDevMode === 'undefined' || ngDevMode) {
                  _this193.console.warn("The \"".concat(eventName, "\" event cannot be bound because the custom ") + "Hammer.JS loader failed.");
                }

                deregister = function deregister() {};
              }); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
              // can change the behavior of `deregister` once the listener is added. Using a closure in
              // this way allows us to avoid any additional data structures to track listener removal.


              return function () {
                deregister();
              };
            }

            return zone.runOutsideAngular(function () {
              // Creating the manager bind events, must be done outside of angular
              var mc = _this193._config.buildHammer(element);

              var callback = function callback(eventObj) {
                zone.runGuarded(function () {
                  handler(eventObj);
                });
              };

              mc.on(eventName, callback);
              return function () {
                mc.off(eventName, callback); // destroy mc to prevent memory leak

                if (typeof mc.destroy === 'function') {
                  mc.destroy();
                }
              };
            });
          }
        }, {
          key: "isCustomEvent",
          value: function isCustomEvent(eventName) {
            return this._config.events.indexOf(eventName) > -1;
          }
        }]);

        return HammerGesturesPlugin;
      }(EventManagerPlugin);

      HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {
        return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_LOADER, 8));
      };

      HammerGesturesPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: HammerGesturesPlugin,
        factory: HammerGesturesPlugin.ɵfac
      });

      HammerGesturesPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }, {
          type: HammerGestureConfig,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [HAMMER_GESTURE_CONFIG]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [HAMMER_LOADER]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerGesturesPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }, {
            type: HammerGestureConfig,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [HAMMER_GESTURE_CONFIG]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [HAMMER_LOADER]
            }]
          }];
        }, null);
      })();
      /**
       * In Ivy, support for Hammer gestures is optional, so applications must
       * import the `HammerModule` at root to turn on support. This means that
       * Hammer-specific code can be tree-shaken away if not needed.
       */


      var HAMMER_PROVIDERS__POST_R3__ = [];
      /**
       * In View Engine, support for Hammer gestures is built-in by default.
       */

      var HAMMER_PROVIDERS__PRE_R3__ = [{
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), HAMMER_LOADER]]
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig,
        deps: []
      }];
      var HAMMER_PROVIDERS = HAMMER_PROVIDERS__POST_R3__;
      /**
       * Adds support for HammerJS.
       *
       * Import this module at the root of your application so that Angular can work with
       * HammerJS to detect gesture events.
       *
       * Note that applications still need to include the HammerJS script itself. This module
       * simply sets up the coordination layer between HammerJS and Angular's EventManager.
       *
       * @publicApi
       */

      var HammerModule = function HammerModule() {
        _classCallCheck(this, HammerModule);
      };

      HammerModule.ɵfac = function HammerModule_Factory(t) {
        return new (t || HammerModule)();
      };

      HammerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: HammerModule
      });
      HammerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: HAMMER_PROVIDERS__PRE_R3__
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            providers: HAMMER_PROVIDERS__PRE_R3__
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines supported modifiers for key events.
       */


      var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
      var DOM_KEY_LOCATION_NUMPAD = 3; // Map to convert some key or keyIdentifier values to what will be returned by getEventKey

      var _keyMap = {
        // The following values are here for cross-browser compatibility and to match the W3C standard
        // cf https://www.w3.org/TR/DOM-Level-3-Events-key/
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
      }; // There is a bug in Chrome for numeric keypad keys:
      // https://code.google.com/p/chromium/issues/detail?id=155654
      // 1, 2, 3 ... are reported as A, B, C ...

      var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
      };

      var ɵ0$3 = function ɵ0$3(event) {
        return event.altKey;
      },
          ɵ1 = function ɵ1(event) {
        return event.ctrlKey;
      },
          ɵ2 = function ɵ2(event) {
        return event.metaKey;
      },
          ɵ3 = function ɵ3(event) {
        return event.shiftKey;
      };
      /**
       * Retrieves modifiers from key-event objects.
       */


      var MODIFIER_KEY_GETTERS = {
        'alt': ɵ0$3,
        'control': ɵ1,
        'meta': ɵ2,
        'shift': ɵ3
      };
      /**
       * @publicApi
       * A browser plug-in that provides support for handling of key events in Angular.
       */

      var KeyEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin3) {
        _inherits(KeyEventsPlugin, _EventManagerPlugin3);

        var _super146 = _createSuper(KeyEventsPlugin);

        /**
         * Initializes an instance of the browser plug-in.
         * @param doc The document in which key events will be detected.
         */
        function KeyEventsPlugin(doc) {
          _classCallCheck(this, KeyEventsPlugin);

          return _super146.call(this, doc);
        }
        /**
         * Reports whether a named key event is supported.
         * @param eventName The event name to query.
         * @return True if the named key event is supported.
         */


        _createClass2(KeyEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return KeyEventsPlugin.parseEventName(eventName) != null;
          }
          /**
           * Registers a handler for a specific element and key event.
           * @param element The HTML element to receive event notifications.
           * @param eventName The name of the key event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns The key event that was registered.
           */

        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
            var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
              return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
            });
          }
        }], [{
          key: "parseEventName",
          value: function parseEventName(eventName) {
            var parts = eventName.toLowerCase().split('.');
            var domEventName = parts.shift();

            if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
              return null;
            }

            var key = KeyEventsPlugin._normalizeKey(parts.pop());

            var fullKey = '';
            MODIFIER_KEYS.forEach(function (modifierName) {
              var index = parts.indexOf(modifierName);

              if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
              }
            });
            fullKey += key;

            if (parts.length != 0 || key.length === 0) {
              // returning null instead of throwing to let another plugin process the event
              return null;
            } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.
            //       The code must remain in the `result['domEventName']` form.
            // return {domEventName, fullKey};


            var result = {};
            result['domEventName'] = domEventName;
            result['fullKey'] = fullKey;
            return result;
          }
        }, {
          key: "getEventFullKey",
          value: function getEventFullKey(event) {
            var fullKey = '';
            var key = getEventKey(event);
            key = key.toLowerCase();

            if (key === ' ') {
              key = 'space'; // for readability
            } else if (key === '.') {
              key = 'dot'; // because '.' is used as a separator in event names
            }

            MODIFIER_KEYS.forEach(function (modifierName) {
              if (modifierName != key) {
                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];

                if (modifierGetter(event)) {
                  fullKey += modifierName + '.';
                }
              }
            });
            fullKey += key;
            return fullKey;
          }
          /**
           * Configures a handler callback for a key event.
           * @param fullKey The event name that combines all simultaneous keystrokes.
           * @param handler The function that responds to the key event.
           * @param zone The zone in which the event occurred.
           * @returns A callback function.
           */

        }, {
          key: "eventCallback",
          value: function eventCallback(fullKey, handler, zone) {
            return function (event
            /** TODO #9100 */
            ) {
              if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () {
                  return handler(event);
                });
              }
            };
          }
          /** @internal */

        }, {
          key: "_normalizeKey",
          value: function _normalizeKey(keyName) {
            // TODO: switch to a Map if the mapping grows too much
            switch (keyName) {
              case 'esc':
                return 'escape';

              default:
                return keyName;
            }
          }
        }]);

        return KeyEventsPlugin;
      }(EventManagerPlugin);

      KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {
        return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      KeyEventsPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: KeyEventsPlugin,
        factory: KeyEventsPlugin.ɵfac
      });

      KeyEventsPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](KeyEventsPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();

      function getEventKey(event) {
        var key = event.key;

        if (key == null) {
          key = event.keyIdentifier; // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
          // Safari cf
          // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces

          if (key == null) {
            return 'Unidentified';
          }

          if (key.startsWith('U+')) {
            key = String.fromCharCode(parseInt(key.substring(2), 16));

            if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
              // There is a bug in Chrome for numeric keypad keys:
              // https://code.google.com/p/chromium/issues/detail?id=155654
              // 1, 2, 3 ... are reported as A, B, C ...
              key = _chromeNumKeyPadMap[key];
            }
          }
        }

        return _keyMap[key] || key;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
       * values to be safe to use in the different DOM contexts.
       *
       * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
       * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
       * the website.
       *
       * In specific situations, it might be necessary to disable sanitization, for example if the
       * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
       * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
       * methods, and then binding to that value from the template.
       *
       * These situations should be very rare, and extraordinary care must be taken to avoid creating a
       * Cross Site Scripting (XSS) security bug!
       *
       * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
       * close as possible to the source of the value, to make it easy to verify no security bug is
       * created by its use.
       *
       * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
       * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
       * code. The sanitizer leaves safe values intact.
       *
       * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
       * sanitization for the value passed in. Carefully check and audit all values and code paths going
       * into this call. Make sure any user data is appropriately escaped for this security context.
       * For more detail, see the [Security Guide](https://g.co/ng/security).
       *
       * @publicApi
       */


      var DomSanitizer = function DomSanitizer() {
        _classCallCheck(this, DomSanitizer);
      };

      DomSanitizer.ɵfac = function DomSanitizer_Factory(t) {
        return new (t || DomSanitizer)();
      };

      DomSanitizer.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizer_Factory() {
          return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DomSanitizerImpl);
        },
        token: DomSanitizer,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSanitizer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
              return DomSanitizerImpl;
            })
          }]
        }], null, null);
      })();

      function domSanitizerImplFactory(injector) {
        return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      }

      var DomSanitizerImpl = /*#__PURE__*/function (_DomSanitizer) {
        _inherits(DomSanitizerImpl, _DomSanitizer);

        var _super147 = _createSuper(DomSanitizerImpl);

        function DomSanitizerImpl(_doc) {
          var _this194;

          _classCallCheck(this, DomSanitizerImpl);

          _this194 = _super147.call(this);
          _this194._doc = _doc;
          return _this194;
        }

        _createClass2(DomSanitizerImpl, [{
          key: "sanitize",
          value: function sanitize(ctx, value) {
            if (value == null) return null;

            switch (ctx) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].NONE:
                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].HTML:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "HTML"
                /* Html */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeHtml"])(this._doc, String(value)).toString();

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].STYLE:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Style"
                /* Style */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].SCRIPT:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Script"
                /* Script */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a script context');

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].URL:
                var type = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetSanitizationBypassType"])(value);

                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "URL"
                /* Url */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeUrl"])(String(value));

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].RESOURCE_URL:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL"
                /* ResourceUrl */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');

              default:
                throw new Error("Unexpected SecurityContext ".concat(ctx, " (see https://g.co/ng/security#xss)"));
            }
          }
        }, {
          key: "bypassSecurityTrustHtml",
          value: function bypassSecurityTrustHtml(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustHtml"])(value);
          }
        }, {
          key: "bypassSecurityTrustStyle",
          value: function bypassSecurityTrustStyle(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustStyle"])(value);
          }
        }, {
          key: "bypassSecurityTrustScript",
          value: function bypassSecurityTrustScript(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustScript"])(value);
          }
        }, {
          key: "bypassSecurityTrustUrl",
          value: function bypassSecurityTrustUrl(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustUrl"])(value);
          }
        }, {
          key: "bypassSecurityTrustResourceUrl",
          value: function bypassSecurityTrustResourceUrl(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustResourceUrl"])(value);
          }
        }]);

        return DomSanitizerImpl;
      }(DomSanitizer);

      DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {
        return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomSanitizerImpl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizerImpl_Factory() {
          return domSanitizerImplFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"]));
        },
        token: DomSanitizerImpl,
        providedIn: "root"
      });

      DomSanitizerImpl.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSanitizerImpl, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: domSanitizerImplFactory,
            deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function initDomAdapter() {
        BrowserDomAdapter.makeCurrent();
        BrowserGetTestability.init();
      }

      function errorHandler() {
        return new _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"]();
      }

      function _document() {
        // Tell ivy about the global document
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
        return document;
      }

      var ɵ0$4 = _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_BROWSER_ID"];
      var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"],
        useValue: ɵ0$4
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_INITIALIZER"],
        useValue: initDomAdapter,
        multi: true
      }, {
        provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],
        useFactory: _document,
        deps: []
      }];
      var BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Sanitizer"],
        useExisting: DomSanitizer
      }, {
        provide: DomSanitizer,
        useClass: DomSanitizerImpl,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }];
      var BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];
      /**
       * @security Replacing built-in sanitization providers exposes the application to XSS risks.
       * Attacker-controlled data introduced by an unsanitized provider could expose your
       * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).
       * @publicApi
       */

      var BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
      /**
       * A factory function that returns a `PlatformRef` instance associated with browser service
       * providers.
       *
       * @publicApi
       */

      var platformBrowser = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["createPlatformFactory"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["platformCore"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      var BROWSER_MODULE_PROVIDERS = [BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵINJECTOR_SCOPE"],
        useValue: 'root'
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"],
        useFactory: errorHandler,
        deps: []
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }, HAMMER_PROVIDERS, {
        provide: DomRendererFactory2,
        useClass: DomRendererFactory2,
        deps: [EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"],
        useExisting: DomRendererFactory2
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: DomSharedStylesHost,
        useClass: DomSharedStylesHost,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"],
        useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"],
        deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]]
      }, {
        provide: EventManager,
        useClass: EventManager,
        deps: [EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]]
      }, ELEMENT_PROBE_PROVIDERS];
      /**
       * Exports required infrastructure for all Angular apps.
       * Included by default in all Angular apps created with the CLI
       * `new` command.
       * Re-exports `CommonModule` and `ApplicationModule`, making their
       * exports and providers available to all apps.
       *
       * @publicApi
       */

      var BrowserModule = /*#__PURE__*/function () {
        function BrowserModule(parentModule) {
          _classCallCheck(this, BrowserModule);

          if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
          }
        }
        /**
         * Configures a browser-based app to transition from a server-rendered app, if
         * one is present on the page.
         *
         * @param params An object containing an identifier for the app to transition.
         * The ID must match between the client and server versions of the app.
         * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
         */


        _createClass2(BrowserModule, null, [{
          key: "withServerTransition",
          value: function withServerTransition(params) {
            return {
              ngModule: BrowserModule,
              providers: [{
                provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"],
                useValue: params.appId
              }, {
                provide: TRANSITION_ID,
                useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]
              }, SERVER_TRANSITION_PROVIDERS]
            };
          }
        }]);

        return BrowserModule;
      }();

      BrowserModule.ɵfac = function BrowserModule_Factory(t) {
        return new (t || BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](BrowserModule, 12));
      };

      BrowserModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: BrowserModule
      });
      BrowserModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: BROWSER_MODULE_PROVIDERS,
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]]
      });

      BrowserModule.ctorParameters = function () {
        return [{
          type: BrowserModule,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [BrowserModule]
          }]
        }];
      };

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](BrowserModule, {
          exports: function exports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            providers: BROWSER_MODULE_PROVIDERS,
            exports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]]
          }]
        }], function () {
          return [{
            type: BrowserModule,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [BrowserModule]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Factory to create a `Meta` service instance for the current DOM document.
       */


      function createMeta() {
        return new Meta(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      }
      /**
       * A service for managing HTML `<meta>` tags.
       *
       * Properties of the `MetaDefinition` object match the attributes of the
       * HTML `<meta>` tag. These tags define document metadata that is important for
       * things like configuring a Content Security Policy, defining browser compatibility
       * and security settings, setting HTTP Headers, defining rich content for social sharing,
       * and Search Engine Optimization (SEO).
       *
       * To identify specific `<meta>` tags in a document, use an attribute selection
       * string in the format `"tag_attribute='value string'"`.
       * For example, an `attrSelector` value of `"name='description'"` matches a tag
       * whose `name` attribute has the value `"description"`.
       * Selectors are used with the `querySelector()` Document method,
       * in the format `meta[{attrSelector}]`.
       *
       * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)
       * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
       *
       *
       * @publicApi
       */


      var Meta = /*#__PURE__*/function () {
        function Meta(_doc) {
          _classCallCheck(this, Meta);

          this._doc = _doc;
          this._dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
        }
        /**
         * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
         * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
         * values in the provided tag definition, and verifies that all other attribute values are equal.
         * If an existing element is found, it is returned and is not modified in any way.
         * @param tag The definition of a `<meta>` element to match or create.
         * @param forceCreation True to create a new element without checking whether one already exists.
         * @returns The existing element with the same attributes and values if found,
         * the new element if no match is found, or `null` if the tag parameter is not defined.
         */


        _createClass2(Meta, [{
          key: "addTag",
          value: function addTag(tag) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tag) return null;
            return this._getOrCreateElement(tag, forceCreation);
          }
          /**
           * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
           * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
           * values in the provided tag definition, and verifies that all other attribute values are equal.
           * @param tags An array of tag definitions to match or create.
           * @param forceCreation True to create new elements without checking whether they already exist.
           * @returns The matching elements if found, or the new elements.
           */

        }, {
          key: "addTags",
          value: function addTags(tags) {
            var _this195 = this;

            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tags) return [];
            return tags.reduce(function (result, tag) {
              if (tag) {
                result.push(_this195._getOrCreateElement(tag, forceCreation));
              }

              return result;
            }, []);
          }
          /**
           * Retrieves a `<meta>` tag element in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching element, if any.
           */

        }, {
          key: "getTag",
          value: function getTag(attrSelector) {
            if (!attrSelector) return null;
            return this._doc.querySelector("meta[".concat(attrSelector, "]")) || null;
          }
          /**
           * Retrieves a set of `<meta>` tag elements in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching elements, if any.
           */

        }, {
          key: "getTags",
          value: function getTags(attrSelector) {
            if (!attrSelector) return [];

            var list
            /*NodeList*/
            = this._doc.querySelectorAll("meta[".concat(attrSelector, "]"));

            return list ? [].slice.call(list) : [];
          }
          /**
           * Modifies an existing `<meta>` tag element in the current HTML document.
           * @param tag The tag description with which to replace the existing tag content.
           * @param selector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           * If not supplied, matches a tag with the same `name` or `property` attribute value as the
           * replacement tag.
           * @return The modified element.
           */

        }, {
          key: "updateTag",
          value: function updateTag(tag, selector) {
            if (!tag) return null;
            selector = selector || this._parseSelector(tag);
            var meta = this.getTag(selector);

            if (meta) {
              return this._setMetaElementAttributes(tag, meta);
            }

            return this._getOrCreateElement(tag, true);
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param attrSelector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           */

        }, {
          key: "removeTag",
          value: function removeTag(attrSelector) {
            this.removeTagElement(this.getTag(attrSelector));
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param meta The tag definition to match against to identify an existing tag.
           */

        }, {
          key: "removeTagElement",
          value: function removeTagElement(meta) {
            if (meta) {
              this._dom.remove(meta);
            }
          }
        }, {
          key: "_getOrCreateElement",
          value: function _getOrCreateElement(meta) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!forceCreation) {
              var selector = this._parseSelector(meta);

              var elem = this.getTag(selector); // It's allowed to have multiple elements with the same name so it's not enough to
              // just check that element with the same name already present on the page. We also need to
              // check if element has tag attributes

              if (elem && this._containsAttributes(meta, elem)) return elem;
            }

            var element = this._dom.createElement('meta');

            this._setMetaElementAttributes(meta, element);

            var head = this._doc.getElementsByTagName('head')[0];

            head.appendChild(element);
            return element;
          }
        }, {
          key: "_setMetaElementAttributes",
          value: function _setMetaElementAttributes(tag, el) {
            var _this196 = this;

            Object.keys(tag).forEach(function (prop) {
              return el.setAttribute(_this196._getMetaKeyMap(prop), tag[prop]);
            });
            return el;
          }
        }, {
          key: "_parseSelector",
          value: function _parseSelector(tag) {
            var attr = tag.name ? 'name' : 'property';
            return "".concat(attr, "=\"").concat(tag[attr], "\"");
          }
        }, {
          key: "_containsAttributes",
          value: function _containsAttributes(tag, elem) {
            var _this197 = this;

            return Object.keys(tag).every(function (key) {
              return elem.getAttribute(_this197._getMetaKeyMap(key)) === tag[key];
            });
          }
        }, {
          key: "_getMetaKeyMap",
          value: function _getMetaKeyMap(prop) {
            return META_KEYS_MAP[prop] || prop;
          }
        }]);

        return Meta;
      }();

      Meta.ɵfac = function Meta_Factory(t) {
        return new (t || Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      Meta.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createMeta,
        token: Meta,
        providedIn: "root"
      });

      Meta.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Meta, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: createMeta,
            deps: []
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * Mapping for MetaDefinition properties with their correct meta attribute names
       */


      var META_KEYS_MAP = {
        httpEquiv: 'http-equiv'
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Factory to create Title service.
       */

      function createTitle() {
        return new Title(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      }
      /**
       * A service that can be used to get and set the title of a current HTML document.
       *
       * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
       * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
       * (representing the `<title>` tag). Instead, this service can be used to set and get the current
       * title value.
       *
       * @publicApi
       */


      var Title = /*#__PURE__*/function () {
        function Title(_doc) {
          _classCallCheck(this, Title);

          this._doc = _doc;
        }
        /**
         * Get the title of the current HTML document.
         */


        _createClass2(Title, [{
          key: "getTitle",
          value: function getTitle() {
            return this._doc.title;
          }
          /**
           * Set the title of the current HTML document.
           * @param newTitle
           */

        }, {
          key: "setTitle",
          value: function setTitle(newTitle) {
            this._doc.title = newTitle || '';
          }
        }]);

        return Title;
      }();

      Title.ɵfac = function Title_Factory(t) {
        return new (t || Title)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      Title.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createTitle,
        token: Title,
        providedIn: "root"
      });

      Title.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Title, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: createTitle,
            deps: []
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var win = typeof window !== 'undefined' && window || {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ChangeDetectionPerfRecord = function ChangeDetectionPerfRecord(msPerTick, numTicks) {
        _classCallCheck(this, ChangeDetectionPerfRecord);

        this.msPerTick = msPerTick;
        this.numTicks = numTicks;
      };
      /**
       * Entry point for all Angular profiling-related debug tools. This object
       * corresponds to the `ng.profiler` in the dev console.
       */


      var AngularProfiler = /*#__PURE__*/function () {
        function AngularProfiler(ref) {
          _classCallCheck(this, AngularProfiler);

          this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]);
        } // tslint:disable:no-console

        /**
         * Exercises change detection in a loop and then prints the average amount of
         * time in milliseconds how long a single round of change detection takes for
         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
         * of 500 milliseconds.
         *
         * Optionally, a user may pass a `config` parameter containing a map of
         * options. Supported options are:
         *
         * `record` (boolean) - causes the profiler to record a CPU profile while
         * it exercises the change detector. Example:
         *
         * ```
         * ng.profiler.timeChangeDetection({record: true})
         * ```
         */


        _createClass2(AngularProfiler, [{
          key: "timeChangeDetection",
          value: function timeChangeDetection(config) {
            var record = config && config['record'];
            var profileName = 'Change Detection'; // Profiler is not available in Android browsers without dev tools opened

            var isProfilerAvailable = win.console.profile != null;

            if (record && isProfilerAvailable) {
              win.console.profile(profileName);
            }

            var start = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();
            var numTicks = 0;

            while (numTicks < 5 || Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow() - start < 500) {
              this.appRef.tick();
              numTicks++;
            }

            var end = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();

            if (record && isProfilerAvailable) {
              win.console.profileEnd(profileName);
            }

            var msPerTick = (end - start) / numTicks;
            win.console.log("ran ".concat(numTicks, " change detection cycles"));
            win.console.log("".concat(msPerTick.toFixed(2), " ms per check"));
            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
          }
        }]);

        return AngularProfiler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PROFILER_GLOBAL_NAME = 'profiler';
      /**
       * Enabled Angular debug tools that are accessible via your browser's
       * developer console.
       *
       * Usage:
       *
       * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
       * 1. Type `ng.` (usually the console will show auto-complete suggestion)
       * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
       *    then hit Enter.
       *
       * @publicApi
       */

      function enableDebugTools(ref) {
        exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
        return ref;
      }
      /**
       * Disables Angular tools.
       *
       * @publicApi
       */


      function disableDebugTools() {
        exportNgVar(PROFILER_GLOBAL_NAME, null);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function escapeHtml(text) {
        var escapedText = {
          '&': '&a;',
          '"': '&q;',
          '\'': '&s;',
          '<': '&l;',
          '>': '&g;'
        };
        return text.replace(/[&"'<>]/g, function (s) {
          return escapedText[s];
        });
      }

      function unescapeHtml(text) {
        var unescapedText = {
          '&a;': '&',
          '&q;': '"',
          '&s;': '\'',
          '&l;': '<',
          '&g;': '>'
        };
        return text.replace(/&[^;]+;/g, function (s) {
          return unescapedText[s];
        });
      }
      /**
       * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
       *
       * Example:
       *
       * ```
       * const COUNTER_KEY = makeStateKey<number>('counter');
       * let value = 10;
       *
       * transferState.set(COUNTER_KEY, value);
       * ```
       *
       * @publicApi
       */


      function makeStateKey(key) {
        return key;
      }
      /**
       * A key value store that is transferred from the application on the server side to the application
       * on the client side.
       *
       * `TransferState` will be available as an injectable token. To use it import
       * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
       *
       * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
       * boolean, number, string, null and non-class objects will be serialized and deserialized in a
       * non-lossy manner.
       *
       * @publicApi
       */


      var TransferState = /*#__PURE__*/function () {
        function TransferState() {
          _classCallCheck(this, TransferState);

          this.store = {};
          this.onSerializeCallbacks = {};
        }
        /** @internal */


        _createClass2(TransferState, [{
          key: "get",
          value:
          /**
           * Get the value corresponding to a key. Return `defaultValue` if key is not found.
           */
          function get(key, defaultValue) {
            return this.store[key] !== undefined ? this.store[key] : defaultValue;
          }
          /**
           * Set the value corresponding to a key.
           */

        }, {
          key: "set",
          value: function set(key, value) {
            this.store[key] = value;
          }
          /**
           * Remove a key from the store.
           */

        }, {
          key: "remove",
          value: function remove(key) {
            delete this.store[key];
          }
          /**
           * Test whether a key exists in the store.
           */

        }, {
          key: "hasKey",
          value: function hasKey(key) {
            return this.store.hasOwnProperty(key);
          }
          /**
           * Register a callback to provide the value for a key when `toJson` is called.
           */

        }, {
          key: "onSerialize",
          value: function onSerialize(key, callback) {
            this.onSerializeCallbacks[key] = callback;
          }
          /**
           * Serialize the current state of the store to JSON.
           */

        }, {
          key: "toJson",
          value: function toJson() {
            // Call the onSerialize callbacks and put those values into the store.
            for (var key in this.onSerializeCallbacks) {
              if (this.onSerializeCallbacks.hasOwnProperty(key)) {
                try {
                  this.store[key] = this.onSerializeCallbacks[key]();
                } catch (e) {
                  console.warn('Exception in onSerialize callback: ', e);
                }
              }
            }

            return JSON.stringify(this.store);
          }
        }], [{
          key: "init",
          value: function init(initState) {
            var transferState = new TransferState();
            transferState.store = initState;
            return transferState;
          }
        }]);

        return TransferState;
      }();

      TransferState.ɵfac = function TransferState_Factory(t) {
        return new (t || TransferState)();
      };

      TransferState.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: TransferState,
        factory: TransferState.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](TransferState, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [];
        }, null);
      })();

      function initTransferState(doc, appId) {
        // Locate the script tag with the JSON data transferred from the server.
        // The id of the script tag is set to the Angular appId + 'state'.
        var script = doc.getElementById(appId + '-state');
        var initialState = {};

        if (script && script.textContent) {
          try {
            // Avoid using any here as it triggers lint errors in google3 (any is not allowed).
            initialState = JSON.parse(unescapeHtml(script.textContent));
          } catch (e) {
            console.warn('Exception while restoring TransferState for app ' + appId, e);
          }
        }

        return TransferState.init(initialState);
      }
      /**
       * NgModule to install on the client side while using the `TransferState` to transfer state from
       * server to client.
       *
       * @publicApi
       */


      var BrowserTransferStateModule = function BrowserTransferStateModule() {
        _classCallCheck(this, BrowserTransferStateModule);
      };

      BrowserTransferStateModule.ɵfac = function BrowserTransferStateModule_Factory(t) {
        return new (t || BrowserTransferStateModule)();
      };

      BrowserTransferStateModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: BrowserTransferStateModule
      });
      BrowserTransferStateModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: [{
          provide: TransferState,
          useFactory: initTransferState,
          deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
        }]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserTransferStateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            providers: [{
              provide: TransferState,
              useFactory: initTransferState,
              deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Predicates for use with {@link DebugElement}'s query functions.
       *
       * @publicApi
       */


      var By = /*#__PURE__*/function () {
        function By() {
          _classCallCheck(this, By);
        }

        _createClass2(By, null, [{
          key: "all",
          value:
          /**
           * Match all nodes.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
           */
          function all() {
            return function () {
              return true;
            };
          }
          /**
           * Match elements by the given CSS selector.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
           */

        }, {
          key: "css",
          value: function css(selector) {
            return function (debugElement) {
              return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;
            };
          }
          /**
           * Match nodes that have the given directive present.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
           */

        }, {
          key: "directive",
          value: function directive(type) {
            return function (debugNode) {
              return debugNode.providerTokens.indexOf(type) !== -1;
            };
          }
        }]);

        return By;
      }();

      function elementMatches(n, selector) {
        if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isElementNode(n)) {
          return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Version"]('11.2.6');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=platform-browser.js.map

      /***/
    },

    /***/
    "jtHE":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js ***!
      \**************************************************************/

    /*! exports provided: ReplaySubject */

    /***/
    function jtHE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ReplaySubject", function () {
        return ReplaySubject;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subject */
      "XNiG");
      /* harmony import */


      var _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./scheduler/queue */
      "qgXg");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./Subscription */
      "quSY");
      /* harmony import */


      var _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./operators/observeOn */
      "pxpQ");
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      "9ppp");
      /* harmony import */


      var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./SubjectSubscription */
      "Ylt2");

      var ReplaySubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP5) {
        _inherits(ReplaySubject, _Subject__WEBPACK_IMP5);

        var _super148 = _createSuper(ReplaySubject);

        function ReplaySubject() {
          var _this198;

          var bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
          var windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
          var scheduler = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, ReplaySubject);

          _this198 = _super148.call(this);
          _this198.scheduler = scheduler;
          _this198._events = [];
          _this198._infiniteTimeWindow = false;
          _this198._bufferSize = bufferSize < 1 ? 1 : bufferSize;
          _this198._windowTime = windowTime < 1 ? 1 : windowTime;

          if (windowTime === Number.POSITIVE_INFINITY) {
            _this198._infiniteTimeWindow = true;
            _this198.next = _this198.nextInfiniteTimeWindow;
          } else {
            _this198.next = _this198.nextTimeWindow;
          }

          return _this198;
        }

        _createClass2(ReplaySubject, [{
          key: "nextInfiniteTimeWindow",
          value: function nextInfiniteTimeWindow(value) {
            if (!this.isStopped) {
              var _events = this._events;

              _events.push(value);

              if (_events.length > this._bufferSize) {
                _events.shift();
              }
            }

            _get(_getPrototypeOf(ReplaySubject.prototype), "next", this).call(this, value);
          }
        }, {
          key: "nextTimeWindow",
          value: function nextTimeWindow(value) {
            if (!this.isStopped) {
              this._events.push(new ReplayEvent(this._getNow(), value));

              this._trimBufferThenGetEvents();
            }

            _get(_getPrototypeOf(ReplaySubject.prototype), "next", this).call(this, value);
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;

            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;

            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
            } else if (this.isStopped || this.hasError) {
              subscription = _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            } else {
              this.observers.push(subscriber);
              subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__["SubjectSubscription"](this, subscriber);
            }

            if (scheduler) {
              subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__["ObserveOnSubscriber"](subscriber, scheduler));
            }

            if (_infiniteTimeWindow) {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
              }
            } else {
              for (var _i24 = 0; _i24 < len && !subscriber.closed; _i24++) {
                subscriber.next(_events[_i24].value);
              }
            }

            if (this.hasError) {
              subscriber.error(this.thrownError);
            } else if (this.isStopped) {
              subscriber.complete();
            }

            return subscription;
          }
        }, {
          key: "_getNow",
          value: function _getNow() {
            return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__["queue"]).now();
          }
        }, {
          key: "_trimBufferThenGetEvents",
          value: function _trimBufferThenGetEvents() {
            var now = this._getNow();

            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;

            while (spliceCount < eventsCount) {
              if (now - _events[spliceCount].time < _windowTime) {
                break;
              }

              spliceCount++;
            }

            if (eventsCount > _bufferSize) {
              spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }

            if (spliceCount > 0) {
              _events.splice(0, spliceCount);
            }

            return _events;
          }
        }]);

        return ReplaySubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]);

      var ReplayEvent = function ReplayEvent(time, value) {
        _classCallCheck(this, ReplayEvent);

        this.time = time;
        this.value = value;
      }; //# sourceMappingURL=ReplaySubject.js.map

      /***/

    },

    /***/
    "kJWO":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/observable.js ***!
      \******************************************************************/

    /*! exports provided: observable */

    /***/
    function kJWO(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "observable", function () {
        return observable;
      });

      var observable = function () {
        return typeof Symbol === 'function' && Symbol.observable || '@@observable';
      }(); //# sourceMappingURL=observable.js.map

      /***/

    },

    /***/
    "kU1M":
    /*!*******************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/operators/index.js ***!
      \*******************************************************/

    /*! exports provided: audit, auditTime, buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, catchError, combineAll, combineLatest, concat, concatAll, concatMap, concatMapTo, count, debounce, debounceTime, defaultIfEmpty, delay, delayWhen, dematerialize, distinct, distinctUntilChanged, distinctUntilKeyChanged, elementAt, endWith, every, exhaust, exhaustMap, expand, filter, finalize, find, findIndex, first, groupBy, ignoreElements, isEmpty, last, map, mapTo, materialize, max, merge, mergeAll, mergeMap, flatMap, mergeMapTo, mergeScan, min, multicast, observeOn, onErrorResumeNext, pairwise, partition, pluck, publish, publishBehavior, publishLast, publishReplay, race, reduce, repeat, repeatWhen, retry, retryWhen, refCount, sample, sampleTime, scan, sequenceEqual, share, shareReplay, single, skip, skipLast, skipUntil, skipWhile, startWith, subscribeOn, switchAll, switchMap, switchMapTo, take, takeLast, takeUntil, takeWhile, tap, throttle, throttleTime, throwIfEmpty, timeInterval, timeout, timeoutWith, timestamp, toArray, window, windowCount, windowTime, windowToggle, windowWhen, withLatestFrom, zip, zipAll */

    /***/
    function kU1M(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../internal/operators/audit */
      "tnsW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "audit", function () {
        return _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__["audit"];
      });
      /* harmony import */


      var _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../internal/operators/auditTime */
      "3UWI");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "auditTime", function () {
        return _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__["auditTime"];
      });
      /* harmony import */


      var _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../internal/operators/buffer */
      "p9/F");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "buffer", function () {
        return _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__["buffer"];
      });
      /* harmony import */


      var _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../internal/operators/bufferCount */
      "9M8c");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bufferCount", function () {
        return _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__["bufferCount"];
      });
      /* harmony import */


      var _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../internal/operators/bufferTime */
      "OsX3");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bufferTime", function () {
        return _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__["bufferTime"];
      });
      /* harmony import */


      var _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../internal/operators/bufferToggle */
      "FD9M");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bufferToggle", function () {
        return _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__["bufferToggle"];
      });
      /* harmony import */


      var _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../internal/operators/bufferWhen */
      "PfrF");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bufferWhen", function () {
        return _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__["bufferWhen"];
      });
      /* harmony import */


      var _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../internal/operators/catchError */
      "JIr8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "catchError", function () {
        return _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__["catchError"];
      });
      /* harmony import */


      var _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../internal/operators/combineAll */
      "7wxJ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "combineAll", function () {
        return _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__["combineAll"];
      });
      /* harmony import */


      var _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../internal/operators/combineLatest */
      "fFD9");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
        return _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__["combineLatest"];
      });
      /* harmony import */


      var _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../internal/operators/concat */
      "f29J");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "concat", function () {
        return _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__["concat"];
      });
      /* harmony import */


      var _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ../internal/operators/concatAll */
      "0EUg");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "concatAll", function () {
        return _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__["concatAll"];
      });
      /* harmony import */


      var _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ../internal/operators/concatMap */
      "bOdf");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "concatMap", function () {
        return _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__["concatMap"];
      });
      /* harmony import */


      var _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! ../internal/operators/concatMapTo */
      "q7zd");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "concatMapTo", function () {
        return _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__["concatMapTo"];
      });
      /* harmony import */


      var _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ../internal/operators/count */
      "HrJb");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "count", function () {
        return _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__["count"];
      });
      /* harmony import */


      var _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! ../internal/operators/debounce */
      "6eBy");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "debounce", function () {
        return _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__["debounce"];
      });
      /* harmony import */


      var _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! ../internal/operators/debounceTime */
      "Kj3r");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "debounceTime", function () {
        return _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__["debounceTime"];
      });
      /* harmony import */


      var _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! ../internal/operators/defaultIfEmpty */
      "xbPD");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function () {
        return _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__["defaultIfEmpty"];
      });
      /* harmony import */


      var _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! ../internal/operators/delay */
      "3E0/");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "delay", function () {
        return _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__["delay"];
      });
      /* harmony import */


      var _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! ../internal/operators/delayWhen */
      "coGc");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "delayWhen", function () {
        return _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__["delayWhen"];
      });
      /* harmony import */


      var _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! ../internal/operators/dematerialize */
      "kgNN");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "dematerialize", function () {
        return _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__["dematerialize"];
      });
      /* harmony import */


      var _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! ../internal/operators/distinct */
      "02Lk");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "distinct", function () {
        return _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__["distinct"];
      });
      /* harmony import */


      var _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! ../internal/operators/distinctUntilChanged */
      "/uUt");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function () {
        return _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__["distinctUntilChanged"];
      });
      /* harmony import */


      var _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! ../internal/operators/distinctUntilKeyChanged */
      "PZkE");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function () {
        return _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__["distinctUntilKeyChanged"];
      });
      /* harmony import */


      var _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! ../internal/operators/elementAt */
      "9ihq");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "elementAt", function () {
        return _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__["elementAt"];
      });
      /* harmony import */


      var _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! ../internal/operators/endWith */
      "0Pi8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "endWith", function () {
        return _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__["endWith"];
      });
      /* harmony import */


      var _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! ../internal/operators/every */
      "Gi4w");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "every", function () {
        return _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__["every"];
      });
      /* harmony import */


      var _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! ../internal/operators/exhaust */
      "zt7V");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "exhaust", function () {
        return _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__["exhaust"];
      });
      /* harmony import */


      var _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! ../internal/operators/exhaustMap */
      "XqQ8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "exhaustMap", function () {
        return _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__["exhaustMap"];
      });
      /* harmony import */


      var _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! ../internal/operators/expand */
      "FQpF");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "expand", function () {
        return _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__["expand"];
      });
      /* harmony import */


      var _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! ../internal/operators/filter */
      "pLZG");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "filter", function () {
        return _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__["filter"];
      });
      /* harmony import */


      var _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
      /*! ../internal/operators/finalize */
      "nYR2");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "finalize", function () {
        return _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__["finalize"];
      });
      /* harmony import */


      var _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
      /*! ../internal/operators/find */
      "cBqT");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "find", function () {
        return _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__["find"];
      });
      /* harmony import */


      var _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
      /*! ../internal/operators/findIndex */
      "K7De");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "findIndex", function () {
        return _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__["findIndex"];
      });
      /* harmony import */


      var _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
      /*! ../internal/operators/first */
      "SxV6");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "first", function () {
        return _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__["first"];
      });
      /* harmony import */


      var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
      /*! ../internal/operators/groupBy */
      "OQgR");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "groupBy", function () {
        return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__["groupBy"];
      });
      /* harmony import */


      var _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
      /*! ../internal/operators/ignoreElements */
      "4A3s");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ignoreElements", function () {
        return _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__["ignoreElements"];
      });
      /* harmony import */


      var _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
      /*! ../internal/operators/isEmpty */
      "m2j4");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "isEmpty", function () {
        return _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__["isEmpty"];
      });
      /* harmony import */


      var _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
      /*! ../internal/operators/last */
      "NJ9Y");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "last", function () {
        return _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__["last"];
      });
      /* harmony import */


      var _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
      /*! ../internal/operators/map */
      "lJxs");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "map", function () {
        return _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__["map"];
      });
      /* harmony import */


      var _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
      /*! ../internal/operators/mapTo */
      "CqXF");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "mapTo", function () {
        return _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__["mapTo"];
      });
      /* harmony import */


      var _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
      /*! ../internal/operators/materialize */
      "dkDA");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "materialize", function () {
        return _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__["materialize"];
      });
      /* harmony import */


      var _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
      /*! ../internal/operators/max */
      "yI9Y");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "max", function () {
        return _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__["max"];
      });
      /* harmony import */


      var _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
      /*! ../internal/operators/merge */
      "q92s");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "merge", function () {
        return _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__["merge"];
      });
      /* harmony import */


      var _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
      /*! ../internal/operators/mergeAll */
      "bHdf");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "mergeAll", function () {
        return _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__["mergeAll"];
      });
      /* harmony import */


      var _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
      /*! ../internal/operators/mergeMap */
      "5+tZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "mergeMap", function () {
        return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["mergeMap"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "flatMap", function () {
        return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["flatMap"];
      });
      /* harmony import */


      var _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
      /*! ../internal/operators/mergeMapTo */
      "UXbc");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "mergeMapTo", function () {
        return _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__["mergeMapTo"];
      });
      /* harmony import */


      var _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
      /*! ../internal/operators/mergeScan */
      "51Bx");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "mergeScan", function () {
        return _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__["mergeScan"];
      });
      /* harmony import */


      var _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
      /*! ../internal/operators/min */
      "FZB8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "min", function () {
        return _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__["min"];
      });
      /* harmony import */


      var _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
      /*! ../internal/operators/multicast */
      "oB13");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "multicast", function () {
        return _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__["multicast"];
      });
      /* harmony import */


      var _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
      /*! ../internal/operators/observeOn */
      "pxpQ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "observeOn", function () {
        return _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__["observeOn"];
      });
      /* harmony import */


      var _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
      /*! ../internal/operators/onErrorResumeNext */
      "uTdr");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
        return _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__["onErrorResumeNext"];
      });
      /* harmony import */


      var _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
      /*! ../internal/operators/pairwise */
      "Zy1z");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "pairwise", function () {
        return _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__["pairwise"];
      });
      /* harmony import */


      var _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
      /*! ../internal/operators/partition */
      "A3iJ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "partition", function () {
        return _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__["partition"];
      });
      /* harmony import */


      var _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
      /*! ../internal/operators/pluck */
      "wO+i");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "pluck", function () {
        return _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__["pluck"];
      });
      /* harmony import */


      var _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
      /*! ../internal/operators/publish */
      "NfdI");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "publish", function () {
        return _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__["publish"];
      });
      /* harmony import */


      var _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
      /*! ../internal/operators/publishBehavior */
      "UGaM");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "publishBehavior", function () {
        return _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__["publishBehavior"];
      });
      /* harmony import */


      var _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
      /*! ../internal/operators/publishLast */
      "qZ0a");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "publishLast", function () {
        return _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__["publishLast"];
      });
      /* harmony import */


      var _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
      /*! ../internal/operators/publishReplay */
      "05l1");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "publishReplay", function () {
        return _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__["publishReplay"];
      });
      /* harmony import */


      var _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(
      /*! ../internal/operators/race */
      "4f8F");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "race", function () {
        return _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__["race"];
      });
      /* harmony import */


      var _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(
      /*! ../internal/operators/reduce */
      "128B");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "reduce", function () {
        return _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__["reduce"];
      });
      /* harmony import */


      var _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(
      /*! ../internal/operators/repeat */
      "/d8p");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "repeat", function () {
        return _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__["repeat"];
      });
      /* harmony import */


      var _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(
      /*! ../internal/operators/repeatWhen */
      "Gqsl");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "repeatWhen", function () {
        return _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__["repeatWhen"];
      });
      /* harmony import */


      var _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(
      /*! ../internal/operators/retry */
      "un/a");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "retry", function () {
        return _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__["retry"];
      });
      /* harmony import */


      var _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(
      /*! ../internal/operators/retryWhen */
      "MtjB");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "retryWhen", function () {
        return _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__["retryWhen"];
      });
      /* harmony import */


      var _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(
      /*! ../internal/operators/refCount */
      "x+ZX");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "refCount", function () {
        return _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__["refCount"];
      });
      /* harmony import */


      var _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(
      /*! ../internal/operators/sample */
      "c6ID");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "sample", function () {
        return _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__["sample"];
      });
      /* harmony import */


      var _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(
      /*! ../internal/operators/sampleTime */
      "1Ykd");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "sampleTime", function () {
        return _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__["sampleTime"];
      });
      /* harmony import */


      var _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(
      /*! ../internal/operators/scan */
      "Kqap");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "scan", function () {
        return _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__["scan"];
      });
      /* harmony import */


      var _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(
      /*! ../internal/operators/sequenceEqual */
      "Zyez");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "sequenceEqual", function () {
        return _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__["sequenceEqual"];
      });
      /* harmony import */


      var _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(
      /*! ../internal/operators/share */
      "w1tV");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "share", function () {
        return _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__["share"];
      });
      /* harmony import */


      var _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(
      /*! ../internal/operators/shareReplay */
      "UXun");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "shareReplay", function () {
        return _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__["shareReplay"];
      });
      /* harmony import */


      var _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(
      /*! ../internal/operators/single */
      "cx9U");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "single", function () {
        return _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__["single"];
      });
      /* harmony import */


      var _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(
      /*! ../internal/operators/skip */
      "zP0r");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "skip", function () {
        return _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__["skip"];
      });
      /* harmony import */


      var _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(
      /*! ../internal/operators/skipLast */
      "kagm");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "skipLast", function () {
        return _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__["skipLast"];
      });
      /* harmony import */


      var _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(
      /*! ../internal/operators/skipUntil */
      "vqkR");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "skipUntil", function () {
        return _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__["skipUntil"];
      });
      /* harmony import */


      var _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(
      /*! ../internal/operators/skipWhile */
      "32Ea");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "skipWhile", function () {
        return _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__["skipWhile"];
      });
      /* harmony import */


      var _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(
      /*! ../internal/operators/startWith */
      "JX91");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "startWith", function () {
        return _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__["startWith"];
      });
      /* harmony import */


      var _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(
      /*! ../internal/operators/subscribeOn */
      "tf+s");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "subscribeOn", function () {
        return _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__["subscribeOn"];
      });
      /* harmony import */


      var _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(
      /*! ../internal/operators/switchAll */
      "Y6wi");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "switchAll", function () {
        return _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__["switchAll"];
      });
      /* harmony import */


      var _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(
      /*! ../internal/operators/switchMap */
      "eIep");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "switchMap", function () {
        return _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__["switchMap"];
      });
      /* harmony import */


      var _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(
      /*! ../internal/operators/switchMapTo */
      "aGrj");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "switchMapTo", function () {
        return _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__["switchMapTo"];
      });
      /* harmony import */


      var _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(
      /*! ../internal/operators/take */
      "IzEk");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "take", function () {
        return _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__["take"];
      });
      /* harmony import */


      var _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(
      /*! ../internal/operators/takeLast */
      "BFxc");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "takeLast", function () {
        return _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__["takeLast"];
      });
      /* harmony import */


      var _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(
      /*! ../internal/operators/takeUntil */
      "1G5W");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "takeUntil", function () {
        return _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__["takeUntil"];
      });
      /* harmony import */


      var _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(
      /*! ../internal/operators/takeWhile */
      "GJmQ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "takeWhile", function () {
        return _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__["takeWhile"];
      });
      /* harmony import */


      var _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(
      /*! ../internal/operators/tap */
      "vkgz");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "tap", function () {
        return _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__["tap"];
      });
      /* harmony import */


      var _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(
      /*! ../internal/operators/throttle */
      "yuhW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "throttle", function () {
        return _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__["throttle"];
      });
      /* harmony import */


      var _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(
      /*! ../internal/operators/throttleTime */
      "gcYM");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "throttleTime", function () {
        return _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__["throttleTime"];
      });
      /* harmony import */


      var _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(
      /*! ../internal/operators/throwIfEmpty */
      "XDbj");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function () {
        return _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__["throwIfEmpty"];
      });
      /* harmony import */


      var _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(
      /*! ../internal/operators/timeInterval */
      "4hIw");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "timeInterval", function () {
        return _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__["timeInterval"];
      });
      /* harmony import */


      var _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(
      /*! ../internal/operators/timeout */
      "tS1D");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "timeout", function () {
        return _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__["timeout"];
      });
      /* harmony import */


      var _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(
      /*! ../internal/operators/timeoutWith */
      "syX2");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "timeoutWith", function () {
        return _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__["timeoutWith"];
      });
      /* harmony import */


      var _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(
      /*! ../internal/operators/timestamp */
      "r0WS");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "timestamp", function () {
        return _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__["timestamp"];
      });
      /* harmony import */


      var _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(
      /*! ../internal/operators/toArray */
      "IAdc");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "toArray", function () {
        return _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__["toArray"];
      });
      /* harmony import */


      var _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(
      /*! ../internal/operators/window */
      "mk5/");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "window", function () {
        return _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__["window"];
      });
      /* harmony import */


      var _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(
      /*! ../internal/operators/windowCount */
      "lpKW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "windowCount", function () {
        return _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__["windowCount"];
      });
      /* harmony import */


      var _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(
      /*! ../internal/operators/windowTime */
      "UHp3");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "windowTime", function () {
        return _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__["windowTime"];
      });
      /* harmony import */


      var _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(
      /*! ../internal/operators/windowToggle */
      "sTY7");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "windowToggle", function () {
        return _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__["windowToggle"];
      });
      /* harmony import */


      var _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(
      /*! ../internal/operators/windowWhen */
      "pXlZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "windowWhen", function () {
        return _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__["windowWhen"];
      });
      /* harmony import */


      var _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(
      /*! ../internal/operators/withLatestFrom */
      "zp1y");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "withLatestFrom", function () {
        return _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__["withLatestFrom"];
      });
      /* harmony import */


      var _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(
      /*! ../internal/operators/zip */
      "GjHo");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "zip", function () {
        return _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__["zip"];
      });
      /* harmony import */


      var _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(
      /*! ../internal/operators/zipAll */
      "JmF6");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "zipAll", function () {
        return _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__["zipAll"];
      }); //# sourceMappingURL=index.js.map

      /***/

    },

    /***/
    "kagm":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skipLast.js ***!
      \*******************************************************************/

    /*! exports provided: skipLast */

    /***/
    function kagm(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "skipLast", function () {
        return skipLast;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      "4I5i");

      function skipLast(count) {
        return function (source) {
          return source.lift(new SkipLastOperator(count));
        };
      }

      var SkipLastOperator = /*#__PURE__*/function () {
        function SkipLastOperator(_skipCount) {
          _classCallCheck(this, SkipLastOperator);

          this._skipCount = _skipCount;

          if (this._skipCount < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
          }
        }

        _createClass2(SkipLastOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            if (this._skipCount === 0) {
              return source.subscribe(new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](subscriber));
            } else {
              return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
            }
          }
        }]);

        return SkipLastOperator;
      }();

      var SkipLastSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_34) {
        _inherits(SkipLastSubscriber, _Subscriber__WEBPACK_34);

        var _super149 = _createSuper(SkipLastSubscriber);

        function SkipLastSubscriber(destination, _skipCount) {
          var _this199;

          _classCallCheck(this, SkipLastSubscriber);

          _this199 = _super149.call(this, destination);
          _this199._skipCount = _skipCount;
          _this199._count = 0;
          _this199._ring = new Array(_skipCount);
          return _this199;
        }

        _createClass2(SkipLastSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var skipCount = this._skipCount;
            var count = this._count++;

            if (count < skipCount) {
              this._ring[count] = value;
            } else {
              var currentIndex = count % skipCount;
              var ring = this._ring;
              var oldValue = ring[currentIndex];
              ring[currentIndex] = value;
              this.destination.next(oldValue);
            }
          }
        }]);

        return SkipLastSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skipLast.js.map

      /***/

    },

    /***/
    "kgNN":
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js ***!
      \************************************************************************/

    /*! exports provided: dematerialize */

    /***/
    function kgNN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dematerialize", function () {
        return dematerialize;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function dematerialize() {
        return function dematerializeOperatorFunction(source) {
          return source.lift(new DeMaterializeOperator());
        };
      }

      var DeMaterializeOperator = /*#__PURE__*/function () {
        function DeMaterializeOperator() {
          _classCallCheck(this, DeMaterializeOperator);
        }

        _createClass2(DeMaterializeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DeMaterializeSubscriber(subscriber));
          }
        }]);

        return DeMaterializeOperator;
      }();

      var DeMaterializeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_35) {
        _inherits(DeMaterializeSubscriber, _Subscriber__WEBPACK_35);

        var _super150 = _createSuper(DeMaterializeSubscriber);

        function DeMaterializeSubscriber(destination) {
          _classCallCheck(this, DeMaterializeSubscriber);

          return _super150.call(this, destination);
        }

        _createClass2(DeMaterializeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            value.observe(this.destination);
          }
        }]);

        return DeMaterializeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=dematerialize.js.map

      /***/

    },

    /***/
    "l5mm":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/interval.js ***!
      \********************************************************************/

    /*! exports provided: interval */

    /***/
    function l5mm(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "interval", function () {
        return interval;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isNumeric */
      "Y7HM");

      function interval() {
        var period = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];

        if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(period) || period < 0) {
          period = 0;
        }

        if (!scheduler || typeof scheduler.schedule !== 'function') {
          scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          subscriber.add(scheduler.schedule(dispatch, period, {
            subscriber: subscriber,
            counter: 0,
            period: period
          }));
          return subscriber;
        });
      }

      function dispatch(state) {
        var subscriber = state.subscriber,
            counter = state.counter,
            period = state.period;
        subscriber.next(counter);
        this.schedule({
          subscriber: subscriber,
          counter: counter + 1,
          period: period
        }, period);
      } //# sourceMappingURL=interval.js.map

      /***/

    },

    /***/
    "l7GE":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js ***!
      \****************************************************************/

    /*! exports provided: OuterSubscriber */

    /***/
    function l7GE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "OuterSubscriber", function () {
        return OuterSubscriber;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      "7o/Q");

      var OuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_36) {
        _inherits(OuterSubscriber, _Subscriber__WEBPACK_36);

        var _super151 = _createSuper(OuterSubscriber);

        function OuterSubscriber() {
          _classCallCheck(this, OuterSubscriber);

          return _super151.apply(this, arguments);
        }

        _createClass2(OuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(error, innerSub) {
            this.destination.error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(innerSub) {
            this.destination.complete();
          }
        }]);

        return OuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=OuterSubscriber.js.map

      /***/

    },

    /***/
    "lJxs":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/map.js ***!
      \**************************************************************/

    /*! exports provided: map, MapOperator */

    /***/
    function lJxs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "map", function () {
        return map;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MapOperator", function () {
        return MapOperator;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function map(project, thisArg) {
        return function mapOperation(source) {
          if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          }

          return source.lift(new MapOperator(project, thisArg));
        };
      }

      var MapOperator = /*#__PURE__*/function () {
        function MapOperator(project, thisArg) {
          _classCallCheck(this, MapOperator);

          this.project = project;
          this.thisArg = thisArg;
        }

        _createClass2(MapOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
          }
        }]);

        return MapOperator;
      }();

      var MapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_37) {
        _inherits(MapSubscriber, _Subscriber__WEBPACK_37);

        var _super152 = _createSuper(MapSubscriber);

        function MapSubscriber(destination, project, thisArg) {
          var _this200;

          _classCallCheck(this, MapSubscriber);

          _this200 = _super152.call(this, destination);
          _this200.project = project;
          _this200.count = 0;
          _this200.thisArg = thisArg || _assertThisInitialized(_this200);
          return _this200;
        }

        _createClass2(MapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;

            try {
              result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return MapSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=map.js.map

      /***/

    },

    /***/
    "lpKW":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/windowCount.js ***!
      \**********************************************************************/

    /*! exports provided: windowCount */

    /***/
    function lpKW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "windowCount", function () {
        return windowCount;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");

      function windowCount(windowSize) {
        var startWindowEvery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return function windowCountOperatorFunction(source) {
          return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
        };
      }

      var WindowCountOperator = /*#__PURE__*/function () {
        function WindowCountOperator(windowSize, startWindowEvery) {
          _classCallCheck(this, WindowCountOperator);

          this.windowSize = windowSize;
          this.startWindowEvery = startWindowEvery;
        }

        _createClass2(WindowCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
          }
        }]);

        return WindowCountOperator;
      }();

      var WindowCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_38) {
        _inherits(WindowCountSubscriber, _Subscriber__WEBPACK_38);

        var _super153 = _createSuper(WindowCountSubscriber);

        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
          var _this201;

          _classCallCheck(this, WindowCountSubscriber);

          _this201 = _super153.call(this, destination);
          _this201.destination = destination;
          _this201.windowSize = windowSize;
          _this201.startWindowEvery = startWindowEvery;
          _this201.windows = [new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]()];
          _this201.count = 0;
          destination.next(_this201.windows[0]);
          return _this201;
        }

        _createClass2(WindowCountSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;

            for (var i = 0; i < len && !this.closed; i++) {
              windows[i].next(value);
            }

            var c = this.count - windowSize + 1;

            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
              windows.shift().complete();
            }

            if (++this.count % startWindowEvery === 0 && !this.closed) {
              var _window3 = new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]();

              windows.push(_window3);
              destination.next(_window3);
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var windows = this.windows;

            if (windows) {
              while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
              }
            }

            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var windows = this.windows;

            if (windows) {
              while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
              }
            }

            this.destination.complete();
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.count = 0;
            this.windows = null;
          }
        }]);

        return WindowCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=windowCount.js.map

      /***/

    },

    /***/
    "m2j4":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js ***!
      \******************************************************************/

    /*! exports provided: isEmpty */

    /***/
    function m2j4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isEmpty", function () {
        return isEmpty;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function isEmpty() {
        return function (source) {
          return source.lift(new IsEmptyOperator());
        };
      }

      var IsEmptyOperator = /*#__PURE__*/function () {
        function IsEmptyOperator() {
          _classCallCheck(this, IsEmptyOperator);
        }

        _createClass2(IsEmptyOperator, [{
          key: "call",
          value: function call(observer, source) {
            return source.subscribe(new IsEmptySubscriber(observer));
          }
        }]);

        return IsEmptyOperator;
      }();

      var IsEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_39) {
        _inherits(IsEmptySubscriber, _Subscriber__WEBPACK_39);

        var _super154 = _createSuper(IsEmptySubscriber);

        function IsEmptySubscriber(destination) {
          _classCallCheck(this, IsEmptySubscriber);

          return _super154.call(this, destination);
        }

        _createClass2(IsEmptySubscriber, [{
          key: "notifyComplete",
          value: function notifyComplete(isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.notifyComplete(false);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.notifyComplete(true);
          }
        }]);

        return IsEmptySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=isEmpty.js.map

      /***/

    },

    /***/
    "mCNh":
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/pipe.js ***!
      \**********************************************************/

    /*! exports provided: pipe, pipeFromArray */

    /***/
    function mCNh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pipe", function () {
        return pipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pipeFromArray", function () {
        return pipeFromArray;
      });
      /* harmony import */


      var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./identity */
      "SpAZ");

      function pipe() {
        for (var _len45 = arguments.length, fns = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {
          fns[_key45] = arguments[_key45];
        }

        return pipeFromArray(fns);
      }

      function pipeFromArray(fns) {
        if (fns.length === 0) {
          return _identity__WEBPACK_IMPORTED_MODULE_0__["identity"];
        }

        if (fns.length === 1) {
          return fns[0];
        }

        return function piped(input) {
          return fns.reduce(function (prev, fn) {
            return fn(prev);
          }, input);
        };
      } //# sourceMappingURL=pipe.js.map

      /***/

    },

    /***/
    "mk5/":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/window.js ***!
      \*****************************************************************/

    /*! exports provided: window */

    /***/
    function mk5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "window", function () {
        return window;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function window(windowBoundaries) {
        return function windowOperatorFunction(source) {
          return source.lift(new WindowOperator(windowBoundaries));
        };
      }

      var WindowOperator = /*#__PURE__*/function () {
        function WindowOperator(windowBoundaries) {
          _classCallCheck(this, WindowOperator);

          this.windowBoundaries = windowBoundaries;
        }

        _createClass2(WindowOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var windowSubscriber = new WindowSubscriber(subscriber);
            var sourceSubscription = source.subscribe(windowSubscriber);

            if (!sourceSubscription.closed) {
              windowSubscriber.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["innerSubscribe"])(this.windowBoundaries, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleInnerSubscriber"](windowSubscriber)));
            }

            return sourceSubscription;
          }
        }]);

        return WindowOperator;
      }();

      var WindowSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP15) {
        _inherits(WindowSubscriber, _innerSubscribe__WEBP15);

        var _super155 = _createSuper(WindowSubscriber);

        function WindowSubscriber(destination) {
          var _this202;

          _classCallCheck(this, WindowSubscriber);

          _this202 = _super155.call(this, destination);
          _this202.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
          destination.next(_this202.window);
          return _this202;
        }

        _createClass2(WindowSubscriber, [{
          key: "notifyNext",
          value: function notifyNext() {
            this.openWindow();
          }
        }, {
          key: "notifyError",
          value: function notifyError(error) {
            this._error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this._complete();
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.window.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.window.error(err);
            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.window.complete();
            this.destination.complete();
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.window = null;
          }
        }, {
          key: "openWindow",
          value: function openWindow() {
            var prevWindow = this.window;

            if (prevWindow) {
              prevWindow.complete();
            }

            var destination = this.destination;
            var newWindow = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
            destination.next(newWindow);
          }
        }]);

        return WindowSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__["SimpleOuterSubscriber"]); //# sourceMappingURL=window.js.map

      /***/

    },

    /***/
    "mlxB":
    /*!************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isDate.js ***!
      \************************************************************/

    /*! exports provided: isDate */

    /***/
    function mlxB(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isDate", function () {
        return isDate;
      });

      function isDate(value) {
        return value instanceof Date && !isNaN(+value);
      } //# sourceMappingURL=isDate.js.map

      /***/

    },

    /***/
    "n6bG":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isFunction.js ***!
      \****************************************************************/

    /*! exports provided: isFunction */

    /***/
    function n6bG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFunction", function () {
        return isFunction;
      });

      function isFunction(x) {
        return typeof x === 'function';
      } //# sourceMappingURL=isFunction.js.map

      /***/

    },

    /***/
    "nLfN":
    /*!*********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js ***!
      \*********************************************************************/

    /*! exports provided: Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior */

    /***/
    function nLfN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Platform", function () {
        return Platform;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PlatformModule", function () {
        return PlatformModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_getShadowRoot", function () {
        return _getShadowRoot;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "_supportsShadowDom", function () {
        return _supportsShadowDom;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getRtlScrollAxisType", function () {
        return getRtlScrollAxisType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getSupportedInputTypes", function () {
        return getSupportedInputTypes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "normalizePassiveListenerOptions", function () {
        return normalizePassiveListenerOptions;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "supportsPassiveEventListeners", function () {
        return supportsPassiveEventListeners;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "supportsScrollBehavior", function () {
        return supportsScrollBehavior;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Whether the current platform supports the V8 Break Iterator. The V8 check
      // is necessary to detect all Blink based browsers.


      var hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
      // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
      // the consumer is providing a polyfilled `Map`. See:
      // https://github.com/Microsoft/ChakraCore/issues/3189
      // https://github.com/angular/components/issues/15687

      try {
        hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;
      } catch (_a) {
        hasV8BreakIterator = false;
      }
      /**
       * Service to detect the current platform by comparing the userAgent strings and
       * checking browser-specific global properties.
       */


      var Platform = function Platform(_platformId) {
        _classCallCheck(this, Platform);

        this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed
        // without the navigator, the following checks will fail. This is preferred because
        // sometimes the Document may be shimmed without the user's knowledge or intention

        /** Whether the Angular application is being rendered in the browser. */

        this.isBrowser = this._platformId ? Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) : typeof document === 'object' && !!document;
        /** Whether the current browser is Microsoft Edge. */

        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
        /** Whether the current rendering engine is Microsoft Trident. */

        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.

        /** Whether the current rendering engine is Blink. */

        this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
        // ensure that Webkit runs standalone and is not used as another engine's base.

        /** Whether the current rendering engine is WebKit. */

        this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
        /** Whether the current platform is Apple iOS. */

        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify
        // them self as Gecko-like browsers and modify the userAgent's according to that.
        // Since we only cover one explicit Firefox case, we can simply check for Firefox
        // instead of having an unstable check for Gecko.

        /** Whether the current browser is Firefox. */

        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
        /** Whether the current platform is Android. */
        // Trident on mobile adds the android platform to the userAgent to trick detections.

        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
        // Safari browser should also use Webkit as its layout engine.

        /** Whether the current browser is Safari. */

        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
      };

      Platform.ɵfac = function Platform_Factory(t) {
        return new (t || Platform)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]));
      };

      Platform.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function Platform_Factory() {
          return new Platform(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]));
        },
        token: Platform,
        providedIn: "root"
      });

      Platform.ctorParameters = function () {
        return [{
          type: Object,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Platform, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: Object,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PlatformModule = function PlatformModule() {
        _classCallCheck(this, PlatformModule);
      };

      PlatformModule.ɵfac = function PlatformModule_Factory(t) {
        return new (t || PlatformModule)();
      };

      PlatformModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: PlatformModule
      });
      PlatformModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PlatformModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{}]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Cached result Set of input types support by the current browser. */


      var supportedInputTypes;
      /** Types of `<input>` that *might* be supported. */

      var candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
      // first changing it to something else:
      // The specified value "" does not conform to the required format.
      // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
      'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
      /** @returns The input types supported by this browser. */

      function getSupportedInputTypes() {
        // Result is cached.
        if (supportedInputTypes) {
          return supportedInputTypes;
        } // We can't check if an input type is not supported until we're on the browser, so say that
        // everything is supported when not on the browser. We don't use `Platform` here since it's
        // just a helper function and can't inject it.


        if (typeof document !== 'object' || !document) {
          supportedInputTypes = new Set(candidateInputTypes);
          return supportedInputTypes;
        }

        var featureTestInput = document.createElement('input');
        supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {
          featureTestInput.setAttribute('type', value);
          return featureTestInput.type === value;
        }));
        return supportedInputTypes;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Cached result of whether the user's browser supports passive event listeners. */


      var supportsPassiveEvents;
      /**
       * Checks whether the user's browser supports passive event listeners.
       * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
       */

      function supportsPassiveEventListeners() {
        if (supportsPassiveEvents == null && typeof window !== 'undefined') {
          try {
            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
              get: function get() {
                return supportsPassiveEvents = true;
              }
            }));
          } finally {
            supportsPassiveEvents = supportsPassiveEvents || false;
          }
        }

        return supportsPassiveEvents;
      }
      /**
       * Normalizes an `AddEventListener` object to something that can be passed
       * to `addEventListener` on any browser, no matter whether it supports the
       * `options` parameter.
       * @param options Object to be normalized.
       */


      function normalizePassiveListenerOptions(options) {
        return supportsPassiveEventListeners() ? options : !!options.capture;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */


      var rtlScrollAxisType;
      /** Cached result of the check that indicates whether the browser supports scroll behaviors. */

      var scrollBehaviorSupported;
      /** Check whether the browser supports scroll behaviors. */

      function supportsScrollBehavior() {
        if (scrollBehaviorSupported == null) {
          // If we're not in the browser, it can't be supported.
          if (typeof document !== 'object' || !document) {
            scrollBehaviorSupported = false;
            return scrollBehaviorSupported;
          } // If the element can have a `scrollBehavior` style, we can be sure that it's supported.


          if ('scrollBehavior' in document.documentElement.style) {
            scrollBehaviorSupported = true;
          } else {
            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's
            // supported but it doesn't handle scroll behavior, or it has been polyfilled.
            var scrollToFunction = Element.prototype.scrollTo;

            if (scrollToFunction) {
              // We can detect if the function has been polyfilled by calling `toString` on it. Native
              // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get
              // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider
              // polyfilled functions as supporting scroll behavior.
              scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
            } else {
              scrollBehaviorSupported = false;
            }
          }
        }

        return scrollBehaviorSupported;
      }
      /**
       * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
       * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
       */


      function getRtlScrollAxisType() {
        // We can't check unless we're on the browser. Just assume 'normal' if we're not.
        if (typeof document !== 'object' || !document) {
          return 0
          /* NORMAL */
          ;
        }

        if (rtlScrollAxisType == null) {
          // Create a 1px wide scrolling container and a 2px wide content element.
          var scrollContainer = document.createElement('div');
          var containerStyle = scrollContainer.style;
          scrollContainer.dir = 'rtl';
          containerStyle.width = '1px';
          containerStyle.overflow = 'auto';
          containerStyle.visibility = 'hidden';
          containerStyle.pointerEvents = 'none';
          containerStyle.position = 'absolute';
          var content = document.createElement('div');
          var contentStyle = content.style;
          contentStyle.width = '2px';
          contentStyle.height = '1px';
          scrollContainer.appendChild(content);
          document.body.appendChild(scrollContainer);
          rtlScrollAxisType = 0
          /* NORMAL */
          ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
          // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
          // dealing with one of the other two types of browsers.

          if (scrollContainer.scrollLeft === 0) {
            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
            // return 0 when we read it again.
            scrollContainer.scrollLeft = 1;
            rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1
            /* NEGATED */
            : 2
            /* INVERTED */
            ;
          }

          scrollContainer.parentNode.removeChild(scrollContainer);
        }

        return rtlScrollAxisType;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var shadowDomIsSupported;
      /** Checks whether the user's browser support Shadow DOM. */

      function _supportsShadowDom() {
        if (shadowDomIsSupported == null) {
          var head = typeof document !== 'undefined' ? document.head : null;
          shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
        }

        return shadowDomIsSupported;
      }
      /** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */


      function _getShadowRoot(element) {
        if (_supportsShadowDom()) {
          var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some
          // teams have been able to hit this code path on unsupported browsers.

          if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
            return rootNode;
          }
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=platform.js.map

      /***/

    },

    /***/
    "nYR2":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/finalize.js ***!
      \*******************************************************************/

    /*! exports provided: finalize */

    /***/
    function nYR2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "finalize", function () {
        return finalize;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");

      function finalize(callback) {
        return function (source) {
          return source.lift(new FinallyOperator(callback));
        };
      }

      var FinallyOperator = /*#__PURE__*/function () {
        function FinallyOperator(callback) {
          _classCallCheck(this, FinallyOperator);

          this.callback = callback;
        }

        _createClass2(FinallyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new FinallySubscriber(subscriber, this.callback));
          }
        }]);

        return FinallyOperator;
      }();

      var FinallySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_40) {
        _inherits(FinallySubscriber, _Subscriber__WEBPACK_40);

        var _super156 = _createSuper(FinallySubscriber);

        function FinallySubscriber(destination, callback) {
          var _this203;

          _classCallCheck(this, FinallySubscriber);

          _this203 = _super156.call(this, destination);

          _this203.add(new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"](callback));

          return _this203;
        }

        return FinallySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=finalize.js.map

      /***/

    },

    /***/
    "ngJS":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js ***!
      \**********************************************************************/

    /*! exports provided: subscribeToArray */

    /***/
    function ngJS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeToArray", function () {
        return subscribeToArray;
      });

      var subscribeToArray = function subscribeToArray(array) {
        return function (subscriber) {
          for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
          }

          subscriber.complete();
        };
      }; //# sourceMappingURL=subscribeToArray.js.map

      /***/

    },

    /***/
    "oB13":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/multicast.js ***!
      \********************************************************************/

    /*! exports provided: multicast, MulticastOperator */

    /***/
    function oB13(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "multicast", function () {
        return multicast;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MulticastOperator", function () {
        return MulticastOperator;
      });
      /* harmony import */


      var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/ConnectableObservable */
      "EQ5u");

      function multicast(subjectOrSubjectFactory, selector) {
        return function multicastOperatorFunction(source) {
          var subjectFactory;

          if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
          } else {
            subjectFactory = function subjectFactory() {
              return subjectOrSubjectFactory;
            };
          }

          if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
          }

          var connectable = Object.create(source, _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__["connectableObservableDescriptor"]);
          connectable.source = source;
          connectable.subjectFactory = subjectFactory;
          return connectable;
        };
      }

      var MulticastOperator = /*#__PURE__*/function () {
        function MulticastOperator(subjectFactory, selector) {
          _classCallCheck(this, MulticastOperator);

          this.subjectFactory = subjectFactory;
          this.selector = selector;
        }

        _createClass2(MulticastOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
          }
        }]);

        return MulticastOperator;
      }(); //# sourceMappingURL=multicast.js.map

      /***/

    },

    /***/
    "ofXK":
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js ***!
      \**********************************************************************/

    /*! exports provided: APP_BASE_HREF, AsyncPipe, CommonModule, CurrencyPipe, DOCUMENT, DatePipe, DecimalPipe, FormStyle, FormatWidth, HashLocationStrategy, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LOCATION_INITIALIZED, Location, LocationStrategy, LowerCasePipe, NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgLocaleLocalization, NgLocalization, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NumberFormatStyle, NumberSymbol, PathLocationStrategy, PercentPipe, PlatformLocation, Plural, SlicePipe, TitleCasePipe, TranslationWidth, UpperCasePipe, VERSION, ViewportScroller, WeekDay, formatCurrency, formatDate, formatNumber, formatPercent, getCurrencySymbol, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleDirection, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleFirstDayOfWeek, getLocaleId, getLocaleMonthNames, getLocaleNumberFormat, getLocaleNumberSymbol, getLocalePluralCase, getLocaleTimeFormat, getLocaleWeekEndRange, getNumberOfCurrencyDigits, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, registerLocaleData, ɵBrowserPlatformLocation, ɵDomAdapter, ɵNullViewportScroller, ɵPLATFORM_BROWSER_ID, ɵPLATFORM_SERVER_ID, ɵPLATFORM_WORKER_APP_ID, ɵPLATFORM_WORKER_UI_ID, ɵangular_packages_common_common_a, ɵangular_packages_common_common_b, ɵangular_packages_common_common_c, ɵangular_packages_common_common_d, ɵangular_packages_common_common_e, ɵangular_packages_common_common_f, ɵgetDOM, ɵparseCookieValue, ɵsetRootDomAdapter */

    /***/
    function ofXK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APP_BASE_HREF", function () {
        return APP_BASE_HREF;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsyncPipe", function () {
        return AsyncPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CommonModule", function () {
        return CommonModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CurrencyPipe", function () {
        return CurrencyPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DOCUMENT", function () {
        return DOCUMENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatePipe", function () {
        return DatePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DecimalPipe", function () {
        return DecimalPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormStyle", function () {
        return FormStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormatWidth", function () {
        return FormatWidth;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HashLocationStrategy", function () {
        return HashLocationStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "I18nPluralPipe", function () {
        return I18nPluralPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "I18nSelectPipe", function () {
        return I18nSelectPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JsonPipe", function () {
        return JsonPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KeyValuePipe", function () {
        return KeyValuePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LOCATION_INITIALIZED", function () {
        return LOCATION_INITIALIZED;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Location", function () {
        return Location;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LocationStrategy", function () {
        return LocationStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LowerCasePipe", function () {
        return LowerCasePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgClass", function () {
        return NgClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgComponentOutlet", function () {
        return NgComponentOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgForOf", function () {
        return NgForOf;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgForOfContext", function () {
        return NgForOfContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgIf", function () {
        return NgIf;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgIfContext", function () {
        return NgIfContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgLocaleLocalization", function () {
        return NgLocaleLocalization;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgLocalization", function () {
        return NgLocalization;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgPlural", function () {
        return NgPlural;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgPluralCase", function () {
        return NgPluralCase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgStyle", function () {
        return NgStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgSwitch", function () {
        return NgSwitch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgSwitchCase", function () {
        return NgSwitchCase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgSwitchDefault", function () {
        return NgSwitchDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NgTemplateOutlet", function () {
        return NgTemplateOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberFormatStyle", function () {
        return NumberFormatStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberSymbol", function () {
        return NumberSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PathLocationStrategy", function () {
        return PathLocationStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PercentPipe", function () {
        return PercentPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PlatformLocation", function () {
        return PlatformLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Plural", function () {
        return Plural;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SlicePipe", function () {
        return SlicePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TitleCasePipe", function () {
        return TitleCasePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TranslationWidth", function () {
        return TranslationWidth;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UpperCasePipe", function () {
        return UpperCasePipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewportScroller", function () {
        return ViewportScroller;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WeekDay", function () {
        return WeekDay;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatCurrency", function () {
        return formatCurrency;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatDate", function () {
        return formatDate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatNumber", function () {
        return formatNumber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatPercent", function () {
        return formatPercent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getCurrencySymbol", function () {
        return getCurrencySymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyCode", function () {
        return getLocaleCurrencyCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyName", function () {
        return getLocaleCurrencyName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleCurrencySymbol", function () {
        return getLocaleCurrencySymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleDateFormat", function () {
        return getLocaleDateFormat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleDateTimeFormat", function () {
        return getLocaleDateTimeFormat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleDayNames", function () {
        return getLocaleDayNames;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleDayPeriods", function () {
        return getLocaleDayPeriods;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleDirection", function () {
        return getLocaleDirection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleEraNames", function () {
        return getLocaleEraNames;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriodRules", function () {
        return getLocaleExtraDayPeriodRules;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriods", function () {
        return getLocaleExtraDayPeriods;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleFirstDayOfWeek", function () {
        return getLocaleFirstDayOfWeek;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleId", function () {
        return getLocaleId;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleMonthNames", function () {
        return getLocaleMonthNames;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleNumberFormat", function () {
        return getLocaleNumberFormat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleNumberSymbol", function () {
        return getLocaleNumberSymbol;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocalePluralCase", function () {
        return getLocalePluralCase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleTimeFormat", function () {
        return getLocaleTimeFormat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLocaleWeekEndRange", function () {
        return getLocaleWeekEndRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getNumberOfCurrencyDigits", function () {
        return getNumberOfCurrencyDigits;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPlatformBrowser", function () {
        return isPlatformBrowser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPlatformServer", function () {
        return isPlatformServer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPlatformWorkerApp", function () {
        return isPlatformWorkerApp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPlatformWorkerUi", function () {
        return isPlatformWorkerUi;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "registerLocaleData", function () {
        return registerLocaleData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵBrowserPlatformLocation", function () {
        return BrowserPlatformLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵDomAdapter", function () {
        return DomAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNullViewportScroller", function () {
        return NullViewportScroller;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_BROWSER_ID", function () {
        return PLATFORM_BROWSER_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_SERVER_ID", function () {
        return PLATFORM_SERVER_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_APP_ID", function () {
        return PLATFORM_WORKER_APP_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_UI_ID", function () {
        return PLATFORM_WORKER_UI_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_a", function () {
        return useBrowserPlatformLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_b", function () {
        return createBrowserPlatformLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_c", function () {
        return createLocation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_d", function () {
        return provideLocationStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_e", function () {
        return COMMON_DIRECTIVES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_f", function () {
        return COMMON_PIPES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function () {
        return getDOM;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵparseCookieValue", function () {
        return parseCookieValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsetRootDomAdapter", function () {
        return setRootDomAdapter;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _DOM = null;

      function getDOM() {
        return _DOM;
      }

      function setDOM(adapter) {
        _DOM = adapter;
      }

      function setRootDomAdapter(adapter) {
        if (!_DOM) {
          _DOM = adapter;
        }
      }
      /* tslint:disable:requireParameterType */

      /**
       * Provides DOM operations in an environment-agnostic way.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */


      var DomAdapter = function DomAdapter() {
        _classCallCheck(this, DomAdapter);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A DI Token representing the main rendering context. In a browser this is the DOM Document.
       *
       * Note: Document might not be available in the Application Context when Application and Rendering
       * Contexts are not the same (e.g. when running the application in a Web Worker).
       *
       * @publicApi
       */


      var DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('DocumentToken');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This class should not be used directly by an application developer. Instead, use
       * {@link Location}.
       *
       * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be
       * platform-agnostic.
       * This means that we can have different implementation of `PlatformLocation` for the different
       * platforms that Angular supports. For example, `@angular/platform-browser` provides an
       * implementation specific to the browser environment, while `@angular/platform-server` provides
       * one suitable for use with server-side rendering.
       *
       * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
       * when they need to interact with the DOM APIs like pushState, popState, etc.
       *
       * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
       * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
       * Router} /
       * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`
       * class, they are all platform-agnostic.
       *
       * @publicApi
       */

      var PlatformLocation = function PlatformLocation() {
        _classCallCheck(this, PlatformLocation);
      };

      PlatformLocation.ɵfac = function PlatformLocation_Factory(t) {
        return new (t || PlatformLocation)();
      };

      PlatformLocation.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: useBrowserPlatformLocation,
        token: PlatformLocation,
        providedIn: "platform"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PlatformLocation, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'platform',
            // See #23917
            useFactory: useBrowserPlatformLocation
          }]
        }], null, null);
      })();

      function useBrowserPlatformLocation() {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BrowserPlatformLocation);
      }
      /**
       * @description
       * Indicates when a location is initialized.
       *
       * @publicApi
       */


      var LOCATION_INITIALIZED = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Location Initialized');
      /**
       * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
       * This class should not be used directly by an application developer. Instead, use
       * {@link Location}.
       */

      var BrowserPlatformLocation = /*#__PURE__*/function (_PlatformLocation) {
        _inherits(BrowserPlatformLocation, _PlatformLocation);

        var _super157 = _createSuper(BrowserPlatformLocation);

        function BrowserPlatformLocation(_doc) {
          var _this204;

          _classCallCheck(this, BrowserPlatformLocation);

          _this204 = _super157.call(this);
          _this204._doc = _doc;

          _this204._init();

          return _this204;
        } // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it

        /** @internal */


        _createClass2(BrowserPlatformLocation, [{
          key: "_init",
          value: function _init() {
            this.location = getDOM().getLocation();
            this._history = getDOM().getHistory();
          }
        }, {
          key: "getBaseHrefFromDOM",
          value: function getBaseHrefFromDOM() {
            return getDOM().getBaseHref(this._doc);
          }
        }, {
          key: "onPopState",
          value: function onPopState(fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
          }
        }, {
          key: "onHashChange",
          value: function onHashChange(fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
          }
        }, {
          key: "href",
          get: function get() {
            return this.location.href;
          }
        }, {
          key: "protocol",
          get: function get() {
            return this.location.protocol;
          }
        }, {
          key: "hostname",
          get: function get() {
            return this.location.hostname;
          }
        }, {
          key: "port",
          get: function get() {
            return this.location.port;
          }
        }, {
          key: "pathname",
          get: function get() {
            return this.location.pathname;
          },
          set: function set(newPath) {
            this.location.pathname = newPath;
          }
        }, {
          key: "search",
          get: function get() {
            return this.location.search;
          }
        }, {
          key: "hash",
          get: function get() {
            return this.location.hash;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url) {
            if (supportsState()) {
              this._history.pushState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url) {
            if (supportsState()) {
              this._history.replaceState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "forward",
          value: function forward() {
            this._history.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._history.back();
          }
        }, {
          key: "getState",
          value: function getState() {
            return this._history.state;
          }
        }]);

        return BrowserPlatformLocation;
      }(PlatformLocation);

      BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) {
        return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DOCUMENT));
      };

      BrowserPlatformLocation.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createBrowserPlatformLocation,
        token: BrowserPlatformLocation,
        providedIn: "platform"
      });

      BrowserPlatformLocation.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserPlatformLocation, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'platform',
            // See #23917
            useFactory: createBrowserPlatformLocation
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [DOCUMENT]
            }]
          }];
        }, null);
      })();

      function supportsState() {
        return !!window.history.pushState;
      }

      function createBrowserPlatformLocation() {
        return new BrowserPlatformLocation(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */


      function joinWithSlash(start, end) {
        if (start.length == 0) {
          return end;
        }

        if (end.length == 0) {
          return start;
        }

        var slashes = 0;

        if (start.endsWith('/')) {
          slashes++;
        }

        if (end.startsWith('/')) {
          slashes++;
        }

        if (slashes == 2) {
          return start + end.substring(1);
        }

        if (slashes == 1) {
          return start + end;
        }

        return start + '/' + end;
      }
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */


      function stripTrailingSlash(url) {
        var match = url.match(/#|\?|$/);
        var pathEndIdx = match && match.index || url.length;
        var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
      }
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */


      function normalizeQueryParams(params) {
        return params && params[0] !== '?' ? '?' + params : params;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Enables the `Location` service to read route state from the browser's URL.
       * Angular provides two strategies:
       * `HashLocationStrategy` and `PathLocationStrategy`.
       *
       * Applications should use the `Router` or `Location` services to
       * interact with application route state.
       *
       * For instance, `HashLocationStrategy` produces URLs like
       * <code class="no-auto-link">http://example.com#/foo</code>,
       * and `PathLocationStrategy` produces
       * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
       *
       * See these two classes for more.
       *
       * @publicApi
       */


      var LocationStrategy = function LocationStrategy() {
        _classCallCheck(this, LocationStrategy);
      };

      LocationStrategy.ɵfac = function LocationStrategy_Factory(t) {
        return new (t || LocationStrategy)();
      };

      LocationStrategy.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: provideLocationStrategy,
        token: LocationStrategy,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root',
            useFactory: provideLocationStrategy
          }]
        }], null, null);
      })();

      function provideLocationStrategy(platformLocation) {
        // See #23917
        var location = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT).location;
        return new PathLocationStrategy(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation), location && location.origin || '');
      }
      /**
       * A predefined [DI token](guide/glossary#di-token) for the base href
       * to be used with the `PathLocationStrategy`.
       * The base href is the URL prefix that should be preserved when generating
       * and recognizing URLs.
       *
       * @usageNotes
       *
       * The following example shows how to use this token to configure the root app injector
       * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
       *
       * ```typescript
       * import {Component, NgModule} from '@angular/core';
       * import {APP_BASE_HREF} from '@angular/common';
       *
       * @NgModule({
       *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
       * })
       * class AppModule {}
       * ```
       *
       * @publicApi
       */


      var APP_BASE_HREF = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('appBaseHref');
      /**
       * @description
       * A {@link LocationStrategy} used to configure the {@link Location} service to
       * represent its state in the
       * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
       * browser's URL.
       *
       * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
       * or add a `<base href>` element to the document.
       *
       * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call
       * `location.go('/foo')`, the browser's URL will become
       * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,
       * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.
       *
       * Similarly, if you add `<base href='/my/app/'/>` to the document and call
       * `location.go('/foo')`, the browser's URL will become
       * `example.com/my/app/foo`.
       *
       * Note that when using `PathLocationStrategy`, neither the query nor
       * the fragment in the `<base href>` will be preserved, as outlined
       * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
       *
       * @publicApi
       */

      var PathLocationStrategy = /*#__PURE__*/function (_LocationStrategy) {
        _inherits(PathLocationStrategy, _LocationStrategy);

        var _super158 = _createSuper(PathLocationStrategy);

        function PathLocationStrategy(_platformLocation, href) {
          var _this205;

          _classCallCheck(this, PathLocationStrategy);

          _this205 = _super158.call(this);
          _this205._platformLocation = _platformLocation;

          if (href == null) {
            href = _this205._platformLocation.getBaseHrefFromDOM();
          }

          if (href == null) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
          }

          _this205._baseHref = href;
          return _this205;
        }

        _createClass2(PathLocationStrategy, [{
          key: "onPopState",
          value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);

            this._platformLocation.onHashChange(fn);
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            return joinWithSlash(this._baseHref, internal);
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
            var hash = this._platformLocation.hash;
            return hash && includeHash ? "".concat(pathname).concat(hash) : pathname;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.pushState(state, title, externalUrl);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.replaceState(state, title, externalUrl);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }]);

        return PathLocationStrategy;
      }(LocationStrategy);

      PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) {
        return new (t || PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
      };

      PathLocationStrategy.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: PathLocationStrategy,
        factory: PathLocationStrategy.ɵfac
      });

      PathLocationStrategy.ctorParameters = function () {
        return [{
          type: PlatformLocation
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [APP_BASE_HREF]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PathLocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: PlatformLocation
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [APP_BASE_HREF]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * A {@link LocationStrategy} used to configure the {@link Location} service to
       * represent its state in the
       * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
       * of the browser's URL.
       *
       * For instance, if you call `location.go('/foo')`, the browser's URL will become
       * `example.com#/foo`.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
       *
       * @publicApi
       */


      var HashLocationStrategy = /*#__PURE__*/function (_LocationStrategy2) {
        _inherits(HashLocationStrategy, _LocationStrategy2);

        var _super159 = _createSuper(HashLocationStrategy);

        function HashLocationStrategy(_platformLocation, _baseHref) {
          var _this206;

          _classCallCheck(this, HashLocationStrategy);

          _this206 = _super159.call(this);
          _this206._platformLocation = _platformLocation;
          _this206._baseHref = '';

          if (_baseHref != null) {
            _this206._baseHref = _baseHref;
          }

          return _this206;
        }

        _createClass2(HashLocationStrategy, [{
          key: "onPopState",
          value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);

            this._platformLocation.onHashChange(fn);
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var path = this._platformLocation.hash;
            if (path == null) path = '#';
            return path.length > 0 ? path.substring(1) : path;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            var url = joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.pushState(state, title, url);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.replaceState(state, title, url);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }]);

        return HashLocationStrategy;
      }(LocationStrategy);

      HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) {
        return new (t || HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
      };

      HashLocationStrategy.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HashLocationStrategy,
        factory: HashLocationStrategy.ɵfac
      });

      HashLocationStrategy.ctorParameters = function () {
        return [{
          type: PlatformLocation
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [APP_BASE_HREF]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HashLocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: PlatformLocation
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [APP_BASE_HREF]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * A service that applications can use to interact with a browser's URL.
       *
       * Depending on the `LocationStrategy` used, `Location` persists
       * to the URL's path or the URL's hash segment.
       *
       * @usageNotes
       *
       * It's better to use the `Router#navigate` service to trigger route changes. Use
       * `Location` only if you need to interact with or create normalized URLs outside of
       * routing.
       *
       * `Location` is responsible for normalizing the URL against the application's base href.
       * A normalized URL is absolute from the URL host, includes the application's base href, and has no
       * trailing slash:
       * - `/my/app/user/123` is normalized
       * - `my/app/user/123` **is not** normalized
       * - `/my/app/user/123/` **is not** normalized
       *
       * ### Example
       *
       * <code-example path='common/location/ts/path_location_component.ts'
       * region='LocationComponent'></code-example>
       *
       * @publicApi
       */


      var Location = /*#__PURE__*/function () {
        function Location(platformStrategy, platformLocation) {
          var _this207 = this;

          _classCallCheck(this, Location);

          /** @internal */
          this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** @internal */

          this._urlChangeListeners = [];
          this._platformStrategy = platformStrategy;

          var browserBaseHref = this._platformStrategy.getBaseHref();

          this._platformLocation = platformLocation;
          this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));

          this._platformStrategy.onPopState(function (ev) {
            _this207._subject.emit({
              'url': _this207.path(true),
              'pop': true,
              'state': ev.state,
              'type': ev.type
            });
          });
        }
        /**
         * Normalizes the URL path for this location.
         *
         * @param includeHash True to include an anchor fragment in the path.
         *
         * @returns The normalized URL path.
         */
        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
        // removed.


        _createClass2(Location, [{
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            return this.normalize(this._platformStrategy.path(includeHash));
          }
          /**
           * Reports the current state of the location history.
           * @returns The current value of the `history.state` object.
           */

        }, {
          key: "getState",
          value: function getState() {
            return this._platformLocation.getState();
          }
          /**
           * Normalizes the given path and compares to the current normalized path.
           *
           * @param path The given URL path.
           * @param query Query parameters.
           *
           * @returns True if the given URL path is equal to the current normalized path, false
           * otherwise.
           */

        }, {
          key: "isCurrentPathEqualTo",
          value: function isCurrentPathEqualTo(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            return this.path() == this.normalize(path + normalizeQueryParams(query));
          }
          /**
           * Normalizes a URL path by stripping any trailing slashes.
           *
           * @param url String representing a URL.
           *
           * @returns The normalized URL string.
           */

        }, {
          key: "normalize",
          value: function normalize(url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
          }
          /**
           * Normalizes an external URL path.
           * If the given URL doesn't begin with a leading slash (`'/'`), adds one
           * before normalizing. Adds a hash if `HashLocationStrategy` is
           * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
           *
           * @param url String representing a URL.
           *
           * @returns  A normalized platform-specific URL.
           */

        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(url) {
            if (url && url[0] !== '/') {
              url = '/' + url;
            }

            return this._platformStrategy.prepareExternalUrl(url);
          } // TODO: rename this method to pushState

          /**
           * Changes the browser's URL to a normalized version of a given URL, and pushes a
           * new item onto the platform's history.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           *
           */

        }, {
          key: "go",
          value: function go(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.pushState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Changes the browser's URL to a normalized version of the given URL, and replaces
           * the top item on the platform's history stack.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           */

        }, {
          key: "replaceState",
          value: function replaceState(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.replaceState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Navigates forward in the platform's history.
           */

        }, {
          key: "forward",
          value: function forward() {
            this._platformStrategy.forward();
          }
          /**
           * Navigates back in the platform's history.
           */

        }, {
          key: "back",
          value: function back() {
            this._platformStrategy.back();
          }
          /**
           * Registers a URL change listener. Use to catch updates performed by the Angular
           * framework that are not detectible through "popstate" or "hashchange" events.
           *
           * @param fn The change handler function, which take a URL and a location history state.
           */

        }, {
          key: "onUrlChange",
          value: function onUrlChange(fn) {
            var _this208 = this;

            this._urlChangeListeners.push(fn);

            if (!this._urlChangeSubscription) {
              this._urlChangeSubscription = this.subscribe(function (v) {
                _this208._notifyUrlChangeListeners(v.url, v.state);
              });
            }
          }
          /** @internal */

        }, {
          key: "_notifyUrlChangeListeners",
          value: function _notifyUrlChangeListeners() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var state = arguments.length > 1 ? arguments[1] : undefined;

            this._urlChangeListeners.forEach(function (fn) {
              return fn(url, state);
            });
          }
          /**
           * Subscribes to the platform's `popState` events.
           *
           * @param value Event that is triggered when the state history changes.
           * @param exception The exception to throw.
           *
           * @returns Subscribed events.
           */

        }, {
          key: "subscribe",
          value: function subscribe(onNext, onThrow, onReturn) {
            return this._subject.subscribe({
              next: onNext,
              error: onThrow,
              complete: onReturn
            });
          }
        }]);

        return Location;
      }();

      Location.ɵfac = function Location_Factory(t) {
        return new (t || Location)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation));
      };
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */


      Location.normalizeQueryParams = normalizeQueryParams;
      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */

      Location.joinWithSlash = joinWithSlash;
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */

      Location.stripTrailingSlash = stripTrailingSlash;
      Location.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createLocation,
        token: Location,
        providedIn: "root"
      });

      Location.ctorParameters = function () {
        return [{
          type: LocationStrategy
        }, {
          type: PlatformLocation
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Location, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root',
            // See #23917
            useFactory: createLocation
          }]
        }], function () {
          return [{
            type: LocationStrategy
          }, {
            type: PlatformLocation
          }];
        }, null);
      })();

      function createLocation() {
        return new Location(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LocationStrategy), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation));
      }

      function _stripBaseHref(baseHref, url) {
        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
      }

      function _stripIndexHtml(url) {
        return url.replace(/\/index.html$/, '');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @internal */


      var CURRENCIES_EN = {
        'ADP': [undefined, undefined, 0],
        'AFN': [undefined, undefined, 0],
        'ALL': [undefined, undefined, 0],
        'AMD': [undefined, undefined, 2],
        'AOA': [undefined, 'Kz'],
        'ARS': [undefined, '$'],
        'AUD': ['A$', '$'],
        'BAM': [undefined, 'KM'],
        'BBD': [undefined, '$'],
        'BDT': [undefined, '৳'],
        'BHD': [undefined, undefined, 3],
        'BIF': [undefined, undefined, 0],
        'BMD': [undefined, '$'],
        'BND': [undefined, '$'],
        'BOB': [undefined, 'Bs'],
        'BRL': ['R$'],
        'BSD': [undefined, '$'],
        'BWP': [undefined, 'P'],
        'BYN': [undefined, 'р.', 2],
        'BYR': [undefined, undefined, 0],
        'BZD': [undefined, '$'],
        'CAD': ['CA$', '$', 2],
        'CHF': [undefined, undefined, 2],
        'CLF': [undefined, undefined, 4],
        'CLP': [undefined, '$', 0],
        'CNY': ['CN¥', '¥'],
        'COP': [undefined, '$', 2],
        'CRC': [undefined, '₡', 2],
        'CUC': [undefined, '$'],
        'CUP': [undefined, '$'],
        'CZK': [undefined, 'Kč', 2],
        'DJF': [undefined, undefined, 0],
        'DKK': [undefined, 'kr', 2],
        'DOP': [undefined, '$'],
        'EGP': [undefined, 'E£'],
        'ESP': [undefined, '₧', 0],
        'EUR': ['€'],
        'FJD': [undefined, '$'],
        'FKP': [undefined, '£'],
        'GBP': ['£'],
        'GEL': [undefined, '₾'],
        'GIP': [undefined, '£'],
        'GNF': [undefined, 'FG', 0],
        'GTQ': [undefined, 'Q'],
        'GYD': [undefined, '$', 2],
        'HKD': ['HK$', '$'],
        'HNL': [undefined, 'L'],
        'HRK': [undefined, 'kn'],
        'HUF': [undefined, 'Ft', 2],
        'IDR': [undefined, 'Rp', 2],
        'ILS': ['₪'],
        'INR': ['₹'],
        'IQD': [undefined, undefined, 0],
        'IRR': [undefined, undefined, 0],
        'ISK': [undefined, 'kr', 0],
        'ITL': [undefined, undefined, 0],
        'JMD': [undefined, '$'],
        'JOD': [undefined, undefined, 3],
        'JPY': ['¥', undefined, 0],
        'KHR': [undefined, '៛'],
        'KMF': [undefined, 'CF', 0],
        'KPW': [undefined, '₩', 0],
        'KRW': ['₩', undefined, 0],
        'KWD': [undefined, undefined, 3],
        'KYD': [undefined, '$'],
        'KZT': [undefined, '₸'],
        'LAK': [undefined, '₭', 0],
        'LBP': [undefined, 'L£', 0],
        'LKR': [undefined, 'Rs'],
        'LRD': [undefined, '$'],
        'LTL': [undefined, 'Lt'],
        'LUF': [undefined, undefined, 0],
        'LVL': [undefined, 'Ls'],
        'LYD': [undefined, undefined, 3],
        'MGA': [undefined, 'Ar', 0],
        'MGF': [undefined, undefined, 0],
        'MMK': [undefined, 'K', 0],
        'MNT': [undefined, '₮', 2],
        'MRO': [undefined, undefined, 0],
        'MUR': [undefined, 'Rs', 2],
        'MXN': ['MX$', '$'],
        'MYR': [undefined, 'RM'],
        'NAD': [undefined, '$'],
        'NGN': [undefined, '₦'],
        'NIO': [undefined, 'C$'],
        'NOK': [undefined, 'kr', 2],
        'NPR': [undefined, 'Rs'],
        'NZD': ['NZ$', '$'],
        'OMR': [undefined, undefined, 3],
        'PHP': [undefined, '₱'],
        'PKR': [undefined, 'Rs', 2],
        'PLN': [undefined, 'zł'],
        'PYG': [undefined, '₲', 0],
        'RON': [undefined, 'lei'],
        'RSD': [undefined, undefined, 0],
        'RUB': [undefined, '₽'],
        'RUR': [undefined, 'р.'],
        'RWF': [undefined, 'RF', 0],
        'SBD': [undefined, '$'],
        'SEK': [undefined, 'kr', 2],
        'SGD': [undefined, '$'],
        'SHP': [undefined, '£'],
        'SLL': [undefined, undefined, 0],
        'SOS': [undefined, undefined, 0],
        'SRD': [undefined, '$'],
        'SSP': [undefined, '£'],
        'STD': [undefined, undefined, 0],
        'STN': [undefined, 'Db'],
        'SYP': [undefined, '£', 0],
        'THB': [undefined, '฿'],
        'TMM': [undefined, undefined, 0],
        'TND': [undefined, undefined, 3],
        'TOP': [undefined, 'T$'],
        'TRL': [undefined, undefined, 0],
        'TRY': [undefined, '₺'],
        'TTD': [undefined, '$'],
        'TWD': ['NT$', '$', 2],
        'TZS': [undefined, undefined, 2],
        'UAH': [undefined, '₴'],
        'UGX': [undefined, undefined, 0],
        'USD': ['$'],
        'UYI': [undefined, undefined, 0],
        'UYU': [undefined, '$'],
        'UYW': [undefined, undefined, 4],
        'UZS': [undefined, undefined, 2],
        'VEF': [undefined, 'Bs', 2],
        'VND': ['₫', undefined, 0],
        'VUV': [undefined, undefined, 0],
        'XAF': ['FCFA', undefined, 0],
        'XCD': ['EC$', '$'],
        'XOF': ['CFA', undefined, 0],
        'XPF': ['CFPF', undefined, 0],
        'XXX': ['¤'],
        'YER': [undefined, undefined, 0],
        'ZAR': [undefined, 'R'],
        'ZMK': [undefined, undefined, 0],
        'ZMW': [undefined, 'ZK'],
        'ZWD': [undefined, undefined, 0]
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Format styles that can be used to represent numbers.
       * @see `getLocaleNumberFormat()`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */

      var NumberFormatStyle;

      (function (NumberFormatStyle) {
        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
        NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
      })(NumberFormatStyle || (NumberFormatStyle = {}));
      /**
       * Plurality cases used for translating plurals to different languages.
       *
       * @see `NgPlural`
       * @see `NgPluralCase`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var Plural;

      (function (Plural) {
        Plural[Plural["Zero"] = 0] = "Zero";
        Plural[Plural["One"] = 1] = "One";
        Plural[Plural["Two"] = 2] = "Two";
        Plural[Plural["Few"] = 3] = "Few";
        Plural[Plural["Many"] = 4] = "Many";
        Plural[Plural["Other"] = 5] = "Other";
      })(Plural || (Plural = {}));
      /**
       * Context-dependant translation forms for strings.
       * Typically the standalone version is for the nominative form of the word,
       * and the format version is used for the genitive case.
       * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var FormStyle;

      (function (FormStyle) {
        FormStyle[FormStyle["Format"] = 0] = "Format";
        FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
      })(FormStyle || (FormStyle = {}));
      /**
       * String widths available for translations.
       * The specific character widths are locale-specific.
       * Examples are given for the word "Sunday" in English.
       *
       * @publicApi
       */


      var TranslationWidth;

      (function (TranslationWidth) {
        /** 1 character for `en-US`. For example: 'S' */
        TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
        /** 3 characters for `en-US`. For example: 'Sun' */

        TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
        /** Full length for `en-US`. For example: "Sunday" */

        TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
        /** 2 characters for `en-US`, For example: "Su" */

        TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
      })(TranslationWidth || (TranslationWidth = {}));
      /**
       * String widths available for date-time formats.
       * The specific character widths are locale-specific.
       * Examples are given for `en-US`.
       *
       * @see `getLocaleDateFormat()`
       * @see `getLocaleTimeFormat()``
       * @see `getLocaleDateTimeFormat()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       * @publicApi
       */


      var FormatWidth;

      (function (FormatWidth) {
        /**
         * For `en-US`, 'M/d/yy, h:mm a'`
         * (Example: `6/15/15, 9:03 AM`)
         */
        FormatWidth[FormatWidth["Short"] = 0] = "Short";
        /**
         * For `en-US`, `'MMM d, y, h:mm:ss a'`
         * (Example: `Jun 15, 2015, 9:03:01 AM`)
         */

        FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
        /**
         * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
         * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
         */

        FormatWidth[FormatWidth["Long"] = 2] = "Long";
        /**
         * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
         * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
         */

        FormatWidth[FormatWidth["Full"] = 3] = "Full";
      })(FormatWidth || (FormatWidth = {}));
      /**
       * Symbols that can be used to replace placeholders in number patterns.
       * Examples are based on `en-US` values.
       *
       * @see `getLocaleNumberSymbol()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var NumberSymbol;

      (function (NumberSymbol) {
        /**
         * Decimal separator.
         * For `en-US`, the dot character.
         * Example: 2,345`.`67
         */
        NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
        /**
         * Grouping separator, typically for thousands.
         * For `en-US`, the comma character.
         * Example: 2`,`345.67
         */

        NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
        /**
         * List-item separator.
         * Example: "one, two, and three"
         */

        NumberSymbol[NumberSymbol["List"] = 2] = "List";
        /**
         * Sign for percentage (out of 100).
         * Example: 23.4%
         */

        NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
        /**
         * Sign for positive numbers.
         * Example: +23
         */

        NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
        /**
         * Sign for negative numbers.
         * Example: -23
         */

        NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
        /**
         * Computer notation for exponential value (n times a power of 10).
         * Example: 1.2E3
         */

        NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
        /**
         * Human-readable format of exponential.
         * Example: 1.2x103
         */

        NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
        /**
         * Sign for permille (out of 1000).
         * Example: 23.4‰
         */

        NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
        /**
         * Infinity, can be used with plus and minus.
         * Example: ∞, +∞, -∞
         */

        NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
        /**
         * Not a number.
         * Example: NaN
         */

        NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
        /**
         * Symbol used between time units.
         * Example: 10:52
         */

        NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
        /**
         * Decimal separator for currency values (fallback to `Decimal`).
         * Example: $2,345.67
         */

        NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
        /**
         * Group separator for currency values (fallback to `Group`).
         * Example: $2,345.67
         */

        NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
      })(NumberSymbol || (NumberSymbol = {}));
      /**
       * The value for each day of the week, based on the `en-US` locale
       *
       * @publicApi
       */


      var WeekDay;

      (function (WeekDay) {
        WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
        WeekDay[WeekDay["Monday"] = 1] = "Monday";
        WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
        WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
        WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
        WeekDay[WeekDay["Friday"] = 5] = "Friday";
        WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
      })(WeekDay || (WeekDay = {}));
      /**
       * Retrieves the locale ID from the currently loaded locale.
       * The loaded locale could be, for example, a global one rather than a regional one.
       * @param locale A locale code, such as `fr-FR`.
       * @returns The locale code. For example, `fr`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleId(locale) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId];
      }
      /**
       * Retrieves day period strings for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleDayPeriods(locale, formStyle, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var amPmData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsStandalone]];
        var amPm = getLastDefinedValue(amPmData, formStyle);
        return getLastDefinedValue(amPm, width);
      }
      /**
       * Retrieves days of the week for the given locale, using the Gregorian calendar.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized name strings.
       * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleDayNames(locale, formStyle, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var daysData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysStandalone]];
        var days = getLastDefinedValue(daysData, formStyle);
        return getLastDefinedValue(days, width);
      }
      /**
       * Retrieves months of the year for the given locale, using the Gregorian calendar.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized name strings.
       * For example,  `[January, February, ...]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleMonthNames(locale, formStyle, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var monthsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsStandalone]];
        var months = getLastDefinedValue(monthsData, formStyle);
        return getLastDefinedValue(months, width);
      }
      /**
       * Retrieves Gregorian-calendar eras for the given locale.
       * @param locale A locale code for the locale format rules to use.
       * @param width The required character width.
      
       * @returns An array of localized era strings.
       * For example, `[AD, BC]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleEraNames(locale, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var erasData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Eras];
        return getLastDefinedValue(erasData, width);
      }
      /**
       * Retrieves the first day of the week for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns A day index number, using the 0-based week-day index for `en-US`
       * (Sunday = 0, Monday = 1, ...).
       * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleFirstDayOfWeek(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].FirstDayOfWeek];
      }
      /**
       * Range of week days that are considered the week-end for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The range of day values, `[startDay, endDay]`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleWeekEndRange(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].WeekendRange];
      }
      /**
       * Retrieves a localized date-value formating string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formating string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleDateFormat(locale, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateFormat], width);
      }
      /**
       * Retrieves a localized time-value formatting string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formatting string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
      
       * @publicApi
       */


      function getLocaleTimeFormat(locale, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].TimeFormat], width);
      }
      /**
       * Retrieves a localized date-time formatting string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formatting string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleDateTimeFormat(locale, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var dateTimeFormatData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateTimeFormat];
        return getLastDefinedValue(dateTimeFormatData, width);
      }
      /**
       * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
       * @param locale The locale code.
       * @param symbol The symbol to localize.
       * @returns The character for the localized symbol.
       * @see `NumberSymbol`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleNumberSymbol(locale, symbol) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var res = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][symbol];

        if (typeof res === 'undefined') {
          if (symbol === NumberSymbol.CurrencyDecimal) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Decimal];
          } else if (symbol === NumberSymbol.CurrencyGroup) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Group];
          }
        }

        return res;
      }
      /**
       * Retrieves a number format for a given locale.
       *
       * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
       * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
       * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
       *
       * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
       * that stand for the decimal separator, and so on, and are NOT real characters.
       * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
       * your language the decimal point is written with a comma. The symbols should be replaced by the
       * local equivalents, using the appropriate `NumberSymbol` for your language.
       *
       * Here are the special characters used in number patterns:
       *
       * | Symbol | Meaning |
       * |--------|---------|
       * | . | Replaced automatically by the character used for the decimal point. |
       * | , | Replaced by the "grouping" (thousands) separator. |
       * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
       * | # | Replaced by a digit (or nothing if there aren't enough). |
       * | ¤ | Replaced by a currency symbol, such as $ or USD. |
       * | % | Marks a percent format. The % symbol may change position, but must be retained. |
       * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
       * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
       *
       * @param locale A locale code for the locale format rules to use.
       * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
       * @returns The localized format string.
       * @see `NumberFormatStyle`
       * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleNumberFormat(locale, type) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberFormats][type];
      }
      /**
       * Retrieves the symbol used to represent the currency for the main country
       * corresponding to a given locale. For example, '$' for `en-US`.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The localized symbol character,
       * or `null` if the main country cannot be determined.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleCurrencySymbol(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencySymbol] || null;
      }
      /**
       * Retrieves the name of the currency for the main country corresponding
       * to a given locale. For example, 'US Dollar' for `en-US`.
       * @param locale A locale code for the locale format rules to use.
       * @returns The currency name,
       * or `null` if the main country cannot be determined.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleCurrencyName(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencyName] || null;
      }
      /**
       * Retrieves the default currency code for the given locale.
       *
       * The default is defined as the first currency which is still in use.
       *
       * @param locale The code of the locale whose currency code we want.
       * @returns The code of the default currency for the given locale.
       *
       * @publicApi
       */


      function getLocaleCurrencyCode(locale) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocaleCurrencyCode"])(locale);
      }
      /**
       * Retrieves the currency values for a given locale.
       * @param locale A locale code for the locale format rules to use.
       * @returns The currency values.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function getLocaleCurrencies(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Currencies];
      }
      /**
       * @alias core/ɵgetLocalePluralCase
       * @publicApi
       */


      var getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocalePluralCase"];

      function checkFullData(data) {
        if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData]) {
          throw new Error("Missing extra locale data for the locale \"".concat(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId], "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more."));
        }
      }
      /**
       * Retrieves locale-specific rules used to determine which day period to use
       * when more than one period is defined for a locale.
       *
       * There is a rule for each defined day period. The
       * first rule is applied to the first day period and so on.
       * Fall back to AM/PM when no rules are available.
       *
       * A rule can specify a period as time range, or as a single time value.
       *
       * This functionality is only available when you have loaded the full locale data.
       * See the ["I18n guide"](guide/i18n#i18n-pipes).
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
       * or null if no periods are available.
       *
       * @see `getLocaleExtraDayPeriods()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleExtraDayPeriodRules(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        checkFullData(data);
        var rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][2
        /* ExtraDayPeriodsRules */
        ] || [];
        return rules.map(function (rule) {
          if (typeof rule === 'string') {
            return extractTime(rule);
          }

          return [extractTime(rule[0]), extractTime(rule[1])];
        });
      }
      /**
       * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
       * in different languages.
       * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
       *
       * This functionality is only available when you have loaded the full locale data.
       * See the ["I18n guide"](guide/i18n#i18n-pipes).
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns The translated day-period strings.
       * @see `getLocaleExtraDayPeriodRules()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLocaleExtraDayPeriods(locale, formStyle, width) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        checkFullData(data);
        var dayPeriodsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][0
        /* ExtraDayPeriodFormats */
        ], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][1
        /* ExtraDayPeriodStandalone */
        ]];
        var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
        return getLastDefinedValue(dayPeriods, width) || [];
      }
      /**
       * Retrieves the writing direction of a specified locale
       * @param locale A locale code for the locale format rules to use.
       * @publicApi
       * @returns 'rtl' or 'ltr'
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function getLocaleDirection(locale) {
        var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Directionality];
      }
      /**
       * Retrieves the first value that is defined in an array, going backwards from an index position.
       *
       * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
       * add the first value to the locale data arrays, and add other values only if they are different.
       *
       * @param data The data array to retrieve from.
       * @param index A 0-based index into the array to start from.
       * @returns The value immediately before the given index position.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLastDefinedValue(data, index) {
        for (var i = index; i > -1; i--) {
          if (typeof data[i] !== 'undefined') {
            return data[i];
          }
        }

        throw new Error('Locale data API: locale data undefined');
      }
      /**
       * Extracts the hours and minutes from a string like "15:45"
       */


      function extractTime(time) {
        var _time$split = time.split(':'),
            _time$split2 = _slicedToArray(_time$split, 2),
            h = _time$split2[0],
            m = _time$split2[1];

        return {
          hours: +h,
          minutes: +m
        };
      }
      /**
       * Retrieves the currency symbol for a given currency code.
       *
       * For example, for the default `en-US` locale, the code `USD` can
       * be represented by the narrow symbol `$` or the wide symbol `US$`.
       *
       * @param code The currency code.
       * @param format The format, `wide` or `narrow`.
       * @param locale A locale code for the locale format rules to use.
       *
       * @returns The symbol, or the currency code if no symbol is available.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getCurrencySymbol(code, format) {
        var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';
        var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
        var symbolNarrow = currency[1
        /* SymbolNarrow */
        ];

        if (format === 'narrow' && typeof symbolNarrow === 'string') {
          return symbolNarrow;
        }

        return currency[0
        /* Symbol */
        ] || code;
      } // Most currencies have cents, that's why the default is 2


      var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
      /**
       * Reports the number of decimal digits for a given currency.
       * The value depends upon the presence of cents in that particular currency.
       *
       * @param code The currency code.
       * @returns The number of decimal digits, typically 0 or 2.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */

      function getNumberOfCurrencyDigits(code) {
        var digits;
        var currency = CURRENCIES_EN[code];

        if (currency) {
          digits = currency[2
          /* NbOfDigits */
          ];
        }

        return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/; //    1        2       3         4          5          6          7          8  9     10      11

      var NAMED_FORMATS = {};
      var DATE_FORMATS_SPLIT = /((?:[^GyYMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
      var ZoneWidth;

      (function (ZoneWidth) {
        ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
        ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
        ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
        ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
      })(ZoneWidth || (ZoneWidth = {}));

      var DateType;

      (function (DateType) {
        DateType[DateType["FullYear"] = 0] = "FullYear";
        DateType[DateType["Month"] = 1] = "Month";
        DateType[DateType["Date"] = 2] = "Date";
        DateType[DateType["Hours"] = 3] = "Hours";
        DateType[DateType["Minutes"] = 4] = "Minutes";
        DateType[DateType["Seconds"] = 5] = "Seconds";
        DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
        DateType[DateType["Day"] = 7] = "Day";
      })(DateType || (DateType = {}));

      var TranslationType;

      (function (TranslationType) {
        TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
        TranslationType[TranslationType["Days"] = 1] = "Days";
        TranslationType[TranslationType["Months"] = 2] = "Months";
        TranslationType[TranslationType["Eras"] = 3] = "Eras";
      })(TranslationType || (TranslationType = {}));
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a date according to locale rules.
       *
       * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
       * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
       * @param format The date-time components to include. See `DatePipe` for details.
       * @param locale A locale code for the locale format rules to use.
       * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
       * or a standard UTC/GMT or continental US time zone abbreviation.
       * If not specified, uses host system settings.
       *
       * @returns The formatted date string.
       *
       * @see `DatePipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function formatDate(value, format, locale, timezone) {
        var date = toDate(value);
        var namedFormat = getNamedFormat(locale, format);
        format = namedFormat || format;
        var parts = [];
        var match;

        while (format) {
          match = DATE_FORMATS_SPLIT.exec(format);

          if (match) {
            parts = parts.concat(match.slice(1));
            var part = parts.pop();

            if (!part) {
              break;
            }

            format = part;
          } else {
            parts.push(format);
            break;
          }
        }

        var dateTimezoneOffset = date.getTimezoneOffset();

        if (timezone) {
          dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
          date = convertTimezoneToLocal(date, timezone, true);
        }

        var text = '';
        parts.forEach(function (value) {
          var dateFormatter = getDateFormatter(value);
          text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
        });
        return text;
      }
      /**
       * Create a new Date object with the given date value, and the time set to midnight.
       *
       * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.
       * See: https://github.com/angular/angular/issues/40377
       *
       * Note that this function returns a Date object whose time is midnight in the current locale's
       * timezone. In the future we might want to change this to be midnight in UTC, but this would be a
       * considerable breaking change.
       */


      function createDate(year, month, date) {
        // The `newDate` is set to midnight (UTC) on January 1st 1970.
        // - In PST this will be December 31st 1969 at 4pm.
        // - In GMT this will be January 1st 1970 at 1am.
        // Note that they even have different years, dates and months!
        var newDate = new Date(0); // `setFullYear()` allows years like 0001 to be set correctly. This function does not
        // change the internal time of the date.
        // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).
        // - In PST this will now be September 20, 2019 at 4pm
        // - In GMT this will now be September 20, 2019 at 1am

        newDate.setFullYear(year, month, date); // We want the final date to be at local midnight, so we reset the time.
        // - In PST this will now be September 20, 2019 at 12am
        // - In GMT this will now be September 20, 2019 at 12am

        newDate.setHours(0, 0, 0);
        return newDate;
      }

      function getNamedFormat(locale, format) {
        var localeId = getLocaleId(locale);
        NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};

        if (NAMED_FORMATS[localeId][format]) {
          return NAMED_FORMATS[localeId][format];
        }

        var formatValue = '';

        switch (format) {
          case 'shortDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
            break;

          case 'mediumDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
            break;

          case 'longDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
            break;

          case 'fullDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
            break;

          case 'shortTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
            break;

          case 'mediumTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
            break;

          case 'longTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
            break;

          case 'fullTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
            break;

          case 'short':
            var shortTime = getNamedFormat(locale, 'shortTime');
            var shortDate = getNamedFormat(locale, 'shortDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
            break;

          case 'medium':
            var mediumTime = getNamedFormat(locale, 'mediumTime');
            var mediumDate = getNamedFormat(locale, 'mediumDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
            break;

          case 'long':
            var longTime = getNamedFormat(locale, 'longTime');
            var longDate = getNamedFormat(locale, 'longDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
            break;

          case 'full':
            var fullTime = getNamedFormat(locale, 'fullTime');
            var fullDate = getNamedFormat(locale, 'fullDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
            break;
        }

        if (formatValue) {
          NAMED_FORMATS[localeId][format] = formatValue;
        }

        return formatValue;
      }

      function formatDateTime(str, opt_values) {
        if (opt_values) {
          str = str.replace(/\{([^}]+)}/g, function (match, key) {
            return opt_values != null && key in opt_values ? opt_values[key] : match;
          });
        }

        return str;
      }

      function padNumber(num, digits) {
        var minusSign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
        var trim = arguments.length > 3 ? arguments[3] : undefined;
        var negWrap = arguments.length > 4 ? arguments[4] : undefined;
        var neg = '';

        if (num < 0 || negWrap && num <= 0) {
          if (negWrap) {
            num = -num + 1;
          } else {
            num = -num;
            neg = minusSign;
          }
        }

        var strNum = String(num);

        while (strNum.length < digits) {
          strNum = '0' + strNum;
        }

        if (trim) {
          strNum = strNum.substr(strNum.length - digits);
        }

        return neg + strNum;
      }

      function formatFractionalSeconds(milliseconds, digits) {
        var strMs = padNumber(milliseconds, 3);
        return strMs.substr(0, digits);
      }
      /**
       * Returns a date formatter that transforms a date into its locale digit representation
       */


      function dateGetter(name, size) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var trim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var negWrap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        return function (date, locale) {
          var part = getDatePart(name, date);

          if (offset > 0 || part > -offset) {
            part += offset;
          }

          if (name === DateType.Hours) {
            if (part === 0 && offset === -12) {
              part = 12;
            }
          } else if (name === DateType.FractionalSeconds) {
            return formatFractionalSeconds(part, size);
          }

          var localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
          return padNumber(part, size, localeMinus, trim, negWrap);
        };
      }

      function getDatePart(part, date) {
        switch (part) {
          case DateType.FullYear:
            return date.getFullYear();

          case DateType.Month:
            return date.getMonth();

          case DateType.Date:
            return date.getDate();

          case DateType.Hours:
            return date.getHours();

          case DateType.Minutes:
            return date.getMinutes();

          case DateType.Seconds:
            return date.getSeconds();

          case DateType.FractionalSeconds:
            return date.getMilliseconds();

          case DateType.Day:
            return date.getDay();

          default:
            throw new Error("Unknown DateType value \"".concat(part, "\"."));
        }
      }
      /**
       * Returns a date formatter that transforms a date into its locale string representation
       */


      function dateStrGetter(name, width) {
        var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FormStyle.Format;
        var extended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        return function (date, locale) {
          return getDateTranslation(date, locale, name, width, form, extended);
        };
      }
      /**
       * Returns the locale translation of a date for a given form, type and width
       */


      function getDateTranslation(date, locale, name, width, form, extended) {
        switch (name) {
          case TranslationType.Months:
            return getLocaleMonthNames(locale, form, width)[date.getMonth()];

          case TranslationType.Days:
            return getLocaleDayNames(locale, form, width)[date.getDay()];

          case TranslationType.DayPeriods:
            var currentHours = date.getHours();
            var currentMinutes = date.getMinutes();

            if (extended) {
              var rules = getLocaleExtraDayPeriodRules(locale);
              var dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
              var index = rules.findIndex(function (rule) {
                if (Array.isArray(rule)) {
                  // morning, afternoon, evening, night
                  var _rule = _slicedToArray(rule, 2),
                      from = _rule[0],
                      to = _rule[1];

                  var afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;
                  var beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes; // We must account for normal rules that span a period during the day (e.g. 6am-9am)
                  // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.
                  // 10pm - 5am) where `from` is greater (later!) than `to`.
                  //
                  // In the first case the current time must be BOTH after `from` AND before `to`
                  // (e.g. 8am is after 6am AND before 10am).
                  //
                  // In the second case the current time must be EITHER after `from` OR before `to`
                  // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is
                  // after 10pm).

                  if (from.hours < to.hours) {
                    if (afterFrom && beforeTo) {
                      return true;
                    }
                  } else if (afterFrom || beforeTo) {
                    return true;
                  }
                } else {
                  // noon or midnight
                  if (rule.hours === currentHours && rule.minutes === currentMinutes) {
                    return true;
                  }
                }

                return false;
              });

              if (index !== -1) {
                return dayPeriods[index];
              }
            } // if no rules for the day periods, we use am/pm by default


            return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];

          case TranslationType.Eras:
            return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];

          default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            var unexpected = name;
            throw new Error("unexpected translation type ".concat(unexpected));
        }
      }
      /**
       * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
       * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
       * extended = +04:30)
       */


      function timeZoneGetter(width) {
        return function (date, locale, offset) {
          var zone = -1 * offset;
          var minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
          var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);

          switch (width) {
            case ZoneWidth.Short:
              return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);

            case ZoneWidth.ShortGMT:
              return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);

            case ZoneWidth.Long:
              return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);

            case ZoneWidth.Extended:
              if (offset === 0) {
                return 'Z';
              } else {
                return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);
              }

            default:
              throw new Error("Unknown zone width \"".concat(width, "\""));
          }
        };
      }

      var JANUARY = 0;
      var THURSDAY = 4;

      function getFirstThursdayOfYear(year) {
        var firstDayOfYear = createDate(year, JANUARY, 1).getDay();
        return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
      }

      function getThursdayThisWeek(datetime) {
        return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
      }

      function weekGetter(size) {
        var monthBased = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return function (date, locale) {
          var result;

          if (monthBased) {
            var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
            var today = date.getDate();
            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
          } else {
            var thisThurs = getThursdayThisWeek(date); // Some days of a year are part of next year according to ISO 8601.
            // Compute the firstThurs from the year of this week's Thursday

            var firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
            var diff = thisThurs.getTime() - firstThurs.getTime();
            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
          }

          return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
        };
      }
      /**
       * Returns a date formatter that provides the week-numbering year for the input date.
       */


      function weekNumberingYearGetter(size) {
        var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return function (date, locale) {
          var thisThurs = getThursdayThisWeek(date);
          var weekNumberingYear = thisThurs.getFullYear();
          return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
        };
      }

      var DATE_FORMATS = {}; // Based on CLDR formats:
      // See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
      // See also explanations: http://cldr.unicode.org/translation/date-time
      // TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x

      function getDateFormatter(format) {
        if (DATE_FORMATS[format]) {
          return DATE_FORMATS[format];
        }

        var formatter;

        switch (format) {
          // Era name (AD/BC)
          case 'G':
          case 'GG':
          case 'GGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
            break;

          case 'GGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
            break;

          case 'GGGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
            break;
          // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)

          case 'y':
            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
            break;
          // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)

          case 'yy':
            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
            break;
          // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)

          case 'yyy':
            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
            break;
          // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)

          case 'yyyy':
            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
            break;
          // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)

          case 'Y':
            formatter = weekNumberingYearGetter(1);
            break;
          // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
          // 2010 => 10)

          case 'YY':
            formatter = weekNumberingYearGetter(2, true);
            break;
          // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
          // 2010 => 2010)

          case 'YYY':
            formatter = weekNumberingYearGetter(3);
            break;
          // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)

          case 'YYYY':
            formatter = weekNumberingYearGetter(4);
            break;
          // Month of the year (1-12), numeric

          case 'M':
          case 'L':
            formatter = dateGetter(DateType.Month, 1, 1);
            break;

          case 'MM':
          case 'LL':
            formatter = dateGetter(DateType.Month, 2, 1);
            break;
          // Month of the year (January, ...), string, format

          case 'MMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
            break;

          case 'MMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
            break;

          case 'MMMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
            break;
          // Month of the year (January, ...), string, standalone

          case 'LLL':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
            break;

          case 'LLLL':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
            break;

          case 'LLLLL':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
            break;
          // Week of the year (1, ... 52)

          case 'w':
            formatter = weekGetter(1);
            break;

          case 'ww':
            formatter = weekGetter(2);
            break;
          // Week of the month (1, ...)

          case 'W':
            formatter = weekGetter(1, true);
            break;
          // Day of the month (1-31)

          case 'd':
            formatter = dateGetter(DateType.Date, 1);
            break;

          case 'dd':
            formatter = dateGetter(DateType.Date, 2);
            break;
          // Day of the Week

          case 'E':
          case 'EE':
          case 'EEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
            break;

          case 'EEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
            break;

          case 'EEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
            break;

          case 'EEEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
            break;
          // Generic period of the day (am-pm)

          case 'a':
          case 'aa':
          case 'aaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
            break;

          case 'aaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
            break;

          case 'aaaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
            break;
          // Extended period of the day (midnight, at night, ...), standalone

          case 'b':
          case 'bb':
          case 'bbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
            break;

          case 'bbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
            break;

          case 'bbbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
            break;
          // Extended period of the day (midnight, night, ...), standalone

          case 'B':
          case 'BB':
          case 'BBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
            break;

          case 'BBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
            break;

          case 'BBBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
            break;
          // Hour in AM/PM, (1-12)

          case 'h':
            formatter = dateGetter(DateType.Hours, 1, -12);
            break;

          case 'hh':
            formatter = dateGetter(DateType.Hours, 2, -12);
            break;
          // Hour of the day (0-23)

          case 'H':
            formatter = dateGetter(DateType.Hours, 1);
            break;
          // Hour in day, padded (00-23)

          case 'HH':
            formatter = dateGetter(DateType.Hours, 2);
            break;
          // Minute of the hour (0-59)

          case 'm':
            formatter = dateGetter(DateType.Minutes, 1);
            break;

          case 'mm':
            formatter = dateGetter(DateType.Minutes, 2);
            break;
          // Second of the minute (0-59)

          case 's':
            formatter = dateGetter(DateType.Seconds, 1);
            break;

          case 'ss':
            formatter = dateGetter(DateType.Seconds, 2);
            break;
          // Fractional second

          case 'S':
            formatter = dateGetter(DateType.FractionalSeconds, 1);
            break;

          case 'SS':
            formatter = dateGetter(DateType.FractionalSeconds, 2);
            break;

          case 'SSS':
            formatter = dateGetter(DateType.FractionalSeconds, 3);
            break;
          // Timezone ISO8601 short format (-0430)

          case 'Z':
          case 'ZZ':
          case 'ZZZ':
            formatter = timeZoneGetter(ZoneWidth.Short);
            break;
          // Timezone ISO8601 extended format (-04:30)

          case 'ZZZZZ':
            formatter = timeZoneGetter(ZoneWidth.Extended);
            break;
          // Timezone GMT short format (GMT+4)

          case 'O':
          case 'OO':
          case 'OOO': // Should be location, but fallback to format O instead because we don't have the data yet

          case 'z':
          case 'zz':
          case 'zzz':
            formatter = timeZoneGetter(ZoneWidth.ShortGMT);
            break;
          // Timezone GMT long format (GMT+0430)

          case 'OOOO':
          case 'ZZZZ': // Should be location, but fallback to format O instead because we don't have the data yet

          case 'zzzz':
            formatter = timeZoneGetter(ZoneWidth.Long);
            break;

          default:
            return null;
        }

        DATE_FORMATS[format] = formatter;
        return formatter;
      }

      function timezoneToOffset(timezone, fallback) {
        // Support: IE 11 only, Edge 13-15+
        // IE/Edge do not "understand" colon (`:`) in timezone
        timezone = timezone.replace(/:/g, '');
        var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
      }

      function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
      }

      function convertTimezoneToLocal(date, timezone, reverse) {
        var reverseValue = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
      }
      /**
       * Converts a value to date.
       *
       * Supported input formats:
       * - `Date`
       * - number: timestamp
       * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
       *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
       *   Note: ISO strings without time return a date without timeoffset.
       *
       * Throws if unable to convert to a date.
       */


      function toDate(value) {
        if (isDate(value)) {
          return value;
        }

        if (typeof value === 'number' && !isNaN(value)) {
          return new Date(value);
        }

        if (typeof value === 'string') {
          value = value.trim();

          if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
            /* For ISO Strings without time the day, month and year must be extracted from the ISO String
            before Date creation to avoid time offset and errors in the new Date.
            If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
            date, some browsers (e.g. IE 9) will throw an invalid Date error.
            If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
            is applied.
            Note: ISO months are 0 for January, 1 for February, ... */
            var _value$split$map = value.split('-').map(function (val) {
              return +val;
            }),
                _value$split$map2 = _slicedToArray(_value$split$map, 3),
                y = _value$split$map2[0],
                _value$split$map2$ = _value$split$map2[1],
                m = _value$split$map2$ === void 0 ? 1 : _value$split$map2$,
                _value$split$map2$2 = _value$split$map2[2],
                d = _value$split$map2$2 === void 0 ? 1 : _value$split$map2$2;

            return createDate(y, m - 1, d);
          }

          var parsedNb = parseFloat(value); // any string that only contains numbers, like "1234" but not like "1234hello"

          if (!isNaN(value - parsedNb)) {
            return new Date(parsedNb);
          }

          var match;

          if (match = value.match(ISO8601_DATE_REGEX)) {
            return isoStringToDate(match);
          }
        }

        var date = new Date(value);

        if (!isDate(date)) {
          throw new Error("Unable to convert \"".concat(value, "\" into a date"));
        }

        return date;
      }
      /**
       * Converts a date in ISO8601 to a Date.
       * Used instead of `Date.parse` because of browser discrepancies.
       */


      function isoStringToDate(match) {
        var date = new Date(0);
        var tzHour = 0;
        var tzMin = 0; // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"

        var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
        var timeSetter = match[8] ? date.setUTCHours : date.setHours; // if there is a timezone defined like "+01:00" or "+0100"

        if (match[9]) {
          tzHour = Number(match[9] + match[10]);
          tzMin = Number(match[9] + match[11]);
        }

        dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
        var h = Number(match[4] || 0) - tzHour;
        var m = Number(match[5] || 0) - tzMin;
        var s = Number(match[6] || 0); // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)
        // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`
        // becomes `999ms`.

        var ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }

      function isDate(value) {
        return value instanceof Date && !isNaN(value.valueOf());
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
      var MAX_DIGITS = 22;
      var DECIMAL_SEP = '.';
      var ZERO_CHAR = '0';
      var PATTERN_SEP = ';';
      var GROUP_SEP = ',';
      var DIGIT_CHAR = '#';
      var CURRENCY_CHAR = '¤';
      var PERCENT_CHAR = '%';
      /**
       * Transforms a number to a locale string based on a style and a format.
       */

      function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo) {
        var isPercent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var formattedText = '';
        var isZero = false;

        if (!isFinite(value)) {
          formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
        } else {
          var parsedNumber = parseNumber(value);

          if (isPercent) {
            parsedNumber = toPercent(parsedNumber);
          }

          var minInt = pattern.minInt;
          var minFraction = pattern.minFrac;
          var maxFraction = pattern.maxFrac;

          if (digitsInfo) {
            var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

            if (parts === null) {
              throw new Error("".concat(digitsInfo, " is not a valid digit info"));
            }

            var minIntPart = parts[1];
            var minFractionPart = parts[3];
            var maxFractionPart = parts[5];

            if (minIntPart != null) {
              minInt = parseIntAutoRadix(minIntPart);
            }

            if (minFractionPart != null) {
              minFraction = parseIntAutoRadix(minFractionPart);
            }

            if (maxFractionPart != null) {
              maxFraction = parseIntAutoRadix(maxFractionPart);
            } else if (minFractionPart != null && minFraction > maxFraction) {
              maxFraction = minFraction;
            }
          }

          roundNumber(parsedNumber, minFraction, maxFraction);
          var digits = parsedNumber.digits;
          var integerLen = parsedNumber.integerLen;
          var exponent = parsedNumber.exponent;
          var decimals = [];
          isZero = digits.every(function (d) {
            return !d;
          }); // pad zeros for small numbers

          for (; integerLen < minInt; integerLen++) {
            digits.unshift(0);
          } // pad zeros for small numbers


          for (; integerLen < 0; integerLen++) {
            digits.unshift(0);
          } // extract decimals digits


          if (integerLen > 0) {
            decimals = digits.splice(integerLen, digits.length);
          } else {
            decimals = digits;
            digits = [0];
          } // format the integer digits with grouping separators


          var groups = [];

          if (digits.length >= pattern.lgSize) {
            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
          }

          while (digits.length > pattern.gSize) {
            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
          }

          if (digits.length) {
            groups.unshift(digits.join(''));
          }

          formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol)); // append the decimal digits

          if (decimals.length) {
            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
          }

          if (exponent) {
            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
          }
        }

        if (value < 0 && !isZero) {
          formattedText = pattern.negPre + formattedText + pattern.negSuf;
        } else {
          formattedText = pattern.posPre + formattedText + pattern.posSuf;
        }

        return formattedText;
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as currency using locale rules.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param currency A string containing the currency symbol or its name,
       * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
       * of the function.
       * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
       * currency code, such as `USD` for the US dollar and `EUR` for the euro.
       * Used to determine the number of digits in the decimal part.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted currency value.
       *
       * @see `formatNumber()`
       * @see `DecimalPipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
        var format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
        var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
        pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
        pattern.maxFrac = pattern.minFrac;
        var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
        return res.replace(CURRENCY_CHAR, currency) // if we have 2 time the currency character, the second one is ignored
        .replace(CURRENCY_CHAR, '') // If there is a spacing between currency character and the value and
        // the currency character is supressed by passing an empty string, the
        // spacing character would remain as part of the string. Then we
        // should remove it.
        .trim();
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as a percentage according to locale rules.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted percentage value.
       *
       * @see `formatNumber()`
       * @see `DecimalPipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       * @publicApi
       *
       */


      function formatPercent(value, locale, digitsInfo) {
        var format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
        var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
        var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
        return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as text, with group sizing, separator, and other
       * parameters based on the locale.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted text string.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function formatNumber(value, locale, digitsInfo) {
        var format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
        var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
        return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
      }

      function parseNumberFormat(format) {
        var minusSign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
        var p = {
          minInt: 1,
          minFrac: 0,
          maxFrac: 0,
          posPre: '',
          posSuf: '',
          negPre: '',
          negSuf: '',
          gSize: 0,
          lgSize: 0
        };
        var patternParts = format.split(PATTERN_SEP);
        var positive = patternParts[0];
        var negative = patternParts[1];
        var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],
            integer = positiveParts[0],
            fraction = positiveParts[1] || '';
        p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));

        for (var i = 0; i < fraction.length; i++) {
          var ch = fraction.charAt(i);

          if (ch === ZERO_CHAR) {
            p.minFrac = p.maxFrac = i + 1;
          } else if (ch === DIGIT_CHAR) {
            p.maxFrac = i + 1;
          } else {
            p.posSuf += ch;
          }
        }

        var groups = integer.split(GROUP_SEP);
        p.gSize = groups[1] ? groups[1].length : 0;
        p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;

        if (negative) {
          var trunkLen = positive.length - p.posPre.length - p.posSuf.length,
              pos = negative.indexOf(DIGIT_CHAR);
          p.negPre = negative.substr(0, pos).replace(/'/g, '');
          p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
        } else {
          p.negPre = minusSign + p.posPre;
          p.negSuf = p.posSuf;
        }

        return p;
      } // Transforms a parsed number into a percentage by multiplying it by 100


      function toPercent(parsedNumber) {
        // if the number is 0, don't do anything
        if (parsedNumber.digits[0] === 0) {
          return parsedNumber;
        } // Getting the current number of decimals


        var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;

        if (parsedNumber.exponent) {
          parsedNumber.exponent += 2;
        } else {
          if (fractionLen === 0) {
            parsedNumber.digits.push(0, 0);
          } else if (fractionLen === 1) {
            parsedNumber.digits.push(0);
          }

          parsedNumber.integerLen += 2;
        }

        return parsedNumber;
      }
      /**
       * Parses a number.
       * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
       */


      function parseNumber(num) {
        var numStr = Math.abs(num) + '';
        var exponent = 0,
            digits,
            integerLen;
        var i, j, zeros; // Decimal point?

        if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
          numStr = numStr.replace(DECIMAL_SEP, '');
        } // Exponential form?


        if ((i = numStr.search(/e/i)) > 0) {
          // Work out the exponent.
          if (integerLen < 0) integerLen = i;
          integerLen += +numStr.slice(i + 1);
          numStr = numStr.substring(0, i);
        } else if (integerLen < 0) {
          // There was no decimal point or exponent so it is an integer.
          integerLen = numStr.length;
        } // Count the number of leading zeros.


        for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
          /* empty */
        }

        if (i === (zeros = numStr.length)) {
          // The digits are all zero.
          digits = [0];
          integerLen = 1;
        } else {
          // Count the number of trailing zeros
          zeros--;

          while (numStr.charAt(zeros) === ZERO_CHAR) {
            zeros--;
          } // Trailing zeros are insignificant so ignore them


          integerLen -= i;
          digits = []; // Convert string to array of digits without leading/trailing zeros.

          for (j = 0; i <= zeros; i++, j++) {
            digits[j] = Number(numStr.charAt(i));
          }
        } // If the number overflows the maximum allowed digits then use an exponent.


        if (integerLen > MAX_DIGITS) {
          digits = digits.splice(0, MAX_DIGITS - 1);
          exponent = integerLen - 1;
          integerLen = 1;
        }

        return {
          digits: digits,
          exponent: exponent,
          integerLen: integerLen
        };
      }
      /**
       * Round the parsed number to the specified number of decimal places
       * This function changes the parsedNumber in-place
       */


      function roundNumber(parsedNumber, minFrac, maxFrac) {
        if (minFrac > maxFrac) {
          throw new Error("The minimum number of digits after fraction (".concat(minFrac, ") is higher than the maximum (").concat(maxFrac, ")."));
        }

        var digits = parsedNumber.digits;
        var fractionLen = digits.length - parsedNumber.integerLen;
        var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac); // The index of the digit to where rounding is to occur

        var roundAt = fractionSize + parsedNumber.integerLen;
        var digit = digits[roundAt];

        if (roundAt > 0) {
          // Drop fractional digits beyond `roundAt`
          digits.splice(Math.max(parsedNumber.integerLen, roundAt)); // Set non-fractional digits beyond `roundAt` to 0

          for (var j = roundAt; j < digits.length; j++) {
            digits[j] = 0;
          }
        } else {
          // We rounded to zero so reset the parsedNumber
          fractionLen = Math.max(0, fractionLen);
          parsedNumber.integerLen = 1;
          digits.length = Math.max(1, roundAt = fractionSize + 1);
          digits[0] = 0;

          for (var i = 1; i < roundAt; i++) {
            digits[i] = 0;
          }
        }

        if (digit >= 5) {
          if (roundAt - 1 < 0) {
            for (var k = 0; k > roundAt; k--) {
              digits.unshift(0);
              parsedNumber.integerLen++;
            }

            digits.unshift(1);
            parsedNumber.integerLen++;
          } else {
            digits[roundAt - 1]++;
          }
        } // Pad out with zeros to get the required fraction length


        for (; fractionLen < Math.max(0, fractionSize); fractionLen++) {
          digits.push(0);
        }

        var dropTrailingZeros = fractionSize !== 0; // Minimal length = nb of decimals required + current nb of integers
        // Any number besides that is optional and can be removed if it's a trailing 0

        var minLen = minFrac + parsedNumber.integerLen; // Do any carrying, e.g. a digit was rounded up to 10

        var carry = digits.reduceRight(function (carry, d, i, digits) {
          d = d + carry;
          digits[i] = d < 10 ? d : d - 10; // d % 10

          if (dropTrailingZeros) {
            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
            if (digits[i] === 0 && i >= minLen) {
              digits.pop();
            } else {
              dropTrailingZeros = false;
            }
          }

          return d >= 10 ? 1 : 0; // Math.floor(d / 10);
        }, 0);

        if (carry) {
          digits.unshift(carry);
          parsedNumber.integerLen++;
        }
      }

      function parseIntAutoRadix(text) {
        var result = parseInt(text);

        if (isNaN(result)) {
          throw new Error('Invalid integer literal when parsing ' + text);
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var NgLocalization = function NgLocalization() {
        _classCallCheck(this, NgLocalization);
      };
      /**
       * Returns the plural category for a given value.
       * - "=value" when the case exists,
       * - the plural category otherwise
       */


      function getPluralCategory(value, cases, ngLocalization, locale) {
        var key = "=".concat(value);

        if (cases.indexOf(key) > -1) {
          return key;
        }

        key = ngLocalization.getPluralCategory(value, locale);

        if (cases.indexOf(key) > -1) {
          return key;
        }

        if (cases.indexOf('other') > -1) {
          return 'other';
        }

        throw new Error("No plural message found for value \"".concat(value, "\""));
      }
      /**
       * Returns the plural case based on the locale
       *
       * @publicApi
       */


      var NgLocaleLocalization = /*#__PURE__*/function (_NgLocalization) {
        _inherits(NgLocaleLocalization, _NgLocalization);

        var _super160 = _createSuper(NgLocaleLocalization);

        function NgLocaleLocalization(locale) {
          var _this209;

          _classCallCheck(this, NgLocaleLocalization);

          _this209 = _super160.call(this);
          _this209.locale = locale;
          return _this209;
        }

        _createClass2(NgLocaleLocalization, [{
          key: "getPluralCategory",
          value: function getPluralCategory(value, locale) {
            var plural = getLocalePluralCase(locale || this.locale)(value);

            switch (plural) {
              case Plural.Zero:
                return 'zero';

              case Plural.One:
                return 'one';

              case Plural.Two:
                return 'two';

              case Plural.Few:
                return 'few';

              case Plural.Many:
                return 'many';

              default:
                return 'other';
            }
          }
        }]);

        return NgLocaleLocalization;
      }(NgLocalization);

      NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) {
        return new (t || NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      NgLocaleLocalization.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: NgLocaleLocalization,
        factory: NgLocaleLocalization.ɵfac
      });

      NgLocaleLocalization.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgLocaleLocalization, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Register global data to be used internally by Angular. See the
       * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
       *
       * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
       *
       * @publicApi
       */


      function registerLocaleData(data, localeId, extraData) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵregisterLocaleData"])(data, localeId, extraData);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);

        var _iterator11 = _createForOfIteratorHelper(cookieStr.split(';')),
            _step10;

        try {
          for (_iterator11.s(); !(_step10 = _iterator11.n()).done;) {
            var cookie = _step10.value;
            var eqIndex = cookie.indexOf('=');

            var _ref11 = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
                _ref12 = _slicedToArray(_ref11, 2),
                cookieName = _ref12[0],
                cookieValue = _ref12[1];

            if (cookieName.trim() === name) {
              return decodeURIComponent(cookieValue);
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       * ```
       *     <some-element [ngClass]="'first second'">...</some-element>
       *
       *     <some-element [ngClass]="['first', 'second']">...</some-element>
       *
       *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
       *
       *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
       *
       *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
       * ```
       *
       * @description
       *
       * Adds and removes CSS classes on an HTML element.
       *
       * The CSS classes are updated as follows, depending on the type of the expression evaluation:
       * - `string` - the CSS classes listed in the string (space delimited) are added,
       * - `Array` - the CSS classes declared as Array elements are added,
       * - `Object` - keys are CSS classes that get added when the expression given in the value
       *              evaluates to a truthy value, otherwise they are removed.
       *
       * @publicApi
       */


      var NgClass = /*#__PURE__*/function () {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          _classCallCheck(this, NgClass);

          this._iterableDiffers = _iterableDiffers;
          this._keyValueDiffers = _keyValueDiffers;
          this._ngEl = _ngEl;
          this._renderer = _renderer;
          this._iterableDiffer = null;
          this._keyValueDiffer = null;
          this._initialClasses = [];
          this._rawClass = null;
        }

        _createClass2(NgClass, [{
          key: "klass",
          set: function set(value) {
            this._removeClasses(this._initialClasses);

            this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];

            this._applyClasses(this._initialClasses);

            this._applyClasses(this._rawClass);
          }
        }, {
          key: "ngClass",
          set: function set(value) {
            this._removeClasses(this._rawClass);

            this._applyClasses(this._initialClasses);

            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;

            if (this._rawClass) {
              if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisListLikeIterable"])(this._rawClass)) {
                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
              } else {
                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
              }
            }
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._iterableDiffer) {
              var iterableChanges = this._iterableDiffer.diff(this._rawClass);

              if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
              }
            } else if (this._keyValueDiffer) {
              var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);

              if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
              }
            }
          }
        }, {
          key: "_applyKeyValueChanges",
          value: function _applyKeyValueChanges(changes) {
            var _this210 = this;

            changes.forEachAddedItem(function (record) {
              return _this210._toggleClass(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this210._toggleClass(record.key, record.currentValue);
            });
            changes.forEachRemovedItem(function (record) {
              if (record.previousValue) {
                _this210._toggleClass(record.key, false);
              }
            });
          }
        }, {
          key: "_applyIterableChanges",
          value: function _applyIterableChanges(changes) {
            var _this211 = this;

            changes.forEachAddedItem(function (record) {
              if (typeof record.item === 'string') {
                _this211._toggleClass(record.item, true);
              } else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got ".concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(record.item)));
              }
            });
            changes.forEachRemovedItem(function (record) {
              return _this211._toggleClass(record.item, false);
            });
          }
          /**
           * Applies a collection of CSS classes to the DOM element.
           *
           * For argument of type Set and Array CSS class names contained in those collections are always
           * added.
           * For argument of type Map CSS class name in the map's key is toggled based on the value (added
           * for truthy and removed for falsy).
           */

        }, {
          key: "_applyClasses",
          value: function _applyClasses(rawClassVal) {
            var _this212 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this212._toggleClass(klass, true);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this212._toggleClass(klass, !!rawClassVal[klass]);
                });
              }
            }
          }
          /**
           * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
           * purposes.
           */

        }, {
          key: "_removeClasses",
          value: function _removeClasses(rawClassVal) {
            var _this213 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this213._toggleClass(klass, false);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this213._toggleClass(klass, false);
                });
              }
            }
          }
        }, {
          key: "_toggleClass",
          value: function _toggleClass(klass, enabled) {
            var _this214 = this;

            klass = klass.trim();

            if (klass) {
              klass.split(/\s+/g).forEach(function (klass) {
                if (enabled) {
                  _this214._renderer.addClass(_this214._ngEl.nativeElement, klass);
                } else {
                  _this214._renderer.removeClass(_this214._ngEl.nativeElement, klass);
                }
              });
            }
          }
        }]);

        return NgClass;
      }();

      NgClass.ɵfac = function NgClass_Factory(t) {
        return new (t || NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
      };

      NgClass.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgClass,
        selectors: [["", "ngClass", ""]],
        inputs: {
          klass: ["class", "klass"],
          ngClass: "ngClass"
        }
      });

      NgClass.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }];
      };

      NgClass.propDecorators = {
        klass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['class']
        }],
        ngClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngClass']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgClass, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngClass]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }];
        }, {
          klass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['class']
          }],
          ngClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngClass']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Instantiates a single {@link Component} type and inserts its Host View into current View.
       * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
       *
       * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
       * any existing component will get destroyed.
       *
       * @usageNotes
       *
       * ### Fine tune control
       *
       * You can control the component creation process by using the following optional attributes:
       *
       * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
       * the Component. Defaults to the injector of the current view container.
       *
       * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
       * section of the component, if exists.
       *
       * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
       * module, then load a component from that module.
       *
       * ### Syntax
       *
       * Simple
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
       * ```
       *
       * Customized injector/content
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression;
       *                                   injector: injectorExpression;
       *                                   content: contentNodesExpression;">
       * </ng-container>
       * ```
       *
       * Customized ngModuleFactory
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression;
       *                                   ngModuleFactory: moduleFactory;">
       * </ng-container>
       * ```
       *
       * ### A simple example
       *
       * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
       *
       * A more complete example with additional options:
       *
       * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
       *
       * @publicApi
       * @ngModule CommonModule
       */


      var NgComponentOutlet = /*#__PURE__*/function () {
        function NgComponentOutlet(_viewContainerRef) {
          _classCallCheck(this, NgComponentOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._componentRef = null;
          this._moduleRef = null;
        }

        _createClass2(NgComponentOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._viewContainerRef.clear();

            this._componentRef = null;

            if (this.ngComponentOutlet) {
              var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;

              if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef) this._moduleRef.destroy();

                if (this.ngComponentOutletNgModuleFactory) {
                  var parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]);
                  this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                } else {
                  this._moduleRef = null;
                }
              }

              var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]);
              var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
              this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._moduleRef) this._moduleRef.destroy();
          }
        }]);

        return NgComponentOutlet;
      }();

      NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) {
        return new (t || NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]));
      };

      NgComponentOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgComponentOutlet,
        selectors: [["", "ngComponentOutlet", ""]],
        inputs: {
          ngComponentOutlet: "ngComponentOutlet",
          ngComponentOutletInjector: "ngComponentOutletInjector",
          ngComponentOutletContent: "ngComponentOutletContent",
          ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      NgComponentOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }];
      };

      NgComponentOutlet.propDecorators = {
        ngComponentOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngComponentOutletInjector: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngComponentOutletContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngComponentOutletNgModuleFactory: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgComponentOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngComponentOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }];
        }, {
          ngComponentOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngComponentOutletInjector: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngComponentOutletContent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngComponentOutletNgModuleFactory: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var NgForOfContext = /*#__PURE__*/function () {
        function NgForOfContext($implicit, ngForOf, index, count) {
          _classCallCheck(this, NgForOfContext);

          this.$implicit = $implicit;
          this.ngForOf = ngForOf;
          this.index = index;
          this.count = count;
        }

        _createClass2(NgForOfContext, [{
          key: "first",
          get: function get() {
            return this.index === 0;
          }
        }, {
          key: "last",
          get: function get() {
            return this.index === this.count - 1;
          }
        }, {
          key: "even",
          get: function get() {
            return this.index % 2 === 0;
          }
        }, {
          key: "odd",
          get: function get() {
            return !this.even;
          }
        }]);

        return NgForOfContext;
      }();
      /**
       * A [structural directive](guide/structural-directives) that renders
       * a template for each item in a collection.
       * The directive is placed on an element, which becomes the parent
       * of the cloned templates.
       *
       * The `ngForOf` directive is generally used in the
       * [shorthand form](guide/structural-directives#asterisk) `*ngFor`.
       * In this form, the template to be rendered for each iteration is the content
       * of an anchor element containing the directive.
       *
       * The following example shows the shorthand syntax with some options,
       * contained in an `<li>` element.
       *
       * ```
       * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
       * ```
       *
       * The shorthand form expands into a long form that uses the `ngForOf` selector
       * on an `<ng-template>` element.
       * The content of the `<ng-template>` element is the `<li>` element that held the
       * short-form directive.
       *
       * Here is the expanded version of the short-form example.
       *
       * ```
       * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
       *   <li>...</li>
       * </ng-template>
       * ```
       *
       * Angular automatically expands the shorthand syntax as it compiles the template.
       * The context for each embedded view is logically merged to the current component
       * context according to its lexical position.
       *
       * When using the shorthand syntax, Angular allows only [one structural directive
       * on an element](guide/built-in-directives#one-per-element).
       * If you want to iterate conditionally, for example,
       * put the `*ngIf` on a container element that wraps the `*ngFor` element.
       * For futher discussion, see
       * [Structural Directives](guide/built-in-directives#one-per-element).
       *
       * @usageNotes
       *
       * ### Local variables
       *
       * `NgForOf` provides exported values that can be aliased to local variables.
       * For example:
       *
       *  ```
       * <li *ngFor="let user of users; index as i; first as isFirst">
       *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
       * </li>
       * ```
       *
       * The following exported values can be aliased to local variables:
       *
       * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
       * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
       * more complex then a property access, for example when using the async pipe (`userStreams |
       * async`).
       * - `index: number`: The index of the current item in the iterable.
       * - `count: number`: The length of the iterable.
       * - `first: boolean`: True when the item is the first item in the iterable.
       * - `last: boolean`: True when the item is the last item in the iterable.
       * - `even: boolean`: True when the item has an even index in the iterable.
       * - `odd: boolean`: True when the item has an odd index in the iterable.
       *
       * ### Change propagation
       *
       * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
       *
       * * When an item is added, a new instance of the template is added to the DOM.
       * * When an item is removed, its template instance is removed from the DOM.
       * * When items are reordered, their respective templates are reordered in the DOM.
       *
       * Angular uses object identity to track insertions and deletions within the iterator and reproduce
       * those changes in the DOM. This has important implications for animations and any stateful
       * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
       * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
       * such as user input.
       * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
       *
       * The identities of elements in the iterator can change while the data does not.
       * This can happen, for example, if the iterator is produced from an RPC to the server, and that
       * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
       * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
       * elements were deleted and all new elements inserted).
       *
       * To avoid this expensive operation, you can customize the default tracking algorithm.
       * by supplying the `trackBy` option to `NgForOf`.
       * `trackBy` takes a function that has two arguments: `index` and `item`.
       * If `trackBy` is given, Angular tracks changes by the return value of the function.
       *
       * @see [Structural Directives](guide/structural-directives)
       * @ngModule CommonModule
       * @publicApi
       */


      var NgForOf = /*#__PURE__*/function () {
        function NgForOf(_viewContainer, _template, _differs) {
          _classCallCheck(this, NgForOf);

          this._viewContainer = _viewContainer;
          this._template = _template;
          this._differs = _differs;
          this._ngForOf = null;
          this._ngForOfDirty = true;
          this._differ = null;
        }
        /**
         * The value of the iterable expression, which can be used as a
         * [template input variable](guide/structural-directives#shorthand).
         */


        _createClass2(NgForOf, [{
          key: "ngForOf",
          set: function set(ngForOf) {
            this._ngForOf = ngForOf;
            this._ngForOfDirty = true;
          }
          /**
           * A function that defines how to track changes for items in the iterable.
           *
           * When items are added, moved, or removed in the iterable,
           * the directive must re-render the appropriate DOM nodes.
           * To minimize churn in the DOM, only nodes that have changed
           * are re-rendered.
           *
           * By default, the change detector assumes that
           * the object instance identifies the node in the iterable.
           * When this function is supplied, the directive uses
           * the result of calling this function to identify the item node,
           * rather than the identity of the object itself.
           *
           * The function receives two inputs,
           * the iteration index and the associated node data.
           */

        }, {
          key: "ngForTrackBy",
          get: function get() {
            return this._trackByFn;
          }
          /**
           * A reference to the template that is stamped out for each item in the iterable.
           * @see [template reference variable](guide/template-reference-variables)
           */
          ,
          set: function set(fn) {
            if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
              // TODO(vicb): use a log service once there is a public one available
              if (console && console.warn) {
                console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), ". ") + "See https://angular.io/api/common/NgForOf#change-propagation for more information.");
              }
            }

            this._trackByFn = fn;
          }
        }, {
          key: "ngForTemplate",
          set: function set(value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
              this._template = value;
            }
          }
          /**
           * Applies the changes when needed.
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._ngForOfDirty) {
              this._ngForOfDirty = false; // React on ngForOf changes only once all inputs have been initialized

              var value = this._ngForOf;

              if (!this._differ && value) {
                try {
                  this._differ = this._differs.find(value).create(this.ngForTrackBy);
                } catch (_a) {
                  throw new Error("Cannot find a differ supporting object '".concat(value, "' of type '").concat(getTypeName(value), "'. NgFor only supports binding to Iterables such as Arrays."));
                }
              }
            }

            if (this._differ) {
              var changes = this._differ.diff(this._ngForOf);

              if (changes) this._applyChanges(changes);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this215 = this;

            var insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
              if (item.previousIndex == null) {
                // NgForOf is never "null" or "undefined" here because the differ detected
                // that a new item needs to be inserted from the iterable. This implies that
                // there is an iterable value for "_ngForOf".
                var view = _this215._viewContainer.createEmbeddedView(_this215._template, new NgForOfContext(null, _this215._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);

                var tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
              } else if (currentIndex == null) {
                _this215._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
              } else if (adjustedPreviousIndex !== null) {
                var _view3 = _this215._viewContainer.get(adjustedPreviousIndex);

                _this215._viewContainer.move(_view3, currentIndex);

                var _tuple2 = new RecordViewTuple(item, _view3);

                insertTuples.push(_tuple2);
              }
            });

            for (var i = 0; i < insertTuples.length; i++) {
              this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }

            for (var _i25 = 0, ilen = this._viewContainer.length; _i25 < ilen; _i25++) {
              var viewRef = this._viewContainer.get(_i25);

              viewRef.context.index = _i25;
              viewRef.context.count = ilen;
              viewRef.context.ngForOf = this._ngForOf;
            }

            changes.forEachIdentityChange(function (record) {
              var viewRef = _this215._viewContainer.get(record.currentIndex);

              viewRef.context.$implicit = record.item;
            });
          }
        }, {
          key: "_perViewChange",
          value: function _perViewChange(view, record) {
            view.context.$implicit = record.item;
          }
          /**
           * Asserts the correct type of the context for the template that `NgForOf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgForOf` structural directive renders its template with a specific context type.
           */

        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return NgForOf;
      }();

      NgForOf.ɵfac = function NgForOf_Factory(t) {
        return new (t || NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]));
      };

      NgForOf.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgForOf,
        selectors: [["", "ngFor", "", "ngForOf", ""]],
        inputs: {
          ngForOf: "ngForOf",
          ngForTrackBy: "ngForTrackBy",
          ngForTemplate: "ngForTemplate"
        }
      });

      NgForOf.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]
        }];
      };

      NgForOf.propDecorators = {
        ngForOf: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngForTrackBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngForTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgForOf, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngFor][ngForOf]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]
          }];
        }, {
          ngForOf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngForTrackBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngForTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      var RecordViewTuple = function RecordViewTuple(record, view) {
        _classCallCheck(this, RecordViewTuple);

        this.record = record;
        this.view = view;
      };

      function getTypeName(type) {
        return type['name'] || typeof type;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A structural directive that conditionally includes a template based on the value of
       * an expression coerced to Boolean.
       * When the expression evaluates to true, Angular renders the template
       * provided in a `then` clause, and when  false or null,
       * Angular renders the template provided in an optional `else` clause. The default
       * template for the `else` clause is blank.
       *
       * A [shorthand form](guide/structural-directives#asterisk) of the directive,
       * `*ngIf="condition"`, is generally used, provided
       * as an attribute of the anchor element for the inserted template.
       * Angular expands this into a more explicit version, in which the anchor element
       * is contained in an `<ng-template>` element.
       *
       * Simple form with shorthand syntax:
       *
       * ```
       * <div *ngIf="condition">Content to render when condition is true.</div>
       * ```
       *
       * Simple form with expanded syntax:
       *
       * ```
       * <ng-template [ngIf]="condition"><div>Content to render when condition is
       * true.</div></ng-template>
       * ```
       *
       * Form with an "else" block:
       *
       * ```
       * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
       * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
       * ```
       *
       * Shorthand form with "then" and "else" blocks:
       *
       * ```
       * <div *ngIf="condition; then thenBlock else elseBlock"></div>
       * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
       * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
       * ```
       *
       * Form with storing the value locally:
       *
       * ```
       * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
       * <ng-template #elseBlock>Content to render when value is null.</ng-template>
       * ```
       *
       * @usageNotes
       *
       * The `*ngIf` directive is most commonly used to conditionally show an inline template,
       * as seen in the following  example.
       * The default `else` template is blank.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
       *
       * ### Showing an alternative template using `else`
       *
       * To display a template when `expression` evaluates to false, use an `else` template
       * binding as shown in the following example.
       * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
       * The template can be defined anywhere in the component view, but is typically placed right after
       * `ngIf` for readability.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfElse'}
       *
       * ### Using an external `then` template
       *
       * In the previous example, the then-clause template is specified inline, as the content of the
       * tag that contains the `ngIf` directive. You can also specify a template that is defined
       * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
       * change which template to use at runtime, as shown in the following example.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
       *
       * ### Storing a conditional result in a variable
       *
       * You might want to show a set of properties from the same object. If you are waiting
       * for asynchronous data, the object can be undefined.
       * In this case, you can use `ngIf` and store the result of the condition in a local
       * variable as shown in the following example.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfAs'}
       *
       * This code uses only one `AsyncPipe`, so only one subscription is created.
       * The conditional statement stores the result of `userStream|async` in the local variable `user`.
       * You can then bind the local `user` repeatedly.
       *
       * The conditional displays the data only if `userStream` returns a value,
       * so you don't need to use the
       * safe-navigation-operator (`?.`)
       * to guard against null values when accessing properties.
       * You can display an alternative template while waiting for the data.
       *
       * ### Shorthand syntax
       *
       * The shorthand syntax `*ngIf` expands into two separate template specifications
       * for the "then" and "else" clauses. For example, consider the following shorthand statement,
       * that is meant to show a loading page while waiting for data to be loaded.
       *
       * ```
       * <div class="hero-list" *ngIf="heroes else loading">
       *  ...
       * </div>
       *
       * <ng-template #loading>
       *  <div>Loading...</div>
       * </ng-template>
       * ```
       *
       * You can see that the "else" clause references the `<ng-template>`
       * with the `#loading` label, and the template for the "then" clause
       * is provided as the content of the anchor element.
       *
       * However, when Angular expands the shorthand syntax, it creates
       * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
       * The anchor element containing the template for the "then" clause becomes
       * the content of this unlabeled `<ng-template>` tag.
       *
       * ```
       * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
       *  <div class="hero-list">
       *   ...
       *  </div>
       * </ng-template>
       *
       * <ng-template #loading>
       *  <div>Loading...</div>
       * </ng-template>
       * ```
       *
       * The presence of the implicit template object has implications for the nesting of
       * structural directives. For more on this subject, see
       * [Structural Directives](https://angular.io/guide/built-in-directives#one-per-element).
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var NgIf = /*#__PURE__*/function () {
        function NgIf(_viewContainer, templateRef) {
          _classCallCheck(this, NgIf);

          this._viewContainer = _viewContainer;
          this._context = new NgIfContext();
          this._thenTemplateRef = null;
          this._elseTemplateRef = null;
          this._thenViewRef = null;
          this._elseViewRef = null;
          this._thenTemplateRef = templateRef;
        }
        /**
         * The Boolean expression to evaluate as the condition for showing a template.
         */


        _createClass2(NgIf, [{
          key: "ngIf",
          set: function set(condition) {
            this._context.$implicit = this._context.ngIf = condition;

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to true.
           */

        }, {
          key: "ngIfThen",
          set: function set(templateRef) {
            assertTemplate('ngIfThen', templateRef);
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to false.
           */

        }, {
          key: "ngIfElse",
          set: function set(templateRef) {
            assertTemplate('ngIfElse', templateRef);
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.

            this._updateView();
          }
        }, {
          key: "_updateView",
          value: function _updateView() {
            if (this._context.$implicit) {
              if (!this._thenViewRef) {
                this._viewContainer.clear();

                this._elseViewRef = null;

                if (this._thenTemplateRef) {
                  this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
              }
            } else {
              if (!this._elseViewRef) {
                this._viewContainer.clear();

                this._thenViewRef = null;

                if (this._elseTemplateRef) {
                  this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
              }
            }
          }
          /**
           * Asserts the correct type of the context for the template that `NgIf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgIf` structural directive renders its template with a specific context type.
           */

        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return NgIf;
      }();

      NgIf.ɵfac = function NgIf_Factory(t) {
        return new (t || NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
      };

      NgIf.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgIf,
        selectors: [["", "ngIf", ""]],
        inputs: {
          ngIf: "ngIf",
          ngIfThen: "ngIfThen",
          ngIfElse: "ngIfElse"
        }
      });

      NgIf.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      };

      NgIf.propDecorators = {
        ngIf: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngIfThen: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngIfElse: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgIf, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngIf]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }];
        }, {
          ngIf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngIfThen: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngIfElse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @publicApi
       */


      var NgIfContext = function NgIfContext() {
        _classCallCheck(this, NgIfContext);

        this.$implicit = null;
        this.ngIf = null;
      };

      function assertTemplate(property, templateRef) {
        var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);

        if (!isTemplateRefOrNull) {
          throw new Error("".concat(property, " must be a TemplateRef, but received '").concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(templateRef), "'."));
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SwitchView = /*#__PURE__*/function () {
        function SwitchView(_viewContainerRef, _templateRef) {
          _classCallCheck(this, SwitchView);

          this._viewContainerRef = _viewContainerRef;
          this._templateRef = _templateRef;
          this._created = false;
        }

        _createClass2(SwitchView, [{
          key: "create",
          value: function create() {
            this._created = true;

            this._viewContainerRef.createEmbeddedView(this._templateRef);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._created = false;

            this._viewContainerRef.clear();
          }
        }, {
          key: "enforceState",
          value: function enforceState(created) {
            if (created && !this._created) {
              this.create();
            } else if (!created && this._created) {
              this.destroy();
            }
          }
        }]);

        return SwitchView;
      }();
      /**
       * @ngModule CommonModule
       *
       * @description
       * The `[ngSwitch]` directive on a container specifies an expression to match against.
       * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
       * - Every view that matches is rendered.
       * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
       * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
       * or `ngSwitchDefault` directive are preserved at the location.
       *
       * @usageNotes
       * Define a container element for the directive, and specify the switch expression
       * to match against as an attribute:
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       * ```
       *
       * Within the container, `*ngSwitchCase` statements specify the match expressions
       * as attributes. Include `*ngSwitchDefault` as the final case.
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
       * ...
       *    <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * ### Usage Examples
       *
       * The following example shows how to use more than one case to display the same view:
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *   <!-- the same view can be shown in more than one case -->
       *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
       *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
       *   <!--default case when there are no matches -->
       *   <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * The following example shows how cases can be nested:
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
       *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
       *       <ng-container *ngSwitchCase="match_expression_3">
       *         <!-- use a ng-container to group multiple root nodes -->
       *         <inner-element></inner-element>
       *         <inner-other-element></inner-other-element>
       *       </ng-container>
       *       <some-element *ngSwitchDefault>...</some-element>
       *     </container-element>
       * ```
       *
       * @publicApi
       * @see `NgSwitchCase`
       * @see `NgSwitchDefault`
       * @see [Structural Directives](guide/structural-directives)
       *
       */


      var NgSwitch = /*#__PURE__*/function () {
        function NgSwitch() {
          _classCallCheck(this, NgSwitch);

          this._defaultUsed = false;
          this._caseCount = 0;
          this._lastCaseCheckIndex = 0;
          this._lastCasesMatched = false;
        }

        _createClass2(NgSwitch, [{
          key: "ngSwitch",
          set: function set(newValue) {
            this._ngSwitch = newValue;

            if (this._caseCount === 0) {
              this._updateDefaultCases(true);
            }
          }
          /** @internal */

        }, {
          key: "_addCase",
          value: function _addCase() {
            return this._caseCount++;
          }
          /** @internal */

        }, {
          key: "_addDefault",
          value: function _addDefault(view) {
            if (!this._defaultViews) {
              this._defaultViews = [];
            }

            this._defaultViews.push(view);
          }
          /** @internal */

        }, {
          key: "_matchCase",
          value: function _matchCase(value) {
            var matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;

            if (this._lastCaseCheckIndex === this._caseCount) {
              this._updateDefaultCases(!this._lastCasesMatched);

              this._lastCaseCheckIndex = 0;
              this._lastCasesMatched = false;
            }

            return matched;
          }
        }, {
          key: "_updateDefaultCases",
          value: function _updateDefaultCases(useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
              this._defaultUsed = useDefault;

              for (var i = 0; i < this._defaultViews.length; i++) {
                var defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
              }
            }
          }
        }]);

        return NgSwitch;
      }();

      NgSwitch.ɵfac = function NgSwitch_Factory(t) {
        return new (t || NgSwitch)();
      };

      NgSwitch.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitch,
        selectors: [["", "ngSwitch", ""]],
        inputs: {
          ngSwitch: "ngSwitch"
        }
      });
      NgSwitch.propDecorators = {
        ngSwitch: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitch, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngSwitch]'
          }]
        }], function () {
          return [];
        }, {
          ngSwitch: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
       * When the expressions match, the given `NgSwitchCase` template is rendered.
       * If multiple match expressions match the switch expression value, all of them are displayed.
       *
       * @usageNotes
       *
       * Within a switch container, `*ngSwitchCase` statements specify the match expressions
       * as attributes. Include `*ngSwitchDefault` as the final case.
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *   ...
       *   <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * Each switch-case statement contains an in-line HTML template or template reference
       * that defines the subtree to be selected if the value of the match expression
       * matches the value of the switch expression.
       *
       * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
       * This means that the empty string, `""` matches 0.
       *
       * @publicApi
       * @see `NgSwitch`
       * @see `NgSwitchDefault`
       *
       */


      var NgSwitchCase = /*#__PURE__*/function () {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
          _classCallCheck(this, NgSwitchCase);

          this.ngSwitch = ngSwitch;

          ngSwitch._addCase();

          this._view = new SwitchView(viewContainer, templateRef);
        }
        /**
         * Performs case matching. For internal use only.
         */


        _createClass2(NgSwitchCase, [{
          key: "ngDoCheck",
          value: function ngDoCheck() {
            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
          }
        }]);

        return NgSwitchCase;
      }();

      NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) {
        return new (t || NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1));
      };

      NgSwitchCase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitchCase,
        selectors: [["", "ngSwitchCase", ""]],
        inputs: {
          ngSwitchCase: "ngSwitchCase"
        }
      });

      NgSwitchCase.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }, {
          type: NgSwitch,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      NgSwitchCase.propDecorators = {
        ngSwitchCase: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitchCase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngSwitchCase]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }, {
            type: NgSwitch,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, {
          ngSwitchCase: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Creates a view that is rendered when no `NgSwitchCase` expressions
       * match the `NgSwitch` expression.
       * This statement should be the final case in an `NgSwitch`.
       *
       * @publicApi
       * @see `NgSwitch`
       * @see `NgSwitchCase`
       *
       */


      var NgSwitchDefault = function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        _classCallCheck(this, NgSwitchDefault);

        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
      };

      NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) {
        return new (t || NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1));
      };

      NgSwitchDefault.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitchDefault,
        selectors: [["", "ngSwitchDefault", ""]]
      });

      NgSwitchDefault.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }, {
          type: NgSwitch,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitchDefault, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngSwitchDefault]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }, {
            type: NgSwitch,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       * ```
       * <some-element [ngPlural]="value">
       *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
       *   <ng-template ngPluralCase="=1">there is one</ng-template>
       *   <ng-template ngPluralCase="few">there are a few</ng-template>
       * </some-element>
       * ```
       *
       * @description
       *
       * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
       *
       * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
       * that match the switch expression's pluralization category.
       *
       * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
       * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
       * expression:
       * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
       *   matches the switch expression exactly,
       * - otherwise, the view will be treated as a "category match", and will only display if exact
       *   value matches aren't found and the value maps to its category for the defined locale.
       *
       * See http://cldr.unicode.org/index/cldr-spec/plural-rules
       *
       * @publicApi
       */


      var NgPlural = /*#__PURE__*/function () {
        function NgPlural(_localization) {
          _classCallCheck(this, NgPlural);

          this._localization = _localization;
          this._caseViews = {};
        }

        _createClass2(NgPlural, [{
          key: "ngPlural",
          set: function set(value) {
            this._switchValue = value;

            this._updateView();
          }
        }, {
          key: "addCase",
          value: function addCase(value, switchView) {
            this._caseViews[value] = switchView;
          }
        }, {
          key: "_updateView",
          value: function _updateView() {
            this._clearViews();

            var cases = Object.keys(this._caseViews);
            var key = getPluralCategory(this._switchValue, cases, this._localization);

            this._activateView(this._caseViews[key]);
          }
        }, {
          key: "_clearViews",
          value: function _clearViews() {
            if (this._activeView) this._activeView.destroy();
          }
        }, {
          key: "_activateView",
          value: function _activateView(view) {
            if (view) {
              this._activeView = view;

              this._activeView.create();
            }
          }
        }]);

        return NgPlural;
      }();

      NgPlural.ɵfac = function NgPlural_Factory(t) {
        return new (t || NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization));
      };

      NgPlural.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgPlural,
        selectors: [["", "ngPlural", ""]],
        inputs: {
          ngPlural: "ngPlural"
        }
      });

      NgPlural.ctorParameters = function () {
        return [{
          type: NgLocalization
        }];
      };

      NgPlural.propDecorators = {
        ngPlural: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgPlural, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngPlural]'
          }]
        }], function () {
          return [{
            type: NgLocalization
          }];
        }, {
          ngPlural: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Creates a view that will be added/removed from the parent {@link NgPlural} when the
       * given expression matches the plural expression according to CLDR rules.
       *
       * @usageNotes
       * ```
       * <some-element [ngPlural]="value">
       *   <ng-template ngPluralCase="=0">...</ng-template>
       *   <ng-template ngPluralCase="other">...</ng-template>
       * </some-element>
       *```
       *
       * See {@link NgPlural} for more details and example.
       *
       * @publicApi
       */


      var NgPluralCase = function NgPluralCase(value, template, viewContainer, ngPlural) {
        _classCallCheck(this, NgPluralCase);

        this.value = value;
        var isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=".concat(value) : value, new SwitchView(viewContainer, template));
      };

      NgPluralCase.ɵfac = function NgPluralCase_Factory(t) {
        return new (t || NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgPlural, 1));
      };

      NgPluralCase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgPluralCase,
        selectors: [["", "ngPluralCase", ""]]
      });

      NgPluralCase.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
            args: ['ngPluralCase']
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: NgPlural,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgPluralCase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngPluralCase]'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
              args: ['ngPluralCase']
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: NgPlural,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       *
       * Set the font of the containing element to the result of an expression.
       *
       * ```
       * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
       * ```
       *
       * Set the width of the containing element to a pixel value returned by an expression.
       *
       * ```
       * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
       * ```
       *
       * Set a collection of style values using an expression that returns key-value pairs.
       *
       * ```
       * <some-element [ngStyle]="objExp">...</some-element>
       * ```
       *
       * @description
       *
       * An attribute directive that updates styles for the containing HTML element.
       * Sets one or more style properties, specified as colon-separated key-value pairs.
       * The key is a style name, with an optional `.<unit>` suffix
       * (such as 'top.px', 'font-style.em').
       * The value is an expression to be evaluated.
       * The resulting non-null value, expressed in the given unit,
       * is assigned to the given style property.
       * If the result of evaluation is null, the corresponding style is removed.
       *
       * @publicApi
       */


      var NgStyle = /*#__PURE__*/function () {
        function NgStyle(_ngEl, _differs, _renderer) {
          _classCallCheck(this, NgStyle);

          this._ngEl = _ngEl;
          this._differs = _differs;
          this._renderer = _renderer;
          this._ngStyle = null;
          this._differ = null;
        }

        _createClass2(NgStyle, [{
          key: "ngStyle",
          set: function set(values) {
            this._ngStyle = values;

            if (!this._differ && values) {
              this._differ = this._differs.find(values).create();
            }
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._differ) {
              var changes = this._differ.diff(this._ngStyle);

              if (changes) {
                this._applyChanges(changes);
              }
            }
          }
        }, {
          key: "_setStyle",
          value: function _setStyle(nameAndUnit, value) {
            var _nameAndUnit$split = nameAndUnit.split('.'),
                _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),
                name = _nameAndUnit$split2[0],
                unit = _nameAndUnit$split2[1];

            value = value != null && unit ? "".concat(value).concat(unit) : value;

            if (value != null) {
              this._renderer.setStyle(this._ngEl.nativeElement, name, value);
            } else {
              this._renderer.removeStyle(this._ngEl.nativeElement, name);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this216 = this;

            changes.forEachRemovedItem(function (record) {
              return _this216._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
              return _this216._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this216._setStyle(record.key, record.currentValue);
            });
          }
        }]);

        return NgStyle;
      }();

      NgStyle.ɵfac = function NgStyle_Factory(t) {
        return new (t || NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
      };

      NgStyle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgStyle,
        selectors: [["", "ngStyle", ""]],
        inputs: {
          ngStyle: "ngStyle"
        }
      });

      NgStyle.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }];
      };

      NgStyle.propDecorators = {
        ngStyle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['ngStyle']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgStyle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngStyle]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }];
        }, {
          ngStyle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngStyle']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Inserts an embedded view from a prepared `TemplateRef`.
       *
       * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
       * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
       * by the local template `let` declarations.
       *
       * @usageNotes
       * ```
       * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
       * ```
       *
       * Using the key `$implicit` in the context object will set its value as default.
       *
       * ### Example
       *
       * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
       *
       * @publicApi
       */


      var NgTemplateOutlet = /*#__PURE__*/function () {
        function NgTemplateOutlet(_viewContainerRef) {
          _classCallCheck(this, NgTemplateOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._viewRef = null;
          /**
           * A context object to attach to the {@link EmbeddedViewRef}. This should be an
           * object, the object's keys will be available for binding by the local template `let`
           * declarations.
           * Using the key `$implicit` in the context object will set its value as default.
           */

          this.ngTemplateOutletContext = null;
          /**
           * A string defining the template reference and optionally the context object for the template.
           */

          this.ngTemplateOutlet = null;
        }

        _createClass2(NgTemplateOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var recreateView = this._shouldRecreateView(changes);

            if (recreateView) {
              var viewContainerRef = this._viewContainerRef;

              if (this._viewRef) {
                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
              }

              this._viewRef = this.ngTemplateOutlet ? viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) : null;
            } else if (this._viewRef && this.ngTemplateOutletContext) {
              this._updateExistingContext(this.ngTemplateOutletContext);
            }
          }
          /**
           * We need to re-create existing embedded view if:
           * - templateRef has changed
           * - context has changes
           *
           * We mark context object as changed when the corresponding object
           * shape changes (new properties are added or existing properties are removed).
           * In other words we consider context with the same properties as "the same" even
           * if object reference changes (see https://github.com/angular/angular/issues/13407).
           */

        }, {
          key: "_shouldRecreateView",
          value: function _shouldRecreateView(changes) {
            var ctxChange = changes['ngTemplateOutletContext'];
            return !!changes['ngTemplateOutlet'] || ctxChange && this._hasContextShapeChanged(ctxChange);
          }
        }, {
          key: "_hasContextShapeChanged",
          value: function _hasContextShapeChanged(ctxChange) {
            var prevCtxKeys = Object.keys(ctxChange.previousValue || {});
            var currCtxKeys = Object.keys(ctxChange.currentValue || {});

            if (prevCtxKeys.length === currCtxKeys.length) {
              var _iterator12 = _createForOfIteratorHelper(currCtxKeys),
                  _step11;

              try {
                for (_iterator12.s(); !(_step11 = _iterator12.n()).done;) {
                  var propName = _step11.value;

                  if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                  }
                }
              } catch (err) {
                _iterator12.e(err);
              } finally {
                _iterator12.f();
              }

              return false;
            }

            return true;
          }
        }, {
          key: "_updateExistingContext",
          value: function _updateExistingContext(ctx) {
            for (var _i26 = 0, _Object$keys3 = Object.keys(ctx); _i26 < _Object$keys3.length; _i26++) {
              var propName = _Object$keys3[_i26];
              this._viewRef.context[propName] = this.ngTemplateOutletContext[propName];
            }
          }
        }]);

        return NgTemplateOutlet;
      }();

      NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) {
        return new (t || NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]));
      };

      NgTemplateOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgTemplateOutlet,
        selectors: [["", "ngTemplateOutlet", ""]],
        inputs: {
          ngTemplateOutletContext: "ngTemplateOutletContext",
          ngTemplateOutlet: "ngTemplateOutlet"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      NgTemplateOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }];
      };

      NgTemplateOutlet.propDecorators = {
        ngTemplateOutletContext: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        ngTemplateOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgTemplateOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[ngTemplateOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }];
        }, {
          ngTemplateOutletContext: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          ngTemplateOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A collection of Angular directives that are likely to be used in each and every Angular
       * application.
       */


      var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function invalidPipeArgumentError(type, value) {
        return Error("InvalidPipeArgument: '".concat(value, "' for pipe '").concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(type), "'"));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SubscribableStrategy = /*#__PURE__*/function () {
        function SubscribableStrategy() {
          _classCallCheck(this, SubscribableStrategy);
        }

        _createClass2(SubscribableStrategy, [{
          key: "createSubscription",
          value: function createSubscription(async, updateLatestValue) {
            return async.subscribe({
              next: updateLatestValue,
              error: function error(e) {
                throw e;
              }
            });
          }
        }, {
          key: "dispose",
          value: function dispose(subscription) {
            subscription.unsubscribe();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(subscription) {
            subscription.unsubscribe();
          }
        }]);

        return SubscribableStrategy;
      }();

      var PromiseStrategy = /*#__PURE__*/function () {
        function PromiseStrategy() {
          _classCallCheck(this, PromiseStrategy);
        }

        _createClass2(PromiseStrategy, [{
          key: "createSubscription",
          value: function createSubscription(async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) {
              throw e;
            });
          }
        }, {
          key: "dispose",
          value: function dispose(subscription) {}
        }, {
          key: "onDestroy",
          value: function onDestroy(subscription) {}
        }]);

        return PromiseStrategy;
      }();

      var _promiseStrategy = new PromiseStrategy();

      var _subscribableStrategy = new SubscribableStrategy();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Unwraps a value from an asynchronous primitive.
       *
       * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
       * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
       * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
       * potential memory leaks.
       *
       * @usageNotes
       *
       * ### Examples
       *
       * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
       * promise.
       *
       * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
       *
       * It's also possible to use `async` with Observables. The example below binds the `time` Observable
       * to the view. The Observable continuously updates the view with the current time.
       *
       * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
       *
       * @publicApi
       */


      var AsyncPipe = /*#__PURE__*/function () {
        function AsyncPipe(_ref) {
          _classCallCheck(this, AsyncPipe);

          this._ref = _ref;
          this._latestValue = null;
          this._subscription = null;
          this._obj = null;
          this._strategy = null;
        }

        _createClass2(AsyncPipe, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._subscription) {
              this._dispose();
            }
          }
        }, {
          key: "transform",
          value: function transform(obj) {
            if (!this._obj) {
              if (obj) {
                this._subscribe(obj);
              }

              return this._latestValue;
            }

            if (obj !== this._obj) {
              this._dispose();

              return this.transform(obj);
            }

            return this._latestValue;
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(obj) {
            var _this217 = this;

            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) {
              return _this217._updateLatestValue(obj, value);
            });
          }
        }, {
          key: "_selectStrategy",
          value: function _selectStrategy(obj) {
            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(obj)) {
              return _promiseStrategy;
            }

            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisSubscribable"])(obj)) {
              return _subscribableStrategy;
            }

            throw invalidPipeArgumentError(AsyncPipe, obj);
          }
        }, {
          key: "_dispose",
          value: function _dispose() {
            this._strategy.dispose(this._subscription);

            this._latestValue = null;
            this._subscription = null;
            this._obj = null;
          }
        }, {
          key: "_updateLatestValue",
          value: function _updateLatestValue(async, value) {
            if (async === this._obj) {
              this._latestValue = value;

              this._ref.markForCheck();
            }
          }
        }]);

        return AsyncPipe;
      }();

      AsyncPipe.ɵfac = function AsyncPipe_Factory(t) {
        return new (t || AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectPipeChangeDetectorRef"]());
      };

      AsyncPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "async",
        type: AsyncPipe,
        pure: false
      });

      AsyncPipe.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AsyncPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'async',
            pure: false
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Transforms text to all lower case.
       *
       * @see `UpperCasePipe`
       * @see `TitleCasePipe`
       * @usageNotes
       *
       * The following example defines a view that allows the user to enter
       * text, and then uses the pipe to convert the input text to all lower case.
       *
       * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var LowerCasePipe = /*#__PURE__*/function () {
        function LowerCasePipe() {
          _classCallCheck(this, LowerCasePipe);
        }

        _createClass2(LowerCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(LowerCasePipe, value);
            }

            return value.toLowerCase();
          }
        }]);

        return LowerCasePipe;
      }();

      LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) {
        return new (t || LowerCasePipe)();
      };

      LowerCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "lowercase",
        type: LowerCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LowerCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'lowercase'
          }]
        }], null, null);
      })(); //
      // Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
      // can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
      // (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
      // transpilation of this functionality down to ES5 without external tool, the only solution is
      // to use already transpiled form. Example can be found here -
      // https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
      //


      var unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;
      /**
       * Transforms text to title case.
       * Capitalizes the first letter of each word and transforms the
       * rest of the word to lower case.
       * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
       *
       * @see `LowerCasePipe`
       * @see `UpperCasePipe`
       *
       * @usageNotes
       * The following example shows the result of transforming various strings into title case.
       *
       * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
       *
       * @ngModule CommonModule
       * @publicApi
       */

      var TitleCasePipe = /*#__PURE__*/function () {
        function TitleCasePipe() {
          _classCallCheck(this, TitleCasePipe);
        }

        _createClass2(TitleCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(TitleCasePipe, value);
            }

            return value.replace(unicodeWordMatch, function (txt) {
              return txt[0].toUpperCase() + txt.substr(1).toLowerCase();
            });
          }
        }]);

        return TitleCasePipe;
      }();

      TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) {
        return new (t || TitleCasePipe)();
      };

      TitleCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "titlecase",
        type: TitleCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TitleCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'titlecase'
          }]
        }], null, null);
      })();
      /**
       * Transforms text to all upper case.
       * @see `LowerCasePipe`
       * @see `TitleCasePipe`
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var UpperCasePipe = /*#__PURE__*/function () {
        function UpperCasePipe() {
          _classCallCheck(this, UpperCasePipe);
        }

        _createClass2(UpperCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(UpperCasePipe, value);
            }

            return value.toUpperCase();
          }
        }]);

        return UpperCasePipe;
      }();

      UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) {
        return new (t || UpperCasePipe)();
      };

      UpperCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "uppercase",
        type: UpperCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UpperCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'uppercase'
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // clang-format off

      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a date value according to locale rules.
       *
       * Only the `en-US` locale data comes with Angular. To localize dates
       * in another language, you must import the corresponding locale data.
       * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
       *
       * @see `formatDate()`
       *
       *
       * @usageNotes
       *
       * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
       * reformat the date on every change-detection cycle, treat the date as an immutable object
       * and change the reference when the pipe needs to run again.
       *
       * ### Pre-defined format options
       *
       * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |
       * |---------------|-------------------------------------|-------------------------------------------------|
       * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |
       * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |
       * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |
       * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |
       * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |
       * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |
       * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |
       * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |
       * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |
       * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |
       * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |
       * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |
       *
       * ### Custom format options
       *
       * You can construct a format string using symbols to specify the components
       * of a date-time value, as described in the following table.
       * Format details depend on the locale.
       * Fields marked with (*) are only available in the extra data set for the given locale.
       *
       *  | Field type         | Format      | Description                                                   | Example Value                                              |
       *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|
       *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |
       *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |
       *  |                    | GGGGG       | Narrow                                                        | A                                                          |
       *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
       *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
       *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
       *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
       *  | Week-numbering year| Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
       *  |                    | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
       *  |                    | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
       *  |                    | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
       *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |
       *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
       *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |
       *  |                    | MMMM        | Wide                                                          | September                                                  |
       *  |                    | MMMMM       | Narrow                                                        | S                                                          |
       *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |
       *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
       *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |
       *  |                    | LLLL        | Wide                                                          | September                                                  |
       *  |                    | LLLLL       | Narrow                                                        | S                                                          |
       *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |
       *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
       *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |
       *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |
       *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |
       *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
       *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |
       *  |                    | EEEEE       | Narrow                                                        | T                                                          |
       *  |                    | EEEEEE      | Short                                                         | Tu                                                         |
       *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
       *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
       *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |
       *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
       *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
       *  |                    | BBBBB       | Narrow                                                        | md                                                         |
       *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
       *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
       *  |                    | bbbbb       | Narrow                                                        | md                                                         |
       *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |
       *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
       *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |
       *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
       *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |
       *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
       *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |
       *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
       *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |
       *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
       *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
       *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
       *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
       *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
       *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
       *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
       *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
       *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
       *
       *
       * ### Format examples
       *
       * These examples transform a date into various formats,
       * assuming that `dateObj` is a JavaScript `Date` object for
       * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
       * given in the local time for the `en-US` locale.
       *
       * ```
       * {{ dateObj | date }}               // output is 'Jun 15, 2015'
       * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
       * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
       * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
       * ```
       *
       * ### Usage example
       *
       * The following component uses a date pipe to display the current date in different formats.
       *
       * ```
       * @Component({
       *  selector: 'date-pipe',
       *  template: `<div>
       *    <p>Today is {{today | date}}</p>
       *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
       *    <p>The time is {{today | date:'h:mm a z'}}</p>
       *  </div>`
       * })
       * // Get the current date and time as a date-time value.
       * export class DatePipeComponent {
       *   today: number = Date.now();
       * }
       * ```
       *
       * @publicApi
       */
      // clang-format on


      var DatePipe = /*#__PURE__*/function () {
        function DatePipe(locale) {
          _classCallCheck(this, DatePipe);

          this.locale = locale;
        }

        _createClass2(DatePipe, [{
          key: "transform",
          value: function transform(value) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';
            var timezone = arguments.length > 2 ? arguments[2] : undefined;
            var locale = arguments.length > 3 ? arguments[3] : undefined;
            if (value == null || value === '' || value !== value) return null;

            try {
              return formatDate(value, format, locale || this.locale, timezone);
            } catch (error) {
              throw invalidPipeArgumentError(DatePipe, error.message);
            }
          }
        }]);

        return DatePipe;
      }();

      DatePipe.ɵfac = function DatePipe_Factory(t) {
        return new (t || DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      DatePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "date",
        type: DatePipe,
        pure: true
      });

      DatePipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'date',
            pure: true
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _INTERPOLATION_REGEXP = /#/g;
      /**
       * @ngModule CommonModule
       * @description
       *
       * Maps a value to a string that pluralizes the value according to locale rules.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
       *
       * @publicApi
       */

      var I18nPluralPipe = /*#__PURE__*/function () {
        function I18nPluralPipe(_localization) {
          _classCallCheck(this, I18nPluralPipe);

          this._localization = _localization;
        }
        /**
         * @param value the number to be formatted
         * @param pluralMap an object that mimics the ICU format, see
         * http://userguide.icu-project.org/formatparse/messages.
         * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
         * default).
         */


        _createClass2(I18nPluralPipe, [{
          key: "transform",
          value: function transform(value, pluralMap, locale) {
            if (value == null) return '';

            if (typeof pluralMap !== 'object' || pluralMap === null) {
              throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
            }

            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
          }
        }]);

        return I18nPluralPipe;
      }();

      I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) {
        return new (t || I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization));
      };

      I18nPluralPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nPlural",
        type: I18nPluralPipe,
        pure: true
      });

      I18nPluralPipe.ctorParameters = function () {
        return [{
          type: NgLocalization
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](I18nPluralPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'i18nPlural',
            pure: true
          }]
        }], function () {
          return [{
            type: NgLocalization
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Generic selector that displays the string that matches the current value.
       *
       * If none of the keys of the `mapping` match the `value`, then the content
       * of the `other` key is returned when present, otherwise an empty string is returned.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
       *
       * @publicApi
       */


      var I18nSelectPipe = /*#__PURE__*/function () {
        function I18nSelectPipe() {
          _classCallCheck(this, I18nSelectPipe);
        }

        _createClass2(I18nSelectPipe, [{
          key: "transform",
          value:
          /**
           * @param value a string to be internationalized.
           * @param mapping an object that indicates the text that should be displayed
           * for different values of the provided `value`.
           */
          function transform(value, mapping) {
            if (value == null) return '';

            if (typeof mapping !== 'object' || typeof value !== 'string') {
              throw invalidPipeArgumentError(I18nSelectPipe, mapping);
            }

            if (mapping.hasOwnProperty(value)) {
              return mapping[value];
            }

            if (mapping.hasOwnProperty('other')) {
              return mapping['other'];
            }

            return '';
          }
        }]);

        return I18nSelectPipe;
      }();

      I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) {
        return new (t || I18nSelectPipe)();
      };

      I18nSelectPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nSelect",
        type: I18nSelectPipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](I18nSelectPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'i18nSelect',
            pure: true
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Converts a value into its JSON-format representation.  Useful for debugging.
       *
       * @usageNotes
       *
       * The following component uses a JSON pipe to convert an object
       * to JSON format, and displays the string in both formats for comparison.
       *
       * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
       *
       * @publicApi
       */


      var JsonPipe = /*#__PURE__*/function () {
        function JsonPipe() {
          _classCallCheck(this, JsonPipe);
        }

        _createClass2(JsonPipe, [{
          key: "transform",
          value:
          /**
           * @param value A value of any type to convert into a JSON-format string.
           */
          function transform(value) {
            return JSON.stringify(value, null, 2);
          }
        }]);

        return JsonPipe;
      }();

      JsonPipe.ɵfac = function JsonPipe_Factory(t) {
        return new (t || JsonPipe)();
      };

      JsonPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "json",
        type: JsonPipe,
        pure: false
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'json',
            pure: false
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function makeKeyValuePair(key, value) {
        return {
          key: key,
          value: value
        };
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms Object or Map into an array of key value pairs.
       *
       * The output array will be ordered by keys.
       * By default the comparator will be by Unicode point value.
       * You can optionally pass a compareFn if your keys are complex types.
       *
       * @usageNotes
       * ### Examples
       *
       * This examples show how an Object or a Map can be iterated by ngFor with the use of this
       * keyvalue pipe.
       *
       * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
       *
       * @publicApi
       */


      var KeyValuePipe = /*#__PURE__*/function () {
        function KeyValuePipe(differs) {
          _classCallCheck(this, KeyValuePipe);

          this.differs = differs;
          this.keyValues = [];
        }

        _createClass2(KeyValuePipe, [{
          key: "transform",
          value: function transform(input) {
            var _this218 = this;

            var compareFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultComparator;

            if (!input || !(input instanceof Map) && typeof input !== 'object') {
              return null;
            }

            if (!this.differ) {
              // make a differ for whatever type we've been passed in
              this.differ = this.differs.find(input).create();
            }

            var differChanges = this.differ.diff(input);

            if (differChanges) {
              this.keyValues = [];
              differChanges.forEachItem(function (r) {
                _this218.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
              });
              this.keyValues.sort(compareFn);
            }

            return this.keyValues;
          }
        }]);

        return KeyValuePipe;
      }();

      KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {
        return new (t || KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]));
      };

      KeyValuePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "keyvalue",
        type: KeyValuePipe,
        pure: false
      });

      KeyValuePipe.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](KeyValuePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'keyvalue',
            pure: false
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
          }];
        }, null);
      })();

      function defaultComparator(keyValueA, keyValueB) {
        var a = keyValueA.key;
        var b = keyValueB.key; // if same exit with 0;

        if (a === b) return 0; // make sure that undefined are at the end of the sort.

        if (a === undefined) return 1;
        if (b === undefined) return -1; // make sure that nulls are at the end of the sort.

        if (a === null) return 1;
        if (b === null) return -1;

        if (typeof a == 'string' && typeof b == 'string') {
          return a < b ? -1 : 1;
        }

        if (typeof a == 'number' && typeof b == 'number') {
          return a - b;
        }

        if (typeof a == 'boolean' && typeof b == 'boolean') {
          return a < b ? -1 : 1;
        } // `a` and `b` are of different types. Compare their string values.


        var aString = String(a);
        var bString = String(b);
        return aString == bString ? 0 : aString < bString ? -1 : 1;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a value according to digit options and locale rules.
       * Locale determines group sizing and separator,
       * decimal point character, and other locale-specific configurations.
       *
       * @see `formatNumber()`
       *
       * @usageNotes
       *
       * ### digitsInfo
       *
       * The value's decimal representation is specified by the `digitsInfo`
       * parameter, written in the following format:<br>
       *
       * ```
       * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
       * ```
       *
       *  - `minIntegerDigits`:
       * The minimum number of integer digits before the decimal point.
       * Default is 1.
       *
       * - `minFractionDigits`:
       * The minimum number of digits after the decimal point.
       * Default is 0.
       *
       *  - `maxFractionDigits`:
       * The maximum number of digits after the decimal point.
       * Default is 3.
       *
       * If the formatted value is truncated it will be rounded using the "to-nearest" method:
       *
       * ```
       * {{3.6 | number: '1.0-0'}}
       * <!--will output '4'-->
       *
       * {{-3.6 | number:'1.0-0'}}
       * <!--will output '-4'-->
       * ```
       *
       * ### locale
       *
       * `locale` will format a value according to locale rules.
       * Locale determines group sizing and separator,
       * decimal point character, and other locale-specific configurations.
       *
       * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
       *
       * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
       *
       * ### Example
       *
       * The following code shows how the pipe transforms values
       * according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
       *
       * @publicApi
       */


      var DecimalPipe = /*#__PURE__*/function () {
        function DecimalPipe(_locale) {
          _classCallCheck(this, DecimalPipe);

          this._locale = _locale;
        }
        /**
         * @param value The value to be formatted.
         * @param digitsInfo Sets digit and decimal representation.
         * [See more](#digitsinfo).
         * @param locale Specifies what locale format rules to use.
         * [See more](#locale).
         */


        _createClass2(DecimalPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return formatNumber(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(DecimalPipe, error.message);
            }
          }
        }]);

        return DecimalPipe;
      }();

      DecimalPipe.ɵfac = function DecimalPipe_Factory(t) {
        return new (t || DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      DecimalPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "number",
        type: DecimalPipe,
        pure: true
      });

      DecimalPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DecimalPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'number'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms a number to a percentage
       * string, formatted according to locale rules that determine group sizing and
       * separator, decimal-point character, and other locale-specific
       * configurations.
       *
       * @see `formatPercent()`
       *
       * @usageNotes
       * The following code shows how the pipe transforms numbers
       * into text strings, according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
       *
       * @publicApi
       */


      var PercentPipe = /*#__PURE__*/function () {
        function PercentPipe(_locale) {
          _classCallCheck(this, PercentPipe);

          this._locale = _locale;
        }

        _createClass2(PercentPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return formatPercent(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(PercentPipe, error.message);
            }
          }
        }]);

        return PercentPipe;
      }();

      PercentPipe.ɵfac = function PercentPipe_Factory(t) {
        return new (t || PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      PercentPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "percent",
        type: PercentPipe,
        pure: true
      });

      PercentPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PercentPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'percent'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }]
          }];
        }, null);
      })();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms a number to a currency string, formatted according to locale rules
       * that determine group sizing and separator, decimal-point character,
       * and other locale-specific configurations.
       *
       * {@a currency-code-deprecation}
       * <div class="alert is-helpful">
       *
       * **Deprecation notice:**
       *
       * The default currency code is currently always `USD` but this is deprecated from v9.
       *
       * **In v11 the default currency code will be taken from the current locale identified by
       * the `LOCALE_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for
       * more information.**
       *
       * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
       * your application `NgModule`:
       *
       * ```ts
       * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
       * ```
       *
       * </div>
       *
       * @see `getCurrencySymbol()`
       * @see `formatCurrency()`
       *
       * @usageNotes
       * The following code shows how the pipe transforms numbers
       * into text strings, according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
       *
       * @publicApi
       */


      var CurrencyPipe = /*#__PURE__*/function () {
        function CurrencyPipe(_locale) {
          var _defaultCurrencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';

          _classCallCheck(this, CurrencyPipe);

          this._locale = _locale;
          this._defaultCurrencyCode = _defaultCurrencyCode;
        }

        _createClass2(CurrencyPipe, [{
          key: "transform",
          value: function transform(value, currencyCode) {
            var display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'symbol';
            var digitsInfo = arguments.length > 3 ? arguments[3] : undefined;
            var locale = arguments.length > 4 ? arguments[4] : undefined;
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            if (typeof display === 'boolean') {
              if ((typeof ngDevMode === 'undefined' || ngDevMode) && console && console.warn) {
                console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
              }

              display = display ? 'symbol' : 'code';
            }

            var currency = currencyCode || this._defaultCurrencyCode;

            if (display !== 'code') {
              if (display === 'symbol' || display === 'symbol-narrow') {
                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
              } else {
                currency = display;
              }
            }

            try {
              var num = strToNumber(value);
              return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(CurrencyPipe, error.message);
            }
          }
        }]);

        return CurrencyPipe;
      }();

      CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) {
        return new (t || CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"]));
      };

      CurrencyPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "currency",
        type: CurrencyPipe,
        pure: true
      });

      CurrencyPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CurrencyPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'currency'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"]]
            }]
          }];
        }, null);
      })();

      function isValue(value) {
        return !(value == null || value === '' || value !== value);
      }
      /**
       * Transforms a string into a number (if needed).
       */


      function strToNumber(value) {
        // Convert strings to numbers
        if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
          return Number(value);
        }

        if (typeof value !== 'number') {
          throw new Error("".concat(value, " is not a number"));
        }

        return value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Creates a new `Array` or `String` containing a subset (slice) of the elements.
       *
       * @usageNotes
       *
       * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
       * and `String.prototype.slice()`.
       *
       * When operating on an `Array`, the returned `Array` is always a copy even when all
       * the elements are being returned.
       *
       * When operating on a blank value, the pipe returns the blank value.
       *
       * ### List Example
       *
       * This `ngFor` example:
       *
       * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
       *
       * produces the following:
       *
       * ```html
       * <li>b</li>
       * <li>c</li>
       * ```
       *
       * ### String Examples
       *
       * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
       *
       * @publicApi
       */


      var SlicePipe = /*#__PURE__*/function () {
        function SlicePipe() {
          _classCallCheck(this, SlicePipe);
        }

        _createClass2(SlicePipe, [{
          key: "transform",
          value: function transform(value, start, end) {
            if (value == null) return null;

            if (!this.supports(value)) {
              throw invalidPipeArgumentError(SlicePipe, value);
            }

            return value.slice(start, end);
          }
        }, {
          key: "supports",
          value: function supports(obj) {
            return typeof obj === 'string' || Array.isArray(obj);
          }
        }]);

        return SlicePipe;
      }();

      SlicePipe.ɵfac = function SlicePipe_Factory(t) {
        return new (t || SlicePipe)();
      };

      SlicePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "slice",
        type: SlicePipe,
        pure: false
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SlicePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
          args: [{
            name: 'slice',
            pure: false
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A collection of Angular pipes that are likely to be used in each and every application.
       */


      var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This does not contain the location providers,
      // as they need some platform specific implementations to work.

      /**
       * Exports all the basic Angular directives and pipes,
       * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
       * Re-exported by `BrowserModule`, which is included automatically in the root
       * `AppModule` when you create a new app with the CLI `new` command.
       *
       * * The `providers` options configure the NgModule's injector to provide
       * localization dependencies to members.
       * * The `exports` options make the declared directives and pipes available for import
       * by other NgModules.
       *
       * @publicApi
       */

      var CommonModule = function CommonModule() {
        _classCallCheck(this, CommonModule);
      };

      CommonModule.ɵfac = function CommonModule_Factory(t) {
        return new (t || CommonModule)();
      };

      CommonModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: CommonModule
      });
      CommonModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: NgLocalization,
          useClass: NgLocaleLocalization
        }]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](CommonModule, {
          declarations: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe],
          exports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CommonModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
            exports: [COMMON_DIRECTIVES, COMMON_PIPES],
            providers: [{
              provide: NgLocalization,
              useClass: NgLocaleLocalization
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PLATFORM_BROWSER_ID = 'browser';
      var PLATFORM_SERVER_ID = 'server';
      var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
      var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
      /**
       * Returns whether a platform id represents a browser platform.
       * @publicApi
       */

      function isPlatformBrowser(platformId) {
        return platformId === PLATFORM_BROWSER_ID;
      }
      /**
       * Returns whether a platform id represents a server platform.
       * @publicApi
       */


      function isPlatformServer(platformId) {
        return platformId === PLATFORM_SERVER_ID;
      }
      /**
       * Returns whether a platform id represents a web worker app platform.
       * @publicApi
       */


      function isPlatformWorkerApp(platformId) {
        return platformId === PLATFORM_WORKER_APP_ID;
      }
      /**
       * Returns whether a platform id represents a web worker UI platform.
       * @publicApi
       */


      function isPlatformWorkerUi(platformId) {
        return platformId === PLATFORM_WORKER_UI_ID;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('11.2.6');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
       *
       * @publicApi
       */

      var ViewportScroller = function ViewportScroller() {
        _classCallCheck(this, ViewportScroller);
      }; // De-sugared tree-shakable injection
      // See #23917

      /** @nocollapse */


      ViewportScroller.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        token: ViewportScroller,
        providedIn: 'root',
        factory: function factory() {
          return new BrowserViewportScroller(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT), window);
        }
      });
      /**
       * Manages the scroll position for a browser window.
       */

      var BrowserViewportScroller = /*#__PURE__*/function () {
        function BrowserViewportScroller(document, window) {
          _classCallCheck(this, BrowserViewportScroller);

          this.document = document;
          this.window = window;

          this.offset = function () {
            return [0, 0];
          };
        }
        /**
         * Configures the top offset used when scrolling to an anchor.
         * @param offset A position in screen coordinates (a tuple with x and y values)
         * or a function that returns the top offset position.
         *
         */


        _createClass2(BrowserViewportScroller, [{
          key: "setOffset",
          value: function setOffset(offset) {
            if (Array.isArray(offset)) {
              this.offset = function () {
                return offset;
              };
            } else {
              this.offset = offset;
            }
          }
          /**
           * Retrieves the current scroll position.
           * @returns The position in screen coordinates.
           */

        }, {
          key: "getScrollPosition",
          value: function getScrollPosition() {
            if (this.supportsScrolling()) {
              return [this.window.pageXOffset, this.window.pageYOffset];
            } else {
              return [0, 0];
            }
          }
          /**
           * Sets the scroll position.
           * @param position The new position in screen coordinates.
           */

        }, {
          key: "scrollToPosition",
          value: function scrollToPosition(position) {
            if (this.supportsScrolling()) {
              this.window.scrollTo(position[0], position[1]);
            }
          }
          /**
           * Scrolls to an element and attempts to focus the element.
           *
           * Note that the function name here is misleading in that the target string may be an ID for a
           * non-anchor element.
           *
           * @param target The ID of an element or name of the anchor.
           *
           * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
           * @see https://html.spec.whatwg.org/#scroll-to-fragid
           */

        }, {
          key: "scrollToAnchor",
          value: function scrollToAnchor(target) {
            var _a;

            if (!this.supportsScrolling()) {
              return;
            } // TODO(atscott): The correct behavior for `getElementsByName` would be to also verify that the
            // element is an anchor. However, this could be considered a breaking change and should be
            // done in a major version.


            var elSelected = (_a = this.document.getElementById(target)) !== null && _a !== void 0 ? _a : this.document.getElementsByName(target)[0];

            if (elSelected === undefined) {
              return;
            }

            this.scrollToElement(elSelected); // After scrolling to the element, the spec dictates that we follow the focus steps for the
            // target. Rather than following the robust steps, simply attempt focus.

            this.attemptFocus(elSelected);
          }
          /**
           * Disables automatic scroll restoration provided by the browser.
           */

        }, {
          key: "setHistoryScrollRestoration",
          value: function setHistoryScrollRestoration(scrollRestoration) {
            if (this.supportScrollRestoration()) {
              var history = this.window.history;

              if (history && history.scrollRestoration) {
                history.scrollRestoration = scrollRestoration;
              }
            }
          }
          /**
           * Scrolls to an element using the native offset and the specified offset set on this scroller.
           *
           * The offset can be used when we know that there is a floating header and scrolling naively to an
           * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
           */

        }, {
          key: "scrollToElement",
          value: function scrollToElement(el) {
            var rect = el.getBoundingClientRect();
            var left = rect.left + this.window.pageXOffset;
            var top = rect.top + this.window.pageYOffset;
            var offset = this.offset();
            this.window.scrollTo(left - offset[0], top - offset[1]);
          }
          /**
           * Calls `focus` on the `focusTarget` and returns `true` if the element was focused successfully.
           *
           * If `false`, further steps may be necessary to determine a valid substitute to be focused
           * instead.
           *
           * @see https://html.spec.whatwg.org/#get-the-focusable-area
           * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus
           * @see https://html.spec.whatwg.org/#focusable-area
           */

        }, {
          key: "attemptFocus",
          value: function attemptFocus(focusTarget) {
            focusTarget.focus();
            return this.document.activeElement === focusTarget;
          }
          /**
           * We only support scroll restoration when we can get a hold of window.
           * This means that we do not support this behavior when running in a web worker.
           *
           * Lifting this restriction right now would require more changes in the dom adapter.
           * Since webworkers aren't widely used, we will lift it once RouterScroller is
           * battle-tested.
           */

        }, {
          key: "supportScrollRestoration",
          value: function supportScrollRestoration() {
            try {
              if (!this.supportsScrolling()) {
                return false;
              } // The `scrollRestoration` property could be on the `history` instance or its prototype.


              var scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) || getScrollRestorationProperty(Object.getPrototypeOf(this.window.history)); // We can write to the `scrollRestoration` property if it is a writable data field or it has a
              // setter function.

              return !!scrollRestorationDescriptor && !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);
            } catch (_a) {
              return false;
            }
          }
        }, {
          key: "supportsScrolling",
          value: function supportsScrolling() {
            try {
              return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;
            } catch (_a) {
              return false;
            }
          }
        }]);

        return BrowserViewportScroller;
      }();

      function getScrollRestorationProperty(obj) {
        return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');
      }
      /**
       * Provides an empty implementation of the viewport scroller.
       */


      var NullViewportScroller = /*#__PURE__*/function () {
        function NullViewportScroller() {
          _classCallCheck(this, NullViewportScroller);
        }

        _createClass2(NullViewportScroller, [{
          key: "setOffset",
          value:
          /**
           * Empty implementation
           */
          function setOffset(offset) {}
          /**
           * Empty implementation
           */

        }, {
          key: "getScrollPosition",
          value: function getScrollPosition() {
            return [0, 0];
          }
          /**
           * Empty implementation
           */

        }, {
          key: "scrollToPosition",
          value: function scrollToPosition(position) {}
          /**
           * Empty implementation
           */

        }, {
          key: "scrollToAnchor",
          value: function scrollToAnchor(anchor) {}
          /**
           * Empty implementation
           */

        }, {
          key: "setHistoryScrollRestoration",
          value: function setHistoryScrollRestoration(scrollRestoration) {}
        }]);

        return NullViewportScroller;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=common.js.map

      /***/

    },

    /***/
    "p9/F":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/buffer.js ***!
      \*****************************************************************/

    /*! exports provided: buffer */

    /***/
    function p9F(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buffer", function () {
        return buffer;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function buffer(closingNotifier) {
        return function bufferOperatorFunction(source) {
          return source.lift(new BufferOperator(closingNotifier));
        };
      }

      var BufferOperator = /*#__PURE__*/function () {
        function BufferOperator(closingNotifier) {
          _classCallCheck(this, BufferOperator);

          this.closingNotifier = closingNotifier;
        }

        _createClass2(BufferOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
          }
        }]);

        return BufferOperator;
      }();

      var BufferSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP16) {
        _inherits(BufferSubscriber, _innerSubscribe__WEBP16);

        var _super161 = _createSuper(BufferSubscriber);

        function BufferSubscriber(destination, closingNotifier) {
          var _this219;

          _classCallCheck(this, BufferSubscriber);

          _this219 = _super161.call(this, destination);
          _this219.buffer = [];

          _this219.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(closingNotifier, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](_assertThisInitialized(_this219))));

          return _this219;
        }

        _createClass2(BufferSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.buffer.push(value);
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
          }
        }]);

        return BufferSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=buffer.js.map

      /***/

    },

    /***/
    "pLZG":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/filter.js ***!
      \*****************************************************************/

    /*! exports provided: filter */

    /***/
    function pLZG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "filter", function () {
        return filter;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
        };
      }

      var FilterOperator = /*#__PURE__*/function () {
        function FilterOperator(predicate, thisArg) {
          _classCallCheck(this, FilterOperator);

          this.predicate = predicate;
          this.thisArg = thisArg;
        }

        _createClass2(FilterOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
          }
        }]);

        return FilterOperator;
      }();

      var FilterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_41) {
        _inherits(FilterSubscriber, _Subscriber__WEBPACK_41);

        var _super162 = _createSuper(FilterSubscriber);

        function FilterSubscriber(destination, predicate, thisArg) {
          var _this220;

          _classCallCheck(this, FilterSubscriber);

          _this220 = _super162.call(this, destination);
          _this220.predicate = predicate;
          _this220.thisArg = thisArg;
          _this220.count = 0;
          return _this220;
        }

        _createClass2(FilterSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;

            try {
              result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            if (result) {
              this.destination.next(value);
            }
          }
        }]);

        return FilterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=filter.js.map

      /***/

    },

    /***/
    "pLzU":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js ***!
      \*************************************************************************/

    /*! exports provided: subscribeToIterable */

    /***/
    function pLzU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeToIterable", function () {
        return subscribeToIterable;
      });
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/iterator */
      "Lhse");

      var subscribeToIterable = function subscribeToIterable(iterable) {
        return function (subscriber) {
          var iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]]();

          do {
            var item = void 0;

            try {
              item = iterator.next();
            } catch (err) {
              subscriber.error(err);
              return subscriber;
            }

            if (item.done) {
              subscriber.complete();
              break;
            }

            subscriber.next(item.value);

            if (subscriber.closed) {
              break;
            }
          } while (true);

          if (typeof iterator["return"] === 'function') {
            subscriber.add(function () {
              if (iterator["return"]) {
                iterator["return"]();
              }
            });
          }

          return subscriber;
        };
      }; //# sourceMappingURL=subscribeToIterable.js.map

      /***/

    },

    /***/
    "pXlZ":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js ***!
      \*********************************************************************/

    /*! exports provided: windowWhen */

    /***/
    function pXlZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "windowWhen", function () {
        return windowWhen;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");

      function windowWhen(closingSelector) {
        return function windowWhenOperatorFunction(source) {
          return source.lift(new WindowOperator(closingSelector));
        };
      }

      var WindowOperator = /*#__PURE__*/function () {
        function WindowOperator(closingSelector) {
          _classCallCheck(this, WindowOperator);

          this.closingSelector = closingSelector;
        }

        _createClass2(WindowOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
          }
        }]);

        return WindowOperator;
      }();

      var WindowSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB5) {
        _inherits(WindowSubscriber, _OuterSubscriber__WEB5);

        var _super163 = _createSuper(WindowSubscriber);

        function WindowSubscriber(destination, closingSelector) {
          var _this221;

          _classCallCheck(this, WindowSubscriber);

          _this221 = _super163.call(this, destination);
          _this221.destination = destination;
          _this221.closingSelector = closingSelector;

          _this221.openWindow();

          return _this221;
        }

        _createClass2(WindowSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
            this.openWindow(innerSub);
          }
        }, {
          key: "notifyError",
          value: function notifyError(error) {
            this._error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(innerSub) {
            this.openWindow(innerSub);
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.window.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
          }
        }, {
          key: "unsubscribeClosingNotification",
          value: function unsubscribeClosingNotification() {
            if (this.closingNotification) {
              this.closingNotification.unsubscribe();
            }
          }
        }, {
          key: "openWindow",
          value: function openWindow() {
            var innerSub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (innerSub) {
              this.remove(innerSub);
              innerSub.unsubscribe();
            }

            var prevWindow = this.window;

            if (prevWindow) {
              prevWindow.complete();
            }

            var window = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
            this.destination.next(window);
            var closingNotifier;

            try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector();
            } catch (e) {
              this.destination.error(e);
              this.window.error(e);
              return;
            }

            this.add(this.closingNotification = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, closingNotifier));
          }
        }]);

        return WindowSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=windowWhen.js.map

      /***/

    },

    /***/
    "pjAE":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js ***!
      \*************************************************************************/

    /*! exports provided: UnsubscriptionError */

    /***/
    function pjAE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function () {
        return UnsubscriptionError;
      });

      var UnsubscriptionErrorImpl = function () {
        function UnsubscriptionErrorImpl(errors) {
          Error.call(this);
          this.message = errors ? "".concat(errors.length, " errors occurred during unsubscription:\n").concat(errors.map(function (err, i) {
            return "".concat(i + 1, ") ").concat(err.toString());
          }).join('\n  ')) : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
          return this;
        }

        UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
        return UnsubscriptionErrorImpl;
      }();

      var UnsubscriptionError = UnsubscriptionErrorImpl; //# sourceMappingURL=UnsubscriptionError.js.map

      /***/
    },

    /***/
    "pxpQ":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/observeOn.js ***!
      \********************************************************************/

    /*! exports provided: observeOn, ObserveOnOperator, ObserveOnSubscriber, ObserveOnMessage */

    /***/
    function pxpQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "observeOn", function () {
        return observeOn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ObserveOnOperator", function () {
        return ObserveOnOperator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ObserveOnSubscriber", function () {
        return ObserveOnSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ObserveOnMessage", function () {
        return ObserveOnMessage;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Notification */
      "WMd4");

      function observeOn(scheduler) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return function observeOnOperatorFunction(source) {
          return source.lift(new ObserveOnOperator(scheduler, delay));
        };
      }

      var ObserveOnOperator = /*#__PURE__*/function () {
        function ObserveOnOperator(scheduler) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, ObserveOnOperator);

          this.scheduler = scheduler;
          this.delay = delay;
        }

        _createClass2(ObserveOnOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
          }
        }]);

        return ObserveOnOperator;
      }();

      var ObserveOnSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_42) {
        _inherits(ObserveOnSubscriber, _Subscriber__WEBPACK_42);

        var _super164 = _createSuper(ObserveOnSubscriber);

        function ObserveOnSubscriber(destination, scheduler) {
          var _this222;

          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          _classCallCheck(this, ObserveOnSubscriber);

          _this222 = _super164.call(this, destination);
          _this222.scheduler = scheduler;
          _this222.delay = delay;
          return _this222;
        }

        _createClass2(ObserveOnSubscriber, [{
          key: "scheduleMessage",
          value: function scheduleMessage(notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
            this.unsubscribe();
          }
        }], [{
          key: "dispatch",
          value: function dispatch(arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
          }
        }]);

        return ObserveOnSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var ObserveOnMessage = function ObserveOnMessage(notification, destination) {
        _classCallCheck(this, ObserveOnMessage);

        this.notification = notification;
        this.destination = destination;
      }; //# sourceMappingURL=observeOn.js.map

      /***/

    },

    /***/
    "q7zd":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js ***!
      \**********************************************************************/

    /*! exports provided: concatMapTo */

    /***/
    function q7zd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "concatMapTo", function () {
        return concatMapTo;
      });
      /* harmony import */


      var _concatMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./concatMap */
      "bOdf");

      function concatMapTo(innerObservable, resultSelector) {
        return Object(_concatMap__WEBPACK_IMPORTED_MODULE_0__["concatMap"])(function () {
          return innerObservable;
        }, resultSelector);
      } //# sourceMappingURL=concatMapTo.js.map

      /***/

    },

    /***/
    "q92s":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/merge.js ***!
      \****************************************************************/

    /*! exports provided: merge */

    /***/
    function q92s(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "merge", function () {
        return merge;
      });
      /* harmony import */


      var _observable_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/merge */
      "VRyK");

      function merge() {
        for (var _len46 = arguments.length, observables = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {
          observables[_key46] = arguments[_key46];
        }

        return function (source) {
          return source.lift.call(Object(_observable_merge__WEBPACK_IMPORTED_MODULE_0__["merge"]).apply(void 0, [source].concat(observables)));
        };
      } //# sourceMappingURL=merge.js.map

      /***/

    },

    /***/
    "qCKp":
    /*!*********************************************!*\
      !*** ./node_modules/rxjs/_esm2015/index.js ***!
      \*********************************************/

    /*! exports provided: Observable, ConnectableObservable, GroupedObservable, observable, Subject, BehaviorSubject, ReplaySubject, AsyncSubject, asap, asapScheduler, async, asyncScheduler, queue, queueScheduler, animationFrame, animationFrameScheduler, VirtualTimeScheduler, VirtualAction, Scheduler, Subscription, Subscriber, Notification, NotificationKind, pipe, noop, identity, isObservable, ArgumentOutOfRangeError, EmptyError, ObjectUnsubscribedError, UnsubscriptionError, TimeoutError, bindCallback, bindNodeCallback, combineLatest, concat, defer, empty, forkJoin, from, fromEvent, fromEventPattern, generate, iif, interval, merge, never, of, onErrorResumeNext, pairs, partition, race, range, throwError, timer, using, zip, scheduled, EMPTY, NEVER, config */

    /***/
    function qCKp(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _internal_Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./internal/Observable */
      "HDdC");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Observable", function () {
        return _internal_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"];
      });
      /* harmony import */


      var _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./internal/observable/ConnectableObservable */
      "EQ5u");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function () {
        return _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__["ConnectableObservable"];
      });
      /* harmony import */


      var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./internal/operators/groupBy */
      "OQgR");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "GroupedObservable", function () {
        return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__["GroupedObservable"];
      });
      /* harmony import */


      var _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./internal/symbol/observable */
      "kJWO");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "observable", function () {
        return _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__["observable"];
      });
      /* harmony import */


      var _internal_Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./internal/Subject */
      "XNiG");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Subject", function () {
        return _internal_Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"];
      });
      /* harmony import */


      var _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./internal/BehaviorSubject */
      "2Vo4");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function () {
        return _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"];
      });
      /* harmony import */


      var _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./internal/ReplaySubject */
      "jtHE");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ReplaySubject", function () {
        return _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__["ReplaySubject"];
      });
      /* harmony import */


      var _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./internal/AsyncSubject */
      "NHP+");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "AsyncSubject", function () {
        return _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__["AsyncSubject"];
      });
      /* harmony import */


      var _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./internal/scheduler/asap */
      "7Hc7");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "asap", function () {
        return _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__["asap"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "asapScheduler", function () {
        return _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__["asapScheduler"];
      });
      /* harmony import */


      var _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./internal/scheduler/async */
      "D0XW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "async", function () {
        return _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__["async"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "asyncScheduler", function () {
        return _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__["asyncScheduler"];
      });
      /* harmony import */


      var _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./internal/scheduler/queue */
      "qgXg");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "queue", function () {
        return _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__["queue"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "queueScheduler", function () {
        return _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__["queueScheduler"];
      });
      /* harmony import */


      var _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ./internal/scheduler/animationFrame */
      "eNwd");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "animationFrame", function () {
        return _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__["animationFrame"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function () {
        return _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__["animationFrameScheduler"];
      });
      /* harmony import */


      var _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ./internal/scheduler/VirtualTimeScheduler */
      "iKkX");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function () {
        return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualTimeScheduler"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "VirtualAction", function () {
        return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualAction"];
      });
      /* harmony import */


      var _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! ./internal/Scheduler */
      "Y/cZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Scheduler", function () {
        return _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__["Scheduler"];
      });
      /* harmony import */


      var _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ./internal/Subscription */
      "quSY");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Subscription", function () {
        return _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__["Subscription"];
      });
      /* harmony import */


      var _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! ./internal/Subscriber */
      "7o/Q");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Subscriber", function () {
        return _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__["Subscriber"];
      });
      /* harmony import */


      var _internal_Notification__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! ./internal/Notification */
      "WMd4");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Notification", function () {
        return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["Notification"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "NotificationKind", function () {
        return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["NotificationKind"];
      });
      /* harmony import */


      var _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! ./internal/util/pipe */
      "mCNh");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "pipe", function () {
        return _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__["pipe"];
      });
      /* harmony import */


      var _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! ./internal/util/noop */
      "KqfI");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "noop", function () {
        return _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__["noop"];
      });
      /* harmony import */


      var _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! ./internal/util/identity */
      "SpAZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "identity", function () {
        return _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__["identity"];
      });
      /* harmony import */


      var _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! ./internal/util/isObservable */
      "7+OI");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "isObservable", function () {
        return _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__["isObservable"];
      });
      /* harmony import */


      var _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! ./internal/util/ArgumentOutOfRangeError */
      "4I5i");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function () {
        return _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__["ArgumentOutOfRangeError"];
      });
      /* harmony import */


      var _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! ./internal/util/EmptyError */
      "sVev");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmptyError", function () {
        return _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__["EmptyError"];
      });
      /* harmony import */


      var _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! ./internal/util/ObjectUnsubscribedError */
      "9ppp");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function () {
        return _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__["ObjectUnsubscribedError"];
      });
      /* harmony import */


      var _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! ./internal/util/UnsubscriptionError */
      "pjAE");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function () {
        return _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__["UnsubscriptionError"];
      });
      /* harmony import */


      var _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! ./internal/util/TimeoutError */
      "Y6u4");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TimeoutError", function () {
        return _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__["TimeoutError"];
      });
      /* harmony import */


      var _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! ./internal/observable/bindCallback */
      "QqCr");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bindCallback", function () {
        return _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__["bindCallback"];
      });
      /* harmony import */


      var _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! ./internal/observable/bindNodeCallback */
      "4O5X");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function () {
        return _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__["bindNodeCallback"];
      });
      /* harmony import */


      var _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! ./internal/observable/combineLatest */
      "itXk");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
        return _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__["combineLatest"];
      });
      /* harmony import */


      var _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! ./internal/observable/concat */
      "GyhO");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "concat", function () {
        return _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__["concat"];
      });
      /* harmony import */


      var _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! ./internal/observable/defer */
      "NXyV");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "defer", function () {
        return _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__["defer"];
      });
      /* harmony import */


      var _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
      /*! ./internal/observable/empty */
      "EY2u");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "empty", function () {
        return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["empty"];
      });
      /* harmony import */


      var _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
      /*! ./internal/observable/forkJoin */
      "cp0P");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "forkJoin", function () {
        return _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__["forkJoin"];
      });
      /* harmony import */


      var _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
      /*! ./internal/observable/from */
      "Cfvw");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "from", function () {
        return _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__["from"];
      });
      /* harmony import */


      var _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
      /*! ./internal/observable/fromEvent */
      "xgIS");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "fromEvent", function () {
        return _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__["fromEvent"];
      });
      /* harmony import */


      var _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
      /*! ./internal/observable/fromEventPattern */
      "04ZW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "fromEventPattern", function () {
        return _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__["fromEventPattern"];
      });
      /* harmony import */


      var _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
      /*! ./internal/observable/generate */
      "WPMC");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "generate", function () {
        return _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__["generate"];
      });
      /* harmony import */


      var _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
      /*! ./internal/observable/iif */
      "r0o6");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "iif", function () {
        return _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__["iif"];
      });
      /* harmony import */


      var _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
      /*! ./internal/observable/interval */
      "l5mm");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "interval", function () {
        return _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__["interval"];
      });
      /* harmony import */


      var _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
      /*! ./internal/observable/merge */
      "VRyK");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "merge", function () {
        return _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__["merge"];
      });
      /* harmony import */


      var _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
      /*! ./internal/observable/never */
      "5yfJ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "never", function () {
        return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["never"];
      });
      /* harmony import */


      var _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
      /*! ./internal/observable/of */
      "LRne");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "of", function () {
        return _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__["of"];
      });
      /* harmony import */


      var _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
      /*! ./internal/observable/onErrorResumeNext */
      "Hkhx");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
        return _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__["onErrorResumeNext"];
      });
      /* harmony import */


      var _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
      /*! ./internal/observable/pairs */
      "hKy8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "pairs", function () {
        return _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__["pairs"];
      });
      /* harmony import */


      var _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
      /*! ./internal/observable/partition */
      "2QGa");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "partition", function () {
        return _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__["partition"];
      });
      /* harmony import */


      var _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
      /*! ./internal/observable/race */
      "Nv8m");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "race", function () {
        return _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__["race"];
      });
      /* harmony import */


      var _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
      /*! ./internal/observable/range */
      "NNCq");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "range", function () {
        return _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__["range"];
      });
      /* harmony import */


      var _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
      /*! ./internal/observable/throwError */
      "z6cu");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "throwError", function () {
        return _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__["throwError"];
      });
      /* harmony import */


      var _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
      /*! ./internal/observable/timer */
      "PqYM");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "timer", function () {
        return _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__["timer"];
      });
      /* harmony import */


      var _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
      /*! ./internal/observable/using */
      "Qn8I");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "using", function () {
        return _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__["using"];
      });
      /* harmony import */


      var _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
      /*! ./internal/observable/zip */
      "1uah");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "zip", function () {
        return _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__["zip"];
      });
      /* harmony import */


      var _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
      /*! ./internal/scheduled/scheduled */
      "7HRe");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "scheduled", function () {
        return _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__["scheduled"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EMPTY", function () {
        return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["EMPTY"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "NEVER", function () {
        return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["NEVER"];
      });
      /* harmony import */


      var _internal_config__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
      /*! ./internal/config */
      "2fFW");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "config", function () {
        return _internal_config__WEBPACK_IMPORTED_MODULE_52__["config"];
      }); //# sourceMappingURL=index.js.map

      /***/

    },

    /***/
    "qZ0a":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/publishLast.js ***!
      \**********************************************************************/

    /*! exports provided: publishLast */

    /***/
    function qZ0a(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "publishLast", function () {
        return publishLast;
      });
      /* harmony import */


      var _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../AsyncSubject */
      "NHP+");
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./multicast */
      "oB13");

      function publishLast() {
        return function (source) {
          return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__["AsyncSubject"]())(source);
        };
      } //# sourceMappingURL=publishLast.js.map

      /***/

    },

    /***/
    "qgXg":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/queue.js ***!
      \****************************************************************/

    /*! exports provided: queueScheduler, queue */

    /***/
    function qgXg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "queueScheduler", function () {
        return queueScheduler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "queue", function () {
        return queue;
      });
      /* harmony import */


      var _QueueAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./QueueAction */
      "YuR2");
      /* harmony import */


      var _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./QueueScheduler */
      "Hh5Z");

      var queueScheduler = new _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__["QueueScheduler"](_QueueAction__WEBPACK_IMPORTED_MODULE_0__["QueueAction"]);
      var queue = queueScheduler; //# sourceMappingURL=queue.js.map

      /***/
    },

    /***/
    "quSY":
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subscription.js ***!
      \*************************************************************/

    /*! exports provided: Subscription */

    /***/
    function quSY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Subscription", function () {
        return Subscription;
      });
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./util/isArray */
      "DH7j");
      /* harmony import */


      var _util_isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/isObject */
      "XoHu");
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./util/isFunction */
      "n6bG");
      /* harmony import */


      var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/UnsubscriptionError */
      "pjAE");

      var Subscription = /*#__PURE__*/function () {
        function Subscription(unsubscribe) {
          _classCallCheck(this, Subscription);

          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;

          if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
          }
        }

        _createClass2(Subscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            var errors;

            if (this.closed) {
              return;
            }

            var _parentOrParents = this._parentOrParents,
                _ctorUnsubscribe = this._ctorUnsubscribe,
                _unsubscribe = this._unsubscribe,
                _subscriptions = this._subscriptions;
            this.closed = true;
            this._parentOrParents = null;
            this._subscriptions = null;

            if (_parentOrParents instanceof Subscription) {
              _parentOrParents.remove(this);
            } else if (_parentOrParents !== null) {
              for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent = _parentOrParents[index];
                parent.remove(this);
              }
            }

            if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(_unsubscribe)) {
              if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
              }

              try {
                _unsubscribe.call(this);
              } catch (e) {
                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"] ? flattenUnsubscriptionErrors(e.errors) : [e];
              }
            }

            if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(_subscriptions)) {
              var _index4 = -1;

              var len = _subscriptions.length;

              while (++_index4 < len) {
                var sub = _subscriptions[_index4];

                if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_1__["isObject"])(sub)) {
                  try {
                    sub.unsubscribe();
                  } catch (e) {
                    errors = errors || [];

                    if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"]) {
                      errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                    } else {
                      errors.push(e);
                    }
                  }
                }
              }
            }

            if (errors) {
              throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"](errors);
            }
          }
        }, {
          key: "add",
          value: function add(teardown) {
            var subscription = teardown;

            if (!teardown) {
              return Subscription.EMPTY;
            }

            switch (typeof teardown) {
              case 'function':
                subscription = new Subscription(teardown);

              case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                  return subscription;
                } else if (this.closed) {
                  subscription.unsubscribe();
                  return subscription;
                } else if (!(subscription instanceof Subscription)) {
                  var tmp = subscription;
                  subscription = new Subscription();
                  subscription._subscriptions = [tmp];
                }

                break;

              default:
                {
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
                }
            }

            var _subscription = subscription,
                _parentOrParents = _subscription._parentOrParents;

            if (_parentOrParents === null) {
              subscription._parentOrParents = this;
            } else if (_parentOrParents instanceof Subscription) {
              if (_parentOrParents === this) {
                return subscription;
              }

              subscription._parentOrParents = [_parentOrParents, this];
            } else if (_parentOrParents.indexOf(this) === -1) {
              _parentOrParents.push(this);
            } else {
              return subscription;
            }

            var subscriptions = this._subscriptions;

            if (subscriptions === null) {
              this._subscriptions = [subscription];
            } else {
              subscriptions.push(subscription);
            }

            return subscription;
          }
        }, {
          key: "remove",
          value: function remove(subscription) {
            var subscriptions = this._subscriptions;

            if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);

              if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
              }
            }
          }
        }]);

        return Subscription;
      }();

      Subscription.EMPTY = function (empty) {
        empty.closed = true;
        return empty;
      }(new Subscription());

      function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) {
          return errs.concat(err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"] ? err.errors : err);
        }, []);
      } //# sourceMappingURL=Subscription.js.map

      /***/

    },

    /***/
    "r0WS":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/timestamp.js ***!
      \********************************************************************/

    /*! exports provided: timestamp, Timestamp */

    /***/
    function r0WS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "timestamp", function () {
        return timestamp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Timestamp", function () {
        return Timestamp;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./map */
      "lJxs");

      function timestamp() {
        var scheduler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        return Object(_map__WEBPACK_IMPORTED_MODULE_1__["map"])(function (value) {
          return new Timestamp(value, scheduler.now());
        });
      }

      var Timestamp = function Timestamp(value, timestamp) {
        _classCallCheck(this, Timestamp);

        this.value = value;
        this.timestamp = timestamp;
      }; //# sourceMappingURL=timestamp.js.map

      /***/

    },

    /***/
    "r0o6":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/iif.js ***!
      \***************************************************************/

    /*! exports provided: iif */

    /***/
    function r0o6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "iif", function () {
        return iif;
      });
      /* harmony import */


      var _defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./defer */
      "NXyV");
      /* harmony import */


      var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./empty */
      "EY2u");

      function iif(condition) {
        var trueResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
        var falseResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
        return Object(_defer__WEBPACK_IMPORTED_MODULE_0__["defer"])(function () {
          return condition() ? trueResult : falseResult;
        });
      } //# sourceMappingURL=iif.js.map

      /***/

    },

    /***/
    "sTY7":
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js ***!
      \***********************************************************************/

    /*! exports provided: windowToggle */

    /***/
    function sTY7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "windowToggle", function () {
        return windowToggle;
      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      "quSY");
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");

      function windowToggle(openings, closingSelector) {
        return function (source) {
          return source.lift(new WindowToggleOperator(openings, closingSelector));
        };
      }

      var WindowToggleOperator = /*#__PURE__*/function () {
        function WindowToggleOperator(openings, closingSelector) {
          _classCallCheck(this, WindowToggleOperator);

          this.openings = openings;
          this.closingSelector = closingSelector;
        }

        _createClass2(WindowToggleOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
          }
        }]);

        return WindowToggleOperator;
      }();

      var WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB6) {
        _inherits(WindowToggleSubscriber, _OuterSubscriber__WEB6);

        var _super165 = _createSuper(WindowToggleSubscriber);

        function WindowToggleSubscriber(destination, openings, closingSelector) {
          var _this223;

          _classCallCheck(this, WindowToggleSubscriber);

          _this223 = _super165.call(this, destination);
          _this223.openings = openings;
          _this223.closingSelector = closingSelector;
          _this223.contexts = [];

          _this223.add(_this223.openSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(_assertThisInitialized(_this223), openings, openings));

          return _this223;
        }

        _createClass2(WindowToggleSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var contexts = this.contexts;

            if (contexts) {
              var len = contexts.length;

              for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
              }
            }
          }
        }, {
          key: "_error",
          value: function _error(err) {
            var contexts = this.contexts;
            this.contexts = null;

            if (contexts) {
              var len = contexts.length;
              var index = -1;

              while (++index < len) {
                var context = contexts[index];
                context.window.error(err);
                context.subscription.unsubscribe();
              }
            }

            _get(_getPrototypeOf(WindowToggleSubscriber.prototype), "_error", this).call(this, err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var contexts = this.contexts;
            this.contexts = null;

            if (contexts) {
              var len = contexts.length;
              var index = -1;

              while (++index < len) {
                var context = contexts[index];
                context.window.complete();
                context.subscription.unsubscribe();
              }
            }

            _get(_getPrototypeOf(WindowToggleSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var contexts = this.contexts;
            this.contexts = null;

            if (contexts) {
              var len = contexts.length;
              var index = -1;

              while (++index < len) {
                var context = contexts[index];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
              }
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
              var closingNotifier;

              try {
                var closingSelector = this.closingSelector;
                closingNotifier = closingSelector(innerValue);
              } catch (e) {
                return this.error(e);
              }

              var _window4 = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();

              var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
              var context = {
                window: _window4,
                subscription: subscription
              };
              this.contexts.push(context);
              var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, closingNotifier, context);

              if (innerSubscription.closed) {
                this.closeWindow(this.contexts.length - 1);
              } else {
                innerSubscription.context = context;
                subscription.add(innerSubscription);
              }

              this.destination.next(_window4);
            } else {
              this.closeWindow(this.contexts.indexOf(outerValue));
            }
          }
        }, {
          key: "notifyError",
          value: function notifyError(err) {
            this.error(err);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(inner) {
            if (inner !== this.openSubscription) {
              this.closeWindow(this.contexts.indexOf(inner.context));
            }
          }
        }, {
          key: "closeWindow",
          value: function closeWindow(index) {
            if (index === -1) {
              return;
            }

            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window,
                subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
          }
        }]);

        return WindowToggleSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=windowToggle.js.map

      /***/

    },

    /***/
    "sVev":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/EmptyError.js ***!
      \****************************************************************/

    /*! exports provided: EmptyError */

    /***/
    function sVev(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmptyError", function () {
        return EmptyError;
      });

      var EmptyErrorImpl = function () {
        function EmptyErrorImpl() {
          Error.call(this);
          this.message = 'no elements in sequence';
          this.name = 'EmptyError';
          return this;
        }

        EmptyErrorImpl.prototype = Object.create(Error.prototype);
        return EmptyErrorImpl;
      }();

      var EmptyError = EmptyErrorImpl; //# sourceMappingURL=EmptyError.js.map

      /***/
    },

    /***/
    "syX2":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js ***!
      \**********************************************************************/

    /*! exports provided: timeoutWith */

    /***/
    function syX2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "timeoutWith", function () {
        return timeoutWith;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isDate */
      "mlxB");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function timeoutWith(due, withObservable) {
        var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        return function (source) {
          var absoluteTimeout = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(due);
          var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
          return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
        };
      }

      var TimeoutWithOperator = /*#__PURE__*/function () {
        function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
          _classCallCheck(this, TimeoutWithOperator);

          this.waitFor = waitFor;
          this.absoluteTimeout = absoluteTimeout;
          this.withObservable = withObservable;
          this.scheduler = scheduler;
        }

        _createClass2(TimeoutWithOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
          }
        }]);

        return TimeoutWithOperator;
      }();

      var TimeoutWithSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP17) {
        _inherits(TimeoutWithSubscriber, _innerSubscribe__WEBP17);

        var _super166 = _createSuper(TimeoutWithSubscriber);

        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
          var _this224;

          _classCallCheck(this, TimeoutWithSubscriber);

          _this224 = _super166.call(this, destination);
          _this224.absoluteTimeout = absoluteTimeout;
          _this224.waitFor = waitFor;
          _this224.withObservable = withObservable;
          _this224.scheduler = scheduler;

          _this224.scheduleTimeout();

          return _this224;
        }

        _createClass2(TimeoutWithSubscriber, [{
          key: "scheduleTimeout",
          value: function scheduleTimeout() {
            var action = this.action;

            if (action) {
              this.action = action.schedule(this, this.waitFor);
            } else {
              this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
            }
          }
        }, {
          key: "_next",
          value: function _next(value) {
            if (!this.absoluteTimeout) {
              this.scheduleTimeout();
            }

            _get(_getPrototypeOf(TimeoutWithSubscriber.prototype), "_next", this).call(this, value);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.action = undefined;
            this.scheduler = null;
            this.withObservable = null;
          }
        }], [{
          key: "dispatchTimeout",
          value: function dispatchTimeout(subscriber) {
            var withObservable = subscriber.withObservable;

            subscriber._unsubscribeAndRecycle();

            subscriber.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["innerSubscribe"])(withObservable, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleInnerSubscriber"](subscriber)));
          }
        }]);

        return TimeoutWithSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleOuterSubscriber"]); //# sourceMappingURL=timeoutWith.js.map

      /***/

    },

    /***/
    "t9l1":
    /*!***************************************************************************!*\
      !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/browser.js ***!
      \***************************************************************************/

    /*! exports provided: AnimationDriver, ɵAnimation, ɵAnimationEngine, ɵAnimationStyleNormalizer, ɵCssKeyframesDriver, ɵCssKeyframesPlayer, ɵNoopAnimationDriver, ɵNoopAnimationStyleNormalizer, ɵWebAnimationsDriver, ɵWebAnimationsPlayer, ɵWebAnimationsStyleNormalizer, ɵallowPreviousPlayerStylesMerge, ɵangular_packages_animations_browser_browser_a, ɵcontainsElement, ɵinvokeQuery, ɵmatchesElement, ɵsupportsWebAnimations, ɵvalidateStyleProperty */

    /***/
    function t9l1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationDriver", function () {
        return AnimationDriver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimation", function () {
        return Animation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimationEngine", function () {
        return AnimationEngine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵAnimationStyleNormalizer", function () {
        return AnimationStyleNormalizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCssKeyframesDriver", function () {
        return CssKeyframesDriver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵCssKeyframesPlayer", function () {
        return CssKeyframesPlayer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationDriver", function () {
        return NoopAnimationDriver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationStyleNormalizer", function () {
        return NoopAnimationStyleNormalizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsDriver", function () {
        return WebAnimationsDriver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsPlayer", function () {
        return WebAnimationsPlayer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsStyleNormalizer", function () {
        return WebAnimationsStyleNormalizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵallowPreviousPlayerStylesMerge", function () {
        return allowPreviousPlayerStylesMerge;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_packages_animations_browser_browser_a", function () {
        return SpecialCasedStyles;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵcontainsElement", function () {
        return _containsElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵinvokeQuery", function () {
        return invokeQuery;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵmatchesElement", function () {
        return _matchesElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵsupportsWebAnimations", function () {
        return supportsWebAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵvalidateStyleProperty", function () {
        return _validateStyleProperty;
      });
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/animations */
      "R0Ic");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /**
       * @license Angular v11.2.6
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function isBrowser() {
        return typeof window !== 'undefined' && typeof window.document !== 'undefined';
      }

      function isNode() {
        // Checking only for `process` isn't enough to identify whether or not we're in a Node
        // environment, because Webpack by default will polyfill the `process`. While we can discern
        // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
        // might not be future-proof. Instead we look at the stringified version of `process` which
        // is `[object process]` in Node and `[object Object]` when polyfilled.
        return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
      }

      function optimizeGroupPlayer(players) {
        switch (players.length) {
          case 0:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"]();

          case 1:
            return players[0];

          default:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"](players);
        }
      }

      function normalizeKeyframes(driver, normalizer, element, keyframes) {
        var preStyles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var postStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var errors = [];
        var normalizedKeyframes = [];
        var previousOffset = -1;
        var previousKeyframe = null;
        keyframes.forEach(function (kf) {
          var offset = kf['offset'];
          var isSameOffset = offset == previousOffset;
          var normalizedKeyframe = isSameOffset && previousKeyframe || {};
          Object.keys(kf).forEach(function (prop) {
            var normalizedProp = prop;
            var normalizedValue = kf[prop];

            if (prop !== 'offset') {
              normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);

              switch (normalizedValue) {
                case _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]:
                  normalizedValue = preStyles[prop];
                  break;

                case _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]:
                  normalizedValue = postStyles[prop];
                  break;

                default:
                  normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
                  break;
              }
            }

            normalizedKeyframe[normalizedProp] = normalizedValue;
          });

          if (!isSameOffset) {
            normalizedKeyframes.push(normalizedKeyframe);
          }

          previousKeyframe = normalizedKeyframe;
          previousOffset = offset;
        });

        if (errors.length) {
          var LINE_START = '\n - ';
          throw new Error("Unable to animate due to the following errors:".concat(LINE_START).concat(errors.join(LINE_START)));
        }

        return normalizedKeyframes;
      }

      function listenOnPlayer(player, eventName, event, callback) {
        switch (eventName) {
          case 'start':
            player.onStart(function () {
              return callback(event && copyAnimationEvent(event, 'start', player));
            });
            break;

          case 'done':
            player.onDone(function () {
              return callback(event && copyAnimationEvent(event, 'done', player));
            });
            break;

          case 'destroy':
            player.onDestroy(function () {
              return callback(event && copyAnimationEvent(event, 'destroy', player));
            });
            break;
        }
      }

      function copyAnimationEvent(e, phaseName, player) {
        var totalTime = player.totalTime;
        var disabled = player.disabled ? true : false;
        var event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
        var data = e['_data'];

        if (data != null) {
          event['_data'] = data;
        }

        return event;
      }

      function makeAnimationEvent(element, triggerName, fromState, toState) {
        var phaseName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
        var totalTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var disabled = arguments.length > 6 ? arguments[6] : undefined;
        return {
          element: element,
          triggerName: triggerName,
          fromState: fromState,
          toState: toState,
          phaseName: phaseName,
          totalTime: totalTime,
          disabled: !!disabled
        };
      }

      function getOrSetAsInMap(map, key, defaultValue) {
        var value;

        if (map instanceof Map) {
          value = map.get(key);

          if (!value) {
            map.set(key, value = defaultValue);
          }
        } else {
          value = map[key];

          if (!value) {
            value = map[key] = defaultValue;
          }
        }

        return value;
      }

      function parseTimelineCommand(command) {
        var separatorPos = command.indexOf(':');
        var id = command.substring(1, separatorPos);
        var action = command.substr(separatorPos + 1);
        return [id, action];
      }

      var _contains = function _contains(elm1, elm2) {
        return false;
      };

      var ɵ0 = _contains;

      var _matches = function _matches(element, selector) {
        return false;
      };

      var ɵ1 = _matches;

      var _query = function _query(element, selector, multi) {
        return [];
      };

      var ɵ2 = _query; // Define utility methods for browsers and platform-server(domino) where Element
      // and utility methods exist.

      var _isNode = isNode();

      if (_isNode || typeof Element !== 'undefined') {
        // this is well supported in all browsers
        _contains = function _contains(elm1, elm2) {
          return elm1.contains(elm2);
        };

        _matches = function () {
          if (_isNode || Element.prototype.matches) {
            return function (element, selector) {
              return element.matches(selector);
            };
          } else {
            var proto = Element.prototype;
            var fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;

            if (fn) {
              return function (element, selector) {
                return fn.apply(element, [selector]);
              };
            } else {
              return _matches;
            }
          }
        }();

        _query = function _query(element, selector, multi) {
          var results = [];

          if (multi) {
            // DO NOT REFACTOR TO USE SPREAD SYNTAX.
            // For element queries that return sufficiently large NodeList objects,
            // using spread syntax to populate the results array causes a RangeError
            // due to the call stack limit being reached. `Array.from` can not be used
            // as well, since NodeList is not iterable in IE 11, see
            // https://developer.mozilla.org/en-US/docs/Web/API/NodeList
            // More info is available in #38551.
            var elems = element.querySelectorAll(selector);

            for (var i = 0; i < elems.length; i++) {
              results.push(elems[i]);
            }
          } else {
            var elm = element.querySelector(selector);

            if (elm) {
              results.push(elm);
            }
          }

          return results;
        };
      }

      function containsVendorPrefix(prop) {
        // Webkit is the only real popular vendor prefix nowadays
        // cc: http://shouldiprefix.com/
        return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
      }

      var _CACHED_BODY = null;
      var _IS_WEBKIT = false;

      function _validateStyleProperty(prop) {
        if (!_CACHED_BODY) {
          _CACHED_BODY = getBodyNode() || {};
          _IS_WEBKIT = _CACHED_BODY.style ? 'WebkitAppearance' in _CACHED_BODY.style : false;
        }

        var result = true;

        if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
          result = prop in _CACHED_BODY.style;

          if (!result && _IS_WEBKIT) {
            var camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
            result = camelProp in _CACHED_BODY.style;
          }
        }

        return result;
      }

      function getBodyNode() {
        if (typeof document != 'undefined') {
          return document.body;
        }

        return null;
      }

      var _matchesElement = _matches;
      var _containsElement = _contains;
      var invokeQuery = _query;

      function hypenatePropsObject(object) {
        var newObj = {};
        Object.keys(object).forEach(function (prop) {
          var newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
          newObj[newProp] = object[prop];
        });
        return newObj;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var NoopAnimationDriver = /*#__PURE__*/function () {
        function NoopAnimationDriver() {
          _classCallCheck(this, NoopAnimationDriver);
        }

        _createClass2(NoopAnimationDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return defaultValue || '';
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](duration, delay);
          }
        }]);

        return NoopAnimationDriver;
      }();

      NoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) {
        return new (t || NoopAnimationDriver)();
      };

      NoopAnimationDriver.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NoopAnimationDriver,
        factory: NoopAnimationDriver.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NoopAnimationDriver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], null, null);
      })();
      /**
       * @publicApi
       */


      var AnimationDriver = function AnimationDriver() {
        _classCallCheck(this, AnimationDriver);
      };

      AnimationDriver.NOOP = new NoopAnimationDriver();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ONE_SECOND = 1000;
      var SUBSTITUTION_EXPR_START = '{{';
      var SUBSTITUTION_EXPR_END = '}}';
      var ENTER_CLASSNAME = 'ng-enter';
      var LEAVE_CLASSNAME = 'ng-leave';
      var ENTER_SELECTOR = '.ng-enter';
      var LEAVE_SELECTOR = '.ng-leave';
      var NG_TRIGGER_CLASSNAME = 'ng-trigger';
      var NG_TRIGGER_SELECTOR = '.ng-trigger';
      var NG_ANIMATING_CLASSNAME = 'ng-animating';
      var NG_ANIMATING_SELECTOR = '.ng-animating';

      function resolveTimingValue(value) {
        if (typeof value == 'number') return value;
        var matches = value.match(/^(-?[\.\d]+)(m?s)/);
        if (!matches || matches.length < 2) return 0;
        return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
      }

      function _convertTimeValueToMS(value, unit) {
        switch (unit) {
          case 's':
            return value * ONE_SECOND;

          default:
            // ms or something else
            return value;
        }
      }

      function resolveTiming(timings, errors, allowNegativeValues) {
        return timings.hasOwnProperty('duration') ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
      }

      function parseTimeExpression(exp, errors, allowNegativeValues) {
        var regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
        var duration;
        var delay = 0;
        var easing = '';

        if (typeof exp === 'string') {
          var matches = exp.match(regex);

          if (matches === null) {
            errors.push("The provided timing value \"".concat(exp, "\" is invalid."));
            return {
              duration: 0,
              delay: 0,
              easing: ''
            };
          }

          duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
          var delayMatch = matches[3];

          if (delayMatch != null) {
            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
          }

          var easingVal = matches[5];

          if (easingVal) {
            easing = easingVal;
          }
        } else {
          duration = exp;
        }

        if (!allowNegativeValues) {
          var containsErrors = false;
          var startIndex = errors.length;

          if (duration < 0) {
            errors.push("Duration values below 0 are not allowed for this animation step.");
            containsErrors = true;
          }

          if (delay < 0) {
            errors.push("Delay values below 0 are not allowed for this animation step.");
            containsErrors = true;
          }

          if (containsErrors) {
            errors.splice(startIndex, 0, "The provided timing value \"".concat(exp, "\" is invalid."));
          }
        }

        return {
          duration: duration,
          delay: delay,
          easing: easing
        };
      }

      function copyObj(obj) {
        var destination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Object.keys(obj).forEach(function (prop) {
          destination[prop] = obj[prop];
        });
        return destination;
      }

      function normalizeStyles(styles) {
        var normalizedStyles = {};

        if (Array.isArray(styles)) {
          styles.forEach(function (data) {
            return copyStyles(data, false, normalizedStyles);
          });
        } else {
          copyStyles(styles, false, normalizedStyles);
        }

        return normalizedStyles;
      }

      function copyStyles(styles, readPrototype) {
        var destination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (readPrototype) {
          // we make use of a for-in loop so that the
          // prototypically inherited properties are
          // revealed from the backFill map
          for (var prop in styles) {
            destination[prop] = styles[prop];
          }
        } else {
          copyObj(styles, destination);
        }

        return destination;
      }

      function getStyleAttributeString(element, key, value) {
        // Return the key-value pair string to be added to the style attribute for the
        // given CSS style key.
        if (value) {
          return key + ':' + value + ';';
        } else {
          return '';
        }
      }

      function writeStyleAttribute(element) {
        // Read the style property of the element and manually reflect it to the
        // style attribute. This is needed because Domino on platform-server doesn't
        // understand the full set of allowed CSS properties and doesn't reflect some
        // of them automatically.
        var styleAttrValue = '';

        for (var i = 0; i < element.style.length; i++) {
          var key = element.style.item(i);
          styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
        }

        for (var _key47 in element.style) {
          // Skip internal Domino properties that don't need to be reflected.
          if (!element.style.hasOwnProperty(_key47) || _key47.startsWith('_')) {
            continue;
          }

          var dashKey = camelCaseToDashCase(_key47);
          styleAttrValue += getStyleAttributeString(element, dashKey, element.style[_key47]);
        }

        element.setAttribute('style', styleAttrValue);
      }

      function setStyles(element, styles, formerStyles) {
        if (element['style']) {
          Object.keys(styles).forEach(function (prop) {
            var camelProp = dashCaseToCamelCase(prop);

            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
              formerStyles[prop] = element.style[camelProp];
            }

            element.style[camelProp] = styles[prop];
          }); // On the server set the 'style' attribute since it's not automatically reflected.

          if (isNode()) {
            writeStyleAttribute(element);
          }
        }
      }

      function eraseStyles(element, styles) {
        if (element['style']) {
          Object.keys(styles).forEach(function (prop) {
            var camelProp = dashCaseToCamelCase(prop);
            element.style[camelProp] = '';
          }); // On the server set the 'style' attribute since it's not automatically reflected.

          if (isNode()) {
            writeStyleAttribute(element);
          }
        }
      }

      function normalizeAnimationEntry(steps) {
        if (Array.isArray(steps)) {
          if (steps.length == 1) return steps[0];
          return Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["sequence"])(steps);
        }

        return steps;
      }

      function validateStyleParams(value, options, errors) {
        var params = options.params || {};
        var matches = extractStyleParams(value);

        if (matches.length) {
          matches.forEach(function (varName) {
            if (!params.hasOwnProperty(varName)) {
              errors.push("Unable to resolve the local animation param ".concat(varName, " in the given list of values"));
            }
          });
        }
      }

      var PARAM_REGEX = new RegExp("".concat(SUBSTITUTION_EXPR_START, "\\s*(.+?)\\s*").concat(SUBSTITUTION_EXPR_END), 'g');

      function extractStyleParams(value) {
        var params = [];

        if (typeof value === 'string') {
          var match;

          while (match = PARAM_REGEX.exec(value)) {
            params.push(match[1]);
          }

          PARAM_REGEX.lastIndex = 0;
        }

        return params;
      }

      function interpolateParams(value, params, errors) {
        var original = value.toString();
        var str = original.replace(PARAM_REGEX, function (_, varName) {
          var localVal = params[varName]; // this means that the value was never overridden by the data passed in by the user

          if (!params.hasOwnProperty(varName)) {
            errors.push("Please provide a value for the animation param ".concat(varName));
            localVal = '';
          }

          return localVal.toString();
        }); // we do this to assert that numeric values stay as they are

        return str == original ? value : str;
      }

      function iteratorToArray(iterator) {
        var arr = [];
        var item = iterator.next();

        while (!item.done) {
          arr.push(item.value);
          item = iterator.next();
        }

        return arr;
      }

      var DASH_CASE_REGEXP = /-+([a-z0-9])/g;

      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          for (var _len47 = arguments.length, m = new Array(_len47), _key48 = 0; _key48 < _len47; _key48++) {
            m[_key48] = arguments[_key48];
          }

          return m[1].toUpperCase();
        });
      }

      function camelCaseToDashCase(input) {
        return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      }

      function allowPreviousPlayerStylesMerge(duration, delay) {
        return duration === 0 || delay === 0;
      }

      function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
        var previousStyleProps = Object.keys(previousStyles);

        if (previousStyleProps.length && keyframes.length) {
          var startingKeyframe = keyframes[0];
          var missingStyleProps = [];
          previousStyleProps.forEach(function (prop) {
            if (!startingKeyframe.hasOwnProperty(prop)) {
              missingStyleProps.push(prop);
            }

            startingKeyframe[prop] = previousStyles[prop];
          });

          if (missingStyleProps.length) {
            var _loop4 = function _loop4() {
              var kf = keyframes[i];
              missingStyleProps.forEach(function (prop) {
                kf[prop] = computeStyle(element, prop);
              });
            };

            // tslint:disable-next-line
            for (var i = 1; i < keyframes.length; i++) {
              _loop4();
            }
          }
        }

        return keyframes;
      }

      function visitDslNode(visitor, node, context) {
        switch (node.type) {
          case 7
          /* Trigger */
          :
            return visitor.visitTrigger(node, context);

          case 0
          /* State */
          :
            return visitor.visitState(node, context);

          case 1
          /* Transition */
          :
            return visitor.visitTransition(node, context);

          case 2
          /* Sequence */
          :
            return visitor.visitSequence(node, context);

          case 3
          /* Group */
          :
            return visitor.visitGroup(node, context);

          case 4
          /* Animate */
          :
            return visitor.visitAnimate(node, context);

          case 5
          /* Keyframes */
          :
            return visitor.visitKeyframes(node, context);

          case 6
          /* Style */
          :
            return visitor.visitStyle(node, context);

          case 8
          /* Reference */
          :
            return visitor.visitReference(node, context);

          case 9
          /* AnimateChild */
          :
            return visitor.visitAnimateChild(node, context);

          case 10
          /* AnimateRef */
          :
            return visitor.visitAnimateRef(node, context);

          case 11
          /* Query */
          :
            return visitor.visitQuery(node, context);

          case 12
          /* Stagger */
          :
            return visitor.visitStagger(node, context);

          default:
            throw new Error("Unable to resolve animation metadata node #".concat(node.type));
        }
      }

      function computeStyle(element, prop) {
        return window.getComputedStyle(element)[prop];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ANY_STATE = '*';

      function parseTransitionExpr(transitionValue, errors) {
        var expressions = [];

        if (typeof transitionValue == 'string') {
          transitionValue.split(/\s*,\s*/).forEach(function (str) {
            return parseInnerTransitionStr(str, expressions, errors);
          });
        } else {
          expressions.push(transitionValue);
        }

        return expressions;
      }

      function parseInnerTransitionStr(eventStr, expressions, errors) {
        if (eventStr[0] == ':') {
          var result = parseAnimationAlias(eventStr, errors);

          if (typeof result == 'function') {
            expressions.push(result);
            return;
          }

          eventStr = result;
        }

        var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);

        if (match == null || match.length < 4) {
          errors.push("The provided transition expression \"".concat(eventStr, "\" is not supported"));
          return expressions;
        }

        var fromState = match[1];
        var separator = match[2];
        var toState = match[3];
        expressions.push(makeLambdaFromStates(fromState, toState));
        var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;

        if (separator[0] == '<' && !isFullAnyStateExpr) {
          expressions.push(makeLambdaFromStates(toState, fromState));
        }
      }

      function parseAnimationAlias(alias, errors) {
        switch (alias) {
          case ':enter':
            return 'void => *';

          case ':leave':
            return '* => void';

          case ':increment':
            return function (fromState, toState) {
              return parseFloat(toState) > parseFloat(fromState);
            };

          case ':decrement':
            return function (fromState, toState) {
              return parseFloat(toState) < parseFloat(fromState);
            };

          default:
            errors.push("The transition alias value \"".concat(alias, "\" is not supported"));
            return '* => *';
        }
      } // DO NOT REFACTOR ... keep the follow set instantiations
      // with the values intact (closure compiler for some reason
      // removes follow-up lines that add the values outside of
      // the constructor...


      var TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
      var FALSE_BOOLEAN_VALUES = new Set(['false', '0']);

      function makeLambdaFromStates(lhs, rhs) {
        var LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
        var RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
        return function (fromState, toState) {
          var lhsMatch = lhs == ANY_STATE || lhs == fromState;
          var rhsMatch = rhs == ANY_STATE || rhs == toState;

          if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
          }

          if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
          }

          return lhsMatch && rhsMatch;
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SELF_TOKEN = ':self';
      var SELF_TOKEN_REGEX = new RegExp("s*".concat(SELF_TOKEN, "s*,?"), 'g');
      /*
       * [Validation]
       * The visitor code below will traverse the animation AST generated by the animation verb functions
       * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
       * following corner-cases will be validated:
       *
       * 1. Overlap of animations
       * Given that a CSS property cannot be animated in more than one place at the same time, it's
       * important that this behavior is detected and validated. The way in which this occurs is that
       * each time a style property is examined, a string-map containing the property will be updated with
       * the start and end times for when the property is used within an animation step.
       *
       * If there are two or more parallel animations that are currently running (these are invoked by the
       * group()) on the same element then the validator will throw an error. Since the start/end timing
       * values are collected for each property then if the current animation step is animating the same
       * property and its timing values fall anywhere into the window of time that the property is
       * currently being animated within then this is what causes an error.
       *
       * 2. Timing values
       * The validator will validate to see if a timing value of `duration delay easing` or
       * `durationNumber` is valid or not.
       *
       * (note that upon validation the code below will replace the timing data with an object containing
       * {duration,delay,easing}.
       *
       * 3. Offset Validation
       * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
       * Offsets within keyframes() are considered valid when:
       *
       *   - No offsets are used at all
       *   - Each style() entry contains an offset value
       *   - Each offset is between 0 and 1
       *   - Each offset is greater to or equal than the previous one
       *
       * Otherwise an error will be thrown.
       */

      function buildAnimationAst(driver, metadata, errors) {
        return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
      }

      var ROOT_SELECTOR = '';

      var AnimationAstBuilderVisitor = /*#__PURE__*/function () {
        function AnimationAstBuilderVisitor(_driver) {
          _classCallCheck(this, AnimationAstBuilderVisitor);

          this._driver = _driver;
        }

        _createClass2(AnimationAstBuilderVisitor, [{
          key: "build",
          value: function build(metadata, errors) {
            var context = new AnimationAstBuilderContext(errors);

            this._resetContextStyleTimingState(context);

            return visitDslNode(this, normalizeAnimationEntry(metadata), context);
          }
        }, {
          key: "_resetContextStyleTimingState",
          value: function _resetContextStyleTimingState(context) {
            context.currentQuerySelector = ROOT_SELECTOR;
            context.collectedStyles = {};
            context.collectedStyles[ROOT_SELECTOR] = {};
            context.currentTime = 0;
          }
        }, {
          key: "visitTrigger",
          value: function visitTrigger(metadata, context) {
            var _this225 = this;

            var queryCount = context.queryCount = 0;
            var depCount = context.depCount = 0;
            var states = [];
            var transitions = [];

            if (metadata.name.charAt(0) == '@') {
              context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
            }

            metadata.definitions.forEach(function (def) {
              _this225._resetContextStyleTimingState(context);

              if (def.type == 0
              /* State */
              ) {
                  var stateDef = def;
                  var name = stateDef.name;
                  name.toString().split(/\s*,\s*/).forEach(function (n) {
                    stateDef.name = n;
                    states.push(_this225.visitState(stateDef, context));
                  });
                  stateDef.name = name;
                } else if (def.type == 1
              /* Transition */
              ) {
                  var transition = _this225.visitTransition(def, context);

                  queryCount += transition.queryCount;
                  depCount += transition.depCount;
                  transitions.push(transition);
                } else {
                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
              }
            });
            return {
              type: 7
              /* Trigger */
              ,
              name: metadata.name,
              states: states,
              transitions: transitions,
              queryCount: queryCount,
              depCount: depCount,
              options: null
            };
          }
        }, {
          key: "visitState",
          value: function visitState(metadata, context) {
            var styleAst = this.visitStyle(metadata.styles, context);
            var astParams = metadata.options && metadata.options.params || null;

            if (styleAst.containsDynamicStyles) {
              var missingSubs = new Set();
              var params = astParams || {};
              styleAst.styles.forEach(function (value) {
                if (isObject(value)) {
                  var stylesObj = value;
                  Object.keys(stylesObj).forEach(function (prop) {
                    extractStyleParams(stylesObj[prop]).forEach(function (sub) {
                      if (!params.hasOwnProperty(sub)) {
                        missingSubs.add(sub);
                      }
                    });
                  });
                }
              });

              if (missingSubs.size) {
                var missingSubsArr = iteratorToArray(missingSubs.values());
                context.errors.push("state(\"".concat(metadata.name, "\", ...) must define default values for all the following style substitutions: ").concat(missingSubsArr.join(', ')));
              }
            }

            return {
              type: 0
              /* State */
              ,
              name: metadata.name,
              style: styleAst,
              options: astParams ? {
                params: astParams
              } : null
            };
          }
        }, {
          key: "visitTransition",
          value: function visitTransition(metadata, context) {
            context.queryCount = 0;
            context.depCount = 0;
            var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            var matchers = parseTransitionExpr(metadata.expr, context.errors);
            return {
              type: 1
              /* Transition */
              ,
              matchers: matchers,
              animation: animation,
              queryCount: context.queryCount,
              depCount: context.depCount,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitSequence",
          value: function visitSequence(metadata, context) {
            var _this226 = this;

            return {
              type: 2
              /* Sequence */
              ,
              steps: metadata.steps.map(function (s) {
                return visitDslNode(_this226, s, context);
              }),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitGroup",
          value: function visitGroup(metadata, context) {
            var _this227 = this;

            var currentTime = context.currentTime;
            var furthestTime = 0;
            var steps = metadata.steps.map(function (step) {
              context.currentTime = currentTime;
              var innerAst = visitDslNode(_this227, step, context);
              furthestTime = Math.max(furthestTime, context.currentTime);
              return innerAst;
            });
            context.currentTime = furthestTime;
            return {
              type: 3
              /* Group */
              ,
              steps: steps,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimate",
          value: function visitAnimate(metadata, context) {
            var timingAst = constructTimingAst(metadata.timings, context.errors);
            context.currentAnimateTimings = timingAst;
            var styleAst;
            var styleMetadata = metadata.styles ? metadata.styles : Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({});

            if (styleMetadata.type == 5
            /* Keyframes */
            ) {
                styleAst = this.visitKeyframes(styleMetadata, context);
              } else {
              var _styleMetadata = metadata.styles;
              var isEmpty = false;

              if (!_styleMetadata) {
                isEmpty = true;
                var newStyleData = {};

                if (timingAst.easing) {
                  newStyleData['easing'] = timingAst.easing;
                }

                _styleMetadata = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])(newStyleData);
              }

              context.currentTime += timingAst.duration + timingAst.delay;

              var _styleAst = this.visitStyle(_styleMetadata, context);

              _styleAst.isEmptyStep = isEmpty;
              styleAst = _styleAst;
            }

            context.currentAnimateTimings = null;
            return {
              type: 4
              /* Animate */
              ,
              timings: timingAst,
              style: styleAst,
              options: null
            };
          }
        }, {
          key: "visitStyle",
          value: function visitStyle(metadata, context) {
            var ast = this._makeStyleAst(metadata, context);

            this._validateStyleAst(ast, context);

            return ast;
          }
        }, {
          key: "_makeStyleAst",
          value: function _makeStyleAst(metadata, context) {
            var styles = [];

            if (Array.isArray(metadata.styles)) {
              metadata.styles.forEach(function (styleTuple) {
                if (typeof styleTuple == 'string') {
                  if (styleTuple == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]) {
                    styles.push(styleTuple);
                  } else {
                    context.errors.push("The provided style string value ".concat(styleTuple, " is not allowed."));
                  }
                } else {
                  styles.push(styleTuple);
                }
              });
            } else {
              styles.push(metadata.styles);
            }

            var containsDynamicStyles = false;
            var collectedEasing = null;
            styles.forEach(function (styleData) {
              if (isObject(styleData)) {
                var styleMap = styleData;
                var easing = styleMap['easing'];

                if (easing) {
                  collectedEasing = easing;
                  delete styleMap['easing'];
                }

                if (!containsDynamicStyles) {
                  for (var prop in styleMap) {
                    var value = styleMap[prop];

                    if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                      containsDynamicStyles = true;
                      break;
                    }
                  }
                }
              }
            });
            return {
              type: 6
              /* Style */
              ,
              styles: styles,
              easing: collectedEasing,
              offset: metadata.offset,
              containsDynamicStyles: containsDynamicStyles,
              options: null
            };
          }
        }, {
          key: "_validateStyleAst",
          value: function _validateStyleAst(ast, context) {
            var _this228 = this;

            var timings = context.currentAnimateTimings;
            var endTime = context.currentTime;
            var startTime = context.currentTime;

            if (timings && startTime > 0) {
              startTime -= timings.duration + timings.delay;
            }

            ast.styles.forEach(function (tuple) {
              if (typeof tuple == 'string') return;
              Object.keys(tuple).forEach(function (prop) {
                if (!_this228._driver.validateStyleProperty(prop)) {
                  context.errors.push("The provided animation property \"".concat(prop, "\" is not a supported CSS property for animations"));
                  return;
                }

                var collectedStyles = context.collectedStyles[context.currentQuerySelector];
                var collectedEntry = collectedStyles[prop];
                var updateCollectedStyle = true;

                if (collectedEntry) {
                  if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
                    context.errors.push("The CSS property \"".concat(prop, "\" that exists between the times of \"").concat(collectedEntry.startTime, "ms\" and \"").concat(collectedEntry.endTime, "ms\" is also being animated in a parallel animation between the times of \"").concat(startTime, "ms\" and \"").concat(endTime, "ms\""));
                    updateCollectedStyle = false;
                  } // we always choose the smaller start time value since we
                  // want to have a record of the entire animation window where
                  // the style property is being animated in between


                  startTime = collectedEntry.startTime;
                }

                if (updateCollectedStyle) {
                  collectedStyles[prop] = {
                    startTime: startTime,
                    endTime: endTime
                  };
                }

                if (context.options) {
                  validateStyleParams(tuple[prop], context.options, context.errors);
                }
              });
            });
          }
        }, {
          key: "visitKeyframes",
          value: function visitKeyframes(metadata, context) {
            var _this229 = this;

            var ast = {
              type: 5
              /* Keyframes */
              ,
              styles: [],
              options: null
            };

            if (!context.currentAnimateTimings) {
              context.errors.push("keyframes() must be placed inside of a call to animate()");
              return ast;
            }

            var MAX_KEYFRAME_OFFSET = 1;
            var totalKeyframesWithOffsets = 0;
            var offsets = [];
            var offsetsOutOfOrder = false;
            var keyframesOutOfRange = false;
            var previousOffset = 0;
            var keyframes = metadata.steps.map(function (styles) {
              var style = _this229._makeStyleAst(styles, context);

              var offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
              var offset = 0;

              if (offsetVal != null) {
                totalKeyframesWithOffsets++;
                offset = style.offset = offsetVal;
              }

              keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
              offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
              previousOffset = offset;
              offsets.push(offset);
              return style;
            });

            if (keyframesOutOfRange) {
              context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
            }

            if (offsetsOutOfOrder) {
              context.errors.push("Please ensure that all keyframe offsets are in order");
            }

            var length = metadata.steps.length;
            var generatedOffset = 0;

            if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
              context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
            } else if (totalKeyframesWithOffsets == 0) {
              generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
            }

            var limit = length - 1;
            var currentTime = context.currentTime;
            var currentAnimateTimings = context.currentAnimateTimings;
            var animateDuration = currentAnimateTimings.duration;
            keyframes.forEach(function (kf, i) {
              var offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
              var durationUpToThisFrame = offset * animateDuration;
              context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
              currentAnimateTimings.duration = durationUpToThisFrame;

              _this229._validateStyleAst(kf, context);

              kf.offset = offset;
              ast.styles.push(kf);
            });
            return ast;
          }
        }, {
          key: "visitReference",
          value: function visitReference(metadata, context) {
            return {
              type: 8
              /* Reference */
              ,
              animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimateChild",
          value: function visitAnimateChild(metadata, context) {
            context.depCount++;
            return {
              type: 9
              /* AnimateChild */
              ,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimateRef",
          value: function visitAnimateRef(metadata, context) {
            return {
              type: 10
              /* AnimateRef */
              ,
              animation: this.visitReference(metadata.animation, context),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitQuery",
          value: function visitQuery(metadata, context) {
            var parentSelector = context.currentQuerySelector;
            var options = metadata.options || {};
            context.queryCount++;
            context.currentQuery = metadata;

            var _normalizeSelector = normalizeSelector(metadata.selector),
                _normalizeSelector2 = _slicedToArray(_normalizeSelector, 2),
                selector = _normalizeSelector2[0],
                includeSelf = _normalizeSelector2[1];

            context.currentQuerySelector = parentSelector.length ? parentSelector + ' ' + selector : selector;
            getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
            var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            context.currentQuery = null;
            context.currentQuerySelector = parentSelector;
            return {
              type: 11
              /* Query */
              ,
              selector: selector,
              limit: options.limit || 0,
              optional: !!options.optional,
              includeSelf: includeSelf,
              animation: animation,
              originalSelector: metadata.selector,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitStagger",
          value: function visitStagger(metadata, context) {
            if (!context.currentQuery) {
              context.errors.push("stagger() can only be used inside of query()");
            }

            var timings = metadata.timings === 'full' ? {
              duration: 0,
              delay: 0,
              easing: 'full'
            } : resolveTiming(metadata.timings, context.errors, true);
            return {
              type: 12
              /* Stagger */
              ,
              animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
              timings: timings,
              options: null
            };
          }
        }]);

        return AnimationAstBuilderVisitor;
      }();

      function normalizeSelector(selector) {
        var hasAmpersand = selector.split(/\s*,\s*/).find(function (token) {
          return token == SELF_TOKEN;
        }) ? true : false;

        if (hasAmpersand) {
          selector = selector.replace(SELF_TOKEN_REGEX, '');
        } // the :enter and :leave selectors are filled in at runtime during timeline building


        selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, function (match) {
          return NG_TRIGGER_SELECTOR + '-' + match.substr(1);
        }).replace(/:animating/g, NG_ANIMATING_SELECTOR);
        return [selector, hasAmpersand];
      }

      function normalizeParams(obj) {
        return obj ? copyObj(obj) : null;
      }

      var AnimationAstBuilderContext = function AnimationAstBuilderContext(errors) {
        _classCallCheck(this, AnimationAstBuilderContext);

        this.errors = errors;
        this.queryCount = 0;
        this.depCount = 0;
        this.currentTransition = null;
        this.currentQuery = null;
        this.currentQuerySelector = null;
        this.currentAnimateTimings = null;
        this.currentTime = 0;
        this.collectedStyles = {};
        this.options = null;
      };

      function consumeOffset(styles) {
        if (typeof styles == 'string') return null;
        var offset = null;

        if (Array.isArray(styles)) {
          styles.forEach(function (styleTuple) {
            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
              var obj = styleTuple;
              offset = parseFloat(obj['offset']);
              delete obj['offset'];
            }
          });
        } else if (isObject(styles) && styles.hasOwnProperty('offset')) {
          var obj = styles;
          offset = parseFloat(obj['offset']);
          delete obj['offset'];
        }

        return offset;
      }

      function isObject(value) {
        return !Array.isArray(value) && typeof value == 'object';
      }

      function constructTimingAst(value, errors) {
        var timings = null;

        if (value.hasOwnProperty('duration')) {
          timings = value;
        } else if (typeof value == 'number') {
          var duration = resolveTiming(value, errors).duration;
          return makeTimingAst(duration, 0, '');
        }

        var strValue = value;
        var isDynamic = strValue.split(/\s+/).some(function (v) {
          return v.charAt(0) == '{' && v.charAt(1) == '{';
        });

        if (isDynamic) {
          var ast = makeTimingAst(0, 0, '');
          ast.dynamic = true;
          ast.strValue = strValue;
          return ast;
        }

        timings = timings || resolveTiming(strValue, errors);
        return makeTimingAst(timings.duration, timings.delay, timings.easing);
      }

      function normalizeAnimationOptions(options) {
        if (options) {
          options = copyObj(options);

          if (options['params']) {
            options['params'] = normalizeParams(options['params']);
          }
        } else {
          options = {};
        }

        return options;
      }

      function makeTimingAst(duration, delay, easing) {
        return {
          duration: duration,
          delay: delay,
          easing: easing
        };
      }

      function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay) {
        var easing = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var subTimeline = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
        return {
          type: 1
          /* TimelineAnimation */
          ,
          element: element,
          keyframes: keyframes,
          preStyleProps: preStyleProps,
          postStyleProps: postStyleProps,
          duration: duration,
          delay: delay,
          totalTime: duration + delay,
          easing: easing,
          subTimeline: subTimeline
        };
      }

      var ElementInstructionMap = /*#__PURE__*/function () {
        function ElementInstructionMap() {
          _classCallCheck(this, ElementInstructionMap);

          this._map = new Map();
        }

        _createClass2(ElementInstructionMap, [{
          key: "consume",
          value: function consume(element) {
            var instructions = this._map.get(element);

            if (instructions) {
              this._map["delete"](element);
            } else {
              instructions = [];
            }

            return instructions;
          }
        }, {
          key: "append",
          value: function append(element, instructions) {
            var _existingInstructions;

            var existingInstructions = this._map.get(element);

            if (!existingInstructions) {
              this._map.set(element, existingInstructions = []);
            }

            (_existingInstructions = existingInstructions).push.apply(_existingInstructions, _toConsumableArray(instructions));
          }
        }, {
          key: "has",
          value: function has(element) {
            return this._map.has(element);
          }
        }, {
          key: "clear",
          value: function clear() {
            this._map.clear();
          }
        }]);

        return ElementInstructionMap;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ONE_FRAME_IN_MILLISECONDS = 1;
      var ENTER_TOKEN = ':enter';
      var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
      var LEAVE_TOKEN = ':leave';
      var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
      /*
       * The code within this file aims to generate web-animations-compatible keyframes from Angular's
       * animation DSL code.
       *
       * The code below will be converted from:
       *
       * ```
       * sequence([
       *   style({ opacity: 0 }),
       *   animate(1000, style({ opacity: 0 }))
       * ])
       * ```
       *
       * To:
       * ```
       * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
       * duration = 1000
       * delay = 0
       * easing = ''
       * ```
       *
       * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
       * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
       *
       * [AST Traversal]
       * Each of the animation verbs, when executed, will return an string-map object representing what
       * type of action it is (style, animate, group, etc...) and the data associated with it. This means
       * that when functional composition mix of these functions is evaluated (like in the example above)
       * then it will end up producing a tree of objects representing the animation itself.
       *
       * When this animation object tree is processed by the visitor code below it will visit each of the
       * verb statements within the visitor. And during each visit it will build the context of the
       * animation keyframes by interacting with the `TimelineBuilder`.
       *
       * [TimelineBuilder]
       * This class is responsible for tracking the styles and building a series of keyframe objects for a
       * timeline between a start and end time. The builder starts off with an initial timeline and each
       * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a
       * `sequence()` then it will generate a sub timeline for each step as well as a new one after
       * they are complete.
       *
       * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
       * timeline was created (based on one of the cases above) then the parent timeline will attempt to
       * merge the styles used within the sub timelines into itself (only with group() this will happen).
       * This happens with a merge operation (much like how the merge works in mergesort) and it will only
       * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
       * that if the styles are used later on in another phase of the animation then they will be the most
       * up-to-date values.
       *
       * [How Missing Styles Are Updated]
       * Each timeline has a `backFill` property which is responsible for filling in new styles into
       * already processed keyframes if a new style shows up later within the animation sequence.
       *
       * ```
       * sequence([
       *   style({ width: 0 }),
       *   animate(1000, style({ width: 100 })),
       *   animate(1000, style({ width: 200 })),
       *   animate(1000, style({ width: 300 }))
       *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
       * else
       * ])
       * ```
       *
       * What is happening here is that the `height` value is added later in the sequence, but is missing
       * from all previous animation steps. Therefore when a keyframe is created it would also be missing
       * from all previous keyframes up until where it is first used. For the timeline keyframe generation
       * to properly fill in the style it will place the previous value (the value from the parent
       * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
       * styles are objects that prototypically inhert from the backFill object, this means that if a
       * value is added into the backFill then it will automatically propagate any missing values to all
       * keyframes. Therefore the missing `height` value will be properly filled into the already
       * processed keyframes.
       *
       * When a sub-timeline is created it will have its own backFill property. This is done so that
       * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
       * keyframes
       *
       * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
       *
       * [Validation]
       * The code in this file is not responsible for validation. That functionality happens with within
       * the `AnimationValidatorVisitor` code.
       */

      function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName) {
        var startingStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var finalStyles = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
        var options = arguments.length > 7 ? arguments[7] : undefined;
        var subInstructions = arguments.length > 8 ? arguments[8] : undefined;
        var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
        return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
      }

      var AnimationTimelineBuilderVisitor = /*#__PURE__*/function () {
        function AnimationTimelineBuilderVisitor() {
          _classCallCheck(this, AnimationTimelineBuilderVisitor);
        }

        _createClass2(AnimationTimelineBuilderVisitor, [{
          key: "buildKeyframes",
          value: function buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions) {
            var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
            subInstructions = subInstructions || new ElementInstructionMap();
            var context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
            context.options = options;
            context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
            visitDslNode(this, ast, context); // this checks to see if an actual animation happened

            var timelines = context.timelines.filter(function (timeline) {
              return timeline.containsAnimation();
            });

            if (timelines.length && Object.keys(finalStyles).length) {
              var tl = timelines[timelines.length - 1];

              if (!tl.allowOnlyTimelineStyles()) {
                tl.setStyles([finalStyles], null, context.errors, options);
              }
            }

            return timelines.length ? timelines.map(function (timeline) {
              return timeline.buildKeyframes();
            }) : [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
          }
        }, {
          key: "visitTrigger",
          value: function visitTrigger(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitState",
          value: function visitState(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitTransition",
          value: function visitTransition(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitAnimateChild",
          value: function visitAnimateChild(ast, context) {
            var elementInstructions = context.subInstructions.consume(context.element);

            if (elementInstructions) {
              var innerContext = context.createSubContext(ast.options);
              var startTime = context.currentTimeline.currentTime;

              var endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);

              if (startTime != endTime) {
                // we do this on the upper context because we created a sub context for
                // the sub child animations
                context.transformIntoNewTimeline(endTime);
              }
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitAnimateRef",
          value: function visitAnimateRef(ast, context) {
            var innerContext = context.createSubContext(ast.options);
            innerContext.transformIntoNewTimeline();
            this.visitReference(ast.animation, innerContext);
            context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
            context.previousNode = ast;
          }
        }, {
          key: "_visitSubInstructions",
          value: function _visitSubInstructions(instructions, context, options) {
            var startTime = context.currentTimeline.currentTime;
            var furthestTime = startTime; // this is a special-case for when a user wants to skip a sub
            // animation from being fired entirely.

            var duration = options.duration != null ? resolveTimingValue(options.duration) : null;
            var delay = options.delay != null ? resolveTimingValue(options.delay) : null;

            if (duration !== 0) {
              instructions.forEach(function (instruction) {
                var instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
                furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
              });
            }

            return furthestTime;
          }
        }, {
          key: "visitReference",
          value: function visitReference(ast, context) {
            context.updateOptions(ast.options, true);
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast;
          }
        }, {
          key: "visitSequence",
          value: function visitSequence(ast, context) {
            var _this230 = this;

            var subContextCount = context.subContextCount;
            var ctx = context;
            var options = ast.options;

            if (options && (options.params || options.delay)) {
              ctx = context.createSubContext(options);
              ctx.transformIntoNewTimeline();

              if (options.delay != null) {
                if (ctx.previousNode.type == 6
                /* Style */
                ) {
                    ctx.currentTimeline.snapshotCurrentStyles();
                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
                  }

                var delay = resolveTimingValue(options.delay);
                ctx.delayNextStep(delay);
              }
            }

            if (ast.steps.length) {
              ast.steps.forEach(function (s) {
                return visitDslNode(_this230, s, ctx);
              }); // this is here just incase the inner steps only contain or end with a style() call

              ctx.currentTimeline.applyStylesToKeyframe(); // this means that some animation function within the sequence
              // ended up creating a sub timeline (which means the current
              // timeline cannot overlap with the contents of the sequence)

              if (ctx.subContextCount > subContextCount) {
                ctx.transformIntoNewTimeline();
              }
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitGroup",
          value: function visitGroup(ast, context) {
            var _this231 = this;

            var innerTimelines = [];
            var furthestTime = context.currentTimeline.currentTime;
            var delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
            ast.steps.forEach(function (s) {
              var innerContext = context.createSubContext(ast.options);

              if (delay) {
                innerContext.delayNextStep(delay);
              }

              visitDslNode(_this231, s, innerContext);
              furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
              innerTimelines.push(innerContext.currentTimeline);
            }); // this operation is run after the AST loop because otherwise
            // if the parent timeline's collected styles were updated then
            // it would pass in invalid data into the new-to-be forked items

            innerTimelines.forEach(function (timeline) {
              return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
            });
            context.transformIntoNewTimeline(furthestTime);
            context.previousNode = ast;
          }
        }, {
          key: "_visitTiming",
          value: function _visitTiming(ast, context) {
            if (ast.dynamic) {
              var strValue = ast.strValue;
              var timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
              return resolveTiming(timingValue, context.errors);
            } else {
              return {
                duration: ast.duration,
                delay: ast.delay,
                easing: ast.easing
              };
            }
          }
        }, {
          key: "visitAnimate",
          value: function visitAnimate(ast, context) {
            var timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);

            var timeline = context.currentTimeline;

            if (timings.delay) {
              context.incrementTime(timings.delay);
              timeline.snapshotCurrentStyles();
            }

            var style = ast.style;

            if (style.type == 5
            /* Keyframes */
            ) {
                this.visitKeyframes(style, context);
              } else {
              context.incrementTime(timings.duration);
              this.visitStyle(style, context);
              timeline.applyStylesToKeyframe();
            }

            context.currentAnimateTimings = null;
            context.previousNode = ast;
          }
        }, {
          key: "visitStyle",
          value: function visitStyle(ast, context) {
            var timeline = context.currentTimeline;
            var timings = context.currentAnimateTimings; // this is a special case for when a style() call
            // directly follows  an animate() call (but not inside of an animate() call)

            if (!timings && timeline.getCurrentStyleProperties().length) {
              timeline.forwardFrame();
            }

            var easing = timings && timings.easing || ast.easing;

            if (ast.isEmptyStep) {
              timeline.applyEmptyStep(easing);
            } else {
              timeline.setStyles(ast.styles, easing, context.errors, context.options);
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitKeyframes",
          value: function visitKeyframes(ast, context) {
            var currentAnimateTimings = context.currentAnimateTimings;
            var startTime = context.currentTimeline.duration;
            var duration = currentAnimateTimings.duration;
            var innerContext = context.createSubContext();
            var innerTimeline = innerContext.currentTimeline;
            innerTimeline.easing = currentAnimateTimings.easing;
            ast.styles.forEach(function (step) {
              var offset = step.offset || 0;
              innerTimeline.forwardTime(offset * duration);
              innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
              innerTimeline.applyStylesToKeyframe();
            }); // this will ensure that the parent timeline gets all the styles from
            // the child even if the new timeline below is not used

            context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline); // we do this because the window between this timeline and the sub timeline
            // should ensure that the styles within are exactly the same as they were before

            context.transformIntoNewTimeline(startTime + duration);
            context.previousNode = ast;
          }
        }, {
          key: "visitQuery",
          value: function visitQuery(ast, context) {
            var _this232 = this;

            // in the event that the first step before this is a style step we need
            // to ensure the styles are applied before the children are animated
            var startTime = context.currentTimeline.currentTime;
            var options = ast.options || {};
            var delay = options.delay ? resolveTimingValue(options.delay) : 0;

            if (delay && (context.previousNode.type === 6
            /* Style */
            || startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length)) {
              context.currentTimeline.snapshotCurrentStyles();
              context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            }

            var furthestTime = startTime;
            var elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
            context.currentQueryTotal = elms.length;
            var sameElementTimeline = null;
            elms.forEach(function (element, i) {
              context.currentQueryIndex = i;
              var innerContext = context.createSubContext(ast.options, element);

              if (delay) {
                innerContext.delayNextStep(delay);
              }

              if (element === context.element) {
                sameElementTimeline = innerContext.currentTimeline;
              }

              visitDslNode(_this232, ast.animation, innerContext); // this is here just incase the inner steps only contain or end
              // with a style() call (which is here to signal that this is a preparatory
              // call to style an element before it is animated again)

              innerContext.currentTimeline.applyStylesToKeyframe();
              var endTime = innerContext.currentTimeline.currentTime;
              furthestTime = Math.max(furthestTime, endTime);
            });
            context.currentQueryIndex = 0;
            context.currentQueryTotal = 0;
            context.transformIntoNewTimeline(furthestTime);

            if (sameElementTimeline) {
              context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
              context.currentTimeline.snapshotCurrentStyles();
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitStagger",
          value: function visitStagger(ast, context) {
            var parentContext = context.parentContext;
            var tl = context.currentTimeline;
            var timings = ast.timings;
            var duration = Math.abs(timings.duration);
            var maxTime = duration * (context.currentQueryTotal - 1);
            var delay = duration * context.currentQueryIndex;
            var staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;

            switch (staggerTransformer) {
              case 'reverse':
                delay = maxTime - delay;
                break;

              case 'full':
                delay = parentContext.currentStaggerTime;
                break;
            }

            var timeline = context.currentTimeline;

            if (delay) {
              timeline.delayNextStep(delay);
            }

            var startingTime = timeline.currentTime;
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast; // time = duration + delay
            // the reason why this computation is so complex is because
            // the inner timeline may either have a delay value or a stretched
            // keyframe depending on if a subtimeline is not used or is used.

            parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
          }
        }]);

        return AnimationTimelineBuilderVisitor;
      }();

      var DEFAULT_NOOP_PREVIOUS_NODE = {};

      var AnimationTimelineContext = /*#__PURE__*/function () {
        function AnimationTimelineContext(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
          _classCallCheck(this, AnimationTimelineContext);

          this._driver = _driver;
          this.element = element;
          this.subInstructions = subInstructions;
          this._enterClassName = _enterClassName;
          this._leaveClassName = _leaveClassName;
          this.errors = errors;
          this.timelines = timelines;
          this.parentContext = null;
          this.currentAnimateTimings = null;
          this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
          this.subContextCount = 0;
          this.options = {};
          this.currentQueryIndex = 0;
          this.currentQueryTotal = 0;
          this.currentStaggerTime = 0;
          this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
          timelines.push(this.currentTimeline);
        }

        _createClass2(AnimationTimelineContext, [{
          key: "params",
          get: function get() {
            return this.options.params;
          }
        }, {
          key: "updateOptions",
          value: function updateOptions(options, skipIfExists) {
            var _this233 = this;

            if (!options) return;
            var newOptions = options;
            var optionsToUpdate = this.options; // NOTE: this will get patched up when other animation methods support duration overrides

            if (newOptions.duration != null) {
              optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
            }

            if (newOptions.delay != null) {
              optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
            }

            var newParams = newOptions.params;

            if (newParams) {
              var paramsToUpdate = optionsToUpdate.params;

              if (!paramsToUpdate) {
                paramsToUpdate = this.options.params = {};
              }

              Object.keys(newParams).forEach(function (name) {
                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
                  paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, _this233.errors);
                }
              });
            }
          }
        }, {
          key: "_copyOptions",
          value: function _copyOptions() {
            var options = {};

            if (this.options) {
              var oldParams = this.options.params;

              if (oldParams) {
                var params = options['params'] = {};
                Object.keys(oldParams).forEach(function (name) {
                  params[name] = oldParams[name];
                });
              }
            }

            return options;
          }
        }, {
          key: "createSubContext",
          value: function createSubContext() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var element = arguments.length > 1 ? arguments[1] : undefined;
            var newTime = arguments.length > 2 ? arguments[2] : undefined;
            var target = element || this.element;
            var context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
            context.previousNode = this.previousNode;
            context.currentAnimateTimings = this.currentAnimateTimings;
            context.options = this._copyOptions();
            context.updateOptions(options);
            context.currentQueryIndex = this.currentQueryIndex;
            context.currentQueryTotal = this.currentQueryTotal;
            context.parentContext = this;
            this.subContextCount++;
            return context;
          }
        }, {
          key: "transformIntoNewTimeline",
          value: function transformIntoNewTimeline(newTime) {
            this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
            this.timelines.push(this.currentTimeline);
            return this.currentTimeline;
          }
        }, {
          key: "appendInstructionToTimeline",
          value: function appendInstructionToTimeline(instruction, duration, delay) {
            var updatedTimings = {
              duration: duration != null ? duration : instruction.duration,
              delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
              easing: ''
            };
            var builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
            this.timelines.push(builder);
            return updatedTimings;
          }
        }, {
          key: "incrementTime",
          value: function incrementTime(time) {
            this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
          }
        }, {
          key: "delayNextStep",
          value: function delayNextStep(delay) {
            // negative delays are not yet supported
            if (delay > 0) {
              this.currentTimeline.delayNextStep(delay);
            }
          }
        }, {
          key: "invokeQuery",
          value: function invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
            var results = [];

            if (includeSelf) {
              results.push(this.element);
            }

            if (selector.length > 0) {
              // if :self is only used then the selector is empty
              selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
              selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
              var multi = limit != 1;

              var elements = this._driver.query(this.element, selector, multi);

              if (limit !== 0) {
                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
              }

              results.push.apply(results, _toConsumableArray(elements));
            }

            if (!optional && results.length == 0) {
              errors.push("`query(\"".concat(originalSelector, "\")` returned zero elements. (Use `query(\"").concat(originalSelector, "\", { optional: true })` if you wish to allow this.)"));
            }

            return results;
          }
        }]);

        return AnimationTimelineContext;
      }();

      var TimelineBuilder = /*#__PURE__*/function () {
        function TimelineBuilder(_driver, element, startTime, _elementTimelineStylesLookup) {
          _classCallCheck(this, TimelineBuilder);

          this._driver = _driver;
          this.element = element;
          this.startTime = startTime;
          this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
          this.duration = 0;
          this._previousKeyframe = {};
          this._currentKeyframe = {};
          this._keyframes = new Map();
          this._styleSummary = {};
          this._pendingStyles = {};
          this._backFill = {};
          this._currentEmptyStepKeyframe = null;

          if (!this._elementTimelineStylesLookup) {
            this._elementTimelineStylesLookup = new Map();
          }

          this._localTimelineStyles = Object.create(this._backFill, {});
          this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);

          if (!this._globalTimelineStyles) {
            this._globalTimelineStyles = this._localTimelineStyles;

            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
          }

          this._loadKeyframe();
        }

        _createClass2(TimelineBuilder, [{
          key: "containsAnimation",
          value: function containsAnimation() {
            switch (this._keyframes.size) {
              case 0:
                return false;

              case 1:
                return this.getCurrentStyleProperties().length > 0;

              default:
                return true;
            }
          }
        }, {
          key: "getCurrentStyleProperties",
          value: function getCurrentStyleProperties() {
            return Object.keys(this._currentKeyframe);
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this.startTime + this.duration;
          }
        }, {
          key: "delayNextStep",
          value: function delayNextStep(delay) {
            // in the event that a style() step is placed right before a stagger()
            // and that style() step is the very first style() value in the animation
            // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
            // properly applies the style() values to work with the stagger...
            var hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;

            if (this.duration || hasPreStyleStep) {
              this.forwardTime(this.currentTime + delay);

              if (hasPreStyleStep) {
                this.snapshotCurrentStyles();
              }
            } else {
              this.startTime += delay;
            }
          }
        }, {
          key: "fork",
          value: function fork(element, currentTime) {
            this.applyStylesToKeyframe();
            return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
          }
        }, {
          key: "_loadKeyframe",
          value: function _loadKeyframe() {
            if (this._currentKeyframe) {
              this._previousKeyframe = this._currentKeyframe;
            }

            this._currentKeyframe = this._keyframes.get(this.duration);

            if (!this._currentKeyframe) {
              this._currentKeyframe = Object.create(this._backFill, {});

              this._keyframes.set(this.duration, this._currentKeyframe);
            }
          }
        }, {
          key: "forwardFrame",
          value: function forwardFrame() {
            this.duration += ONE_FRAME_IN_MILLISECONDS;

            this._loadKeyframe();
          }
        }, {
          key: "forwardTime",
          value: function forwardTime(time) {
            this.applyStylesToKeyframe();
            this.duration = time;

            this._loadKeyframe();
          }
        }, {
          key: "_updateStyle",
          value: function _updateStyle(prop, value) {
            this._localTimelineStyles[prop] = value;
            this._globalTimelineStyles[prop] = value;
            this._styleSummary[prop] = {
              time: this.currentTime,
              value: value
            };
          }
        }, {
          key: "allowOnlyTimelineStyles",
          value: function allowOnlyTimelineStyles() {
            return this._currentEmptyStepKeyframe !== this._currentKeyframe;
          }
        }, {
          key: "applyEmptyStep",
          value: function applyEmptyStep(easing) {
            var _this234 = this;

            if (easing) {
              this._previousKeyframe['easing'] = easing;
            } // special case for animate(duration):
            // all missing styles are filled with a `*` value then
            // if any destination styles are filled in later on the same
            // keyframe then they will override the overridden styles
            // We use `_globalTimelineStyles` here because there may be
            // styles in previous keyframes that are not present in this timeline


            Object.keys(this._globalTimelineStyles).forEach(function (prop) {
              _this234._backFill[prop] = _this234._globalTimelineStyles[prop] || _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
              _this234._currentKeyframe[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
            });
            this._currentEmptyStepKeyframe = this._currentKeyframe;
          }
        }, {
          key: "setStyles",
          value: function setStyles(input, easing, errors, options) {
            var _this235 = this;

            if (easing) {
              this._previousKeyframe['easing'] = easing;
            }

            var params = options && options.params || {};
            var styles = flattenStyles(input, this._globalTimelineStyles);
            Object.keys(styles).forEach(function (prop) {
              var val = interpolateParams(styles[prop], params, errors);
              _this235._pendingStyles[prop] = val;

              if (!_this235._localTimelineStyles.hasOwnProperty(prop)) {
                _this235._backFill[prop] = _this235._globalTimelineStyles.hasOwnProperty(prop) ? _this235._globalTimelineStyles[prop] : _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
              }

              _this235._updateStyle(prop, val);
            });
          }
        }, {
          key: "applyStylesToKeyframe",
          value: function applyStylesToKeyframe() {
            var _this236 = this;

            var styles = this._pendingStyles;
            var props = Object.keys(styles);
            if (props.length == 0) return;
            this._pendingStyles = {};
            props.forEach(function (prop) {
              var val = styles[prop];
              _this236._currentKeyframe[prop] = val;
            });
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
              if (!_this236._currentKeyframe.hasOwnProperty(prop)) {
                _this236._currentKeyframe[prop] = _this236._localTimelineStyles[prop];
              }
            });
          }
        }, {
          key: "snapshotCurrentStyles",
          value: function snapshotCurrentStyles() {
            var _this237 = this;

            Object.keys(this._localTimelineStyles).forEach(function (prop) {
              var val = _this237._localTimelineStyles[prop];
              _this237._pendingStyles[prop] = val;

              _this237._updateStyle(prop, val);
            });
          }
        }, {
          key: "getFinalKeyframe",
          value: function getFinalKeyframe() {
            return this._keyframes.get(this.duration);
          }
        }, {
          key: "properties",
          get: function get() {
            var properties = [];

            for (var prop in this._currentKeyframe) {
              properties.push(prop);
            }

            return properties;
          }
        }, {
          key: "mergeTimelineCollectedStyles",
          value: function mergeTimelineCollectedStyles(timeline) {
            var _this238 = this;

            Object.keys(timeline._styleSummary).forEach(function (prop) {
              var details0 = _this238._styleSummary[prop];
              var details1 = timeline._styleSummary[prop];

              if (!details0 || details1.time > details0.time) {
                _this238._updateStyle(prop, details1.value);
              }
            });
          }
        }, {
          key: "buildKeyframes",
          value: function buildKeyframes() {
            var _this239 = this;

            this.applyStylesToKeyframe();
            var preStyleProps = new Set();
            var postStyleProps = new Set();
            var isEmpty = this._keyframes.size === 1 && this.duration === 0;
            var finalKeyframes = [];

            this._keyframes.forEach(function (keyframe, time) {
              var finalKeyframe = copyStyles(keyframe, true);
              Object.keys(finalKeyframe).forEach(function (prop) {
                var value = finalKeyframe[prop];

                if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]) {
                  preStyleProps.add(prop);
                } else if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]) {
                  postStyleProps.add(prop);
                }
              });

              if (!isEmpty) {
                finalKeyframe['offset'] = time / _this239.duration;
              }

              finalKeyframes.push(finalKeyframe);
            });

            var preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
            var postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : []; // special case for a 0-second animation (which is designed just to place styles onscreen)

            if (isEmpty) {
              var kf0 = finalKeyframes[0];
              var kf1 = copyObj(kf0);
              kf0['offset'] = 0;
              kf1['offset'] = 1;
              finalKeyframes = [kf0, kf1];
            }

            return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
          }
        }]);

        return TimelineBuilder;
      }();

      var SubTimelineBuilder = /*#__PURE__*/function (_TimelineBuilder) {
        _inherits(SubTimelineBuilder, _TimelineBuilder);

        var _super167 = _createSuper(SubTimelineBuilder);

        function SubTimelineBuilder(driver, element, keyframes, preStyleProps, postStyleProps, timings) {
          var _this240;

          var _stretchStartingKeyframe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

          _classCallCheck(this, SubTimelineBuilder);

          _this240 = _super167.call(this, driver, element, timings.delay);
          _this240.element = element;
          _this240.keyframes = keyframes;
          _this240.preStyleProps = preStyleProps;
          _this240.postStyleProps = postStyleProps;
          _this240._stretchStartingKeyframe = _stretchStartingKeyframe;
          _this240.timings = {
            duration: timings.duration,
            delay: timings.delay,
            easing: timings.easing
          };
          return _this240;
        }

        _createClass2(SubTimelineBuilder, [{
          key: "containsAnimation",
          value: function containsAnimation() {
            return this.keyframes.length > 1;
          }
        }, {
          key: "buildKeyframes",
          value: function buildKeyframes() {
            var keyframes = this.keyframes;
            var _this$timings = this.timings,
                delay = _this$timings.delay,
                duration = _this$timings.duration,
                easing = _this$timings.easing;

            if (this._stretchStartingKeyframe && delay) {
              var newKeyframes = [];
              var totalTime = duration + delay;
              var startingGap = delay / totalTime; // the original starting keyframe now starts once the delay is done

              var newFirstKeyframe = copyStyles(keyframes[0], false);
              newFirstKeyframe['offset'] = 0;
              newKeyframes.push(newFirstKeyframe);
              var oldFirstKeyframe = copyStyles(keyframes[0], false);
              oldFirstKeyframe['offset'] = roundOffset(startingGap);
              newKeyframes.push(oldFirstKeyframe);
              /*
                When the keyframe is stretched then it means that the delay before the animation
                starts is gone. Instead the first keyframe is placed at the start of the animation
                and it is then copied to where it starts when the original delay is over. This basically
                means nothing animates during that delay, but the styles are still renderered. For this
                to work the original offset values that exist in the original keyframes must be "warped"
                so that they can take the new keyframe + delay into account.
                       delay=1000, duration=1000, keyframes = 0 .5 1
                       turns into
                       delay=0, duration=2000, keyframes = 0 .33 .66 1
               */
              // offsets between 1 ... n -1 are all warped by the keyframe stretch

              var limit = keyframes.length - 1;

              for (var i = 1; i <= limit; i++) {
                var kf = copyStyles(keyframes[i], false);
                var oldOffset = kf['offset'];
                var timeAtKeyframe = delay + oldOffset * duration;
                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
                newKeyframes.push(kf);
              } // the new starting keyframe should be added at the start


              duration = totalTime;
              delay = 0;
              easing = '';
              keyframes = newKeyframes;
            }

            return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
          }
        }]);

        return SubTimelineBuilder;
      }(TimelineBuilder);

      function roundOffset(offset) {
        var decimalPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
        var mult = Math.pow(10, decimalPoints - 1);
        return Math.round(offset * mult) / mult;
      }

      function flattenStyles(input, allStyles) {
        var styles = {};
        var allProperties;
        input.forEach(function (token) {
          if (token === '*') {
            allProperties = allProperties || Object.keys(allStyles);
            allProperties.forEach(function (prop) {
              styles[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
            });
          } else {
            copyStyles(token, false, styles);
          }
        });
        return styles;
      }

      var Animation = /*#__PURE__*/function () {
        function Animation(_driver, input) {
          _classCallCheck(this, Animation);

          this._driver = _driver;
          var errors = [];
          var ast = buildAnimationAst(_driver, input, errors);

          if (errors.length) {
            var errorMessage = "animation validation failed:\n".concat(errors.join('\n'));
            throw new Error(errorMessage);
          }

          this._animationAst = ast;
        }

        _createClass2(Animation, [{
          key: "buildTimelines",
          value: function buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
            var start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
            var dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
            var errors = [];
            subInstructions = subInstructions || new ElementInstructionMap();
            var result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);

            if (errors.length) {
              var errorMessage = "animation building failed:\n".concat(errors.join('\n'));
              throw new Error(errorMessage);
            }

            return result;
          }
        }]);

        return Animation;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var AnimationStyleNormalizer = function AnimationStyleNormalizer() {
        _classCallCheck(this, AnimationStyleNormalizer);
      };
      /**
       * @publicApi
       */


      var NoopAnimationStyleNormalizer = /*#__PURE__*/function () {
        function NoopAnimationStyleNormalizer() {
          _classCallCheck(this, NoopAnimationStyleNormalizer);
        }

        _createClass2(NoopAnimationStyleNormalizer, [{
          key: "normalizePropertyName",
          value: function normalizePropertyName(propertyName, errors) {
            return propertyName;
          }
        }, {
          key: "normalizeStyleValue",
          value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            return value;
          }
        }]);

        return NoopAnimationStyleNormalizer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var WebAnimationsStyleNormalizer = /*#__PURE__*/function (_AnimationStyleNormal) {
        _inherits(WebAnimationsStyleNormalizer, _AnimationStyleNormal);

        var _super168 = _createSuper(WebAnimationsStyleNormalizer);

        function WebAnimationsStyleNormalizer() {
          _classCallCheck(this, WebAnimationsStyleNormalizer);

          return _super168.apply(this, arguments);
        }

        _createClass2(WebAnimationsStyleNormalizer, [{
          key: "normalizePropertyName",
          value: function normalizePropertyName(propertyName, errors) {
            return dashCaseToCamelCase(propertyName);
          }
        }, {
          key: "normalizeStyleValue",
          value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            var unit = '';
            var strVal = value.toString().trim();

            if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
              if (typeof value === 'number') {
                unit = 'px';
              } else {
                var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);

                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                  errors.push("Please provide a CSS unit value for ".concat(userProvidedProperty, ":").concat(value));
                }
              }
            }

            return strVal + unit;
          }
        }]);

        return WebAnimationsStyleNormalizer;
      }(AnimationStyleNormalizer);

      var ɵ0$1 = function ɵ0$1() {
        return makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(','));
      };

      var DIMENSIONAL_PROP_MAP = ɵ0$1();

      function makeBooleanMap(keys) {
        var map = {};
        keys.forEach(function (key) {
          return map[key] = true;
        });
        return map;
      }

      function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
        return {
          type: 0
          /* TransitionAnimation */
          ,
          element: element,
          triggerName: triggerName,
          isRemovalTransition: isRemovalTransition,
          fromState: fromState,
          fromStyles: fromStyles,
          toState: toState,
          toStyles: toStyles,
          timelines: timelines,
          queriedElements: queriedElements,
          preStyleProps: preStyleProps,
          postStyleProps: postStyleProps,
          totalTime: totalTime,
          errors: errors
        };
      }

      var EMPTY_OBJECT = {};

      var AnimationTransitionFactory = /*#__PURE__*/function () {
        function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
          _classCallCheck(this, AnimationTransitionFactory);

          this._triggerName = _triggerName;
          this.ast = ast;
          this._stateStyles = _stateStyles;
        }

        _createClass2(AnimationTransitionFactory, [{
          key: "match",
          value: function match(currentState, nextState, element, params) {
            return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
          }
        }, {
          key: "buildStyles",
          value: function buildStyles(stateName, params, errors) {
            var backupStateStyler = this._stateStyles['*'];
            var stateStyler = this._stateStyles[stateName];
            var backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
            return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
          }
        }, {
          key: "build",
          value: function build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
            var errors = [];
            var transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
            var currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
            var currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
            var nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
            var nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
            var queriedElements = new Set();
            var preStyleMap = new Map();
            var postStyleMap = new Map();
            var isRemoval = nextState === 'void';
            var animationOptions = {
              params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams)
            };
            var timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
            var totalTime = 0;
            timelines.forEach(function (tl) {
              totalTime = Math.max(tl.duration + tl.delay, totalTime);
            });

            if (errors.length) {
              return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
            }

            timelines.forEach(function (tl) {
              var elm = tl.element;
              var preProps = getOrSetAsInMap(preStyleMap, elm, {});
              tl.preStyleProps.forEach(function (prop) {
                return preProps[prop] = true;
              });
              var postProps = getOrSetAsInMap(postStyleMap, elm, {});
              tl.postStyleProps.forEach(function (prop) {
                return postProps[prop] = true;
              });

              if (elm !== element) {
                queriedElements.add(elm);
              }
            });
            var queriedElementsList = iteratorToArray(queriedElements.values());
            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
          }
        }]);

        return AnimationTransitionFactory;
      }();

      function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
        return matchFns.some(function (fn) {
          return fn(currentState, nextState, element, params);
        });
      }

      var AnimationStateStyles = /*#__PURE__*/function () {
        function AnimationStateStyles(styles, defaultParams) {
          _classCallCheck(this, AnimationStateStyles);

          this.styles = styles;
          this.defaultParams = defaultParams;
        }

        _createClass2(AnimationStateStyles, [{
          key: "buildStyles",
          value: function buildStyles(params, errors) {
            var finalStyles = {};
            var combinedParams = copyObj(this.defaultParams);
            Object.keys(params).forEach(function (key) {
              var value = params[key];

              if (value != null) {
                combinedParams[key] = value;
              }
            });
            this.styles.styles.forEach(function (value) {
              if (typeof value !== 'string') {
                var styleObj = value;
                Object.keys(styleObj).forEach(function (prop) {
                  var val = styleObj[prop];

                  if (val.length > 1) {
                    val = interpolateParams(val, combinedParams, errors);
                  }

                  finalStyles[prop] = val;
                });
              }
            });
            return finalStyles;
          }
        }]);

        return AnimationStateStyles;
      }();
      /**
       * @publicApi
       */


      function buildTrigger(name, ast) {
        return new AnimationTrigger(name, ast);
      }
      /**
       * @publicApi
       */


      var AnimationTrigger = /*#__PURE__*/function () {
        function AnimationTrigger(name, ast) {
          var _this241 = this;

          _classCallCheck(this, AnimationTrigger);

          this.name = name;
          this.ast = ast;
          this.transitionFactories = [];
          this.states = {};
          ast.states.forEach(function (ast) {
            var defaultParams = ast.options && ast.options.params || {};
            _this241.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
          });
          balanceProperties(this.states, 'true', '1');
          balanceProperties(this.states, 'false', '0');
          ast.transitions.forEach(function (ast) {
            _this241.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this241.states));
          });
          this.fallbackTransition = createFallbackTransition(name, this.states);
        }

        _createClass2(AnimationTrigger, [{
          key: "containsQueries",
          get: function get() {
            return this.ast.queryCount > 0;
          }
        }, {
          key: "matchTransition",
          value: function matchTransition(currentState, nextState, element, params) {
            var entry = this.transitionFactories.find(function (f) {
              return f.match(currentState, nextState, element, params);
            });
            return entry || null;
          }
        }, {
          key: "matchStyles",
          value: function matchStyles(currentState, params, errors) {
            return this.fallbackTransition.buildStyles(currentState, params, errors);
          }
        }]);

        return AnimationTrigger;
      }();

      function createFallbackTransition(triggerName, states) {
        var matchers = [function (fromState, toState) {
          return true;
        }];
        var animation = {
          type: 2
          /* Sequence */
          ,
          steps: [],
          options: null
        };
        var transition = {
          type: 1
          /* Transition */
          ,
          animation: animation,
          matchers: matchers,
          options: null,
          queryCount: 0,
          depCount: 0
        };
        return new AnimationTransitionFactory(triggerName, transition, states);
      }

      function balanceProperties(obj, key1, key2) {
        if (obj.hasOwnProperty(key1)) {
          if (!obj.hasOwnProperty(key2)) {
            obj[key2] = obj[key1];
          }
        } else if (obj.hasOwnProperty(key2)) {
          obj[key1] = obj[key2];
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();

      var TimelineAnimationEngine = /*#__PURE__*/function () {
        function TimelineAnimationEngine(bodyNode, _driver, _normalizer) {
          _classCallCheck(this, TimelineAnimationEngine);

          this.bodyNode = bodyNode;
          this._driver = _driver;
          this._normalizer = _normalizer;
          this._animations = {};
          this._playersById = {};
          this.players = [];
        }

        _createClass2(TimelineAnimationEngine, [{
          key: "register",
          value: function register(id, metadata) {
            var errors = [];
            var ast = buildAnimationAst(this._driver, metadata, errors);

            if (errors.length) {
              throw new Error("Unable to build the animation due to the following errors: ".concat(errors.join('\n')));
            } else {
              this._animations[id] = ast;
            }
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer(i, preStyles, postStyles) {
            var element = i.element;
            var keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
            return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
          }
        }, {
          key: "create",
          value: function create(id, element) {
            var _this242 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var errors = [];
            var ast = this._animations[id];
            var instructions;
            var autoStylesMap = new Map();

            if (ast) {
              instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
              instructions.forEach(function (inst) {
                var styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
                inst.postStyleProps.forEach(function (prop) {
                  return styles[prop] = null;
                });
              });
            } else {
              errors.push('The requested animation doesn\'t exist or has already been destroyed');
              instructions = [];
            }

            if (errors.length) {
              throw new Error("Unable to create the animation due to the following errors: ".concat(errors.join('\n')));
            }

            autoStylesMap.forEach(function (styles, element) {
              Object.keys(styles).forEach(function (prop) {
                styles[prop] = _this242._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]);
              });
            });
            var players = instructions.map(function (i) {
              var styles = autoStylesMap.get(i.element);
              return _this242._buildPlayer(i, {}, styles);
            });
            var player = optimizeGroupPlayer(players);
            this._playersById[id] = player;
            player.onDestroy(function () {
              return _this242.destroy(id);
            });
            this.players.push(player);
            return player;
          }
        }, {
          key: "destroy",
          value: function destroy(id) {
            var player = this._getPlayer(id);

            player.destroy();
            delete this._playersById[id];
            var index = this.players.indexOf(player);

            if (index >= 0) {
              this.players.splice(index, 1);
            }
          }
        }, {
          key: "_getPlayer",
          value: function _getPlayer(id) {
            var player = this._playersById[id];

            if (!player) {
              throw new Error("Unable to find the timeline player referenced by ".concat(id));
            }

            return player;
          }
        }, {
          key: "listen",
          value: function listen(id, element, eventName, callback) {
            // triggerName, fromState, toState are all ignored for timeline animations
            var baseEvent = makeAnimationEvent(element, '', '', '');
            listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
            return function () {};
          }
        }, {
          key: "command",
          value: function command(id, element, _command2, args) {
            if (_command2 == 'register') {
              this.register(id, args[0]);
              return;
            }

            if (_command2 == 'create') {
              var options = args[0] || {};
              this.create(id, element, options);
              return;
            }

            var player = this._getPlayer(id);

            switch (_command2) {
              case 'play':
                player.play();
                break;

              case 'pause':
                player.pause();
                break;

              case 'reset':
                player.reset();
                break;

              case 'restart':
                player.restart();
                break;

              case 'finish':
                player.finish();
                break;

              case 'init':
                player.init();
                break;

              case 'setPosition':
                player.setPosition(parseFloat(args[0]));
                break;

              case 'destroy':
                this.destroy(id);
                break;
            }
          }
        }]);

        return TimelineAnimationEngine;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var QUEUED_CLASSNAME = 'ng-animate-queued';
      var QUEUED_SELECTOR = '.ng-animate-queued';
      var DISABLED_CLASSNAME = 'ng-animate-disabled';
      var DISABLED_SELECTOR = '.ng-animate-disabled';
      var STAR_CLASSNAME = 'ng-star-inserted';
      var STAR_SELECTOR = '.ng-star-inserted';
      var EMPTY_PLAYER_ARRAY = [];
      var NULL_REMOVAL_STATE = {
        namespaceId: '',
        setForRemoval: false,
        setForMove: false,
        hasAnimation: false,
        removedBeforeQueried: false
      };
      var NULL_REMOVED_QUERIED_STATE = {
        namespaceId: '',
        setForMove: false,
        setForRemoval: false,
        hasAnimation: false,
        removedBeforeQueried: true
      };
      var REMOVAL_FLAG = '__ng_removed';

      var StateValue = /*#__PURE__*/function () {
        function StateValue(input) {
          var namespaceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

          _classCallCheck(this, StateValue);

          this.namespaceId = namespaceId;
          var isObj = input && input.hasOwnProperty('value');
          var value = isObj ? input['value'] : input;
          this.value = normalizeTriggerValue(value);

          if (isObj) {
            var options = copyObj(input);
            delete options['value'];
            this.options = options;
          } else {
            this.options = {};
          }

          if (!this.options.params) {
            this.options.params = {};
          }
        }

        _createClass2(StateValue, [{
          key: "params",
          get: function get() {
            return this.options.params;
          }
        }, {
          key: "absorbOptions",
          value: function absorbOptions(options) {
            var newParams = options.params;

            if (newParams) {
              var oldParams = this.options.params;
              Object.keys(newParams).forEach(function (prop) {
                if (oldParams[prop] == null) {
                  oldParams[prop] = newParams[prop];
                }
              });
            }
          }
        }]);

        return StateValue;
      }();

      var VOID_VALUE = 'void';
      var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);

      var AnimationTransitionNamespace = /*#__PURE__*/function () {
        function AnimationTransitionNamespace(id, hostElement, _engine) {
          _classCallCheck(this, AnimationTransitionNamespace);

          this.id = id;
          this.hostElement = hostElement;
          this._engine = _engine;
          this.players = [];
          this._triggers = {};
          this._queue = [];
          this._elementListeners = new Map();
          this._hostClassName = 'ng-tns-' + id;
          addClass(hostElement, this._hostClassName);
        }

        _createClass2(AnimationTransitionNamespace, [{
          key: "listen",
          value: function listen(element, name, phase, callback) {
            var _this243 = this;

            if (!this._triggers.hasOwnProperty(name)) {
              throw new Error("Unable to listen on the animation trigger event \"".concat(phase, "\" because the animation trigger \"").concat(name, "\" doesn't exist!"));
            }

            if (phase == null || phase.length == 0) {
              throw new Error("Unable to listen on the animation trigger \"".concat(name, "\" because the provided event is undefined!"));
            }

            if (!isTriggerEventValid(phase)) {
              throw new Error("The provided animation trigger event \"".concat(phase, "\" for the animation trigger \"").concat(name, "\" is not supported!"));
            }

            var listeners = getOrSetAsInMap(this._elementListeners, element, []);
            var data = {
              name: name,
              phase: phase,
              callback: callback
            };
            listeners.push(data);
            var triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});

            if (!triggersWithStates.hasOwnProperty(name)) {
              addClass(element, NG_TRIGGER_CLASSNAME);
              addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
              triggersWithStates[name] = DEFAULT_STATE_VALUE;
            }

            return function () {
              // the event listener is removed AFTER the flush has occurred such
              // that leave animations callbacks can fire (otherwise if the node
              // is removed in between then the listeners would be deregistered)
              _this243._engine.afterFlush(function () {
                var index = listeners.indexOf(data);

                if (index >= 0) {
                  listeners.splice(index, 1);
                }

                if (!_this243._triggers[name]) {
                  delete triggersWithStates[name];
                }
              });
            };
          }
        }, {
          key: "register",
          value: function register(name, ast) {
            if (this._triggers[name]) {
              // throw
              return false;
            } else {
              this._triggers[name] = ast;
              return true;
            }
          }
        }, {
          key: "_getTrigger",
          value: function _getTrigger(name) {
            var trigger = this._triggers[name];

            if (!trigger) {
              throw new Error("The provided animation trigger \"".concat(name, "\" has not been registered!"));
            }

            return trigger;
          }
        }, {
          key: "trigger",
          value: function trigger(element, triggerName, value) {
            var _this244 = this;

            var defaultToFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            var trigger = this._getTrigger(triggerName);

            var player = new TransitionAnimationPlayer(this.id, triggerName, element);

            var triggersWithStates = this._engine.statesByElement.get(element);

            if (!triggersWithStates) {
              addClass(element, NG_TRIGGER_CLASSNAME);
              addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);

              this._engine.statesByElement.set(element, triggersWithStates = {});
            }

            var fromState = triggersWithStates[triggerName];
            var toState = new StateValue(value, this.id);
            var isObj = value && value.hasOwnProperty('value');

            if (!isObj && fromState) {
              toState.absorbOptions(fromState.options);
            }

            triggersWithStates[triggerName] = toState;

            if (!fromState) {
              fromState = DEFAULT_STATE_VALUE;
            }

            var isRemoval = toState.value === VOID_VALUE; // normally this isn't reached by here, however, if an object expression
            // is passed in then it may be a new object each time. Comparing the value
            // is important since that will stay the same despite there being a new object.
            // The removal arc here is special cased because the same element is triggered
            // twice in the event that it contains animations on the outer/inner portions
            // of the host container

            if (!isRemoval && fromState.value === toState.value) {
              // this means that despite the value not changing, some inner params
              // have changed which means that the animation final styles need to be applied
              if (!objEquals(fromState.params, toState.params)) {
                var errors = [];
                var fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
                var toStyles = trigger.matchStyles(toState.value, toState.params, errors);

                if (errors.length) {
                  this._engine.reportError(errors);
                } else {
                  this._engine.afterFlush(function () {
                    eraseStyles(element, fromStyles);
                    setStyles(element, toStyles);
                  });
                }
              }

              return;
            }

            var playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
            playersOnElement.forEach(function (player) {
              // only remove the player if it is queued on the EXACT same trigger/namespace
              // we only also deal with queued players here because if the animation has
              // started then we want to keep the player alive until the flush happens
              // (which is where the previousPlayers are passed into the new palyer)
              if (player.namespaceId == _this244.id && player.triggerName == triggerName && player.queued) {
                player.destroy();
              }
            });
            var transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
            var isFallbackTransition = false;

            if (!transition) {
              if (!defaultToFallback) return;
              transition = trigger.fallbackTransition;
              isFallbackTransition = true;
            }

            this._engine.totalQueuedPlayers++;

            this._queue.push({
              element: element,
              triggerName: triggerName,
              transition: transition,
              fromState: fromState,
              toState: toState,
              player: player,
              isFallbackTransition: isFallbackTransition
            });

            if (!isFallbackTransition) {
              addClass(element, QUEUED_CLASSNAME);
              player.onStart(function () {
                removeClass(element, QUEUED_CLASSNAME);
              });
            }

            player.onDone(function () {
              var index = _this244.players.indexOf(player);

              if (index >= 0) {
                _this244.players.splice(index, 1);
              }

              var players = _this244._engine.playersByElement.get(element);

              if (players) {
                var _index5 = players.indexOf(player);

                if (_index5 >= 0) {
                  players.splice(_index5, 1);
                }
              }
            });
            this.players.push(player);
            playersOnElement.push(player);
            return player;
          }
        }, {
          key: "deregister",
          value: function deregister(name) {
            var _this245 = this;

            delete this._triggers[name];

            this._engine.statesByElement.forEach(function (stateMap, element) {
              delete stateMap[name];
            });

            this._elementListeners.forEach(function (listeners, element) {
              _this245._elementListeners.set(element, listeners.filter(function (entry) {
                return entry.name != name;
              }));
            });
          }
        }, {
          key: "clearElementCache",
          value: function clearElementCache(element) {
            this._engine.statesByElement["delete"](element);

            this._elementListeners["delete"](element);

            var elementPlayers = this._engine.playersByElement.get(element);

            if (elementPlayers) {
              elementPlayers.forEach(function (player) {
                return player.destroy();
              });

              this._engine.playersByElement["delete"](element);
            }
          }
        }, {
          key: "_signalRemovalForInnerTriggers",
          value: function _signalRemovalForInnerTriggers(rootElement, context) {
            var _this246 = this;

            var elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true); // emulate a leave animation for all inner nodes within this node.
            // If there are no animations found for any of the nodes then clear the cache
            // for the element.


            elements.forEach(function (elm) {
              // this means that an inner remove() operation has already kicked off
              // the animation on this element...
              if (elm[REMOVAL_FLAG]) return;

              var namespaces = _this246._engine.fetchNamespacesByElement(elm);

              if (namespaces.size) {
                namespaces.forEach(function (ns) {
                  return ns.triggerLeaveAnimation(elm, context, false, true);
                });
              } else {
                _this246.clearElementCache(elm);
              }
            }); // If the child elements were removed along with the parent, their animations might not
            // have completed. Clear all the elements from the cache so we don't end up with a memory leak.

            this._engine.afterFlushAnimationsDone(function () {
              return elements.forEach(function (elm) {
                return _this246.clearElementCache(elm);
              });
            });
          }
        }, {
          key: "triggerLeaveAnimation",
          value: function triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
            var _this247 = this;

            var triggerStates = this._engine.statesByElement.get(element);

            if (triggerStates) {
              var players = [];
              Object.keys(triggerStates).forEach(function (triggerName) {
                // this check is here in the event that an element is removed
                // twice (both on the host level and the component level)
                if (_this247._triggers[triggerName]) {
                  var player = _this247.trigger(element, triggerName, VOID_VALUE, defaultToFallback);

                  if (player) {
                    players.push(player);
                  }
                }
              });

              if (players.length) {
                this._engine.markElementAsRemoved(this.id, element, true, context);

                if (destroyAfterComplete) {
                  optimizeGroupPlayer(players).onDone(function () {
                    return _this247._engine.processLeaveNode(element);
                  });
                }

                return true;
              }
            }

            return false;
          }
        }, {
          key: "prepareLeaveAnimationListeners",
          value: function prepareLeaveAnimationListeners(element) {
            var _this248 = this;

            var listeners = this._elementListeners.get(element);

            var elementStates = this._engine.statesByElement.get(element); // if this statement fails then it means that the element was picked up
            // by an earlier flush (or there are no listeners at all to track the leave).


            if (listeners && elementStates) {
              var visitedTriggers = new Set();
              listeners.forEach(function (listener) {
                var triggerName = listener.name;
                if (visitedTriggers.has(triggerName)) return;
                visitedTriggers.add(triggerName);
                var trigger = _this248._triggers[triggerName];
                var transition = trigger.fallbackTransition;
                var fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
                var toState = new StateValue(VOID_VALUE);
                var player = new TransitionAnimationPlayer(_this248.id, triggerName, element);
                _this248._engine.totalQueuedPlayers++;

                _this248._queue.push({
                  element: element,
                  triggerName: triggerName,
                  transition: transition,
                  fromState: fromState,
                  toState: toState,
                  player: player,
                  isFallbackTransition: true
                });
              });
            }
          }
        }, {
          key: "removeNode",
          value: function removeNode(element, context) {
            var _this249 = this;

            var engine = this._engine;

            if (element.childElementCount) {
              this._signalRemovalForInnerTriggers(element, context);
            } // this means that a * => VOID animation was detected and kicked off


            if (this.triggerLeaveAnimation(element, context, true)) return; // find the player that is animating and make sure that the
            // removal is delayed until that player has completed

            var containsPotentialParentTransition = false;

            if (engine.totalAnimations) {
              var currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : []; // when this `if statement` does not continue forward it means that
              // a previous animation query has selected the current element and
              // is animating it. In this situation want to continue forwards and
              // allow the element to be queued up for animation later.

              if (currentPlayers && currentPlayers.length) {
                containsPotentialParentTransition = true;
              } else {
                var parent = element;

                while (parent = parent.parentNode) {
                  var triggers = engine.statesByElement.get(parent);

                  if (triggers) {
                    containsPotentialParentTransition = true;
                    break;
                  }
                }
              }
            } // at this stage we know that the element will either get removed
            // during flush or will be picked up by a parent query. Either way
            // we need to fire the listeners for this element when it DOES get
            // removed (once the query parent animation is done or after flush)


            this.prepareLeaveAnimationListeners(element); // whether or not a parent has an animation we need to delay the deferral of the leave
            // operation until we have more information (which we do after flush() has been called)

            if (containsPotentialParentTransition) {
              engine.markElementAsRemoved(this.id, element, false, context);
            } else {
              var removalFlag = element[REMOVAL_FLAG];

              if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
                // we do this after the flush has occurred such
                // that the callbacks can be fired
                engine.afterFlush(function () {
                  return _this249.clearElementCache(element);
                });
                engine.destroyInnerAnimations(element);

                engine._onRemovalComplete(element, context);
              }
            }
          }
        }, {
          key: "insertNode",
          value: function insertNode(element, parent) {
            addClass(element, this._hostClassName);
          }
        }, {
          key: "drainQueuedTransitions",
          value: function drainQueuedTransitions(microtaskId) {
            var _this250 = this;

            var instructions = [];

            this._queue.forEach(function (entry) {
              var player = entry.player;
              if (player.destroyed) return;
              var element = entry.element;

              var listeners = _this250._elementListeners.get(element);

              if (listeners) {
                listeners.forEach(function (listener) {
                  if (listener.name == entry.triggerName) {
                    var baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
                    baseEvent['_data'] = microtaskId;
                    listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
                  }
                });
              }

              if (player.markedForDestroy) {
                _this250._engine.afterFlush(function () {
                  // now we can destroy the element properly since the event listeners have
                  // been bound to the player
                  player.destroy();
                });
              } else {
                instructions.push(entry);
              }
            });

            this._queue = [];
            return instructions.sort(function (a, b) {
              // if depCount == 0 them move to front
              // otherwise if a contains b then move back
              var d0 = a.transition.ast.depCount;
              var d1 = b.transition.ast.depCount;

              if (d0 == 0 || d1 == 0) {
                return d0 - d1;
              }

              return _this250._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
            });
          }
        }, {
          key: "destroy",
          value: function destroy(context) {
            this.players.forEach(function (p) {
              return p.destroy();
            });

            this._signalRemovalForInnerTriggers(this.hostElement, context);
          }
        }, {
          key: "elementContainsData",
          value: function elementContainsData(element) {
            var containsData = false;
            if (this._elementListeners.has(element)) containsData = true;
            containsData = (this._queue.find(function (entry) {
              return entry.element === element;
            }) ? true : false) || containsData;
            return containsData;
          }
        }]);

        return AnimationTransitionNamespace;
      }();

      var TransitionAnimationEngine = /*#__PURE__*/function () {
        function TransitionAnimationEngine(bodyNode, driver, _normalizer) {
          _classCallCheck(this, TransitionAnimationEngine);

          this.bodyNode = bodyNode;
          this.driver = driver;
          this._normalizer = _normalizer;
          this.players = [];
          this.newHostElements = new Map();
          this.playersByElement = new Map();
          this.playersByQueriedElement = new Map();
          this.statesByElement = new Map();
          this.disabledNodes = new Set();
          this.totalAnimations = 0;
          this.totalQueuedPlayers = 0;
          this._namespaceLookup = {};
          this._namespaceList = [];
          this._flushFns = [];
          this._whenQuietFns = [];
          this.namespacesByHostElement = new Map();
          this.collectedEnterElements = [];
          this.collectedLeaveElements = []; // this method is designed to be overridden by the code that uses this engine

          this.onRemovalComplete = function (element, context) {};
        }
        /** @internal */


        _createClass2(TransitionAnimationEngine, [{
          key: "_onRemovalComplete",
          value: function _onRemovalComplete(element, context) {
            this.onRemovalComplete(element, context);
          }
        }, {
          key: "queuedPlayers",
          get: function get() {
            var players = [];

            this._namespaceList.forEach(function (ns) {
              ns.players.forEach(function (player) {
                if (player.queued) {
                  players.push(player);
                }
              });
            });

            return players;
          }
        }, {
          key: "createNamespace",
          value: function createNamespace(namespaceId, hostElement) {
            var ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);

            if (hostElement.parentNode) {
              this._balanceNamespaceList(ns, hostElement);
            } else {
              // defer this later until flush during when the host element has
              // been inserted so that we know exactly where to place it in
              // the namespace list
              this.newHostElements.set(hostElement, ns); // given that this host element is apart of the animation code, it
              // may or may not be inserted by a parent node that is an of an
              // animation renderer type. If this happens then we can still have
              // access to this item when we query for :enter nodes. If the parent
              // is a renderer then the set data-structure will normalize the entry

              this.collectEnterElement(hostElement);
            }

            return this._namespaceLookup[namespaceId] = ns;
          }
        }, {
          key: "_balanceNamespaceList",
          value: function _balanceNamespaceList(ns, hostElement) {
            var limit = this._namespaceList.length - 1;

            if (limit >= 0) {
              var found = false;

              for (var i = limit; i >= 0; i--) {
                var nextNamespace = this._namespaceList[i];

                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
                  this._namespaceList.splice(i + 1, 0, ns);

                  found = true;
                  break;
                }
              }

              if (!found) {
                this._namespaceList.splice(0, 0, ns);
              }
            } else {
              this._namespaceList.push(ns);
            }

            this.namespacesByHostElement.set(hostElement, ns);
            return ns;
          }
        }, {
          key: "register",
          value: function register(namespaceId, hostElement) {
            var ns = this._namespaceLookup[namespaceId];

            if (!ns) {
              ns = this.createNamespace(namespaceId, hostElement);
            }

            return ns;
          }
        }, {
          key: "registerTrigger",
          value: function registerTrigger(namespaceId, name, trigger) {
            var ns = this._namespaceLookup[namespaceId];

            if (ns && ns.register(name, trigger)) {
              this.totalAnimations++;
            }
          }
        }, {
          key: "destroy",
          value: function destroy(namespaceId, context) {
            var _this251 = this;

            if (!namespaceId) return;

            var ns = this._fetchNamespace(namespaceId);

            this.afterFlush(function () {
              _this251.namespacesByHostElement["delete"](ns.hostElement);

              delete _this251._namespaceLookup[namespaceId];

              var index = _this251._namespaceList.indexOf(ns);

              if (index >= 0) {
                _this251._namespaceList.splice(index, 1);
              }
            });
            this.afterFlushAnimationsDone(function () {
              return ns.destroy(context);
            });
          }
        }, {
          key: "_fetchNamespace",
          value: function _fetchNamespace(id) {
            return this._namespaceLookup[id];
          }
        }, {
          key: "fetchNamespacesByElement",
          value: function fetchNamespacesByElement(element) {
            // normally there should only be one namespace per element, however
            // if @triggers are placed on both the component element and then
            // its host element (within the component code) then there will be
            // two namespaces returned. We use a set here to simply the dedupe
            // of namespaces incase there are multiple triggers both the elm and host
            var namespaces = new Set();
            var elementStates = this.statesByElement.get(element);

            if (elementStates) {
              var keys = Object.keys(elementStates);

              for (var i = 0; i < keys.length; i++) {
                var nsId = elementStates[keys[i]].namespaceId;

                if (nsId) {
                  var ns = this._fetchNamespace(nsId);

                  if (ns) {
                    namespaces.add(ns);
                  }
                }
              }
            }

            return namespaces;
          }
        }, {
          key: "trigger",
          value: function trigger(namespaceId, element, name, value) {
            if (isElementNode(element)) {
              var ns = this._fetchNamespace(namespaceId);

              if (ns) {
                ns.trigger(element, name, value);
                return true;
              }
            }

            return false;
          }
        }, {
          key: "insertNode",
          value: function insertNode(namespaceId, element, parent, insertBefore) {
            if (!isElementNode(element)) return; // special case for when an element is removed and reinserted (move operation)
            // when this occurs we do not want to use the element for deletion later

            var details = element[REMOVAL_FLAG];

            if (details && details.setForRemoval) {
              details.setForRemoval = false;
              details.setForMove = true;
              var index = this.collectedLeaveElements.indexOf(element);

              if (index >= 0) {
                this.collectedLeaveElements.splice(index, 1);
              }
            } // in the event that the namespaceId is blank then the caller
            // code does not contain any animation code in it, but it is
            // just being called so that the node is marked as being inserted


            if (namespaceId) {
              var ns = this._fetchNamespace(namespaceId); // This if-statement is a workaround for router issue #21947.
              // The router sometimes hits a race condition where while a route
              // is being instantiated a new navigation arrives, triggering leave
              // animation of DOM that has not been fully initialized, until this
              // is resolved, we need to handle the scenario when DOM is not in a
              // consistent state during the animation.


              if (ns) {
                ns.insertNode(element, parent);
              }
            } // only *directives and host elements are inserted before


            if (insertBefore) {
              this.collectEnterElement(element);
            }
          }
        }, {
          key: "collectEnterElement",
          value: function collectEnterElement(element) {
            this.collectedEnterElements.push(element);
          }
        }, {
          key: "markElementAsDisabled",
          value: function markElementAsDisabled(element, value) {
            if (value) {
              if (!this.disabledNodes.has(element)) {
                this.disabledNodes.add(element);
                addClass(element, DISABLED_CLASSNAME);
              }
            } else if (this.disabledNodes.has(element)) {
              this.disabledNodes["delete"](element);
              removeClass(element, DISABLED_CLASSNAME);
            }
          }
        }, {
          key: "removeNode",
          value: function removeNode(namespaceId, element, isHostElement, context) {
            if (isElementNode(element)) {
              var ns = namespaceId ? this._fetchNamespace(namespaceId) : null;

              if (ns) {
                ns.removeNode(element, context);
              } else {
                this.markElementAsRemoved(namespaceId, element, false, context);
              }

              if (isHostElement) {
                var hostNS = this.namespacesByHostElement.get(element);

                if (hostNS && hostNS.id !== namespaceId) {
                  hostNS.removeNode(element, context);
                }
              }
            } else {
              this._onRemovalComplete(element, context);
            }
          }
        }, {
          key: "markElementAsRemoved",
          value: function markElementAsRemoved(namespaceId, element, hasAnimation, context) {
            this.collectedLeaveElements.push(element);
            element[REMOVAL_FLAG] = {
              namespaceId: namespaceId,
              setForRemoval: context,
              hasAnimation: hasAnimation,
              removedBeforeQueried: false
            };
          }
        }, {
          key: "listen",
          value: function listen(namespaceId, element, name, phase, callback) {
            if (isElementNode(element)) {
              return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
            }

            return function () {};
          }
        }, {
          key: "_buildInstruction",
          value: function _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
            return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
          }
        }, {
          key: "destroyInnerAnimations",
          value: function destroyInnerAnimations(containerElement) {
            var _this252 = this;

            var elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
            elements.forEach(function (element) {
              return _this252.destroyActiveAnimationsForElement(element);
            });
            if (this.playersByQueriedElement.size == 0) return;
            elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
            elements.forEach(function (element) {
              return _this252.finishActiveQueriedAnimationOnElement(element);
            });
          }
        }, {
          key: "destroyActiveAnimationsForElement",
          value: function destroyActiveAnimationsForElement(element) {
            var players = this.playersByElement.get(element);

            if (players) {
              players.forEach(function (player) {
                // special case for when an element is set for destruction, but hasn't started.
                // in this situation we want to delay the destruction until the flush occurs
                // so that any event listeners attached to the player are triggered.
                if (player.queued) {
                  player.markedForDestroy = true;
                } else {
                  player.destroy();
                }
              });
            }
          }
        }, {
          key: "finishActiveQueriedAnimationOnElement",
          value: function finishActiveQueriedAnimationOnElement(element) {
            var players = this.playersByQueriedElement.get(element);

            if (players) {
              players.forEach(function (player) {
                return player.finish();
              });
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            var _this253 = this;

            return new Promise(function (resolve) {
              if (_this253.players.length) {
                return optimizeGroupPlayer(_this253.players).onDone(function () {
                  return resolve();
                });
              } else {
                resolve();
              }
            });
          }
        }, {
          key: "processLeaveNode",
          value: function processLeaveNode(element) {
            var _this254 = this;

            var details = element[REMOVAL_FLAG];

            if (details && details.setForRemoval) {
              // this will prevent it from removing it twice
              element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;

              if (details.namespaceId) {
                this.destroyInnerAnimations(element);

                var ns = this._fetchNamespace(details.namespaceId);

                if (ns) {
                  ns.clearElementCache(element);
                }
              }

              this._onRemovalComplete(element, details.setForRemoval);
            }

            if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
              this.markElementAsDisabled(element, false);
            }

            this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
              _this254.markElementAsDisabled(node, false);
            });
          }
        }, {
          key: "flush",
          value: function flush() {
            var _this255 = this;

            var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
            var players = [];

            if (this.newHostElements.size) {
              this.newHostElements.forEach(function (ns, element) {
                return _this255._balanceNamespaceList(ns, element);
              });
              this.newHostElements.clear();
            }

            if (this.totalAnimations && this.collectedEnterElements.length) {
              for (var i = 0; i < this.collectedEnterElements.length; i++) {
                var elm = this.collectedEnterElements[i];
                addClass(elm, STAR_CLASSNAME);
              }
            }

            if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
              var cleanupFns = [];

              try {
                players = this._flushAnimations(cleanupFns, microtaskId);
              } finally {
                for (var _i27 = 0; _i27 < cleanupFns.length; _i27++) {
                  cleanupFns[_i27]();
                }
              }
            } else {
              for (var _i28 = 0; _i28 < this.collectedLeaveElements.length; _i28++) {
                var element = this.collectedLeaveElements[_i28];
                this.processLeaveNode(element);
              }
            }

            this.totalQueuedPlayers = 0;
            this.collectedEnterElements.length = 0;
            this.collectedLeaveElements.length = 0;

            this._flushFns.forEach(function (fn) {
              return fn();
            });

            this._flushFns = [];

            if (this._whenQuietFns.length) {
              // we move these over to a variable so that
              // if any new callbacks are registered in another
              // flush they do not populate the existing set
              var quietFns = this._whenQuietFns;
              this._whenQuietFns = [];

              if (players.length) {
                optimizeGroupPlayer(players).onDone(function () {
                  quietFns.forEach(function (fn) {
                    return fn();
                  });
                });
              } else {
                quietFns.forEach(function (fn) {
                  return fn();
                });
              }
            }
          }
        }, {
          key: "reportError",
          value: function reportError(errors) {
            throw new Error("Unable to process animations due to the following failed trigger transitions\n ".concat(errors.join('\n')));
          }
        }, {
          key: "_flushAnimations",
          value: function _flushAnimations(cleanupFns, microtaskId) {
            var _this256 = this;

            var subTimelines = new ElementInstructionMap();
            var skippedPlayers = [];
            var skippedPlayersMap = new Map();
            var queuedInstructions = [];
            var queriedElements = new Map();
            var allPreStyleElements = new Map();
            var allPostStyleElements = new Map();
            var disabledElementsSet = new Set();
            this.disabledNodes.forEach(function (node) {
              disabledElementsSet.add(node);

              var nodesThatAreDisabled = _this256.driver.query(node, QUEUED_SELECTOR, true);

              for (var _i29 = 0; _i29 < nodesThatAreDisabled.length; _i29++) {
                disabledElementsSet.add(nodesThatAreDisabled[_i29]);
              }
            });
            var bodyNode = this.bodyNode;
            var allTriggerElements = Array.from(this.statesByElement.keys());
            var enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements); // this must occur before the instructions are built below such that
            // the :enter queries match the elements (since the timeline queries
            // are fired during instruction building).

            var enterNodeMapIds = new Map();
            var i = 0;
            enterNodeMap.forEach(function (nodes, root) {
              var className = ENTER_CLASSNAME + i++;
              enterNodeMapIds.set(root, className);
              nodes.forEach(function (node) {
                return addClass(node, className);
              });
            });
            var allLeaveNodes = [];
            var mergedLeaveNodes = new Set();
            var leaveNodesWithoutAnimations = new Set();

            for (var _i30 = 0; _i30 < this.collectedLeaveElements.length; _i30++) {
              var element = this.collectedLeaveElements[_i30];
              var details = element[REMOVAL_FLAG];

              if (details && details.setForRemoval) {
                allLeaveNodes.push(element);
                mergedLeaveNodes.add(element);

                if (details.hasAnimation) {
                  this.driver.query(element, STAR_SELECTOR, true).forEach(function (elm) {
                    return mergedLeaveNodes.add(elm);
                  });
                } else {
                  leaveNodesWithoutAnimations.add(element);
                }
              }
            }

            var leaveNodeMapIds = new Map();
            var leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
            leaveNodeMap.forEach(function (nodes, root) {
              var className = LEAVE_CLASSNAME + i++;
              leaveNodeMapIds.set(root, className);
              nodes.forEach(function (node) {
                return addClass(node, className);
              });
            });
            cleanupFns.push(function () {
              enterNodeMap.forEach(function (nodes, root) {
                var className = enterNodeMapIds.get(root);
                nodes.forEach(function (node) {
                  return removeClass(node, className);
                });
              });
              leaveNodeMap.forEach(function (nodes, root) {
                var className = leaveNodeMapIds.get(root);
                nodes.forEach(function (node) {
                  return removeClass(node, className);
                });
              });
              allLeaveNodes.forEach(function (element) {
                _this256.processLeaveNode(element);
              });
            });
            var allPlayers = [];
            var erroneousTransitions = [];

            for (var _i31 = this._namespaceList.length - 1; _i31 >= 0; _i31--) {
              var ns = this._namespaceList[_i31];
              ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
                var player = entry.player;
                var element = entry.element;
                allPlayers.push(player);

                if (_this256.collectedEnterElements.length) {
                  var _details = element[REMOVAL_FLAG]; // move animations are currently not supported...

                  if (_details && _details.setForMove) {
                    player.destroy();
                    return;
                  }
                }

                var nodeIsOrphaned = !bodyNode || !_this256.driver.containsElement(bodyNode, element);
                var leaveClassName = leaveNodeMapIds.get(element);
                var enterClassName = enterNodeMapIds.get(element);

                var instruction = _this256._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);

                if (instruction.errors && instruction.errors.length) {
                  erroneousTransitions.push(instruction);
                  return;
                } // even though the element may not be apart of the DOM, it may
                // still be added at a later point (due to the mechanics of content
                // projection and/or dynamic component insertion) therefore it's
                // important we still style the element.


                if (nodeIsOrphaned) {
                  player.onStart(function () {
                    return eraseStyles(element, instruction.fromStyles);
                  });
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  skippedPlayers.push(player);
                  return;
                } // if a unmatched transition is queued to go then it SHOULD NOT render
                // an animation and cancel the previously running animations.


                if (entry.isFallbackTransition) {
                  player.onStart(function () {
                    return eraseStyles(element, instruction.fromStyles);
                  });
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  skippedPlayers.push(player);
                  return;
                } // this means that if a parent animation uses this animation as a sub trigger
                // then it will instruct the timeline builder to not add a player delay, but
                // instead stretch the first keyframe gap up until the animation starts. The
                // reason this is important is to prevent extra initialization styles from being
                // required by the user in the animation.


                instruction.timelines.forEach(function (tl) {
                  return tl.stretchStartingKeyframe = true;
                });
                subTimelines.append(element, instruction.timelines);
                var tuple = {
                  instruction: instruction,
                  player: player,
                  element: element
                };
                queuedInstructions.push(tuple);
                instruction.queriedElements.forEach(function (element) {
                  return getOrSetAsInMap(queriedElements, element, []).push(player);
                });
                instruction.preStyleProps.forEach(function (stringMap, element) {
                  var props = Object.keys(stringMap);

                  if (props.length) {
                    var setVal = allPreStyleElements.get(element);

                    if (!setVal) {
                      allPreStyleElements.set(element, setVal = new Set());
                    }

                    props.forEach(function (prop) {
                      return setVal.add(prop);
                    });
                  }
                });
                instruction.postStyleProps.forEach(function (stringMap, element) {
                  var props = Object.keys(stringMap);
                  var setVal = allPostStyleElements.get(element);

                  if (!setVal) {
                    allPostStyleElements.set(element, setVal = new Set());
                  }

                  props.forEach(function (prop) {
                    return setVal.add(prop);
                  });
                });
              });
            }

            if (erroneousTransitions.length) {
              var errors = [];
              erroneousTransitions.forEach(function (instruction) {
                errors.push("@".concat(instruction.triggerName, " has failed due to:\n"));
                instruction.errors.forEach(function (error) {
                  return errors.push("- ".concat(error, "\n"));
                });
              });
              allPlayers.forEach(function (player) {
                return player.destroy();
              });
              this.reportError(errors);
            }

            var allPreviousPlayersMap = new Map(); // this map works to tell which element in the DOM tree is contained by
            // which animation. Further down below this map will get populated once
            // the players are built and in doing so it can efficiently figure out
            // if a sub player is skipped due to a parent player having priority.

            var animationElementMap = new Map();
            queuedInstructions.forEach(function (entry) {
              var element = entry.element;

              if (subTimelines.has(element)) {
                animationElementMap.set(element, element);

                _this256._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
              }
            });
            skippedPlayers.forEach(function (player) {
              var element = player.element;

              var previousPlayers = _this256._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);

              previousPlayers.forEach(function (prevPlayer) {
                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
                prevPlayer.destroy();
              });
            }); // this is a special case for nodes that will be removed (either by)
            // having their own leave animations or by being queried in a container
            // that will be removed once a parent animation is complete. The idea
            // here is that * styles must be identical to ! styles because of
            // backwards compatibility (* is also filled in by default in many places).
            // Otherwise * styles will return an empty value or auto since the element
            // that is being getComputedStyle'd will not be visible (since * = destination)

            var replaceNodes = allLeaveNodes.filter(function (node) {
              return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
            }); // POST STAGE: fill the * styles

            var postStylesMap = new Map();
            var allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]);
            allLeaveQueriedNodes.forEach(function (node) {
              if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
                replaceNodes.push(node);
              }
            }); // PRE STAGE: fill the ! styles

            var preStylesMap = new Map();
            enterNodeMap.forEach(function (nodes, root) {
              cloakAndComputeStyles(preStylesMap, _this256.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]);
            });
            replaceNodes.forEach(function (node) {
              var post = postStylesMap.get(node);
              var pre = preStylesMap.get(node);
              postStylesMap.set(node, Object.assign(Object.assign({}, post), pre));
            });
            var rootPlayers = [];
            var subPlayers = [];
            var NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
            queuedInstructions.forEach(function (entry) {
              var element = entry.element,
                  player = entry.player,
                  instruction = entry.instruction; // this means that it was never consumed by a parent animation which
              // means that it is independent and therefore should be set for animation

              if (subTimelines.has(element)) {
                if (disabledElementsSet.has(element)) {
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  player.disabled = true;
                  player.overrideTotalTime(instruction.totalTime);
                  skippedPlayers.push(player);
                  return;
                } // this will flow up the DOM and query the map to figure out
                // if a parent animation has priority over it. In the situation
                // that a parent is detected then it will cancel the loop. If
                // nothing is detected, or it takes a few hops to find a parent,
                // then it will fill in the missing nodes and signal them as having
                // a detected parent (or a NO_PARENT value via a special constant).


                var parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;

                if (animationElementMap.size > 1) {
                  var elm = element;
                  var parentsToAdd = [];

                  while (elm = elm.parentNode) {
                    var detectedParent = animationElementMap.get(elm);

                    if (detectedParent) {
                      parentWithAnimation = detectedParent;
                      break;
                    }

                    parentsToAdd.push(elm);
                  }

                  parentsToAdd.forEach(function (parent) {
                    return animationElementMap.set(parent, parentWithAnimation);
                  });
                }

                var innerPlayer = _this256._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);

                player.setRealPlayer(innerPlayer);

                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
                  rootPlayers.push(player);
                } else {
                  var parentPlayers = _this256.playersByElement.get(parentWithAnimation);

                  if (parentPlayers && parentPlayers.length) {
                    player.parentPlayer = optimizeGroupPlayer(parentPlayers);
                  }

                  skippedPlayers.push(player);
                }
              } else {
                eraseStyles(element, instruction.fromStyles);
                player.onDestroy(function () {
                  return setStyles(element, instruction.toStyles);
                }); // there still might be a ancestor player animating this
                // element therefore we will still add it as a sub player
                // even if its animation may be disabled

                subPlayers.push(player);

                if (disabledElementsSet.has(element)) {
                  skippedPlayers.push(player);
                }
              }
            }); // find all of the sub players' corresponding inner animation player

            subPlayers.forEach(function (player) {
              // even if any players are not found for a sub animation then it
              // will still complete itself after the next tick since it's Noop
              var playersForElement = skippedPlayersMap.get(player.element);

              if (playersForElement && playersForElement.length) {
                var innerPlayer = optimizeGroupPlayer(playersForElement);
                player.setRealPlayer(innerPlayer);
              }
            }); // the reason why we don't actually play the animation is
            // because all that a skipped player is designed to do is to
            // fire the start/done transition callback events

            skippedPlayers.forEach(function (player) {
              if (player.parentPlayer) {
                player.syncPlayerEvents(player.parentPlayer);
              } else {
                player.destroy();
              }
            }); // run through all of the queued removals and see if they
            // were picked up by a query. If not then perform the removal
            // operation right away unless a parent animation is ongoing.

            for (var _i32 = 0; _i32 < allLeaveNodes.length; _i32++) {
              var _element2 = allLeaveNodes[_i32];
              var _details2 = _element2[REMOVAL_FLAG];
              removeClass(_element2, LEAVE_CLASSNAME); // this means the element has a removal animation that is being
              // taken care of and therefore the inner elements will hang around
              // until that animation is over (or the parent queried animation)

              if (_details2 && _details2.hasAnimation) continue;
              var players = []; // if this element is queried or if it contains queried children
              // then we want for the element not to be removed from the page
              // until the queried animations have finished

              if (queriedElements.size) {
                var queriedPlayerResults = queriedElements.get(_element2);

                if (queriedPlayerResults && queriedPlayerResults.length) {
                  players.push.apply(players, _toConsumableArray(queriedPlayerResults));
                }

                var queriedInnerElements = this.driver.query(_element2, NG_ANIMATING_SELECTOR, true);

                for (var j = 0; j < queriedInnerElements.length; j++) {
                  var queriedPlayers = queriedElements.get(queriedInnerElements[j]);

                  if (queriedPlayers && queriedPlayers.length) {
                    players.push.apply(players, _toConsumableArray(queriedPlayers));
                  }
                }
              }

              var activePlayers = players.filter(function (p) {
                return !p.destroyed;
              });

              if (activePlayers.length) {
                removeNodesAfterAnimationDone(this, _element2, activePlayers);
              } else {
                this.processLeaveNode(_element2);
              }
            } // this is required so the cleanup method doesn't remove them


            allLeaveNodes.length = 0;
            rootPlayers.forEach(function (player) {
              _this256.players.push(player);

              player.onDone(function () {
                player.destroy();

                var index = _this256.players.indexOf(player);

                _this256.players.splice(index, 1);
              });
              player.play();
            });
            return rootPlayers;
          }
        }, {
          key: "elementContainsData",
          value: function elementContainsData(namespaceId, element) {
            var containsData = false;
            var details = element[REMOVAL_FLAG];
            if (details && details.setForRemoval) containsData = true;
            if (this.playersByElement.has(element)) containsData = true;
            if (this.playersByQueriedElement.has(element)) containsData = true;
            if (this.statesByElement.has(element)) containsData = true;
            return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
          }
        }, {
          key: "afterFlush",
          value: function afterFlush(callback) {
            this._flushFns.push(callback);
          }
        }, {
          key: "afterFlushAnimationsDone",
          value: function afterFlushAnimationsDone(callback) {
            this._whenQuietFns.push(callback);
          }
        }, {
          key: "_getPreviousPlayers",
          value: function _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
            var players = [];

            if (isQueriedElement) {
              var queriedElementPlayers = this.playersByQueriedElement.get(element);

              if (queriedElementPlayers) {
                players = queriedElementPlayers;
              }
            } else {
              var elementPlayers = this.playersByElement.get(element);

              if (elementPlayers) {
                var isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
                elementPlayers.forEach(function (player) {
                  if (player.queued) return;
                  if (!isRemovalAnimation && player.triggerName != triggerName) return;
                  players.push(player);
                });
              }
            }

            if (namespaceId || triggerName) {
              players = players.filter(function (player) {
                if (namespaceId && namespaceId != player.namespaceId) return false;
                if (triggerName && triggerName != player.triggerName) return false;
                return true;
              });
            }

            return players;
          }
        }, {
          key: "_beforeAnimationBuild",
          value: function _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
            var _this257 = this;

            var triggerName = instruction.triggerName;
            var rootElement = instruction.element; // when a removal animation occurs, ALL previous players are collected
            // and destroyed (even if they are outside of the current namespace)

            var targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
            var targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;

            var _iterator13 = _createForOfIteratorHelper(instruction.timelines),
                _step12;

            try {
              var _loop5 = function _loop5() {
                var timelineInstruction = _step12.value;
                var element = timelineInstruction.element;
                var isQueriedElement = element !== rootElement;
                var players = getOrSetAsInMap(allPreviousPlayersMap, element, []);

                var previousPlayers = _this257._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);

                previousPlayers.forEach(function (player) {
                  var realPlayer = player.getRealPlayer();

                  if (realPlayer.beforeDestroy) {
                    realPlayer.beforeDestroy();
                  }

                  player.destroy();
                  players.push(player);
                });
              };

              for (_iterator13.s(); !(_step12 = _iterator13.n()).done;) {
                _loop5();
              } // this needs to be done so that the PRE/POST styles can be
              // computed properly without interfering with the previous animation

            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }

            eraseStyles(rootElement, instruction.fromStyles);
          }
        }, {
          key: "_buildAnimation",
          value: function _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
            var _this258 = this;

            var triggerName = instruction.triggerName;
            var rootElement = instruction.element; // we first run this so that the previous animation player
            // data can be passed into the successive animation players

            var allQueriedPlayers = [];
            var allConsumedElements = new Set();
            var allSubElements = new Set();
            var allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
              var element = timelineInstruction.element;
              allConsumedElements.add(element); // FIXME (matsko): make sure to-be-removed animations are removed properly

              var details = element[REMOVAL_FLAG];
              if (details && details.removedBeforeQueried) return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](timelineInstruction.duration, timelineInstruction.delay);
              var isQueriedElement = element !== rootElement;
              var previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map(function (p) {
                return p.getRealPlayer();
              })).filter(function (p) {
                // the `element` is not apart of the AnimationPlayer definition, but
                // Mock/WebAnimations
                // use the element within their implementation. This will be added in Angular5 to
                // AnimationPlayer
                var pp = p;
                return pp.element ? pp.element === element : false;
              });
              var preStyles = preStylesMap.get(element);
              var postStyles = postStylesMap.get(element);
              var keyframes = normalizeKeyframes(_this258.driver, _this258._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);

              var player = _this258._buildPlayer(timelineInstruction, keyframes, previousPlayers); // this means that this particular player belongs to a sub trigger. It is
              // important that we match this player up with the corresponding (@trigger.listener)


              if (timelineInstruction.subTimeline && skippedPlayersMap) {
                allSubElements.add(element);
              }

              if (isQueriedElement) {
                var wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
                wrappedPlayer.setRealPlayer(player);
                allQueriedPlayers.push(wrappedPlayer);
              }

              return player;
            });
            allQueriedPlayers.forEach(function (player) {
              getOrSetAsInMap(_this258.playersByQueriedElement, player.element, []).push(player);
              player.onDone(function () {
                return deleteOrUnsetInMap(_this258.playersByQueriedElement, player.element, player);
              });
            });
            allConsumedElements.forEach(function (element) {
              return addClass(element, NG_ANIMATING_CLASSNAME);
            });
            var player = optimizeGroupPlayer(allNewPlayers);
            player.onDestroy(function () {
              allConsumedElements.forEach(function (element) {
                return removeClass(element, NG_ANIMATING_CLASSNAME);
              });
              setStyles(rootElement, instruction.toStyles);
            }); // this basically makes all of the callbacks for sub element animations
            // be dependent on the upper players for when they finish

            allSubElements.forEach(function (element) {
              getOrSetAsInMap(skippedPlayersMap, element, []).push(player);
            });
            return player;
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer(instruction, keyframes, previousPlayers) {
            if (keyframes.length > 0) {
              return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
            } // special case for when an empty transition|definition is provided
            // ... there is no point in rendering an empty animation


            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](instruction.duration, instruction.delay);
          }
        }]);

        return TransitionAnimationEngine;
      }();

      var TransitionAnimationPlayer = /*#__PURE__*/function () {
        function TransitionAnimationPlayer(namespaceId, triggerName, element) {
          _classCallCheck(this, TransitionAnimationPlayer);

          this.namespaceId = namespaceId;
          this.triggerName = triggerName;
          this.element = element;
          this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"]();
          this._containsRealPlayer = false;
          this._queuedCallbacks = {};
          this.destroyed = false;
          this.markedForDestroy = false;
          this.disabled = false;
          this.queued = true;
          this.totalTime = 0;
        }

        _createClass2(TransitionAnimationPlayer, [{
          key: "setRealPlayer",
          value: function setRealPlayer(player) {
            var _this259 = this;

            if (this._containsRealPlayer) return;
            this._player = player;
            Object.keys(this._queuedCallbacks).forEach(function (phase) {
              _this259._queuedCallbacks[phase].forEach(function (callback) {
                return listenOnPlayer(player, phase, undefined, callback);
              });
            });
            this._queuedCallbacks = {};
            this._containsRealPlayer = true;
            this.overrideTotalTime(player.totalTime);
            this.queued = false;
          }
        }, {
          key: "getRealPlayer",
          value: function getRealPlayer() {
            return this._player;
          }
        }, {
          key: "overrideTotalTime",
          value: function overrideTotalTime(totalTime) {
            this.totalTime = totalTime;
          }
        }, {
          key: "syncPlayerEvents",
          value: function syncPlayerEvents(player) {
            var _this260 = this;

            var p = this._player;

            if (p.triggerCallback) {
              player.onStart(function () {
                return p.triggerCallback('start');
              });
            }

            player.onDone(function () {
              return _this260.finish();
            });
            player.onDestroy(function () {
              return _this260.destroy();
            });
          }
        }, {
          key: "_queueEvent",
          value: function _queueEvent(name, callback) {
            getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            if (this.queued) {
              this._queueEvent('done', fn);
            }

            this._player.onDone(fn);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            if (this.queued) {
              this._queueEvent('start', fn);
            }

            this._player.onStart(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            if (this.queued) {
              this._queueEvent('destroy', fn);
            }

            this._player.onDestroy(fn);
          }
        }, {
          key: "init",
          value: function init() {
            this._player.init();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this.queued ? false : this._player.hasStarted();
          }
        }, {
          key: "play",
          value: function play() {
            !this.queued && this._player.play();
          }
        }, {
          key: "pause",
          value: function pause() {
            !this.queued && this._player.pause();
          }
        }, {
          key: "restart",
          value: function restart() {
            !this.queued && this._player.restart();
          }
        }, {
          key: "finish",
          value: function finish() {
            this._player.finish();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.destroyed = true;

            this._player.destroy();
          }
        }, {
          key: "reset",
          value: function reset() {
            !this.queued && this._player.reset();
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            if (!this.queued) {
              this._player.setPosition(p);
            }
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.queued ? 0 : this._player.getPosition();
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var p = this._player;

            if (p.triggerCallback) {
              p.triggerCallback(phaseName);
            }
          }
        }]);

        return TransitionAnimationPlayer;
      }();

      function deleteOrUnsetInMap(map, key, value) {
        var currentValues;

        if (map instanceof Map) {
          currentValues = map.get(key);

          if (currentValues) {
            if (currentValues.length) {
              var index = currentValues.indexOf(value);
              currentValues.splice(index, 1);
            }

            if (currentValues.length == 0) {
              map["delete"](key);
            }
          }
        } else {
          currentValues = map[key];

          if (currentValues) {
            if (currentValues.length) {
              var _index6 = currentValues.indexOf(value);

              currentValues.splice(_index6, 1);
            }

            if (currentValues.length == 0) {
              delete map[key];
            }
          }
        }

        return currentValues;
      }

      function normalizeTriggerValue(value) {
        // we use `!= null` here because it's the most simple
        // way to test against a "falsy" value without mixing
        // in empty strings or a zero value. DO NOT OPTIMIZE.
        return value != null ? value : null;
      }

      function isElementNode(node) {
        return node && node['nodeType'] === 1;
      }

      function isTriggerEventValid(eventName) {
        return eventName == 'start' || eventName == 'done';
      }

      function cloakElement(element, value) {
        var oldValue = element.style.display;
        element.style.display = value != null ? value : 'none';
        return oldValue;
      }

      function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
        var cloakVals = [];
        elements.forEach(function (element) {
          return cloakVals.push(cloakElement(element));
        });
        var failedElements = [];
        elementPropsMap.forEach(function (props, element) {
          var styles = {};
          props.forEach(function (prop) {
            var value = styles[prop] = driver.computeStyle(element, prop, defaultStyle); // there is no easy way to detect this because a sub element could be removed
            // by a parent animation element being detached.

            if (!value || value.length == 0) {
              element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
              failedElements.push(element);
            }
          });
          valuesMap.set(element, styles);
        }); // we use a index variable here since Set.forEach(a, i) does not return
        // an index value for the closure (but instead just the value)

        var i = 0;
        elements.forEach(function (element) {
          return cloakElement(element, cloakVals[i++]);
        });
        return failedElements;
      }
      /*
      Since the Angular renderer code will return a collection of inserted
      nodes in all areas of a DOM tree, it's up to this algorithm to figure
      out which nodes are roots for each animation @trigger.
      
      By placing each inserted node into a Set and traversing upwards, it
      is possible to find the @trigger elements and well any direct *star
      insertion nodes, if a @trigger root is found then the enter element
      is placed into the Map[@trigger] spot.
       */


      function buildRootMap(roots, nodes) {
        var rootMap = new Map();
        roots.forEach(function (root) {
          return rootMap.set(root, []);
        });
        if (nodes.length == 0) return rootMap;
        var NULL_NODE = 1;
        var nodeSet = new Set(nodes);
        var localRootMap = new Map();

        function getRoot(node) {
          if (!node) return NULL_NODE;
          var root = localRootMap.get(node);
          if (root) return root;
          var parent = node.parentNode;

          if (rootMap.has(parent)) {
            // ngIf inside @trigger
            root = parent;
          } else if (nodeSet.has(parent)) {
            // ngIf inside ngIf
            root = NULL_NODE;
          } else {
            // recurse upwards
            root = getRoot(parent);
          }

          localRootMap.set(node, root);
          return root;
        }

        nodes.forEach(function (node) {
          var root = getRoot(node);

          if (root !== NULL_NODE) {
            rootMap.get(root).push(node);
          }
        });
        return rootMap;
      }

      var CLASSES_CACHE_KEY = '$$classes';

      function containsClass(element, className) {
        if (element.classList) {
          return element.classList.contains(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];
          return classes && classes[className];
        }
      }

      function addClass(element, className) {
        if (element.classList) {
          element.classList.add(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];

          if (!classes) {
            classes = element[CLASSES_CACHE_KEY] = {};
          }

          classes[className] = true;
        }
      }

      function removeClass(element, className) {
        if (element.classList) {
          element.classList.remove(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];

          if (classes) {
            delete classes[className];
          }
        }
      }

      function removeNodesAfterAnimationDone(engine, element, players) {
        optimizeGroupPlayer(players).onDone(function () {
          return engine.processLeaveNode(element);
        });
      }

      function flattenGroupPlayers(players) {
        var finalPlayers = [];

        _flattenGroupPlayersRecur(players, finalPlayers);

        return finalPlayers;
      }

      function _flattenGroupPlayersRecur(players, finalPlayers) {
        for (var i = 0; i < players.length; i++) {
          var player = players[i];

          if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"]) {
            _flattenGroupPlayersRecur(player.players, finalPlayers);
          } else {
            finalPlayers.push(player);
          }
        }
      }

      function objEquals(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) return false;

        for (var i = 0; i < k1.length; i++) {
          var prop = k1[i];
          if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
        }

        return true;
      }

      function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
        var postEntry = allPostStyleElements.get(element);
        if (!postEntry) return false;
        var preEntry = allPreStyleElements.get(element);

        if (preEntry) {
          postEntry.forEach(function (data) {
            return preEntry.add(data);
          });
        } else {
          allPreStyleElements.set(element, postEntry);
        }

        allPostStyleElements["delete"](element);
        return true;
      }

      var AnimationEngine = /*#__PURE__*/function () {
        function AnimationEngine(bodyNode, _driver, normalizer) {
          var _this261 = this;

          _classCallCheck(this, AnimationEngine);

          this.bodyNode = bodyNode;
          this._driver = _driver;
          this._triggerCache = {}; // this method is designed to be overridden by the code that uses this engine

          this.onRemovalComplete = function (element, context) {};

          this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);
          this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);

          this._transitionEngine.onRemovalComplete = function (element, context) {
            return _this261.onRemovalComplete(element, context);
          };
        }

        _createClass2(AnimationEngine, [{
          key: "registerTrigger",
          value: function registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
            var cacheKey = componentId + '-' + name;
            var trigger = this._triggerCache[cacheKey];

            if (!trigger) {
              var errors = [];
              var ast = buildAnimationAst(this._driver, metadata, errors);

              if (errors.length) {
                throw new Error("The animation trigger \"".concat(name, "\" has failed to build due to the following errors:\n - ").concat(errors.join('\n - ')));
              }

              trigger = buildTrigger(name, ast);
              this._triggerCache[cacheKey] = trigger;
            }

            this._transitionEngine.registerTrigger(namespaceId, name, trigger);
          }
        }, {
          key: "register",
          value: function register(namespaceId, hostElement) {
            this._transitionEngine.register(namespaceId, hostElement);
          }
        }, {
          key: "destroy",
          value: function destroy(namespaceId, context) {
            this._transitionEngine.destroy(namespaceId, context);
          }
        }, {
          key: "onInsert",
          value: function onInsert(namespaceId, element, parent, insertBefore) {
            this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
          }
        }, {
          key: "onRemove",
          value: function onRemove(namespaceId, element, context, isHostElement) {
            this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
          }
        }, {
          key: "disableAnimations",
          value: function disableAnimations(element, disable) {
            this._transitionEngine.markElementAsDisabled(element, disable);
          }
        }, {
          key: "process",
          value: function process(namespaceId, element, property, value) {
            if (property.charAt(0) == '@') {
              var _parseTimelineCommand = parseTimelineCommand(property),
                  _parseTimelineCommand2 = _slicedToArray(_parseTimelineCommand, 2),
                  id = _parseTimelineCommand2[0],
                  action = _parseTimelineCommand2[1];

              var args = value;

              this._timelineEngine.command(id, element, action, args);
            } else {
              this._transitionEngine.trigger(namespaceId, element, property, value);
            }
          }
        }, {
          key: "listen",
          value: function listen(namespaceId, element, eventName, eventPhase, callback) {
            // @@listen
            if (eventName.charAt(0) == '@') {
              var _parseTimelineCommand3 = parseTimelineCommand(eventName),
                  _parseTimelineCommand4 = _slicedToArray(_parseTimelineCommand3, 2),
                  id = _parseTimelineCommand4[0],
                  action = _parseTimelineCommand4[1];

              return this._timelineEngine.listen(id, element, action, callback);
            }

            return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
          }
        }, {
          key: "flush",
          value: function flush() {
            var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

            this._transitionEngine.flush(microtaskId);
          }
        }, {
          key: "players",
          get: function get() {
            return this._transitionEngine.players.concat(this._timelineEngine.players);
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            return this._transitionEngine.whenRenderingDone();
          }
        }]);

        return AnimationEngine;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
       * detected.
       *
       * In CSS there exist properties that cannot be animated within a keyframe animation
       * (whether it be via CSS keyframes or web-animations) and the animation implementation
       * will ignore them. This function is designed to detect those special cased styles and
       * return a container that will be executed at the start and end of the animation.
       *
       * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
       */


      function packageNonAnimatableStyles(element, styles) {
        var startStyles = null;
        var endStyles = null;

        if (Array.isArray(styles) && styles.length) {
          startStyles = filterNonAnimatableStyles(styles[0]);

          if (styles.length > 1) {
            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
          }
        } else if (styles) {
          startStyles = filterNonAnimatableStyles(styles);
        }

        return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
      }
      /**
       * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
       *
       * When started (when the `start()` method is run) then the provided `startStyles`
       * will be applied. When finished (when the `finish()` method is called) the
       * `endStyles` will be applied as well any any starting styles. Finally when
       * `destroy()` is called then all styles will be removed.
       */


      var SpecialCasedStyles = /*#__PURE__*/function () {
        function SpecialCasedStyles(_element, _startStyles, _endStyles) {
          _classCallCheck(this, SpecialCasedStyles);

          this._element = _element;
          this._startStyles = _startStyles;
          this._endStyles = _endStyles;
          this._state = 0
          /* Pending */
          ;
          var initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);

          if (!initialStyles) {
            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
          }

          this._initialStyles = initialStyles;
        }

        _createClass2(SpecialCasedStyles, [{
          key: "start",
          value: function start() {
            if (this._state < 1
            /* Started */
            ) {
                if (this._startStyles) {
                  setStyles(this._element, this._startStyles, this._initialStyles);
                }

                this._state = 1
                /* Started */
                ;
              }
          }
        }, {
          key: "finish",
          value: function finish() {
            this.start();

            if (this._state < 2
            /* Finished */
            ) {
                setStyles(this._element, this._initialStyles);

                if (this._endStyles) {
                  setStyles(this._element, this._endStyles);
                  this._endStyles = null;
                }

                this._state = 1
                /* Started */
                ;
              }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.finish();

            if (this._state < 3
            /* Destroyed */
            ) {
                SpecialCasedStyles.initialStylesByElement["delete"](this._element);

                if (this._startStyles) {
                  eraseStyles(this._element, this._startStyles);
                  this._endStyles = null;
                }

                if (this._endStyles) {
                  eraseStyles(this._element, this._endStyles);
                  this._endStyles = null;
                }

                setStyles(this._element, this._initialStyles);
                this._state = 3
                /* Destroyed */
                ;
              }
          }
        }]);

        return SpecialCasedStyles;
      }();

      SpecialCasedStyles.initialStylesByElement = new WeakMap();

      function filterNonAnimatableStyles(styles) {
        var result = null;
        var props = Object.keys(styles);

        for (var i = 0; i < props.length; i++) {
          var prop = props[i];

          if (isNonAnimatableStyle(prop)) {
            result = result || {};
            result[prop] = styles[prop];
          }
        }

        return result;
      }

      function isNonAnimatableStyle(prop) {
        return prop === 'display' || prop === 'position';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
      var ANIMATION_PROP = 'animation';
      var ANIMATIONEND_EVENT = 'animationend';
      var ONE_SECOND$1 = 1000;

      var ElementAnimationStyleHandler = /*#__PURE__*/function () {
        function ElementAnimationStyleHandler(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {
          var _this262 = this;

          _classCallCheck(this, ElementAnimationStyleHandler);

          this._element = _element;
          this._name = _name;
          this._duration = _duration;
          this._delay = _delay;
          this._easing = _easing;
          this._fillMode = _fillMode;
          this._onDoneFn = _onDoneFn;
          this._finished = false;
          this._destroyed = false;
          this._startTime = 0;
          this._position = 0;

          this._eventFn = function (e) {
            return _this262._handleCallback(e);
          };
        }

        _createClass2(ElementAnimationStyleHandler, [{
          key: "apply",
          value: function apply() {
            applyKeyframeAnimation(this._element, "".concat(this._duration, "ms ").concat(this._easing, " ").concat(this._delay, "ms 1 normal ").concat(this._fillMode, " ").concat(this._name));
            addRemoveAnimationEvent(this._element, this._eventFn, false);
            this._startTime = Date.now();
          }
        }, {
          key: "pause",
          value: function pause() {
            playPauseAnimation(this._element, this._name, 'paused');
          }
        }, {
          key: "resume",
          value: function resume() {
            playPauseAnimation(this._element, this._name, 'running');
          }
        }, {
          key: "setPosition",
          value: function setPosition(position) {
            var index = findIndexForAnimation(this._element, this._name);
            this._position = position * this._duration;
            setAnimationStyle(this._element, 'Delay', "-".concat(this._position, "ms"), index);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this._position;
          }
        }, {
          key: "_handleCallback",
          value: function _handleCallback(event) {
            var timestamp = event._ngTestManualTimestamp || Date.now();
            var elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;

            if (event.animationName == this._name && Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {
              this.finish();
            }
          }
        }, {
          key: "finish",
          value: function finish() {
            if (this._finished) return;
            this._finished = true;

            this._onDoneFn();

            addRemoveAnimationEvent(this._element, this._eventFn, true);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) return;
            this._destroyed = true;
            this.finish();
            removeKeyframeAnimation(this._element, this._name);
          }
        }]);

        return ElementAnimationStyleHandler;
      }();

      function playPauseAnimation(element, name, status) {
        var index = findIndexForAnimation(element, name);
        setAnimationStyle(element, 'PlayState', status, index);
      }

      function applyKeyframeAnimation(element, value) {
        var anim = getAnimationStyle(element, '').trim();
        var index = 0;

        if (anim.length) {
          index = countChars(anim, ',') + 1;
          value = "".concat(anim, ", ").concat(value);
        }

        setAnimationStyle(element, '', value);
        return index;
      }

      function removeKeyframeAnimation(element, name) {
        var anim = getAnimationStyle(element, '');
        var tokens = anim.split(',');
        var index = findMatchingTokenIndex(tokens, name);

        if (index >= 0) {
          tokens.splice(index, 1);
          var newValue = tokens.join(',');
          setAnimationStyle(element, '', newValue);
        }
      }

      function findIndexForAnimation(element, value) {
        var anim = getAnimationStyle(element, '');

        if (anim.indexOf(',') > 0) {
          var tokens = anim.split(',');
          return findMatchingTokenIndex(tokens, value);
        }

        return findMatchingTokenIndex([anim], value);
      }

      function findMatchingTokenIndex(tokens, searchToken) {
        for (var i = 0; i < tokens.length; i++) {
          if (tokens[i].indexOf(searchToken) >= 0) {
            return i;
          }
        }

        return -1;
      }

      function addRemoveAnimationEvent(element, fn, doRemove) {
        doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) : element.addEventListener(ANIMATIONEND_EVENT, fn);
      }

      function setAnimationStyle(element, name, value, index) {
        var prop = ANIMATION_PROP + name;

        if (index != null) {
          var oldValue = element.style[prop];

          if (oldValue.length) {
            var tokens = oldValue.split(',');
            tokens[index] = value;
            value = tokens.join(',');
          }
        }

        element.style[prop] = value;
      }

      function getAnimationStyle(element, name) {
        return element.style[ANIMATION_PROP + name] || '';
      }

      function countChars(value, _char) {
        var count = 0;

        for (var i = 0; i < value.length; i++) {
          var c = value.charAt(i);
          if (c === _char) count++;
        }

        return count;
      }

      var DEFAULT_FILL_MODE = 'forwards';
      var DEFAULT_EASING = 'linear';

      var CssKeyframesPlayer = /*#__PURE__*/function () {
        function CssKeyframesPlayer(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {
          _classCallCheck(this, CssKeyframesPlayer);

          this.element = element;
          this.keyframes = keyframes;
          this.animationName = animationName;
          this._duration = _duration;
          this._delay = _delay;
          this._finalStyles = _finalStyles;
          this._specialStyles = _specialStyles;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._started = false;
          this.currentSnapshot = {};
          this._state = 0;
          this.easing = easing || DEFAULT_EASING;
          this.totalTime = _duration + _delay;

          this._buildStyler();
        }

        _createClass2(CssKeyframesPlayer, [{
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.init();
            if (this._state >= 4
            /* DESTROYED */
            ) return;
            this._state = 4
            /* DESTROYED */
            ;

            this._styler.destroy();

            this._flushStartFns();

            this._flushDoneFns();

            if (this._specialStyles) {
              this._specialStyles.destroy();
            }

            this._onDestroyFns.forEach(function (fn) {
              return fn();
            });

            this._onDestroyFns = [];
          }
        }, {
          key: "_flushDoneFns",
          value: function _flushDoneFns() {
            this._onDoneFns.forEach(function (fn) {
              return fn();
            });

            this._onDoneFns = [];
          }
        }, {
          key: "_flushStartFns",
          value: function _flushStartFns() {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });

            this._onStartFns = [];
          }
        }, {
          key: "finish",
          value: function finish() {
            this.init();
            if (this._state >= 3
            /* FINISHED */
            ) return;
            this._state = 3
            /* FINISHED */
            ;

            this._styler.finish();

            this._flushStartFns();

            if (this._specialStyles) {
              this._specialStyles.finish();
            }

            this._flushDoneFns();
          }
        }, {
          key: "setPosition",
          value: function setPosition(value) {
            this._styler.setPosition(value);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this._styler.getPosition();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._state >= 2
            /* STARTED */
            ;
          }
        }, {
          key: "init",
          value: function init() {
            if (this._state >= 1
            /* INITIALIZED */
            ) return;
            this._state = 1
            /* INITIALIZED */
            ;
            var elm = this.element;

            this._styler.apply();

            if (this._delay) {
              this._styler.pause();
            }
          }
        }, {
          key: "play",
          value: function play() {
            this.init();

            if (!this.hasStarted()) {
              this._flushStartFns();

              this._state = 2
              /* STARTED */
              ;

              if (this._specialStyles) {
                this._specialStyles.start();
              }
            }

            this._styler.resume();
          }
        }, {
          key: "pause",
          value: function pause() {
            this.init();

            this._styler.pause();
          }
        }, {
          key: "restart",
          value: function restart() {
            this.reset();
            this.play();
          }
        }, {
          key: "reset",
          value: function reset() {
            this._styler.destroy();

            this._buildStyler();

            this._styler.apply();
          }
        }, {
          key: "_buildStyler",
          value: function _buildStyler() {
            var _this263 = this;

            this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, function () {
              return _this263.finish();
            });
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            var _this264 = this;

            this.init();
            var styles = {};

            if (this.hasStarted()) {
              var finished = this._state >= 3
              /* FINISHED */
              ;
              Object.keys(this._finalStyles).forEach(function (prop) {
                if (prop != 'offset') {
                  styles[prop] = finished ? _this264._finalStyles[prop] : computeStyle(_this264.element, prop);
                }
              });
            }

            this.currentSnapshot = styles;
          }
        }]);

        return CssKeyframesPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DirectStylePlayer = /*#__PURE__*/function (_angular_animations__3) {
        _inherits(DirectStylePlayer, _angular_animations__3);

        var _super169 = _createSuper(DirectStylePlayer);

        function DirectStylePlayer(element, styles) {
          var _this265;

          _classCallCheck(this, DirectStylePlayer);

          _this265 = _super169.call(this);
          _this265.element = element;
          _this265._startingStyles = {};
          _this265.__initialized = false;
          _this265._styles = hypenatePropsObject(styles);
          return _this265;
        }

        _createClass2(DirectStylePlayer, [{
          key: "init",
          value: function init() {
            var _this266 = this;

            if (this.__initialized || !this._startingStyles) return;
            this.__initialized = true;
            Object.keys(this._styles).forEach(function (prop) {
              _this266._startingStyles[prop] = _this266.element.style[prop];
            });

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "init", this).call(this);
          }
        }, {
          key: "play",
          value: function play() {
            var _this267 = this;

            if (!this._startingStyles) return;
            this.init();
            Object.keys(this._styles).forEach(function (prop) {
              return _this267.element.style.setProperty(prop, _this267._styles[prop]);
            });

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "play", this).call(this);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this268 = this;

            if (!this._startingStyles) return;
            Object.keys(this._startingStyles).forEach(function (prop) {
              var value = _this268._startingStyles[prop];

              if (value) {
                _this268.element.style.setProperty(prop, value);
              } else {
                _this268.element.style.removeProperty(prop);
              }
            });
            this._startingStyles = null;

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "destroy", this).call(this);
          }
        }]);

        return DirectStylePlayer;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"]);

      var KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';
      var TAB_SPACE = ' ';

      var CssKeyframesDriver = /*#__PURE__*/function () {
        function CssKeyframesDriver() {
          _classCallCheck(this, CssKeyframesDriver);

          this._count = 0;
          this._head = document.querySelector('head');
        }

        _createClass2(CssKeyframesDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return window.getComputedStyle(element)[prop];
          }
        }, {
          key: "buildKeyframeElement",
          value: function buildKeyframeElement(element, name, keyframes) {
            keyframes = keyframes.map(function (kf) {
              return hypenatePropsObject(kf);
            });
            var keyframeStr = "@keyframes ".concat(name, " {\n");
            var tab = '';
            keyframes.forEach(function (kf) {
              tab = TAB_SPACE;
              var offset = parseFloat(kf['offset']);
              keyframeStr += "".concat(tab).concat(offset * 100, "% {\n");
              tab += TAB_SPACE;
              Object.keys(kf).forEach(function (prop) {
                var value = kf[prop];

                switch (prop) {
                  case 'offset':
                    return;

                  case 'easing':
                    if (value) {
                      keyframeStr += "".concat(tab, "animation-timing-function: ").concat(value, ";\n");
                    }

                    return;

                  default:
                    keyframeStr += "".concat(tab).concat(prop, ": ").concat(value, ";\n");
                    return;
                }
              });
              keyframeStr += "".concat(tab, "}\n");
            });
            keyframeStr += "}\n";
            var kfElm = document.createElement('style');
            kfElm.textContent = keyframeStr;
            return kfElm;
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;

            if ((typeof ngDevMode === 'undefined' || ngDevMode) && scrubberAccessRequested) {
              notifyFaultyScrubber();
            }

            var previousCssKeyframePlayers = previousPlayers.filter(function (player) {
              return player instanceof CssKeyframesPlayer;
            });
            var previousStyles = {};

            if (allowPreviousPlayerStylesMerge(duration, delay)) {
              previousCssKeyframePlayers.forEach(function (player) {
                var styles = player.currentSnapshot;
                Object.keys(styles).forEach(function (prop) {
                  return previousStyles[prop] = styles[prop];
                });
              });
            }

            keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
            var finalStyles = flattenKeyframesIntoStyles(keyframes); // if there is no animation then there is no point in applying
            // styles and waiting for an event to get fired. This causes lag.
            // It's better to just directly apply the styles to the element
            // via the direct styling animation player.

            if (duration == 0) {
              return new DirectStylePlayer(element, finalStyles);
            }

            var animationName = "".concat(KEYFRAMES_NAME_PREFIX).concat(this._count++);
            var kfElm = this.buildKeyframeElement(element, animationName, keyframes);
            document.querySelector('head').appendChild(kfElm);
            var specialStyles = packageNonAnimatableStyles(element, keyframes);
            var player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);
            player.onDestroy(function () {
              return removeElement(kfElm);
            });
            return player;
          }
        }]);

        return CssKeyframesDriver;
      }();

      function flattenKeyframesIntoStyles(keyframes) {
        var flatKeyframes = {};

        if (keyframes) {
          var kfs = Array.isArray(keyframes) ? keyframes : [keyframes];
          kfs.forEach(function (kf) {
            Object.keys(kf).forEach(function (prop) {
              if (prop == 'offset' || prop == 'easing') return;
              flatKeyframes[prop] = kf[prop];
            });
          });
        }

        return flatKeyframes;
      }

      function removeElement(node) {
        node.parentNode.removeChild(node);
      }

      var warningIssued = false;

      function notifyFaultyScrubber() {
        if (warningIssued) return;
        console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n', '  visit https://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');
        warningIssued = true;
      }

      var WebAnimationsPlayer = /*#__PURE__*/function () {
        function WebAnimationsPlayer(element, keyframes, options, _specialStyles) {
          _classCallCheck(this, WebAnimationsPlayer);

          this.element = element;
          this.keyframes = keyframes;
          this.options = options;
          this._specialStyles = _specialStyles;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._initialized = false;
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.time = 0;
          this.parentPlayer = null;
          this.currentSnapshot = {};
          this._duration = options['duration'];
          this._delay = options['delay'] || 0;
          this.time = this._duration + this._delay;
        }

        _createClass2(WebAnimationsPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "init",
          value: function init() {
            this._buildPlayer();

            this._preparePlayerBeforeStart();
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer() {
            var _this269 = this;

            if (this._initialized) return;
            this._initialized = true;
            var keyframes = this.keyframes;
            this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
            this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
            this.domPlayer.addEventListener('finish', function () {
              return _this269._onFinish();
            });
          }
        }, {
          key: "_preparePlayerBeforeStart",
          value: function _preparePlayerBeforeStart() {
            // this is required so that the player doesn't start to animate right away
            if (this._delay) {
              this._resetDomPlayerState();
            } else {
              this.domPlayer.pause();
            }
          }
          /** @internal */

        }, {
          key: "_triggerWebAnimation",
          value: function _triggerWebAnimation(element, keyframes, options) {
            // jscompiler doesn't seem to know animate is a native property because it's not fully
            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
            return element['animate'](keyframes, options);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "play",
          value: function play() {
            this._buildPlayer();

            if (!this.hasStarted()) {
              this._onStartFns.forEach(function (fn) {
                return fn();
              });

              this._onStartFns = [];
              this._started = true;

              if (this._specialStyles) {
                this._specialStyles.start();
              }
            }

            this.domPlayer.play();
          }
        }, {
          key: "pause",
          value: function pause() {
            this.init();
            this.domPlayer.pause();
          }
        }, {
          key: "finish",
          value: function finish() {
            this.init();

            if (this._specialStyles) {
              this._specialStyles.finish();
            }

            this._onFinish();

            this.domPlayer.finish();
          }
        }, {
          key: "reset",
          value: function reset() {
            this._resetDomPlayerState();

            this._destroyed = false;
            this._finished = false;
            this._started = false;
          }
        }, {
          key: "_resetDomPlayerState",
          value: function _resetDomPlayerState() {
            if (this.domPlayer) {
              this.domPlayer.cancel();
            }
          }
        }, {
          key: "restart",
          value: function restart() {
            this.reset();
            this.play();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              this._resetDomPlayerState();

              this._onFinish();

              if (this._specialStyles) {
                this._specialStyles.destroy();
              }

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            if (this.domPlayer === undefined) {
              this.init();
            }

            this.domPlayer.currentTime = p * this.time;
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.domPlayer.currentTime / this.time;
          }
        }, {
          key: "totalTime",
          get: function get() {
            return this._delay + this._duration;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            var _this270 = this;

            var styles = {};

            if (this.hasStarted()) {
              Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                  styles[prop] = _this270._finished ? _this270._finalKeyframe[prop] : computeStyle(_this270.element, prop);
                }
              });
            }

            this.currentSnapshot = styles;
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return WebAnimationsPlayer;
      }();

      var WebAnimationsDriver = /*#__PURE__*/function () {
        function WebAnimationsDriver() {
          _classCallCheck(this, WebAnimationsDriver);

          this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(getElementAnimateFn().toString());
          this._cssKeyframesDriver = new CssKeyframesDriver();
        }

        _createClass2(WebAnimationsDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return window.getComputedStyle(element)[prop];
          }
        }, {
          key: "overrideWebAnimationsSupport",
          value: function overrideWebAnimationsSupport(supported) {
            this._isNativeImpl = supported;
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
            var useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;

            if (useKeyframes) {
              return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);
            }

            var fill = delay == 0 ? 'both' : 'forwards';
            var playerOptions = {
              duration: duration,
              delay: delay,
              fill: fill
            }; // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)

            if (easing) {
              playerOptions['easing'] = easing;
            }

            var previousStyles = {};
            var previousWebAnimationPlayers = previousPlayers.filter(function (player) {
              return player instanceof WebAnimationsPlayer;
            });

            if (allowPreviousPlayerStylesMerge(duration, delay)) {
              previousWebAnimationPlayers.forEach(function (player) {
                var styles = player.currentSnapshot;
                Object.keys(styles).forEach(function (prop) {
                  return previousStyles[prop] = styles[prop];
                });
              });
            }

            keyframes = keyframes.map(function (styles) {
              return copyStyles(styles, false);
            });
            keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
            var specialStyles = packageNonAnimatableStyles(element, keyframes);
            return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
          }
        }]);

        return WebAnimationsDriver;
      }();

      function supportsWebAnimations() {
        return typeof getElementAnimateFn() === 'function';
      }

      function getElementAnimateFn() {
        return isBrowser() && Element.prototype['animate'] || {};
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=browser.js.map

      /***/

    },

    /***/
    "tS1D":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/timeout.js ***!
      \******************************************************************/

    /*! exports provided: timeout */

    /***/
    function tS1D(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "timeout", function () {
        return timeout;
      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      "D0XW");
      /* harmony import */


      var _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/TimeoutError */
      "Y6u4");
      /* harmony import */


      var _timeoutWith__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./timeoutWith */
      "syX2");
      /* harmony import */


      var _observable_throwError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../observable/throwError */
      "z6cu");

      function timeout(due) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
        return Object(_timeoutWith__WEBPACK_IMPORTED_MODULE_2__["timeoutWith"])(due, Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_3__["throwError"])(new _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__["TimeoutError"]()), scheduler);
      } //# sourceMappingURL=timeout.js.map

      /***/

    },

    /***/
    "tf+s":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js ***!
      \**********************************************************************/

    /*! exports provided: subscribeOn */

    /***/
    function tfS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subscribeOn", function () {
        return subscribeOn;
      });
      /* harmony import */


      var _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/SubscribeOnObservable */
      "O4y0");

      function subscribeOn(scheduler) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return function subscribeOnOperatorFunction(source) {
          return source.lift(new SubscribeOnOperator(scheduler, delay));
        };
      }

      var SubscribeOnOperator = /*#__PURE__*/function () {
        function SubscribeOnOperator(scheduler, delay) {
          _classCallCheck(this, SubscribeOnOperator);

          this.scheduler = scheduler;
          this.delay = delay;
        }

        _createClass2(SubscribeOnOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return new _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__["SubscribeOnObservable"](source, this.delay, this.scheduler).subscribe(subscriber);
          }
        }]);

        return SubscribeOnOperator;
      }(); //# sourceMappingURL=subscribeOn.js.map

      /***/

    },

    /***/
    "tnsW":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/audit.js ***!
      \****************************************************************/

    /*! exports provided: audit */

    /***/
    function tnsW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "audit", function () {
        return audit;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function audit(durationSelector) {
        return function auditOperatorFunction(source) {
          return source.lift(new AuditOperator(durationSelector));
        };
      }

      var AuditOperator = /*#__PURE__*/function () {
        function AuditOperator(durationSelector) {
          _classCallCheck(this, AuditOperator);

          this.durationSelector = durationSelector;
        }

        _createClass2(AuditOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
          }
        }]);

        return AuditOperator;
      }();

      var AuditSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP18) {
        _inherits(AuditSubscriber, _innerSubscribe__WEBP18);

        var _super170 = _createSuper(AuditSubscriber);

        function AuditSubscriber(destination, durationSelector) {
          var _this271;

          _classCallCheck(this, AuditSubscriber);

          _this271 = _super170.call(this, destination);
          _this271.durationSelector = durationSelector;
          _this271.hasValue = false;
          return _this271;
        }

        _createClass2(AuditSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.value = value;
            this.hasValue = true;

            if (!this.throttled) {
              var duration;

              try {
                var durationSelector = this.durationSelector;
                duration = durationSelector(value);
              } catch (err) {
                return this.destination.error(err);
              }

              var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(duration, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this));

              if (!innerSubscription || innerSubscription.closed) {
                this.clearThrottle();
              } else {
                this.add(this.throttled = innerSubscription);
              }
            }
          }
        }, {
          key: "clearThrottle",
          value: function clearThrottle() {
            var value = this.value,
                hasValue = this.hasValue,
                throttled = this.throttled;

            if (throttled) {
              this.remove(throttled);
              this.throttled = undefined;
              throttled.unsubscribe();
            }

            if (hasValue) {
              this.value = undefined;
              this.hasValue = false;
              this.destination.next(value);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.clearThrottle();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.clearThrottle();
          }
        }]);

        return AuditSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=audit.js.map

      /***/

    },

    /***/
    "u47x":
    /*!*****************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js ***!
      \*****************************************************************/

    /*! exports provided: A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, ɵangular_material_src_cdk_a11y_a11y_a, ɵangular_material_src_cdk_a11y_a11y_b */

    /***/
    function u47x(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "A11yModule", function () {
        return A11yModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function () {
        return ActiveDescendantKeyManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AriaDescriber", function () {
        return AriaDescriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", function () {
        return CDK_DESCRIBEDBY_HOST_ATTRIBUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_ID_PREFIX", function () {
        return CDK_DESCRIBEDBY_ID_PREFIX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkAriaLive", function () {
        return CdkAriaLive;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkMonitorFocus", function () {
        return CdkMonitorFocus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTrapFocus", function () {
        return CdkTrapFocus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConfigurableFocusTrap", function () {
        return ConfigurableFocusTrap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ConfigurableFocusTrapFactory", function () {
        return ConfigurableFocusTrapFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventListenerFocusTrapInertStrategy", function () {
        return EventListenerFocusTrapInertStrategy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_DEFAULT_OPTIONS", function () {
        return FOCUS_MONITOR_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FOCUS_TRAP_INERT_STRATEGY", function () {
        return FOCUS_TRAP_INERT_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function () {
        return FocusKeyManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FocusMonitor", function () {
        return FocusMonitor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FocusTrap", function () {
        return FocusTrap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FocusTrapFactory", function () {
        return FocusTrapFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HighContrastModeDetector", function () {
        return HighContrastModeDetector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InteractivityChecker", function () {
        return InteractivityChecker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IsFocusableConfig", function () {
        return IsFocusableConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_DEFAULT_OPTIONS", function () {
        return LIVE_ANNOUNCER_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN", function () {
        return LIVE_ANNOUNCER_ELEMENT_TOKEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", function () {
        return LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListKeyManager", function () {
        return ListKeyManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LiveAnnouncer", function () {
        return LiveAnnouncer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MESSAGES_CONTAINER_ID", function () {
        return MESSAGES_CONTAINER_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TOUCH_BUFFER_MS", function () {
        return TOUCH_BUFFER_MS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFakeMousedownFromScreenReader", function () {
        return isFakeMousedownFromScreenReader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFakeTouchstartFromScreenReader", function () {
        return isFakeTouchstartFromScreenReader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_material_src_cdk_a11y_a11y_a", function () {
        return FocusTrapManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_material_src_cdk_a11y_a11y_b", function () {
        return ConfigurableFocusTrapConfig;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      "FtGj");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "nLfN");
      /* harmony import */


      var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/observers */
      "GU7r");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** IDs are delimited by an empty space, as per the spec. */


      var ID_DELIMITER = ' ';
      /**
       * Adds the given ID to the specified ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       */

      function addAriaReferencedId(el, attr, id) {
        var ids = getAriaReferenceIds(el, attr);

        if (ids.some(function (existingId) {
          return existingId.trim() == id.trim();
        })) {
          return;
        }

        ids.push(id.trim());
        el.setAttribute(attr, ids.join(ID_DELIMITER));
      }
      /**
       * Removes the given ID from the specified ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       */


      function removeAriaReferencedId(el, attr, id) {
        var ids = getAriaReferenceIds(el, attr);
        var filteredIds = ids.filter(function (val) {
          return val != id.trim();
        });

        if (filteredIds.length) {
          el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
        } else {
          el.removeAttribute(attr);
        }
      }
      /**
       * Gets the list of IDs referenced by the given ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       */


      function getAriaReferenceIds(el, attr) {
        // Get string array of all individual ids (whitespace delimited) in the attribute value
        return (el.getAttribute(attr) || '').match(/\S+/g) || [];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** ID used for the body container where all messages are appended. */


      var MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
      /** ID prefix used for each created message element. */

      var CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
      /** Attribute given to each host element that is described by a message element. */

      var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
      /** Global incremental identifier for each registered message element. */

      var nextId = 0;
      /** Global map of all registered message elements that have been placed into the document. */

      var messageRegistry = new Map();
      /** Container for all registered messages. */

      var messagesContainer = null;
      /**
       * Utility that creates visually hidden elements with a message content. Useful for elements that
       * want to use aria-describedby to further describe themselves without adding additional visual
       * content.
       */

      var AriaDescriber = /*#__PURE__*/function () {
        function AriaDescriber(_document) {
          _classCallCheck(this, AriaDescriber);

          this._document = _document;
        }

        _createClass2(AriaDescriber, [{
          key: "describe",
          value: function describe(hostElement, message, role) {
            if (!this._canBeDescribed(hostElement, message)) {
              return;
            }

            var key = getKey(message, role);

            if (typeof message !== 'string') {
              // We need to ensure that the element has an ID.
              setMessageId(message);
              messageRegistry.set(key, {
                messageElement: message,
                referenceCount: 0
              });
            } else if (!messageRegistry.has(key)) {
              this._createMessageElement(message, role);
            }

            if (!this._isElementDescribedByMessage(hostElement, key)) {
              this._addMessageReference(hostElement, key);
            }
          }
        }, {
          key: "removeDescription",
          value: function removeDescription(hostElement, message, role) {
            if (!message || !this._isElementNode(hostElement)) {
              return;
            }

            var key = getKey(message, role);

            if (this._isElementDescribedByMessage(hostElement, key)) {
              this._removeMessageReference(hostElement, key);
            } // If the message is a string, it means that it's one that we created for the
            // consumer so we can remove it safely, otherwise we should leave it in place.


            if (typeof message === 'string') {
              var registeredMessage = messageRegistry.get(key);

              if (registeredMessage && registeredMessage.referenceCount === 0) {
                this._deleteMessageElement(key);
              }
            }

            if (messagesContainer && messagesContainer.childNodes.length === 0) {
              this._deleteMessagesContainer();
            }
          }
          /** Unregisters all created message elements and removes the message container. */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var describedElements = this._document.querySelectorAll("[".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, "]"));

            for (var i = 0; i < describedElements.length; i++) {
              this._removeCdkDescribedByReferenceIds(describedElements[i]);

              describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
            }

            if (messagesContainer) {
              this._deleteMessagesContainer();
            }

            messageRegistry.clear();
          }
          /**
           * Creates a new element in the visually hidden message container element with the message
           * as its content and adds it to the message registry.
           */

        }, {
          key: "_createMessageElement",
          value: function _createMessageElement(message, role) {
            var messageElement = this._document.createElement('div');

            setMessageId(messageElement);
            messageElement.textContent = message;

            if (role) {
              messageElement.setAttribute('role', role);
            }

            this._createMessagesContainer();

            messagesContainer.appendChild(messageElement);
            messageRegistry.set(getKey(message, role), {
              messageElement: messageElement,
              referenceCount: 0
            });
          }
          /** Deletes the message element from the global messages container. */

        }, {
          key: "_deleteMessageElement",
          value: function _deleteMessageElement(key) {
            var registeredMessage = messageRegistry.get(key);
            var messageElement = registeredMessage && registeredMessage.messageElement;

            if (messagesContainer && messageElement) {
              messagesContainer.removeChild(messageElement);
            }

            messageRegistry["delete"](key);
          }
          /** Creates the global container for all aria-describedby messages. */

        }, {
          key: "_createMessagesContainer",
          value: function _createMessagesContainer() {
            if (!messagesContainer) {
              var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's
              // already a container on the page, but we don't have a reference to it. Clear the
              // old container so we don't get duplicates. Doing this, instead of emptying the previous
              // container, should be slightly faster.


              if (preExistingContainer && preExistingContainer.parentNode) {
                preExistingContainer.parentNode.removeChild(preExistingContainer);
              }

              messagesContainer = this._document.createElement('div');
              messagesContainer.id = MESSAGES_CONTAINER_ID; // We add `visibility: hidden` in order to prevent text in this container from
              // being searchable by the browser's Ctrl + F functionality.
              // Screen-readers will still read the description for elements with aria-describedby even
              // when the description element is not visible.

              messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that
              // the description element doesn't impact page layout.

              messagesContainer.classList.add('cdk-visually-hidden');

              this._document.body.appendChild(messagesContainer);
            }
          }
          /** Deletes the global messages container. */

        }, {
          key: "_deleteMessagesContainer",
          value: function _deleteMessagesContainer() {
            if (messagesContainer && messagesContainer.parentNode) {
              messagesContainer.parentNode.removeChild(messagesContainer);
              messagesContainer = null;
            }
          }
          /** Removes all cdk-describedby messages that are hosted through the element. */

        }, {
          key: "_removeCdkDescribedByReferenceIds",
          value: function _removeCdkDescribedByReferenceIds(element) {
            // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
            var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {
              return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;
            });
            element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
          }
          /**
           * Adds a message reference to the element using aria-describedby and increments the registered
           * message's reference count.
           */

        }, {
          key: "_addMessageReference",
          value: function _addMessageReference(element, key) {
            var registeredMessage = messageRegistry.get(key); // Add the aria-describedby reference and set the
            // describedby_host attribute to mark the element.

            addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
            element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
            registeredMessage.referenceCount++;
          }
          /**
           * Removes a message reference from the element using aria-describedby
           * and decrements the registered message's reference count.
           */

        }, {
          key: "_removeMessageReference",
          value: function _removeMessageReference(element, key) {
            var registeredMessage = messageRegistry.get(key);
            registeredMessage.referenceCount--;
            removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
            element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
          }
          /** Returns true if the element has been described by the provided message ID. */

        }, {
          key: "_isElementDescribedByMessage",
          value: function _isElementDescribedByMessage(element, key) {
            var referenceIds = getAriaReferenceIds(element, 'aria-describedby');
            var registeredMessage = messageRegistry.get(key);
            var messageId = registeredMessage && registeredMessage.messageElement.id;
            return !!messageId && referenceIds.indexOf(messageId) != -1;
          }
          /** Determines whether a message can be described on a particular element. */

        }, {
          key: "_canBeDescribed",
          value: function _canBeDescribed(element, message) {
            if (!this._isElementNode(element)) {
              return false;
            }

            if (message && typeof message === 'object') {
              // We'd have to make some assumptions about the description element's text, if the consumer
              // passed in an element. Assume that if an element is passed in, the consumer has verified
              // that it can be used as a description.
              return true;
            }

            var trimmedMessage = message == null ? '' : "".concat(message).trim();
            var ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
            // element, because screen readers will end up reading out the same text twice in a row.

            return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
          }
          /** Checks whether a node is an Element node. */

        }, {
          key: "_isElementNode",
          value: function _isElementNode(element) {
            return element.nodeType === this._document.ELEMENT_NODE;
          }
        }]);

        return AriaDescriber;
      }();

      AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {
        return new (t || AriaDescriber)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      AriaDescriber.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function AriaDescriber_Factory() {
          return new AriaDescriber(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
        },
        token: AriaDescriber,
        providedIn: "root"
      });

      AriaDescriber.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](AriaDescriber, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /** Gets a key that can be used to look messages up in the registry. */


      function getKey(message, role) {
        return typeof message === 'string' ? "".concat(role || '', "/").concat(message) : message;
      }
      /** Assigns a unique ID to an element, if it doesn't have one already. */


      function setMessageId(element) {
        if (!element.id) {
          element.id = "".concat(CDK_DESCRIBEDBY_ID_PREFIX, "-").concat(nextId++);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This class manages keyboard events for selectable lists. If you pass it a query list
       * of items, it will set the active item correctly when arrow events occur.
       */


      var ListKeyManager = /*#__PURE__*/function () {
        function ListKeyManager(_items) {
          var _this272 = this;

          _classCallCheck(this, ListKeyManager);

          this._items = _items;
          this._activeItemIndex = -1;
          this._activeItem = null;
          this._wrap = false;
          this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
          this._vertical = true;
          this._allowedModifierKeys = [];
          this._homeAndEnd = false;
          /**
           * Predicate function that can be used to check whether an item should be skipped
           * by the key manager. By default, disabled items are skipped.
           */

          this._skipPredicateFn = function (item) {
            return item.disabled;
          }; // Buffer for the letters that the user has pressed when the typeahead option is turned on.


          this._pressedLetters = [];
          /**
           * Stream that emits any time the TAB key is pressed, so components can react
           * when focus is shifted off of the list.
           */

          this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          /** Stream that emits whenever the active item of the list manager changes. */

          this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"](); // We allow for the items to be an array because, in some cases, the consumer may
          // not have access to a QueryList of the items they want to manage (e.g. when the
          // items aren't being collected via `ViewChildren` or `ContentChildren`).

          if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]) {
            _items.changes.subscribe(function (newItems) {
              if (_this272._activeItem) {
                var itemArray = newItems.toArray();
                var newIndex = itemArray.indexOf(_this272._activeItem);

                if (newIndex > -1 && newIndex !== _this272._activeItemIndex) {
                  _this272._activeItemIndex = newIndex;
                }
              }
            });
          }
        }
        /**
         * Sets the predicate function that determines which items should be skipped by the
         * list key manager.
         * @param predicate Function that determines whether the given item should be skipped.
         */


        _createClass2(ListKeyManager, [{
          key: "skipPredicate",
          value: function skipPredicate(predicate) {
            this._skipPredicateFn = predicate;
            return this;
          }
          /**
           * Configures wrapping mode, which determines whether the active item will wrap to
           * the other end of list when there are no more items in the given direction.
           * @param shouldWrap Whether the list should wrap when reaching the end.
           */

        }, {
          key: "withWrap",
          value: function withWrap() {
            var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this._wrap = shouldWrap;
            return this;
          }
          /**
           * Configures whether the key manager should be able to move the selection vertically.
           * @param enabled Whether vertical selection should be enabled.
           */

        }, {
          key: "withVerticalOrientation",
          value: function withVerticalOrientation() {
            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this._vertical = enabled;
            return this;
          }
          /**
           * Configures the key manager to move the selection horizontally.
           * Passing in `null` will disable horizontal movement.
           * @param direction Direction in which the selection can be moved.
           */

        }, {
          key: "withHorizontalOrientation",
          value: function withHorizontalOrientation(direction) {
            this._horizontal = direction;
            return this;
          }
          /**
           * Modifier keys which are allowed to be held down and whose default actions will be prevented
           * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
           */

        }, {
          key: "withAllowedModifierKeys",
          value: function withAllowedModifierKeys(keys) {
            this._allowedModifierKeys = keys;
            return this;
          }
          /**
           * Turns on typeahead mode which allows users to set the active item by typing.
           * @param debounceInterval Time to wait after the last keystroke before setting the active item.
           */

        }, {
          key: "withTypeAhead",
          value: function withTypeAhead() {
            var _this273 = this;

            var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;

            if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(function (item) {
              return typeof item.getLabel !== 'function';
            })) {
              throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
            }

            this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
            // and convert those letters back into a string. Afterwards find the first item that starts
            // with that string and select it.


            this._typeaheadSubscription = this._letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["tap"])(function (letter) {
              return _this273._pressedLetters.push(letter);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["filter"])(function () {
              return _this273._pressedLetters.length > 0;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function () {
              return _this273._pressedLetters.join('');
            })).subscribe(function (inputString) {
              var items = _this273._getItemsArray(); // Start at 1 because we want to start searching at the item immediately
              // following the current active item.


              for (var i = 1; i < items.length + 1; i++) {
                var index = (_this273._activeItemIndex + i) % items.length;
                var item = items[index];

                if (!_this273._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
                  _this273.setActiveItem(index);

                  break;
                }
              }

              _this273._pressedLetters = [];
            });
            return this;
          }
          /**
           * Configures the key manager to activate the first and last items
           * respectively when the Home or End key is pressed.
           * @param enabled Whether pressing the Home or End key activates the first/last item.
           */

        }, {
          key: "withHomeAndEnd",
          value: function withHomeAndEnd() {
            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this._homeAndEnd = enabled;
            return this;
          }
        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            var previousActiveItem = this._activeItem;
            this.updateActiveItem(item);

            if (this._activeItem !== previousActiveItem) {
              this.change.next(this._activeItemIndex);
            }
          }
          /**
           * Sets the active item depending on the key event passed in.
           * @param event Keyboard event to be used for determining which element should be active.
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            var _this274 = this;

            var keyCode = event.keyCode;
            var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
            var isModifierAllowed = modifiers.every(function (modifier) {
              return !event[modifier] || _this274._allowedModifierKeys.indexOf(modifier) > -1;
            });

            switch (keyCode) {
              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"]:
                this.tabOut.next();
                return;

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                if (this._vertical && isModifierAllowed) {
                  this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                if (this._vertical && isModifierAllowed) {
                  this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                if (this._horizontal && isModifierAllowed) {
                  this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                if (this._horizontal && isModifierAllowed) {
                  this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                if (this._homeAndEnd && isModifierAllowed) {
                  this.setFirstItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                if (this._homeAndEnd && isModifierAllowed) {
                  this.setLastItemActive();
                  break;
                } else {
                  return;
                }

              default:
                if (isModifierAllowed || Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event, 'shiftKey')) {
                  // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                  // otherwise fall back to resolving alphanumeric characters via the keyCode.
                  if (event.key && event.key.length === 1) {
                    this._letterKeyStream.next(event.key.toLocaleUpperCase());
                  } else if (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["A"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["Z"] || keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ZERO"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["NINE"]) {
                    this._letterKeyStream.next(String.fromCharCode(keyCode));
                  }
                } // Note that we return here, in order to avoid preventing
                // the default action of non-navigational keys.


                return;
            }

            this._pressedLetters = [];
            event.preventDefault();
          }
          /** Index of the currently active item. */

        }, {
          key: "activeItemIndex",
          get: function get() {
            return this._activeItemIndex;
          }
          /** The active item. */

        }, {
          key: "activeItem",
          get: function get() {
            return this._activeItem;
          }
          /** Gets whether the user is currently typing into the manager using the typeahead feature. */

        }, {
          key: "isTyping",
          value: function isTyping() {
            return this._pressedLetters.length > 0;
          }
          /** Sets the active item to the first enabled item in the list. */

        }, {
          key: "setFirstItemActive",
          value: function setFirstItemActive() {
            this._setActiveItemByIndex(0, 1);
          }
          /** Sets the active item to the last enabled item in the list. */

        }, {
          key: "setLastItemActive",
          value: function setLastItemActive() {
            this._setActiveItemByIndex(this._items.length - 1, -1);
          }
          /** Sets the active item to the next enabled item in the list. */

        }, {
          key: "setNextItemActive",
          value: function setNextItemActive() {
            this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
          }
          /** Sets the active item to a previous enabled item in the list. */

        }, {
          key: "setPreviousItemActive",
          value: function setPreviousItemActive() {
            this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
          }
        }, {
          key: "updateActiveItem",
          value: function updateActiveItem(item) {
            var itemArray = this._getItemsArray();

            var index = typeof item === 'number' ? item : itemArray.indexOf(item);
            var activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.

            this._activeItem = activeItem == null ? null : activeItem;
            this._activeItemIndex = index;
          }
          /**
           * This method sets the active item, given a list of items and the delta between the
           * currently active item and the new active item. It will calculate differently
           * depending on whether wrap mode is turned on.
           */

        }, {
          key: "_setActiveItemByDelta",
          value: function _setActiveItemByDelta(delta) {
            this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
          }
          /**
           * Sets the active item properly given "wrap" mode. In other words, it will continue to move
           * down the list until it finds an item that is not disabled, and it will wrap if it
           * encounters either end of the list.
           */

        }, {
          key: "_setActiveInWrapMode",
          value: function _setActiveInWrapMode(delta) {
            var items = this._getItemsArray();

            for (var i = 1; i <= items.length; i++) {
              var index = (this._activeItemIndex + delta * i + items.length) % items.length;
              var item = items[index];

              if (!this._skipPredicateFn(item)) {
                this.setActiveItem(index);
                return;
              }
            }
          }
          /**
           * Sets the active item properly given the default mode. In other words, it will
           * continue to move down the list until it finds an item that is not disabled. If
           * it encounters either end of the list, it will stop and not wrap.
           */

        }, {
          key: "_setActiveInDefaultMode",
          value: function _setActiveInDefaultMode(delta) {
            this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
          }
          /**
           * Sets the active item to the first enabled item starting at the index specified. If the
           * item is disabled, it will move in the fallbackDelta direction until it either
           * finds an enabled item or encounters the end of the list.
           */

        }, {
          key: "_setActiveItemByIndex",
          value: function _setActiveItemByIndex(index, fallbackDelta) {
            var items = this._getItemsArray();

            if (!items[index]) {
              return;
            }

            while (this._skipPredicateFn(items[index])) {
              index += fallbackDelta;

              if (!items[index]) {
                return;
              }
            }

            this.setActiveItem(index);
          }
          /** Returns the items as an array. */

        }, {
          key: "_getItemsArray",
          value: function _getItemsArray() {
            return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"] ? this._items.toArray() : this._items;
          }
        }]);

        return ListKeyManager;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {
        _inherits(ActiveDescendantKeyManager, _ListKeyManager);

        var _super171 = _createSuper(ActiveDescendantKeyManager);

        function ActiveDescendantKeyManager() {
          _classCallCheck(this, ActiveDescendantKeyManager);

          return _super171.apply(this, arguments);
        }

        _createClass2(ActiveDescendantKeyManager, [{
          key: "setActiveItem",
          value: function setActiveItem(index) {
            if (this.activeItem) {
              this.activeItem.setInactiveStyles();
            }

            _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), "setActiveItem", this).call(this, index);

            if (this.activeItem) {
              this.activeItem.setActiveStyles();
            }
          }
        }]);

        return ActiveDescendantKeyManager;
      }(ListKeyManager);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {
        _inherits(FocusKeyManager, _ListKeyManager2);

        var _super172 = _createSuper(FocusKeyManager);

        function FocusKeyManager() {
          var _this275;

          _classCallCheck(this, FocusKeyManager);

          _this275 = _super172.apply(this, arguments);
          _this275._origin = 'program';
          return _this275;
        }
        /**
         * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
         * @param origin Focus origin to be used when focusing items.
         */


        _createClass2(FocusKeyManager, [{
          key: "setFocusOrigin",
          value: function setFocusOrigin(origin) {
            this._origin = origin;
            return this;
          }
        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            _get(_getPrototypeOf(FocusKeyManager.prototype), "setActiveItem", this).call(this, item);

            if (this.activeItem) {
              this.activeItem.focus(this._origin);
            }
          }
        }]);

        return FocusKeyManager;
      }(ListKeyManager);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Configuration for the isFocusable method.
       */


      var IsFocusableConfig = function IsFocusableConfig() {
        _classCallCheck(this, IsFocusableConfig);

        /**
         * Whether to count an element as focusable even if it is not currently visible.
         */
        this.ignoreVisibility = false;
      }; // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
      // Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
      // supported.

      /**
       * Utility for checking the interactivity of an element, such as whether is is focusable or
       * tabbable.
       */


      var InteractivityChecker = /*#__PURE__*/function () {
        function InteractivityChecker(_platform) {
          _classCallCheck(this, InteractivityChecker);

          this._platform = _platform;
        }
        /**
         * Gets whether an element is disabled.
         *
         * @param element Element to be checked.
         * @returns Whether the element is disabled.
         */


        _createClass2(InteractivityChecker, [{
          key: "isDisabled",
          value: function isDisabled(element) {
            // This does not capture some cases, such as a non-form control with a disabled attribute or
            // a form control inside of a disabled form, but should capture the most common cases.
            return element.hasAttribute('disabled');
          }
          /**
           * Gets whether an element is visible for the purposes of interactivity.
           *
           * This will capture states like `display: none` and `visibility: hidden`, but not things like
           * being clipped by an `overflow: hidden` parent or being outside the viewport.
           *
           * @returns Whether the element is visible.
           */

        }, {
          key: "isVisible",
          value: function isVisible(element) {
            return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
          }
          /**
           * Gets whether an element can be reached via Tab key.
           * Assumes that the element has already been checked with isFocusable.
           *
           * @param element Element to be checked.
           * @returns Whether the element is tabbable.
           */

        }, {
          key: "isTabbable",
          value: function isTabbable(element) {
            // Nothing is tabbable on the server 😎
            if (!this._platform.isBrowser) {
              return false;
            }

            var frameElement = getFrameElement(getWindow(element));

            if (frameElement) {
              // Frame elements inherit their tabindex onto all child elements.
              if (getTabIndexValue(frameElement) === -1) {
                return false;
              } // Browsers disable tabbing to an element inside of an invisible frame.


              if (!this.isVisible(frameElement)) {
                return false;
              }
            }

            var nodeName = element.nodeName.toLowerCase();
            var tabIndexValue = getTabIndexValue(element);

            if (element.hasAttribute('contenteditable')) {
              return tabIndexValue !== -1;
            }

            if (nodeName === 'iframe' || nodeName === 'object') {
              // The frame or object's content may be tabbable depending on the content, but it's
              // not possibly to reliably detect the content of the frames. We always consider such
              // elements as non-tabbable.
              return false;
            } // In iOS, the browser only considers some specific elements as tabbable.


            if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
              return false;
            }

            if (nodeName === 'audio') {
              // Audio elements without controls enabled are never tabbable, regardless
              // of the tabindex attribute explicitly being set.
              if (!element.hasAttribute('controls')) {
                return false;
              } // Audio elements with controls are by default tabbable unless the
              // tabindex attribute is set to `-1` explicitly.


              return tabIndexValue !== -1;
            }

            if (nodeName === 'video') {
              // For all video elements, if the tabindex attribute is set to `-1`, the video
              // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`
              // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The
              // tabindex attribute is the source of truth here.
              if (tabIndexValue === -1) {
                return false;
              } // If the tabindex is explicitly set, and not `-1` (as per check before), the
              // video element is always tabbable (regardless of whether it has controls or not).


              if (tabIndexValue !== null) {
                return true;
              } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it
              // has controls enabled. Firefox is special as videos are always tabbable regardless
              // of whether there are controls or not.


              return this._platform.FIREFOX || element.hasAttribute('controls');
            }

            return element.tabIndex >= 0;
          }
          /**
           * Gets whether an element can be focused by the user.
           *
           * @param element Element to be checked.
           * @param config The config object with options to customize this method's behavior
           * @returns Whether the element is focusable.
           */

        }, {
          key: "isFocusable",
          value: function isFocusable(element, config) {
            // Perform checks in order of left to most expensive.
            // Again, naive approach that does not capture many edge cases and browser quirks.
            return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));
          }
        }]);

        return InteractivityChecker;
      }();

      InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {
        return new (t || InteractivityChecker)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]));
      };

      InteractivityChecker.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function InteractivityChecker_Factory() {
          return new InteractivityChecker(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]));
        },
        token: InteractivityChecker,
        providedIn: "root"
      });

      InteractivityChecker.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](InteractivityChecker, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
          }];
        }, null);
      })();
      /**
       * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
       * the frameElement property is being accessed from a different host address, this property
       * should be accessed carefully.
       */


      function getFrameElement(window) {
        try {
          return window.frameElement;
        } catch (_a) {
          return null;
        }
      }
      /** Checks whether the specified element has any geometry / rectangles. */


      function hasGeometry(element) {
        // Use logic from jQuery to check for an invisible element.
        // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
        return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);
      }
      /** Gets whether an element's  */


      function isNativeFormElement(element) {
        var nodeName = element.nodeName.toLowerCase();
        return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
      }
      /** Gets whether an element is an `<input type="hidden">`. */


      function isHiddenInput(element) {
        return isInputElement(element) && element.type == 'hidden';
      }
      /** Gets whether an element is an anchor that has an href attribute. */


      function isAnchorWithHref(element) {
        return isAnchorElement(element) && element.hasAttribute('href');
      }
      /** Gets whether an element is an input element. */


      function isInputElement(element) {
        return element.nodeName.toLowerCase() == 'input';
      }
      /** Gets whether an element is an anchor element. */


      function isAnchorElement(element) {
        return element.nodeName.toLowerCase() == 'a';
      }
      /** Gets whether an element has a valid tabindex. */


      function hasValidTabIndex(element) {
        if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
          return false;
        }

        var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex="" as the value "-32768"

        if (tabIndex == '-32768') {
          return false;
        }

        return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
      }
      /**
       * Returns the parsed tabindex from the element attributes instead of returning the
       * evaluated tabindex from the browsers defaults.
       */


      function getTabIndexValue(element) {
        if (!hasValidTabIndex(element)) {
          return null;
        } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054


        var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
        return isNaN(tabIndex) ? -1 : tabIndex;
      }
      /** Checks whether the specified element is potentially tabbable on iOS */


      function isPotentiallyTabbableIOS(element) {
        var nodeName = element.nodeName.toLowerCase();
        var inputType = nodeName === 'input' && element.type;
        return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';
      }
      /**
       * Gets whether an element is potentially focusable without taking current visible/disabled state
       * into account.
       */


      function isPotentiallyFocusable(element) {
        // Inputs are potentially focusable *unless* they're type="hidden".
        if (isHiddenInput(element)) {
          return false;
        }

        return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
      }
      /** Gets the parent window of a DOM node with regards of being inside of an iframe. */


      function getWindow(node) {
        // ownerDocument is null if `node` itself *is* a document.
        return node.ownerDocument && node.ownerDocument.defaultView || window;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Class that allows for trapping focus within a DOM element.
       *
       * This class currently uses a relatively simple approach to focus trapping.
       * It assumes that the tab order is the same as DOM order, which is not necessarily true.
       * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.
       *
       * @deprecated Use `ConfigurableFocusTrap` instead.
       * @breaking-change for 11.0.0 Remove this class.
       */


      var FocusTrap = /*#__PURE__*/function () {
        function FocusTrap(_element, _checker, _ngZone, _document) {
          var _this276 = this;

          var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

          _classCallCheck(this, FocusTrap);

          this._element = _element;
          this._checker = _checker;
          this._ngZone = _ngZone;
          this._document = _document;
          this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.

          this.startAnchorListener = function () {
            return _this276.focusLastTabbableElement();
          };

          this.endAnchorListener = function () {
            return _this276.focusFirstTabbableElement();
          };

          this._enabled = true;

          if (!deferAnchors) {
            this.attachAnchors();
          }
        }
        /** Whether the focus trap is active. */


        _createClass2(FocusTrap, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(value) {
            this._enabled = value;

            if (this._startAnchor && this._endAnchor) {
              this._toggleAnchorTabIndex(value, this._startAnchor);

              this._toggleAnchorTabIndex(value, this._endAnchor);
            }
          }
          /** Destroys the focus trap by cleaning up the anchors. */

        }, {
          key: "destroy",
          value: function destroy() {
            var startAnchor = this._startAnchor;
            var endAnchor = this._endAnchor;

            if (startAnchor) {
              startAnchor.removeEventListener('focus', this.startAnchorListener);

              if (startAnchor.parentNode) {
                startAnchor.parentNode.removeChild(startAnchor);
              }
            }

            if (endAnchor) {
              endAnchor.removeEventListener('focus', this.endAnchorListener);

              if (endAnchor.parentNode) {
                endAnchor.parentNode.removeChild(endAnchor);
              }
            }

            this._startAnchor = this._endAnchor = null;
            this._hasAttached = false;
          }
          /**
           * Inserts the anchors into the DOM. This is usually done automatically
           * in the constructor, but can be deferred for cases like directives with `*ngIf`.
           * @returns Whether the focus trap managed to attach successfuly. This may not be the case
           * if the target element isn't currently in the DOM.
           */

        }, {
          key: "attachAnchors",
          value: function attachAnchors() {
            var _this277 = this;

            // If we're not on the browser, there can be no focus to trap.
            if (this._hasAttached) {
              return true;
            }

            this._ngZone.runOutsideAngular(function () {
              if (!_this277._startAnchor) {
                _this277._startAnchor = _this277._createAnchor();

                _this277._startAnchor.addEventListener('focus', _this277.startAnchorListener);
              }

              if (!_this277._endAnchor) {
                _this277._endAnchor = _this277._createAnchor();

                _this277._endAnchor.addEventListener('focus', _this277.endAnchorListener);
              }
            });

            if (this._element.parentNode) {
              this._element.parentNode.insertBefore(this._startAnchor, this._element);

              this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);

              this._hasAttached = true;
            }

            return this._hasAttached;
          }
          /**
           * Waits for the zone to stabilize, then either focuses the first element that the
           * user specified, or the first tabbable element.
           * @returns Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfully.
           */

        }, {
          key: "focusInitialElementWhenReady",
          value: function focusInitialElementWhenReady() {
            var _this278 = this;

            return new Promise(function (resolve) {
              _this278._executeOnStable(function () {
                return resolve(_this278.focusInitialElement());
              });
            });
          }
          /**
           * Waits for the zone to stabilize, then focuses
           * the first tabbable element within the focus trap region.
           * @returns Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfully.
           */

        }, {
          key: "focusFirstTabbableElementWhenReady",
          value: function focusFirstTabbableElementWhenReady() {
            var _this279 = this;

            return new Promise(function (resolve) {
              _this279._executeOnStable(function () {
                return resolve(_this279.focusFirstTabbableElement());
              });
            });
          }
          /**
           * Waits for the zone to stabilize, then focuses
           * the last tabbable element within the focus trap region.
           * @returns Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfully.
           */

        }, {
          key: "focusLastTabbableElementWhenReady",
          value: function focusLastTabbableElementWhenReady() {
            var _this280 = this;

            return new Promise(function (resolve) {
              _this280._executeOnStable(function () {
                return resolve(_this280.focusLastTabbableElement());
              });
            });
          }
          /**
           * Get the specified boundary element of the trapped region.
           * @param bound The boundary to get (start or end of trapped region).
           * @returns The boundary element.
           */

        }, {
          key: "_getRegionBoundary",
          value: function _getRegionBoundary(bound) {
            // Contains the deprecated version of selector, for temporary backwards comparability.
            var markers = this._element.querySelectorAll("[cdk-focus-region-".concat(bound, "], ") + "[cdkFocusRegion".concat(bound, "], ") + "[cdk-focus-".concat(bound, "]"));

            for (var i = 0; i < markers.length; i++) {
              // @breaking-change 8.0.0
              if (markers[i].hasAttribute("cdk-focus-".concat(bound))) {
                console.warn("Found use of deprecated attribute 'cdk-focus-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated ") + "attribute will be removed in 8.0.0.", markers[i]);
              } else if (markers[i].hasAttribute("cdk-focus-region-".concat(bound))) {
                console.warn("Found use of deprecated attribute 'cdk-focus-region-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated attribute ") + "will be removed in 8.0.0.", markers[i]);
              }
            }

            if (bound == 'start') {
              return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
            }

            return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
          }
          /**
           * Focuses the element that should be focused when the focus trap is initialized.
           * @returns Whether focus was moved successfully.
           */

        }, {
          key: "focusInitialElement",
          value: function focusInitialElement() {
            // Contains the deprecated version of selector, for temporary backwards comparability.
            var redirectToElement = this._element.querySelector("[cdk-focus-initial], " + "[cdkFocusInitial]");

            if (redirectToElement) {
              // @breaking-change 8.0.0
              if (redirectToElement.hasAttribute("cdk-focus-initial")) {
                console.warn("Found use of deprecated attribute 'cdk-focus-initial', " + "use 'cdkFocusInitial' instead. The deprecated attribute " + "will be removed in 8.0.0", redirectToElement);
              } // Warn the consumer if the element they've pointed to
              // isn't focusable, when not in production mode.


              if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {
                console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
              }

              if (!this._checker.isFocusable(redirectToElement)) {
                var focusableChild = this._getFirstTabbableElement(redirectToElement);

                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus();
                return !!focusableChild;
              }

              redirectToElement.focus();
              return true;
            }

            return this.focusFirstTabbableElement();
          }
          /**
           * Focuses the first tabbable element within the focus trap region.
           * @returns Whether focus was moved successfully.
           */

        }, {
          key: "focusFirstTabbableElement",
          value: function focusFirstTabbableElement() {
            var redirectToElement = this._getRegionBoundary('start');

            if (redirectToElement) {
              redirectToElement.focus();
            }

            return !!redirectToElement;
          }
          /**
           * Focuses the last tabbable element within the focus trap region.
           * @returns Whether focus was moved successfully.
           */

        }, {
          key: "focusLastTabbableElement",
          value: function focusLastTabbableElement() {
            var redirectToElement = this._getRegionBoundary('end');

            if (redirectToElement) {
              redirectToElement.focus();
            }

            return !!redirectToElement;
          }
          /**
           * Checks whether the focus trap has successfully been attached.
           */

        }, {
          key: "hasAttached",
          value: function hasAttached() {
            return this._hasAttached;
          }
          /** Get the first tabbable element from a DOM subtree (inclusive). */

        }, {
          key: "_getFirstTabbableElement",
          value: function _getFirstTabbableElement(root) {
            if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
              return root;
            } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
            // back to `childNodes` which includes text nodes, comments etc.


            var children = root.children || root.childNodes;

            for (var i = 0; i < children.length; i++) {
              var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;

              if (tabbableChild) {
                return tabbableChild;
              }
            }

            return null;
          }
          /** Get the last tabbable element from a DOM subtree (inclusive). */

        }, {
          key: "_getLastTabbableElement",
          value: function _getLastTabbableElement(root) {
            if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
              return root;
            } // Iterate in reverse DOM order.


            var children = root.children || root.childNodes;

            for (var i = children.length - 1; i >= 0; i--) {
              var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;

              if (tabbableChild) {
                return tabbableChild;
              }
            }

            return null;
          }
          /** Creates an anchor element. */

        }, {
          key: "_createAnchor",
          value: function _createAnchor() {
            var anchor = this._document.createElement('div');

            this._toggleAnchorTabIndex(this._enabled, anchor);

            anchor.classList.add('cdk-visually-hidden');
            anchor.classList.add('cdk-focus-trap-anchor');
            anchor.setAttribute('aria-hidden', 'true');
            return anchor;
          }
          /**
           * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
           * @param isEnabled Whether the focus trap is enabled.
           * @param anchor Anchor on which to toggle the tabindex.
           */

        }, {
          key: "_toggleAnchorTabIndex",
          value: function _toggleAnchorTabIndex(isEnabled, anchor) {
            // Remove the tabindex completely, rather than setting it to -1, because if the
            // element has a tabindex, the user might still hit it when navigating with the arrow keys.
            isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
          }
          /**
           * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
           * @param enabled: Whether the anchors should trap Tab.
           */

        }, {
          key: "toggleAnchors",
          value: function toggleAnchors(enabled) {
            if (this._startAnchor && this._endAnchor) {
              this._toggleAnchorTabIndex(enabled, this._startAnchor);

              this._toggleAnchorTabIndex(enabled, this._endAnchor);
            }
          }
          /** Executes a function when the zone is stable. */

        }, {
          key: "_executeOnStable",
          value: function _executeOnStable(fn) {
            if (this._ngZone.isStable) {
              fn();
            } else {
              this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(fn);
            }
          }
        }]);

        return FocusTrap;
      }();
      /**
       * Factory that allows easy instantiation of focus traps.
       * @deprecated Use `ConfigurableFocusTrapFactory` instead.
       * @breaking-change for 11.0.0 Remove this class.
       */


      var FocusTrapFactory = /*#__PURE__*/function () {
        function FocusTrapFactory(_checker, _ngZone, _document) {
          _classCallCheck(this, FocusTrapFactory);

          this._checker = _checker;
          this._ngZone = _ngZone;
          this._document = _document;
        }
        /**
         * Creates a focus-trapped region around the given element.
         * @param element The element around which focus will be trapped.
         * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
         *     manually by the user.
         * @returns The created focus trap instance.
         */


        _createClass2(FocusTrapFactory, [{
          key: "create",
          value: function create(element) {
            var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
          }
        }]);

        return FocusTrapFactory;
      }();

      FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {
        return new (t || FocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      FocusTrapFactory.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function FocusTrapFactory_Factory() {
          return new FocusTrapFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(InteractivityChecker), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
        },
        token: FocusTrapFactory,
        providedIn: "root"
      });

      FocusTrapFactory.ctorParameters = function () {
        return [{
          type: InteractivityChecker
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](FocusTrapFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: InteractivityChecker
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /** Directive for trapping focus within a region. */


      var CdkTrapFocus = /*#__PURE__*/function () {
        function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {
          _classCallCheck(this, CdkTrapFocus);

          this._elementRef = _elementRef;
          this._focusTrapFactory = _focusTrapFactory;
          /** Previously focused element to restore focus to upon destroy when using autoCapture. */

          this._previouslyFocusedElement = null;
          this._document = _document;
          this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
        }
        /** Whether the focus trap is active. */


        _createClass2(CdkTrapFocus, [{
          key: "enabled",
          get: function get() {
            return this.focusTrap.enabled;
          },
          set: function set(value) {
            this.focusTrap.enabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the directive should automatically move focus into the trapped region upon
           * initialization and return focus to the previous activeElement upon destruction.
           */

        }, {
          key: "autoCapture",
          get: function get() {
            return this._autoCapture;
          },
          set: function set(value) {
            this._autoCapture = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that
            // element now that the trapped region is being destroyed.

            if (this._previouslyFocusedElement) {
              this._previouslyFocusedElement.focus();

              this._previouslyFocusedElement = null;
            }
          }
        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this.focusTrap.attachAnchors();

            if (this.autoCapture) {
              this._captureFocus();
            }
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (!this.focusTrap.hasAttached()) {
              this.focusTrap.attachAnchors();
            }
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var autoCaptureChange = changes['autoCapture'];

            if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {
              this._captureFocus();
            }
          }
        }, {
          key: "_captureFocus",
          value: function _captureFocus() {
            this._previouslyFocusedElement = this._document.activeElement;
            this.focusTrap.focusInitialElementWhenReady();
          }
        }]);

        return CdkTrapFocus;
      }();

      CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {
        return new (t || CdkTrapFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](FocusTrapFactory), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      CdkTrapFocus.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: CdkTrapFocus,
        selectors: [["", "cdkTrapFocus", ""]],
        inputs: {
          enabled: ["cdkTrapFocus", "enabled"],
          autoCapture: ["cdkTrapFocusAutoCapture", "autoCapture"]
        },
        exportAs: ["cdkTrapFocus"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });

      CdkTrapFocus.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: FocusTrapFactory
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      CdkTrapFocus.propDecorators = {
        enabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkTrapFocus']
        }],
        autoCapture: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkTrapFocusAutoCapture']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkTrapFocus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[cdkTrapFocus]',
            exportAs: 'cdkTrapFocus'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: FocusTrapFactory
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, {
          enabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['cdkTrapFocus']
          }],
          autoCapture: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['cdkTrapFocusAutoCapture']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Class that allows for trapping focus within a DOM element.
       *
       * This class uses a strategy pattern that determines how it traps focus.
       * See FocusTrapInertStrategy.
       */


      var ConfigurableFocusTrap = /*#__PURE__*/function (_FocusTrap) {
        _inherits(ConfigurableFocusTrap, _FocusTrap);

        var _super173 = _createSuper(ConfigurableFocusTrap);

        function ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
          var _this281;

          _classCallCheck(this, ConfigurableFocusTrap);

          _this281 = _super173.call(this, _element, _checker, _ngZone, _document, config.defer);
          _this281._focusTrapManager = _focusTrapManager;
          _this281._inertStrategy = _inertStrategy;

          _this281._focusTrapManager.register(_assertThisInitialized(_this281));

          return _this281;
        }
        /** Whether the FocusTrap is enabled. */


        _createClass2(ConfigurableFocusTrap, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(value) {
            this._enabled = value;

            if (this._enabled) {
              this._focusTrapManager.register(this);
            } else {
              this._focusTrapManager.deregister(this);
            }
          }
          /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */

        }, {
          key: "destroy",
          value: function destroy() {
            this._focusTrapManager.deregister(this);

            _get(_getPrototypeOf(ConfigurableFocusTrap.prototype), "destroy", this).call(this);
          }
          /** @docs-private Implemented as part of ManagedFocusTrap. */

        }, {
          key: "_enable",
          value: function _enable() {
            this._inertStrategy.preventFocus(this);

            this.toggleAnchors(true);
          }
          /** @docs-private Implemented as part of ManagedFocusTrap. */

        }, {
          key: "_disable",
          value: function _disable() {
            this._inertStrategy.allowFocus(this);

            this.toggleAnchors(false);
          }
        }]);

        return ConfigurableFocusTrap;
      }(FocusTrap);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */


      function closest(element, selector) {
        if (!(element instanceof Node)) {
          return null;
        }

        var curr = element;

        while (curr != null && !(curr instanceof Element)) {
          curr = curr.parentNode;
        }

        return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));
      }
      /** Polyfill for browsers without Element.closest. */


      function polyfillClosest(element, selector) {
        var curr = element;

        while (curr != null && !(curr instanceof Element && matches(curr, selector))) {
          curr = curr.parentNode;
        }

        return curr || null;
      }

      var hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;
      /** IE 11 compatible matches implementation. */

      function matches(element, selector) {
        return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Lightweight FocusTrapInertStrategy that adds a document focus event
       * listener to redirect focus back inside the FocusTrap.
       */


      var EventListenerFocusTrapInertStrategy = /*#__PURE__*/function () {
        function EventListenerFocusTrapInertStrategy() {
          _classCallCheck(this, EventListenerFocusTrapInertStrategy);

          /** Focus event handler. */
          this._listener = null;
        }
        /** Adds a document event listener that keeps focus inside the FocusTrap. */


        _createClass2(EventListenerFocusTrapInertStrategy, [{
          key: "preventFocus",
          value: function preventFocus(focusTrap) {
            var _this282 = this;

            // Ensure there's only one listener per document
            if (this._listener) {
              focusTrap._document.removeEventListener('focus', this._listener, true);
            }

            this._listener = function (e) {
              return _this282._trapFocus(focusTrap, e);
            };

            focusTrap._ngZone.runOutsideAngular(function () {
              focusTrap._document.addEventListener('focus', _this282._listener, true);
            });
          }
          /** Removes the event listener added in preventFocus. */

        }, {
          key: "allowFocus",
          value: function allowFocus(focusTrap) {
            if (!this._listener) {
              return;
            }

            focusTrap._document.removeEventListener('focus', this._listener, true);

            this._listener = null;
          }
          /**
           * Refocuses the first element in the FocusTrap if the focus event target was outside
           * the FocusTrap.
           *
           * This is an event listener callback. The event listener is added in runOutsideAngular,
           * so all this code runs outside Angular as well.
           */

        }, {
          key: "_trapFocus",
          value: function _trapFocus(focusTrap, event) {
            var target = event.target;
            var focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated
            // with an element inside the FocusTrap, ex. mat-select.

            if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {
              // Some legacy FocusTrap usages have logic that focuses some element on the page
              // just before FocusTrap is destroyed. For backwards compatibility, wait
              // to be sure FocusTrap is still enabled before refocusing.
              setTimeout(function () {
                // Check whether focus wasn't put back into the focus trap while the timeout was pending.
                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
                  focusTrap.focusFirstTabbableElement();
                }
              });
            }
          }
        }]);

        return EventListenerFocusTrapInertStrategy;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Configuration for creating a ConfigurableFocusTrap.
       */


      var ConfigurableFocusTrapConfig = function ConfigurableFocusTrapConfig() {
        _classCallCheck(this, ConfigurableFocusTrapConfig);

        /**
         * Whether to defer the creation of FocusTrap elements to be
         * done manually by the user. Default is to create them
         * automatically.
         */
        this.defer = false;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** The injection token used to specify the inert strategy. */


      var FOCUS_TRAP_INERT_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('FOCUS_TRAP_INERT_STRATEGY');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Injectable that ensures only the most recently enabled FocusTrap is active. */

      var FocusTrapManager = /*#__PURE__*/function () {
        function FocusTrapManager() {
          _classCallCheck(this, FocusTrapManager);

          // A stack of the FocusTraps on the page. Only the FocusTrap at the
          // top of the stack is active.
          this._focusTrapStack = [];
        }
        /**
         * Disables the FocusTrap at the top of the stack, and then pushes
         * the new FocusTrap onto the stack.
         */


        _createClass2(FocusTrapManager, [{
          key: "register",
          value: function register(focusTrap) {
            // Dedupe focusTraps that register multiple times.
            this._focusTrapStack = this._focusTrapStack.filter(function (ft) {
              return ft !== focusTrap;
            });
            var stack = this._focusTrapStack;

            if (stack.length) {
              stack[stack.length - 1]._disable();
            }

            stack.push(focusTrap);

            focusTrap._enable();
          }
          /**
           * Removes the FocusTrap from the stack, and activates the
           * FocusTrap that is the new top of the stack.
           */

        }, {
          key: "deregister",
          value: function deregister(focusTrap) {
            focusTrap._disable();

            var stack = this._focusTrapStack;
            var i = stack.indexOf(focusTrap);

            if (i !== -1) {
              stack.splice(i, 1);

              if (stack.length) {
                stack[stack.length - 1]._enable();
              }
            }
          }
        }]);

        return FocusTrapManager;
      }();

      FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {
        return new (t || FocusTrapManager)();
      };

      FocusTrapManager.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function FocusTrapManager_Factory() {
          return new FocusTrapManager();
        },
        token: FocusTrapManager,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](FocusTrapManager, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Factory that allows easy instantiation of configurable focus traps. */


      var ConfigurableFocusTrapFactory = /*#__PURE__*/function () {
        function ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
          _classCallCheck(this, ConfigurableFocusTrapFactory);

          this._checker = _checker;
          this._ngZone = _ngZone;
          this._focusTrapManager = _focusTrapManager;
          this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.

          this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
        }

        _createClass2(ConfigurableFocusTrapFactory, [{
          key: "create",
          value: function create(element) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ConfigurableFocusTrapConfig();
            var configObject;

            if (typeof config === 'boolean') {
              configObject = new ConfigurableFocusTrapConfig();
              configObject.defer = config;
            } else {
              configObject = config;
            }

            return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
          }
        }]);

        return ConfigurableFocusTrapFactory;
      }();

      ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {
        return new (t || ConfigurableFocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](FocusTrapManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](FOCUS_TRAP_INERT_STRATEGY, 8));
      };

      ConfigurableFocusTrapFactory.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function ConfigurableFocusTrapFactory_Factory() {
          return new ConfigurableFocusTrapFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(InteractivityChecker), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(FocusTrapManager), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(FOCUS_TRAP_INERT_STRATEGY, 8));
        },
        token: ConfigurableFocusTrapFactory,
        providedIn: "root"
      });

      ConfigurableFocusTrapFactory.ctorParameters = function () {
        return [{
          type: InteractivityChecker
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: FocusTrapManager
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [FOCUS_TRAP_INERT_STRATEGY]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ConfigurableFocusTrapFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: InteractivityChecker
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: FocusTrapManager
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [FOCUS_TRAP_INERT_STRATEGY]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('liveAnnouncerElement', {
        providedIn: 'root',
        factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
      });
      /** @docs-private */

      function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
        return null;
      }
      /** Injection token that can be used to configure the default options for the LiveAnnouncer. */


      var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var LiveAnnouncer = /*#__PURE__*/function () {
        function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {
          _classCallCheck(this, LiveAnnouncer);

          this._ngZone = _ngZone;
          this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot
          // reference browser globals (HTMLElement, Document) on non-browser environments, since having
          // a class decorator causes TypeScript to preserve the constructor signature types.

          this._document = _document;
          this._liveElement = elementToken || this._createLiveElement();
        }

        _createClass2(LiveAnnouncer, [{
          key: "announce",
          value: function announce(message) {
            var _this283 = this;

            var defaultOptions = this._defaultOptions;
            var politeness;
            var duration;

            for (var _len48 = arguments.length, args = new Array(_len48 > 1 ? _len48 - 1 : 0), _key49 = 1; _key49 < _len48; _key49++) {
              args[_key49 - 1] = arguments[_key49];
            }

            if (args.length === 1 && typeof args[0] === 'number') {
              duration = args[0];
            } else {
              politeness = args[0];
              duration = args[1];
            }

            this.clear();
            clearTimeout(this._previousTimeout);

            if (!politeness) {
              politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';
            }

            if (duration == null && defaultOptions) {
              duration = defaultOptions.duration;
            } // TODO: ensure changing the politeness works on all environments we support.


            this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:
            // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
            // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
            //   second time without clearing and then using a non-zero delay.
            // (using JAWS 17 at time of this writing).


            return this._ngZone.runOutsideAngular(function () {
              return new Promise(function (resolve) {
                clearTimeout(_this283._previousTimeout);
                _this283._previousTimeout = setTimeout(function () {
                  _this283._liveElement.textContent = message;
                  resolve();

                  if (typeof duration === 'number') {
                    _this283._previousTimeout = setTimeout(function () {
                      return _this283.clear();
                    }, duration);
                  }
                }, 100);
              });
            });
          }
          /**
           * Clears the current text from the announcer element. Can be used to prevent
           * screen readers from reading the text out again while the user is going
           * through the page landmarks.
           */

        }, {
          key: "clear",
          value: function clear() {
            if (this._liveElement) {
              this._liveElement.textContent = '';
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            clearTimeout(this._previousTimeout);

            if (this._liveElement && this._liveElement.parentNode) {
              this._liveElement.parentNode.removeChild(this._liveElement);

              this._liveElement = null;
            }
          }
        }, {
          key: "_createLiveElement",
          value: function _createLiveElement() {
            var elementClass = 'cdk-live-announcer-element';

            var previousElements = this._document.getElementsByClassName(elementClass);

            var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.


            for (var i = 0; i < previousElements.length; i++) {
              previousElements[i].parentNode.removeChild(previousElements[i]);
            }

            liveEl.classList.add(elementClass);
            liveEl.classList.add('cdk-visually-hidden');
            liveEl.setAttribute('aria-atomic', 'true');
            liveEl.setAttribute('aria-live', 'polite');

            this._document.body.appendChild(liveEl);

            return liveEl;
          }
        }]);

        return LiveAnnouncer;
      }();

      LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {
        return new (t || LiveAnnouncer)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
      };

      LiveAnnouncer.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function LiveAnnouncer_Factory() {
          return new LiveAnnouncer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
        },
        token: LiveAnnouncer,
        providedIn: "root"
      });

      LiveAnnouncer.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](LiveAnnouncer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();
      /**
       * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
       * with a wider range of browsers and screen readers.
       */


      var CdkAriaLive = /*#__PURE__*/function () {
        function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
          _classCallCheck(this, CdkAriaLive);

          this._elementRef = _elementRef;
          this._liveAnnouncer = _liveAnnouncer;
          this._contentObserver = _contentObserver;
          this._ngZone = _ngZone;
          this._politeness = 'polite';
        }
        /** The aria-live politeness level to use when announcing messages. */


        _createClass2(CdkAriaLive, [{
          key: "politeness",
          get: function get() {
            return this._politeness;
          },
          set: function set(value) {
            var _this284 = this;

            this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';

            if (this._politeness === 'off') {
              if (this._subscription) {
                this._subscription.unsubscribe();

                this._subscription = null;
              }
            } else if (!this._subscription) {
              this._subscription = this._ngZone.runOutsideAngular(function () {
                return _this284._contentObserver.observe(_this284._elementRef).subscribe(function () {
                  // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
                  var elementText = _this284._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute
                  // changes which we don't want to announce.

                  if (elementText !== _this284._previousAnnouncedText) {
                    _this284._liveAnnouncer.announce(elementText, _this284._politeness);

                    _this284._previousAnnouncedText = elementText;
                  }
                });
              });
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._subscription) {
              this._subscription.unsubscribe();
            }
          }
        }]);

        return CdkAriaLive;
      }();

      CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {
        return new (t || CdkAriaLive)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      CdkAriaLive.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: CdkAriaLive,
        selectors: [["", "cdkAriaLive", ""]],
        inputs: {
          politeness: ["cdkAriaLive", "politeness"]
        },
        exportAs: ["cdkAriaLive"]
      });

      CdkAriaLive.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: LiveAnnouncer
        }, {
          type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      CdkAriaLive.propDecorators = {
        politeness: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkAriaLive']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkAriaLive, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[cdkAriaLive]',
            exportAs: 'cdkAriaLive'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: LiveAnnouncer
          }, {
            type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }];
        }, {
          politeness: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
            args: ['cdkAriaLive']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */


      function isFakeMousedownFromScreenReader(event) {
        // We can typically distinguish between these faked mousedown events and real mousedown events
        // using the "buttons" property. While real mousedowns will indicate the mouse button that was
        // pressed (e.g. "1" for the left mouse button), faked mousedowns will usually set the property
        // value to 0.
        return event.buttons === 0;
      }
      /** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */


      function isFakeTouchstartFromScreenReader(event) {
        var touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`
        // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,
        // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10
        // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.

        return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
      // that a value of around 650ms seems appropriate.


      var TOUCH_BUFFER_MS = 650;
      /** InjectionToken for FocusMonitorOptions. */

      var FOCUS_MONITOR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('cdk-focus-monitor-default-options');
      /**
       * Event listener options that enable capturing and also
       * mark the listener as passive if the browser supports it.
       */

      var captureEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["normalizePassiveListenerOptions"])({
        passive: true,
        capture: true
      });
      /** Monitors mouse and keyboard events to determine the cause of focus events. */

      var FocusMonitor = /*#__PURE__*/function () {
        function FocusMonitor(_ngZone, _platform,
        /** @breaking-change 11.0.0 make document required */
        document, options) {
          var _this285 = this;

          _classCallCheck(this, FocusMonitor);

          this._ngZone = _ngZone;
          this._platform = _platform;
          /** The focus origin that the next focus event is a result of. */

          this._origin = null;
          /** Whether the window has just been focused. */

          this._windowFocused = false;
          /** Map of elements being monitored to their info. */

          this._elementInfo = new Map();
          /** The number of elements currently being monitored. */

          this._monitoredElementCount = 0;
          /**
           * Keeps track of the root nodes to which we've currently bound a focus/blur handler,
           * as well as the number of monitored elements that they contain. We have to treat focus/blur
           * handlers differently from the rest of the events, because the browser won't emit events
           * to the document when focus moves inside of a shadow root.
           */

          this._rootNodeFocusListenerCount = new Map();
          /**
           * Event listener for `keydown` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */

          this._documentKeydownListener = function () {
            // On keydown record the origin and clear any touch event that may be in progress.
            _this285._lastTouchTarget = null;

            _this285._setOriginForCurrentEventQueue('keyboard');
          };
          /**
           * Event listener for `mousedown` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._documentMousedownListener = function (event) {
            // On mousedown record the origin only if there is not touch
            // target, since a mousedown can happen as a result of a touch event.
            if (!_this285._lastTouchTarget) {
              // In some cases screen readers fire fake `mousedown` events instead of `keydown`.
              // Resolve the focus source to `keyboard` if we detect one of them.
              var source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';

              _this285._setOriginForCurrentEventQueue(source);
            }
          };
          /**
           * Event listener for `touchstart` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._documentTouchstartListener = function (event) {
            // Some screen readers will fire a fake `touchstart` event if an element is activated using
            // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.
            if (!isFakeTouchstartFromScreenReader(event)) {
              // When the touchstart event fires the focus event is not yet in the event queue. This means
              // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
              // see if a focus happens.
              if (_this285._touchTimeoutId != null) {
                clearTimeout(_this285._touchTimeoutId);
              }

              _this285._lastTouchTarget = getTarget(event);
              _this285._touchTimeoutId = setTimeout(function () {
                return _this285._lastTouchTarget = null;
              }, TOUCH_BUFFER_MS);
            } else if (!_this285._lastTouchTarget) {
              _this285._setOriginForCurrentEventQueue('keyboard');
            }
          };
          /**
           * Event listener for `focus` events on the window.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._windowFocusListener = function () {
            // Make a note of when the window regains focus, so we can
            // restore the origin info for the focused element.
            _this285._windowFocused = true;
            _this285._windowFocusTimeoutId = setTimeout(function () {
              return _this285._windowFocused = false;
            });
          };
          /**
           * Event listener for `focus` and 'blur' events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._rootNodeFocusAndBlurListener = function (event) {
            var target = getTarget(event);
            var handler = event.type === 'focus' ? _this285._onFocus : _this285._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.

            for (var element = target; element; element = element.parentElement) {
              handler.call(_this285, event, element);
            }
          };

          this._document = document;
          this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0
          /* IMMEDIATE */
          ;
        }

        _createClass2(FocusMonitor, [{
          key: "monitor",
          value: function monitor(element) {
            var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceElement"])(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.

            if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null);
            } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to
            // the shadow root, rather than the `document`, because the browser won't emit focus events
            // to the `document`, if focus is moving within the same shadow root.


            var rootNode = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["_getShadowRoot"])(nativeElement) || this._getDocument();

            var cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.


            if (cachedInfo) {
              if (checkChildren) {
                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren
                // observers into ones that behave as if `checkChildren` was turned on. We need a more
                // robust solution.
                cachedInfo.checkChildren = true;
              }

              return cachedInfo.subject;
            } // Create monitored element info.


            var info = {
              checkChildren: checkChildren,
              subject: new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"](),
              rootNode: rootNode
            };

            this._elementInfo.set(nativeElement, info);

            this._registerGlobalListeners(info);

            return info.subject;
          }
        }, {
          key: "stopMonitoring",
          value: function stopMonitoring(element) {
            var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceElement"])(element);

            var elementInfo = this._elementInfo.get(nativeElement);

            if (elementInfo) {
              elementInfo.subject.complete();

              this._setClasses(nativeElement);

              this._elementInfo["delete"](nativeElement);

              this._removeGlobalListeners(elementInfo);
            }
          }
        }, {
          key: "focusVia",
          value: function focusVia(element, origin, options) {
            var _this286 = this;

            var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceElement"])(element);

            var focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener
            // which means that the focus classes won't be updated. If that's the case, update the classes
            // directly without waiting for an event.


            if (nativeElement === focusedElement) {
              this._getClosestElementsInfo(nativeElement).forEach(function (_ref13) {
                var _ref14 = _slicedToArray(_ref13, 2),
                    currentElement = _ref14[0],
                    info = _ref14[1];

                return _this286._originChanged(currentElement, origin, info);
              });
            } else {
              this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server


              if (typeof nativeElement.focus === 'function') {
                nativeElement.focus(options);
              }
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this287 = this;

            this._elementInfo.forEach(function (_info, element) {
              return _this287.stopMonitoring(element);
            });
          }
          /** Access injected document if available or fallback to global document reference */

        }, {
          key: "_getDocument",
          value: function _getDocument() {
            return this._document || document;
          }
          /** Use defaultView of injected document if available or fallback to global window reference */

        }, {
          key: "_getWindow",
          value: function _getWindow() {
            var doc = this._getDocument();

            return doc.defaultView || window;
          }
        }, {
          key: "_toggleClass",
          value: function _toggleClass(element, className, shouldSet) {
            if (shouldSet) {
              element.classList.add(className);
            } else {
              element.classList.remove(className);
            }
          }
        }, {
          key: "_getFocusOrigin",
          value: function _getFocusOrigin(event) {
            // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
            // 1) The window has just regained focus, in which case we want to restore the focused state of
            //    the element from before the window blurred.
            // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
            // 3) The element was programmatically focused, in which case we should mark the origin as
            //    'program'.
            if (this._origin) {
              return this._origin;
            }

            if (this._windowFocused && this._lastFocusOrigin) {
              return this._lastFocusOrigin;
            } else if (this._wasCausedByTouch(event)) {
              return 'touch';
            } else {
              return 'program';
            }
          }
          /**
           * Sets the focus classes on the element based on the given focus origin.
           * @param element The element to update the classes on.
           * @param origin The focus origin.
           */

        }, {
          key: "_setClasses",
          value: function _setClasses(element, origin) {
            this._toggleClass(element, 'cdk-focused', !!origin);

            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');

            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');

            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');

            this._toggleClass(element, 'cdk-program-focused', origin === 'program');
          }
          /**
           * Sets the origin and schedules an async function to clear it at the end of the event queue.
           * If the detection mode is 'eventual', the origin is never cleared.
           * @param origin The origin to set.
           */

        }, {
          key: "_setOriginForCurrentEventQueue",
          value: function _setOriginForCurrentEventQueue(origin) {
            var _this288 = this;

            this._ngZone.runOutsideAngular(function () {
              _this288._origin = origin;

              if (_this288._detectionMode === 0
              /* IMMEDIATE */
              ) {
                  // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
                  // tick after the interaction event fired. To ensure the focus origin is always correct,
                  // the focus origin will be determined at the beginning of the next tick.
                  _this288._originTimeoutId = setTimeout(function () {
                    return _this288._origin = null;
                  }, 1);
                }
            });
          }
          /**
           * Checks whether the given focus event was caused by a touchstart event.
           * @param event The focus event to check.
           * @returns Whether the event was caused by a touch.
           */

        }, {
          key: "_wasCausedByTouch",
          value: function _wasCausedByTouch(event) {
            // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
            // Consider the following dom structure:
            //
            // <div #parent tabindex="0" cdkFocusClasses>
            //   <div #child (click)="#parent.focus()"></div>
            // </div>
            //
            // If the user touches the #child element and the #parent is programmatically focused as a
            // result, this code will still consider it to have been caused by the touch event and will
            // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
            // relatively small edge-case that can be worked around by using
            // focusVia(parentEl, 'program') to focus the parent element.
            //
            // If we decide that we absolutely must handle this case correctly, we can do so by listening
            // for the first focus event after the touchstart, and then the first blur event after that
            // focus event. When that blur event fires we know that whatever follows is not a result of the
            // touchstart.
            var focusTarget = getTarget(event);
            return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
          }
          /**
           * Handles focus events on a registered element.
           * @param event The focus event.
           * @param element The monitored element.
           */

        }, {
          key: "_onFocus",
          value: function _onFocus(event, element) {
            // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
            // focus event affecting the monitored element. If we want to use the origin of the first event
            // instead we should check for the cdk-focused class here and return if the element already has
            // it. (This only matters for elements that have includesChildren = true).
            // If we are not counting child-element-focus as focused, make sure that the event target is the
            // monitored element itself.
            var elementInfo = this._elementInfo.get(element);

            if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {
              return;
            }

            this._originChanged(element, this._getFocusOrigin(event), elementInfo);
          }
          /**
           * Handles blur events on a registered element.
           * @param event The blur event.
           * @param element The monitored element.
           */

        }, {
          key: "_onBlur",
          value: function _onBlur(event, element) {
            // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
            // order to focus another child of the monitored element.
            var elementInfo = this._elementInfo.get(element);

            if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
              return;
            }

            this._setClasses(element);

            this._emitOrigin(elementInfo.subject, null);
          }
        }, {
          key: "_emitOrigin",
          value: function _emitOrigin(subject, origin) {
            this._ngZone.run(function () {
              return subject.next(origin);
            });
          }
        }, {
          key: "_registerGlobalListeners",
          value: function _registerGlobalListeners(elementInfo) {
            var _this289 = this;

            if (!this._platform.isBrowser) {
              return;
            }

            var rootNode = elementInfo.rootNode;
            var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;

            if (!rootNodeFocusListeners) {
              this._ngZone.runOutsideAngular(function () {
                rootNode.addEventListener('focus', _this289._rootNodeFocusAndBlurListener, captureEventListenerOptions);
                rootNode.addEventListener('blur', _this289._rootNodeFocusAndBlurListener, captureEventListenerOptions);
              });
            }

            this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.


            if (++this._monitoredElementCount === 1) {
              // Note: we listen to events in the capture phase so we
              // can detect them even if the user stops propagation.
              this._ngZone.runOutsideAngular(function () {
                var document = _this289._getDocument();

                var window = _this289._getWindow();

                document.addEventListener('keydown', _this289._documentKeydownListener, captureEventListenerOptions);
                document.addEventListener('mousedown', _this289._documentMousedownListener, captureEventListenerOptions);
                document.addEventListener('touchstart', _this289._documentTouchstartListener, captureEventListenerOptions);
                window.addEventListener('focus', _this289._windowFocusListener);
              });
            }
          }
        }, {
          key: "_removeGlobalListeners",
          value: function _removeGlobalListeners(elementInfo) {
            var rootNode = elementInfo.rootNode;

            if (this._rootNodeFocusListenerCount.has(rootNode)) {
              var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);

              if (rootNodeFocusListeners > 1) {
                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
              } else {
                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);

                this._rootNodeFocusListenerCount["delete"](rootNode);
              }
            } // Unregister global listeners when last element is unmonitored.


            if (! --this._monitoredElementCount) {
              var _document2 = this._getDocument();

              var _window5 = this._getWindow();

              _document2.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);

              _document2.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);

              _document2.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);

              _window5.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.


              clearTimeout(this._windowFocusTimeoutId);
              clearTimeout(this._touchTimeoutId);
              clearTimeout(this._originTimeoutId);
            }
          }
          /** Updates all the state on an element once its focus origin has changed. */

        }, {
          key: "_originChanged",
          value: function _originChanged(element, origin, elementInfo) {
            this._setClasses(element, origin);

            this._emitOrigin(elementInfo.subject, origin);

            this._lastFocusOrigin = origin;
          }
          /**
           * Collects the `MonitoredElementInfo` of a particular element and
           * all of its ancestors that have enabled `checkChildren`.
           * @param element Element from which to start the search.
           */

        }, {
          key: "_getClosestElementsInfo",
          value: function _getClosestElementsInfo(element) {
            var results = [];

            this._elementInfo.forEach(function (info, currentElement) {
              if (currentElement === element || info.checkChildren && currentElement.contains(element)) {
                results.push([currentElement, info]);
              }
            });

            return results;
          }
        }]);

        return FocusMonitor;
      }();

      FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {
        return new (t || FocusMonitor)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
      };

      FocusMonitor.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function FocusMonitor_Factory() {
          return new FocusMonitor(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
        },
        token: FocusMonitor,
        providedIn: "root"
      });

      FocusMonitor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [FOCUS_MONITOR_DEFAULT_OPTIONS]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](FocusMonitor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [FOCUS_MONITOR_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();
      /** Gets the target of an event, accounting for Shadow DOM. */


      function getTarget(event) {
        // If an event is bound outside the Shadow DOM, the `event.target` will
        // point to the shadow root so we have to use `composedPath` instead.
        return event.composedPath ? event.composedPath()[0] : event.target;
      }
      /**
       * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
       * programmatically) and adds corresponding classes to the element.
       *
       * There are two variants of this directive:
       * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
       *    focused.
       * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
       */


      var CdkMonitorFocus = /*#__PURE__*/function () {
        function CdkMonitorFocus(_elementRef, _focusMonitor) {
          _classCallCheck(this, CdkMonitorFocus);

          this._elementRef = _elementRef;
          this._focusMonitor = _focusMonitor;
          this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }

        _createClass2(CdkMonitorFocus, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this290 = this;

            var element = this._elementRef.nativeElement;
            this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {
              return _this290.cdkFocusChange.emit(origin);
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef);

            if (this._monitorSubscription) {
              this._monitorSubscription.unsubscribe();
            }
          }
        }]);

        return CdkMonitorFocus;
      }();

      CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {
        return new (t || CdkMonitorFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](FocusMonitor));
      };

      CdkMonitorFocus.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: CdkMonitorFocus,
        selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
        outputs: {
          cdkFocusChange: "cdkFocusChange"
        }
      });

      CdkMonitorFocus.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: FocusMonitor
        }];
      };

      CdkMonitorFocus.propDecorators = {
        cdkFocusChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkMonitorFocus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: FocusMonitor
          }];
        }, {
          cdkFocusChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** CSS class applied to the document body when in black-on-white high-contrast mode. */


      var BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';
      /** CSS class applied to the document body when in white-on-black high-contrast mode. */

      var WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';
      /** CSS class applied to the document body when in high-contrast mode. */

      var HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';
      /**
       * Service to determine whether the browser is currently in a high-contrast-mode environment.
       *
       * Microsoft Windows supports an accessibility feature called "High Contrast Mode". This mode
       * changes the appearance of all applications, including web applications, to dramatically increase
       * contrast.
       *
       * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast
       * Mode. This service does not detect high-contrast mode as added by the Chrome "High Contrast"
       * browser extension.
       */

      var HighContrastModeDetector = /*#__PURE__*/function () {
        function HighContrastModeDetector(_platform, document) {
          _classCallCheck(this, HighContrastModeDetector);

          this._platform = _platform;
          this._document = document;
        }
        /** Gets the current high-contrast-mode for the page. */


        _createClass2(HighContrastModeDetector, [{
          key: "getHighContrastMode",
          value: function getHighContrastMode() {
            if (!this._platform.isBrowser) {
              return 0
              /* NONE */
              ;
            } // Create a test element with an arbitrary background-color that is neither black nor
            // white; high-contrast mode will coerce the color to either black or white. Also ensure that
            // appending the test element to the DOM does not affect layout by absolutely positioning it


            var testElement = this._document.createElement('div');

            testElement.style.backgroundColor = 'rgb(1,2,3)';
            testElement.style.position = 'absolute';

            this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between
            // browsers. Once we get this color, we no longer need the test element. Access the `window`
            // via the document so we can fake it in tests. Note that we have extra null checks, because
            // this logic will likely run during app bootstrap and throwing can break the entire app.


            var documentWindow = this._document.defaultView || window;
            var computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
            var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');

            this._document.body.removeChild(testElement);

            switch (computedColor) {
              case 'rgb(0,0,0)':
                return 2
                /* WHITE_ON_BLACK */
                ;

              case 'rgb(255,255,255)':
                return 1
                /* BLACK_ON_WHITE */
                ;
            }

            return 0
            /* NONE */
            ;
          }
          /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */

        }, {
          key: "_applyBodyHighContrastModeCssClasses",
          value: function _applyBodyHighContrastModeCssClasses() {
            if (this._platform.isBrowser && this._document.body) {
              var bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments

              bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
              bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);
              bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);
              var mode = this.getHighContrastMode();

              if (mode === 1
              /* BLACK_ON_WHITE */
              ) {
                  bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
                  bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);
                } else if (mode === 2
              /* WHITE_ON_BLACK */
              ) {
                  bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
                  bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);
                }
            }
          }
        }]);

        return HighContrastModeDetector;
      }();

      HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {
        return new (t || HighContrastModeDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      HighContrastModeDetector.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function HighContrastModeDetector_Factory() {
          return new HighContrastModeDetector(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
        },
        token: HighContrastModeDetector,
        providedIn: "root"
      });

      HighContrastModeDetector.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HighContrastModeDetector, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var A11yModule = function A11yModule(highContrastModeDetector) {
        _classCallCheck(this, A11yModule);

        highContrastModeDetector._applyBodyHighContrastModeCssClasses();
      };

      A11yModule.ɵfac = function A11yModule_Factory(t) {
        return new (t || A11yModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HighContrastModeDetector));
      };

      A11yModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: A11yModule
      });
      A11yModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]]]
      });

      A11yModule.ctorParameters = function () {
        return [{
          type: HighContrastModeDetector
        }];
      };

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](A11yModule, {
          declarations: function declarations() {
            return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];
          },
          imports: function imports() {
            return [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]];
          },
          exports: function exports() {
            return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];
          }
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](A11yModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
            declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
            exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
          }]
        }], function () {
          return [{
            type: HighContrastModeDetector
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=a11y.js.map

      /***/

    },

    /***/
    "uTdr":
    /*!****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js ***!
      \****************************************************************************/

    /*! exports provided: onErrorResumeNext, onErrorResumeNextStatic */

    /***/
    function uTdr(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
        return onErrorResumeNext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "onErrorResumeNextStatic", function () {
        return onErrorResumeNextStatic;
      });
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/from */
      "Cfvw");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function onErrorResumeNext() {
        for (var _len49 = arguments.length, nextSources = new Array(_len49), _key50 = 0; _key50 < _len49; _key50++) {
          nextSources[_key50] = arguments[_key50];
        }

        if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
          nextSources = nextSources[0];
        }

        return function (source) {
          return source.lift(new OnErrorResumeNextOperator(nextSources));
        };
      }

      function onErrorResumeNextStatic() {
        for (var _len50 = arguments.length, nextSources = new Array(_len50), _key51 = 0; _key51 < _len50; _key51++) {
          nextSources[_key51] = arguments[_key51];
        }

        var source = undefined;

        if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
          nextSources = nextSources[0];
        }

        source = nextSources.shift();
        return Object(_observable_from__WEBPACK_IMPORTED_MODULE_0__["from"])(source).lift(new OnErrorResumeNextOperator(nextSources));
      }

      var OnErrorResumeNextOperator = /*#__PURE__*/function () {
        function OnErrorResumeNextOperator(nextSources) {
          _classCallCheck(this, OnErrorResumeNextOperator);

          this.nextSources = nextSources;
        }

        _createClass2(OnErrorResumeNextOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
          }
        }]);

        return OnErrorResumeNextOperator;
      }();

      var OnErrorResumeNextSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP19) {
        _inherits(OnErrorResumeNextSubscriber, _innerSubscribe__WEBP19);

        var _super174 = _createSuper(OnErrorResumeNextSubscriber);

        function OnErrorResumeNextSubscriber(destination, nextSources) {
          var _this291;

          _classCallCheck(this, OnErrorResumeNextSubscriber);

          _this291 = _super174.call(this, destination);
          _this291.destination = destination;
          _this291.nextSources = nextSources;
          return _this291;
        }

        _createClass2(OnErrorResumeNextSubscriber, [{
          key: "notifyError",
          value: function notifyError() {
            this.subscribeToNextSource();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.subscribeToNextSource();
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.subscribeToNextSource();
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.subscribeToNextSource();
            this.unsubscribe();
          }
        }, {
          key: "subscribeToNextSource",
          value: function subscribeToNextSource() {
            var next = this.nextSources.shift();

            if (!!next) {
              var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleInnerSubscriber"](this);
              var destination = this.destination;
              destination.add(innerSubscriber);
              var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["innerSubscribe"])(next, innerSubscriber);

              if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
              }
            } else {
              this.destination.complete();
            }
          }
        }]);

        return OnErrorResumeNextSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__["SimpleOuterSubscriber"]); //# sourceMappingURL=onErrorResumeNext.js.map

      /***/

    },

    /***/
    "un/a":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/retry.js ***!
      \****************************************************************/

    /*! exports provided: retry */

    /***/
    function unA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "retry", function () {
        return retry;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function retry() {
        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
        return function (source) {
          return source.lift(new RetryOperator(count, source));
        };
      }

      var RetryOperator = /*#__PURE__*/function () {
        function RetryOperator(count, source) {
          _classCallCheck(this, RetryOperator);

          this.count = count;
          this.source = source;
        }

        _createClass2(RetryOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
          }
        }]);

        return RetryOperator;
      }();

      var RetrySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_43) {
        _inherits(RetrySubscriber, _Subscriber__WEBPACK_43);

        var _super175 = _createSuper(RetrySubscriber);

        function RetrySubscriber(destination, count, source) {
          var _this292;

          _classCallCheck(this, RetrySubscriber);

          _this292 = _super175.call(this, destination);
          _this292.count = count;
          _this292.source = source;
          return _this292;
        }

        _createClass2(RetrySubscriber, [{
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var source = this.source,
                  count = this.count;

              if (count === 0) {
                return _get(_getPrototypeOf(RetrySubscriber.prototype), "error", this).call(this, err);
              } else if (count > -1) {
                this.count = count - 1;
              }

              source.subscribe(this._unsubscribeAndRecycle());
            }
          }
        }]);

        return RetrySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=retry.js.map

      /***/

    },

    /***/
    "vkgz":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/tap.js ***!
      \**************************************************************/

    /*! exports provided: tap */

    /***/
    function vkgz(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tap", function () {
        return tap;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");
      /* harmony import */


      var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/noop */
      "KqfI");
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isFunction */
      "n6bG");

      function tap(nextOrObserver, error, complete) {
        return function tapOperatorFunction(source) {
          return source.lift(new DoOperator(nextOrObserver, error, complete));
        };
      }

      var DoOperator = /*#__PURE__*/function () {
        function DoOperator(nextOrObserver, error, complete) {
          _classCallCheck(this, DoOperator);

          this.nextOrObserver = nextOrObserver;
          this.error = error;
          this.complete = complete;
        }

        _createClass2(DoOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
          }
        }]);

        return DoOperator;
      }();

      var TapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_44) {
        _inherits(TapSubscriber, _Subscriber__WEBPACK_44);

        var _super176 = _createSuper(TapSubscriber);

        function TapSubscriber(destination, observerOrNext, error, complete) {
          var _this293;

          _classCallCheck(this, TapSubscriber);

          _this293 = _super176.call(this, destination);
          _this293._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this293._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this293._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this293._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this293._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];

          if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(observerOrNext)) {
            _this293._context = _assertThisInitialized(_this293);
            _this293._tapNext = observerOrNext;
          } else if (observerOrNext) {
            _this293._context = observerOrNext;
            _this293._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
            _this293._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
            _this293._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          }

          return _this293;
        }

        _createClass2(TapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            try {
              this._tapNext.call(this._context, value);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            try {
              this._tapError.call(this._context, err);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            try {
              this._tapComplete.call(this._context);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            return this.destination.complete();
          }
        }]);

        return TapSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=tap.js.map

      /***/

    },

    /***/
    "vqkR":
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js ***!
      \********************************************************************/

    /*! exports provided: skipUntil */

    /***/
    function vqkR(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "skipUntil", function () {
        return skipUntil;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function skipUntil(notifier) {
        return function (source) {
          return source.lift(new SkipUntilOperator(notifier));
        };
      }

      var SkipUntilOperator = /*#__PURE__*/function () {
        function SkipUntilOperator(notifier) {
          _classCallCheck(this, SkipUntilOperator);

          this.notifier = notifier;
        }

        _createClass2(SkipUntilOperator, [{
          key: "call",
          value: function call(destination, source) {
            return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
          }
        }]);

        return SkipUntilOperator;
      }();

      var SkipUntilSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP20) {
        _inherits(SkipUntilSubscriber, _innerSubscribe__WEBP20);

        var _super177 = _createSuper(SkipUntilSubscriber);

        function SkipUntilSubscriber(destination, notifier) {
          var _this294;

          _classCallCheck(this, SkipUntilSubscriber);

          _this294 = _super177.call(this, destination);
          _this294.hasValue = false;
          var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](_assertThisInitialized(_this294));

          _this294.add(innerSubscriber);

          _this294.innerSubscription = innerSubscriber;
          var innerSubscription = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(notifier, innerSubscriber);

          if (innerSubscription !== innerSubscriber) {
            _this294.add(innerSubscription);

            _this294.innerSubscription = innerSubscription;
          }

          return _this294;
        }

        _createClass2(SkipUntilSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.hasValue) {
              _get(_getPrototypeOf(SkipUntilSubscriber.prototype), "_next", this).call(this, value);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.hasValue = true;

            if (this.innerSubscription) {
              this.innerSubscription.unsubscribe();
            }
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {}
        }]);

        return SkipUntilSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=skipUntil.js.map

      /***/

    },

    /***/
    "w1tV":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/share.js ***!
      \****************************************************************/

    /*! exports provided: share */

    /***/
    function w1tV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "share", function () {
        return share;
      });
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./multicast */
      "oB13");
      /* harmony import */


      var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./refCount */
      "x+ZX");
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subject */
      "XNiG");

      function shareSubjectFactory() {
        return new _Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
      }

      function share() {
        return function (source) {
          return Object(_refCount__WEBPACK_IMPORTED_MODULE_1__["refCount"])()(Object(_multicast__WEBPACK_IMPORTED_MODULE_0__["multicast"])(shareSubjectFactory)(source));
        };
      } //# sourceMappingURL=share.js.map

      /***/

    },

    /***/
    "wO+i":
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/pluck.js ***!
      \****************************************************************/

    /*! exports provided: pluck */

    /***/
    function wOI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pluck", function () {
        return pluck;
      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./map */
      "lJxs");

      function pluck() {
        for (var _len51 = arguments.length, properties = new Array(_len51), _key52 = 0; _key52 < _len51; _key52++) {
          properties[_key52] = arguments[_key52];
        }

        var length = properties.length;

        if (length === 0) {
          throw new Error('list of properties cannot be empty.');
        }

        return function (source) {
          return Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(plucker(properties, length))(source);
        };
      }

      function plucker(props, length) {
        var mapper = function mapper(x) {
          var currentProp = x;

          for (var i = 0; i < length; i++) {
            var p = currentProp != null ? currentProp[props[i]] : undefined;

            if (p !== void 0) {
              currentProp = p;
            } else {
              return undefined;
            }
          }

          return currentProp;
        };

        return mapper;
      } //# sourceMappingURL=pluck.js.map

      /***/

    },

    /***/
    "x+ZX":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/refCount.js ***!
      \*******************************************************************/

    /*! exports provided: refCount */

    /***/
    function xZX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "refCount", function () {
        return refCount;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function refCount() {
        return function refCountOperatorFunction(source) {
          return source.lift(new RefCountOperator(source));
        };
      }

      var RefCountOperator = /*#__PURE__*/function () {
        function RefCountOperator(connectable) {
          _classCallCheck(this, RefCountOperator);

          this.connectable = connectable;
        }

        _createClass2(RefCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);

            if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
            }

            return subscription;
          }
        }]);

        return RefCountOperator;
      }();

      var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_45) {
        _inherits(RefCountSubscriber, _Subscriber__WEBPACK_45);

        var _super178 = _createSuper(RefCountSubscriber);

        function RefCountSubscriber(destination, connectable) {
          var _this295;

          _classCallCheck(this, RefCountSubscriber);

          _this295 = _super178.call(this, destination);
          _this295.connectable = connectable;
          return _this295;
        }

        _createClass2(RefCountSubscriber, [{
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (!connectable) {
              this.connection = null;
              return;
            }

            this.connectable = null;
            var refCount = connectable._refCount;

            if (refCount <= 0) {
              this.connection = null;
              return;
            }

            connectable._refCount = refCount - 1;

            if (refCount > 1) {
              this.connection = null;
              return;
            }

            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;

            if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
            }
          }
        }]);

        return RefCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=refCount.js.map

      /***/

    },

    /***/
    "xbPD":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js ***!
      \*************************************************************************/

    /*! exports provided: defaultIfEmpty */

    /***/
    function xbPD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function () {
        return defaultIfEmpty;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function defaultIfEmpty() {
        var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return function (source) {
          return source.lift(new DefaultIfEmptyOperator(defaultValue));
        };
      }

      var DefaultIfEmptyOperator = /*#__PURE__*/function () {
        function DefaultIfEmptyOperator(defaultValue) {
          _classCallCheck(this, DefaultIfEmptyOperator);

          this.defaultValue = defaultValue;
        }

        _createClass2(DefaultIfEmptyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
          }
        }]);

        return DefaultIfEmptyOperator;
      }();

      var DefaultIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_46) {
        _inherits(DefaultIfEmptySubscriber, _Subscriber__WEBPACK_46);

        var _super179 = _createSuper(DefaultIfEmptySubscriber);

        function DefaultIfEmptySubscriber(destination, defaultValue) {
          var _this296;

          _classCallCheck(this, DefaultIfEmptySubscriber);

          _this296 = _super179.call(this, destination);
          _this296.defaultValue = defaultValue;
          _this296.isEmpty = true;
          return _this296;
        }

        _createClass2(DefaultIfEmptySubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.isEmpty = false;
            this.destination.next(value);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (this.isEmpty) {
              this.destination.next(this.defaultValue);
            }

            this.destination.complete();
          }
        }]);

        return DefaultIfEmptySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=defaultIfEmpty.js.map

      /***/

    },

    /***/
    "xgIS":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js ***!
      \*********************************************************************/

    /*! exports provided: fromEvent */

    /***/
    function xgIS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fromEvent", function () {
        return fromEvent;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      "DH7j");
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isFunction */
      "n6bG");
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../operators/map */
      "lJxs");

      var toString = function () {
        return Object.prototype.toString;
      }();

      function fromEvent(target, eventName, options, resultSelector) {
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(options)) {
          resultSelector = options;
          options = undefined;
        }

        if (resultSelector) {
          return fromEvent(target, eventName, options).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) {
            return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
          }));
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          function handler(e) {
            if (arguments.length > 1) {
              subscriber.next(Array.prototype.slice.call(arguments));
            } else {
              subscriber.next(e);
            }
          }

          setupSubscription(target, eventName, handler, subscriber, options);
        });
      }

      function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;

        if (isEventTarget(sourceObj)) {
          var source = sourceObj;
          sourceObj.addEventListener(eventName, handler, options);

          unsubscribe = function unsubscribe() {
            return source.removeEventListener(eventName, handler, options);
          };
        } else if (isJQueryStyleEventEmitter(sourceObj)) {
          var _source = sourceObj;
          sourceObj.on(eventName, handler);

          unsubscribe = function unsubscribe() {
            return _source.off(eventName, handler);
          };
        } else if (isNodeStyleEventEmitter(sourceObj)) {
          var _source2 = sourceObj;
          sourceObj.addListener(eventName, handler);

          unsubscribe = function unsubscribe() {
            return _source2.removeListener(eventName, handler);
          };
        } else if (sourceObj && sourceObj.length) {
          for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
          }
        } else {
          throw new TypeError('Invalid event target');
        }

        subscriber.add(unsubscribe);
      }

      function isNodeStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
      }

      function isJQueryStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
      }

      function isEventTarget(sourceObj) {
        return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
      } //# sourceMappingURL=fromEvent.js.map

      /***/

    },

    /***/
    "xz+E":
    /*!***************************************************!*\
      !*** ./node_modules/@angular/cdk/fesm2015/cdk.js ***!
      \***************************************************/

    /*! exports provided: VERSION */

    /***/
    function xzE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VERSION", function () {
        return VERSION;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Current version of the Angular Component Development Kit. */


      var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('11.2.5');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      //# sourceMappingURL=cdk.js.map

      /***/
    },

    /***/
    "yCtX":
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/fromArray.js ***!
      \*********************************************************************/

    /*! exports provided: fromArray */

    /***/
    function yCtX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fromArray", function () {
        return fromArray;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");
      /* harmony import */


      var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeToArray */
      "ngJS");
      /* harmony import */


      var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduled/scheduleArray */
      "jZKg");

      function fromArray(input, scheduler) {
        if (!scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__["subscribeToArray"])(input));
        } else {
          return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
        }
      } //# sourceMappingURL=fromArray.js.map

      /***/

    },

    /***/
    "yI9Y":
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/max.js ***!
      \**************************************************************/

    /*! exports provided: max */

    /***/
    function yI9Y(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "max", function () {
        return max;
      });
      /* harmony import */


      var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./reduce */
      "128B");

      function max(comparer) {
        var max = typeof comparer === 'function' ? function (x, y) {
          return comparer(x, y) > 0 ? x : y;
        } : function (x, y) {
          return x > y ? x : y;
        };
        return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(max);
      } //# sourceMappingURL=max.js.map

      /***/

    },

    /***/
    "yLV6":
    /*!*****************************************!*\
      !*** ./node_modules/hammerjs/hammer.js ***!
      \*****************************************/

    /*! no static exports found */

    /***/
    function yLV6(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_RESULT__;
      /*! Hammer.JS - v2.0.7 - 2016-04-22
      * http://hammerjs.github.io/
      *
      * Copyright (c) 2016 Jorik Tangelder;
      * Licensed under the MIT license */


      (function (window, document, exportName, undefined) {
        'use strict';

        var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
        var TEST_ELEMENT = document.createElement('div');
        var TYPE_FUNCTION = 'function';
        var round = Math.round;
        var abs = Math.abs;
        var now = Date.now;
        /**
         * set a timeout with a given scope
         * @param {Function} fn
         * @param {Number} timeout
         * @param {Object} context
         * @returns {number}
         */

        function setTimeoutContext(fn, timeout, context) {
          return setTimeout(bindFn(fn, context), timeout);
        }
        /**
         * if the argument is an array, we want to execute the fn on each entry
         * if it aint an array we don't want to do a thing.
         * this is used by all the methods that accept a single and array argument.
         * @param {*|Array} arg
         * @param {String} fn
         * @param {Object} [context]
         * @returns {Boolean}
         */


        function invokeArrayArg(arg, fn, context) {
          if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
          }

          return false;
        }
        /**
         * walk objects and arrays
         * @param {Object} obj
         * @param {Function} iterator
         * @param {Object} context
         */


        function each(obj, iterator, context) {
          var i;

          if (!obj) {
            return;
          }

          if (obj.forEach) {
            obj.forEach(iterator, context);
          } else if (obj.length !== undefined) {
            i = 0;

            while (i < obj.length) {
              iterator.call(context, obj[i], i, obj);
              i++;
            }
          } else {
            for (i in obj) {
              obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
          }
        }
        /**
         * wrap a method with a deprecation warning and stack trace
         * @param {Function} method
         * @param {String} name
         * @param {String} message
         * @returns {Function} A new function wrapping the supplied method.
         */


        function deprecate(method, name, message) {
          var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
          return function () {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
            var log = window.console && (window.console.warn || window.console.log);

            if (log) {
              log.call(window.console, deprecationMessage, stack);
            }

            return method.apply(this, arguments);
          };
        }
        /**
         * extend object.
         * means that properties in dest will be overwritten by the ones in src.
         * @param {Object} target
         * @param {...Object} objects_to_assign
         * @returns {Object} target
         */


        var assign;

        if (typeof Object.assign !== 'function') {
          assign = function assign(target) {
            if (target === undefined || target === null) {
              throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);

            for (var index = 1; index < arguments.length; index++) {
              var source = arguments[index];

              if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                  if (source.hasOwnProperty(nextKey)) {
                    output[nextKey] = source[nextKey];
                  }
                }
              }
            }

            return output;
          };
        } else {
          assign = Object.assign;
        }
        /**
         * extend object.
         * means that properties in dest will be overwritten by the ones in src.
         * @param {Object} dest
         * @param {Object} src
         * @param {Boolean} [merge=false]
         * @returns {Object} dest
         */


        var extend = deprecate(function extend(dest, src, merge) {
          var keys = Object.keys(src);
          var i = 0;

          while (i < keys.length) {
            if (!merge || merge && dest[keys[i]] === undefined) {
              dest[keys[i]] = src[keys[i]];
            }

            i++;
          }

          return dest;
        }, 'extend', 'Use `assign`.');
        /**
         * merge the values from src in the dest.
         * means that properties that exist in dest will not be overwritten by src
         * @param {Object} dest
         * @param {Object} src
         * @returns {Object} dest
         */

        var merge = deprecate(function merge(dest, src) {
          return extend(dest, src, true);
        }, 'merge', 'Use `assign`.');
        /**
         * simple class inheritance
         * @param {Function} child
         * @param {Function} base
         * @param {Object} [properties]
         */

        function inherit(child, base, properties) {
          var baseP = base.prototype,
              childP;
          childP = child.prototype = Object.create(baseP);
          childP.constructor = child;
          childP._super = baseP;

          if (properties) {
            assign(childP, properties);
          }
        }
        /**
         * simple function bind
         * @param {Function} fn
         * @param {Object} context
         * @returns {Function}
         */


        function bindFn(fn, context) {
          return function boundFn() {
            return fn.apply(context, arguments);
          };
        }
        /**
         * let a boolean value also be a function that must return a boolean
         * this first item in args will be used as the context
         * @param {Boolean|Function} val
         * @param {Array} [args]
         * @returns {Boolean}
         */


        function boolOrFn(val, args) {
          if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
          }

          return val;
        }
        /**
         * use the val2 when val1 is undefined
         * @param {*} val1
         * @param {*} val2
         * @returns {*}
         */


        function ifUndefined(val1, val2) {
          return val1 === undefined ? val2 : val1;
        }
        /**
         * addEventListener with multiple events at once
         * @param {EventTarget} target
         * @param {String} types
         * @param {Function} handler
         */


        function addEventListeners(target, types, handler) {
          each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
          });
        }
        /**
         * removeEventListener with multiple events at once
         * @param {EventTarget} target
         * @param {String} types
         * @param {Function} handler
         */


        function removeEventListeners(target, types, handler) {
          each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
          });
        }
        /**
         * find if a node is in the given parent
         * @method hasParent
         * @param {HTMLElement} node
         * @param {HTMLElement} parent
         * @return {Boolean} found
         */


        function hasParent(node, parent) {
          while (node) {
            if (node == parent) {
              return true;
            }

            node = node.parentNode;
          }

          return false;
        }
        /**
         * small indexOf wrapper
         * @param {String} str
         * @param {String} find
         * @returns {Boolean} found
         */


        function inStr(str, find) {
          return str.indexOf(find) > -1;
        }
        /**
         * split string on whitespace
         * @param {String} str
         * @returns {Array} words
         */


        function splitStr(str) {
          return str.trim().split(/\s+/g);
        }
        /**
         * find if a array contains the object using indexOf or a simple polyFill
         * @param {Array} src
         * @param {String} find
         * @param {String} [findByKey]
         * @return {Boolean|Number} false when not found, or the index
         */


        function inArray(src, find, findByKey) {
          if (src.indexOf && !findByKey) {
            return src.indexOf(find);
          } else {
            var i = 0;

            while (i < src.length) {
              if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                return i;
              }

              i++;
            }

            return -1;
          }
        }
        /**
         * convert array-like objects to real arrays
         * @param {Object} obj
         * @returns {Array}
         */


        function toArray(obj) {
          return Array.prototype.slice.call(obj, 0);
        }
        /**
         * unique array with objects based on a key (like 'id') or just by the array's value
         * @param {Array} src [{id:1},{id:2},{id:1}]
         * @param {String} [key]
         * @param {Boolean} [sort=False]
         * @returns {Array} [{id:1},{id:2}]
         */


        function uniqueArray(src, key, sort) {
          var results = [];
          var values = [];
          var i = 0;

          while (i < src.length) {
            var val = key ? src[i][key] : src[i];

            if (inArray(values, val) < 0) {
              results.push(src[i]);
            }

            values[i] = val;
            i++;
          }

          if (sort) {
            if (!key) {
              results = results.sort();
            } else {
              results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
              });
            }
          }

          return results;
        }
        /**
         * get the prefixed property
         * @param {Object} obj
         * @param {String} property
         * @returns {String|Undefined} prefixed
         */


        function prefixed(obj, property) {
          var prefix, prop;
          var camelProp = property[0].toUpperCase() + property.slice(1);
          var i = 0;

          while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;

            if (prop in obj) {
              return prop;
            }

            i++;
          }

          return undefined;
        }
        /**
         * get a unique id
         * @returns {number} uniqueId
         */


        var _uniqueId = 1;

        function uniqueId() {
          return _uniqueId++;
        }
        /**
         * get the window object of an element
         * @param {HTMLElement} element
         * @returns {DocumentView|Window}
         */


        function getWindowForElement(element) {
          var doc = element.ownerDocument || element;
          return doc.defaultView || doc.parentWindow || window;
        }

        var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
        var SUPPORT_TOUCH = ('ontouchstart' in window);
        var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
        var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
        var INPUT_TYPE_TOUCH = 'touch';
        var INPUT_TYPE_PEN = 'pen';
        var INPUT_TYPE_MOUSE = 'mouse';
        var INPUT_TYPE_KINECT = 'kinect';
        var COMPUTE_INTERVAL = 25;
        var INPUT_START = 1;
        var INPUT_MOVE = 2;
        var INPUT_END = 4;
        var INPUT_CANCEL = 8;
        var DIRECTION_NONE = 1;
        var DIRECTION_LEFT = 2;
        var DIRECTION_RIGHT = 4;
        var DIRECTION_UP = 8;
        var DIRECTION_DOWN = 16;
        var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
        var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
        var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
        var PROPS_XY = ['x', 'y'];
        var PROPS_CLIENT_XY = ['clientX', 'clientY'];
        /**
         * create new input type manager
         * @param {Manager} manager
         * @param {Function} callback
         * @returns {Input}
         * @constructor
         */

        function Input(manager, callback) {
          var self = this;
          this.manager = manager;
          this.callback = callback;
          this.element = manager.element;
          this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
          // so when disabled the input events are completely bypassed.

          this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
              self.handler(ev);
            }
          };

          this.init();
        }

        Input.prototype = {
          /**
           * should handle the inputEvent data and trigger the callback
           * @virtual
           */
          handler: function handler() {},

          /**
           * bind the events
           */
          init: function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          },

          /**
           * unbind the events
           */
          destroy: function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          }
        };
        /**
         * create new input type manager
         * called by the Manager constructor
         * @param {Hammer} manager
         * @returns {Input}
         */

        function createInputInstance(manager) {
          var Type;
          var inputClass = manager.options.inputClass;

          if (inputClass) {
            Type = inputClass;
          } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
          } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
          } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
          } else {
            Type = TouchMouseInput;
          }

          return new Type(manager, inputHandler);
        }
        /**
         * handle input events
         * @param {Manager} manager
         * @param {String} eventType
         * @param {Object} input
         */


        function inputHandler(manager, eventType, input) {
          var pointersLen = input.pointers.length;
          var changedPointersLen = input.changedPointers.length;
          var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
          var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
          input.isFirst = !!isFirst;
          input.isFinal = !!isFinal;

          if (isFirst) {
            manager.session = {};
          } // source event is the normalized value of the domEvents
          // like 'touchstart, mouseup, pointerdown'


          input.eventType = eventType; // compute scale, rotation etc

          computeInputData(manager, input); // emit secret event

          manager.emit('hammer.input', input);
          manager.recognize(input);
          manager.session.prevInput = input;
        }
        /**
         * extend the data with some usable properties like scale, rotate, velocity etc
         * @param {Object} manager
         * @param {Object} input
         */


        function computeInputData(manager, input) {
          var session = manager.session;
          var pointers = input.pointers;
          var pointersLength = pointers.length; // store the first input to calculate the distance and direction

          if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
          } // to compute scale and rotation we need to store the multiple touches


          if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
          } else if (pointersLength === 1) {
            session.firstMultiple = false;
          }

          var firstInput = session.firstInput;
          var firstMultiple = session.firstMultiple;
          var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
          var center = input.center = getCenter(pointers);
          input.timeStamp = now();
          input.deltaTime = input.timeStamp - firstInput.timeStamp;
          input.angle = getAngle(offsetCenter, center);
          input.distance = getDistance(offsetCenter, center);
          computeDeltaXY(session, input);
          input.offsetDirection = getDirection(input.deltaX, input.deltaY);
          var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
          input.overallVelocityX = overallVelocity.x;
          input.overallVelocityY = overallVelocity.y;
          input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
          input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
          input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
          input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
          computeIntervalInputData(session, input); // find the correct target

          var target = manager.element;

          if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
          }

          input.target = target;
        }

        function computeDeltaXY(session, input) {
          var center = input.center;
          var offset = session.offsetDelta || {};
          var prevDelta = session.prevDelta || {};
          var prevInput = session.prevInput || {};

          if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
              x: prevInput.deltaX || 0,
              y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
              x: center.x,
              y: center.y
            };
          }

          input.deltaX = prevDelta.x + (center.x - offset.x);
          input.deltaY = prevDelta.y + (center.y - offset.y);
        }
        /**
         * velocity is calculated every x ms
         * @param {Object} session
         * @param {Object} input
         */


        function computeIntervalInputData(session, input) {
          var last = session.lastInterval || input,
              deltaTime = input.timeStamp - last.timeStamp,
              velocity,
              velocityX,
              velocityY,
              direction;

          if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
          } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
          }

          input.velocity = velocity;
          input.velocityX = velocityX;
          input.velocityY = velocityY;
          input.direction = direction;
        }
        /**
         * create a simple clone from the input used for storage of firstInput and firstMultiple
         * @param {Object} input
         * @returns {Object} clonedInputData
         */


        function simpleCloneInputData(input) {
          // make a simple copy of the pointers because we will get a reference if we don't
          // we only need clientXY for the calculations
          var pointers = [];
          var i = 0;

          while (i < input.pointers.length) {
            pointers[i] = {
              clientX: round(input.pointers[i].clientX),
              clientY: round(input.pointers[i].clientY)
            };
            i++;
          }

          return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
          };
        }
        /**
         * get the center of all the pointers
         * @param {Array} pointers
         * @return {Object} center contains `x` and `y` properties
         */


        function getCenter(pointers) {
          var pointersLength = pointers.length; // no need to loop when only one touch

          if (pointersLength === 1) {
            return {
              x: round(pointers[0].clientX),
              y: round(pointers[0].clientY)
            };
          }

          var x = 0,
              y = 0,
              i = 0;

          while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
          }

          return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
          };
        }
        /**
         * calculate the velocity between two points. unit is in px per ms.
         * @param {Number} deltaTime
         * @param {Number} x
         * @param {Number} y
         * @return {Object} velocity `x` and `y`
         */


        function getVelocity(deltaTime, x, y) {
          return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
          };
        }
        /**
         * get the direction between two points
         * @param {Number} x
         * @param {Number} y
         * @return {Number} direction
         */


        function getDirection(x, y) {
          if (x === y) {
            return DIRECTION_NONE;
          }

          if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          }

          return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        }
        /**
         * calculate the absolute distance between two points
         * @param {Object} p1 {x, y}
         * @param {Object} p2 {x, y}
         * @param {Array} [props] containing x and y keys
         * @return {Number} distance
         */


        function getDistance(p1, p2, props) {
          if (!props) {
            props = PROPS_XY;
          }

          var x = p2[props[0]] - p1[props[0]],
              y = p2[props[1]] - p1[props[1]];
          return Math.sqrt(x * x + y * y);
        }
        /**
         * calculate the angle between two coordinates
         * @param {Object} p1
         * @param {Object} p2
         * @param {Array} [props] containing x and y keys
         * @return {Number} angle
         */


        function getAngle(p1, p2, props) {
          if (!props) {
            props = PROPS_XY;
          }

          var x = p2[props[0]] - p1[props[0]],
              y = p2[props[1]] - p1[props[1]];
          return Math.atan2(y, x) * 180 / Math.PI;
        }
        /**
         * calculate the rotation degrees between two pointersets
         * @param {Array} start array of pointers
         * @param {Array} end array of pointers
         * @return {Number} rotation
         */


        function getRotation(start, end) {
          return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
        }
        /**
         * calculate the scale factor between two pointersets
         * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
         * @param {Array} start array of pointers
         * @param {Array} end array of pointers
         * @return {Number} scale
         */


        function getScale(start, end) {
          return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
        }

        var MOUSE_INPUT_MAP = {
          mousedown: INPUT_START,
          mousemove: INPUT_MOVE,
          mouseup: INPUT_END
        };
        var MOUSE_ELEMENT_EVENTS = 'mousedown';
        var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
        /**
         * Mouse events input
         * @constructor
         * @extends Input
         */

        function MouseInput() {
          this.evEl = MOUSE_ELEMENT_EVENTS;
          this.evWin = MOUSE_WINDOW_EVENTS;
          this.pressed = false; // mousedown state

          Input.apply(this, arguments);
        }

        inherit(MouseInput, Input, {
          /**
           * handle mouse events
           * @param {Object} ev
           */
          handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down

            if (eventType & INPUT_START && ev.button === 0) {
              this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
              eventType = INPUT_END;
            } // mouse must be down


            if (!this.pressed) {
              return;
            }

            if (eventType & INPUT_END) {
              this.pressed = false;
            }

            this.callback(this.manager, eventType, {
              pointers: [ev],
              changedPointers: [ev],
              pointerType: INPUT_TYPE_MOUSE,
              srcEvent: ev
            });
          }
        });
        var POINTER_INPUT_MAP = {
          pointerdown: INPUT_START,
          pointermove: INPUT_MOVE,
          pointerup: INPUT_END,
          pointercancel: INPUT_CANCEL,
          pointerout: INPUT_CANCEL
        }; // in IE10 the pointer types is defined as an enum

        var IE10_POINTER_TYPE_ENUM = {
          2: INPUT_TYPE_TOUCH,
          3: INPUT_TYPE_PEN,
          4: INPUT_TYPE_MOUSE,
          5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816

        };
        var POINTER_ELEMENT_EVENTS = 'pointerdown';
        var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive

        if (window.MSPointerEvent && !window.PointerEvent) {
          POINTER_ELEMENT_EVENTS = 'MSPointerDown';
          POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
        }
        /**
         * Pointer events input
         * @constructor
         * @extends Input
         */


        function PointerEventInput() {
          this.evEl = POINTER_ELEMENT_EVENTS;
          this.evWin = POINTER_WINDOW_EVENTS;
          Input.apply(this, arguments);
          this.store = this.manager.session.pointerEvents = [];
        }

        inherit(PointerEventInput, Input, {
          /**
           * handle mouse events
           * @param {Object} ev
           */
          handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store

            var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down

            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
              if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
              }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
              removePointer = true;
            } // it not found, so the pointer hasn't been down (so it's probably a hover)


            if (storeIndex < 0) {
              return;
            } // update the event in the store


            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
              pointers: store,
              changedPointers: [ev],
              pointerType: pointerType,
              srcEvent: ev
            });

            if (removePointer) {
              // remove from the store
              store.splice(storeIndex, 1);
            }
          }
        });
        var SINGLE_TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };
        var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
        var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
        /**
         * Touch events input
         * @constructor
         * @extends Input
         */

        function SingleTouchInput() {
          this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
          this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
          this.started = false;
          Input.apply(this, arguments);
        }

        inherit(SingleTouchInput, Input, {
          handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?

            if (type === INPUT_START) {
              this.started = true;
            }

            if (!this.started) {
              return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state

            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
              this.started = false;
            }

            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });
        /**
         * @this {TouchInput}
         * @param {Object} ev
         * @param {Number} type flag
         * @returns {undefined|Array} [all, changed]
         */

        function normalizeSingleTouches(ev, type) {
          var all = toArray(ev.touches);
          var changed = toArray(ev.changedTouches);

          if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
          }

          return [all, changed];
        }

        var TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };
        var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
        /**
         * Multi-user touch events input
         * @constructor
         * @extends Input
         */

        function TouchInput() {
          this.evTarget = TOUCH_TARGET_EVENTS;
          this.targetIds = {};
          Input.apply(this, arguments);
        }

        inherit(TouchInput, Input, {
          handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);

            if (!touches) {
              return;
            }

            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });
        /**
         * @this {TouchInput}
         * @param {Object} ev
         * @param {Number} type flag
         * @returns {undefined|Array} [all, changed]
         */

        function getTouches(ev, type) {
          var allTouches = toArray(ev.touches);
          var targetIds = this.targetIds; // when there is only one touch, the process can be simplified

          if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
          }

          var i,
              targetTouches,
              changedTouches = toArray(ev.changedTouches),
              changedTargetTouches = [],
              target = this.target; // get target touches from touches

          targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
          }); // collect touches

          if (type === INPUT_START) {
            i = 0;

            while (i < targetTouches.length) {
              targetIds[targetTouches[i].identifier] = true;
              i++;
            }
          } // filter changed touches to only contain touches that exist in the collected target ids


          i = 0;

          while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
              changedTargetTouches.push(changedTouches[i]);
            } // cleanup removed touches


            if (type & (INPUT_END | INPUT_CANCEL)) {
              delete targetIds[changedTouches[i].identifier];
            }

            i++;
          }

          if (!changedTargetTouches.length) {
            return;
          }

          return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
          uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
        }
        /**
         * Combined touch and mouse input
         *
         * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
         * This because touch devices also emit mouse events while doing a touch.
         *
         * @constructor
         * @extends Input
         */


        var DEDUP_TIMEOUT = 2500;
        var DEDUP_DISTANCE = 25;

        function TouchMouseInput() {
          Input.apply(this, arguments);
          var handler = bindFn(this.handler, this);
          this.touch = new TouchInput(this.manager, handler);
          this.mouse = new MouseInput(this.manager, handler);
          this.primaryTouch = null;
          this.lastTouches = [];
        }

        inherit(TouchMouseInput, Input, {
          /**
           * handle mouse and touch events
           * @param {Hammer} manager
           * @param {String} inputEvent
           * @param {Object} inputData
           */
          handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
              return;
            } // when we're in a touch event, record touches to  de-dupe synthetic mouse event


            if (isTouch) {
              recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
              return;
            }

            this.callback(manager, inputEvent, inputData);
          },

          /**
           * remove the event listeners
           */
          destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
          }
        });

        function recordTouches(eventType, eventData) {
          if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
          }
        }

        function setLastTouch(eventData) {
          var touch = eventData.changedPointers[0];

          if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
              x: touch.clientX,
              y: touch.clientY
            };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;

            var removeLastTouch = function removeLastTouch() {
              var i = lts.indexOf(lastTouch);

              if (i > -1) {
                lts.splice(i, 1);
              }
            };

            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
          }
        }

        function isSyntheticEvent(eventData) {
          var x = eventData.srcEvent.clientX,
              y = eventData.srcEvent.clientY;

          for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x),
                dy = Math.abs(y - t.y);

            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
              return true;
            }
          }

          return false;
        }

        var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
        var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined; // magical touchAction value

        var TOUCH_ACTION_COMPUTE = 'compute';
        var TOUCH_ACTION_AUTO = 'auto';
        var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented

        var TOUCH_ACTION_NONE = 'none';
        var TOUCH_ACTION_PAN_X = 'pan-x';
        var TOUCH_ACTION_PAN_Y = 'pan-y';
        var TOUCH_ACTION_MAP = getTouchActionProps();
        /**
         * Touch Action
         * sets the touchAction property or uses the js alternative
         * @param {Manager} manager
         * @param {String} value
         * @constructor
         */

        function TouchAction(manager, value) {
          this.manager = manager;
          this.set(value);
        }

        TouchAction.prototype = {
          /**
           * set the touchAction value on the element or enable the polyfill
           * @param {String} value
           */
          set: function set(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
              value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
              this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }

            this.actions = value.toLowerCase().trim();
          },

          /**
           * just re-set the touchAction value
           */
          update: function update() {
            this.set(this.manager.options.touchAction);
          },

          /**
           * compute the value for the touchAction property based on the recognizer's settings
           * @returns {String} value
           */
          compute: function compute() {
            var actions = [];
            each(this.manager.recognizers, function (recognizer) {
              if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
              }
            });
            return cleanTouchActions(actions.join(' '));
          },

          /**
           * this method is called on each input cycle and provides the preventing of the browser behavior
           * @param {Object} input
           */
          preventDefaults: function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection; // if the touch action did prevented once this session

            if (this.manager.session.prevented) {
              srcEvent.preventDefault();
              return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

            if (hasNone) {
              //do not prevent defaults if this is a tap gesture
              var isTapPointer = input.pointers.length === 1;
              var isTapMovement = input.distance < 2;
              var isTapTouchTime = input.deltaTime < 250;

              if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
              }
            }

            if (hasPanX && hasPanY) {
              // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
              return;
            }

            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
              return this.preventSrc(srcEvent);
            }
          },

          /**
           * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
           * @param {Object} srcEvent
           */
          preventSrc: function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
          }
        };
        /**
         * when the touchActions are collected they are not a valid value, so we need to clean things up. *
         * @param {String} actions
         * @returns {*}
         */

        function cleanTouchActions(actions) {
          // none
          if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
          }

          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
          // for different directions, e.g. horizontal pan but vertical swipe?)
          // we need none (as otherwise with pan-x pan-y combined none of these
          // recognizers will work, since the browser would handle all panning

          if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
          } // pan-x OR pan-y


          if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
          } // manipulation


          if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
          }

          return TOUCH_ACTION_AUTO;
        }

        function getTouchActionProps() {
          if (!NATIVE_TOUCH_ACTION) {
            return false;
          }

          var touchMap = {};
          var cssSupports = window.CSS && window.CSS.supports;
          ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
          });
          return touchMap;
        }
        /**
         * Recognizer flow explained; *
         * All recognizers have the initial state of POSSIBLE when a input session starts.
         * The definition of a input session is from the first input until the last input, with all it's movement in it. *
         * Example session for mouse-input: mousedown -> mousemove -> mouseup
         *
         * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
         * which determines with state it should be.
         *
         * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
         * POSSIBLE to give it another change on the next cycle.
         *
         *               Possible
         *                  |
         *            +-----+---------------+
         *            |                     |
         *      +-----+-----+               |
         *      |           |               |
         *   Failed      Cancelled          |
         *                          +-------+------+
         *                          |              |
         *                      Recognized       Began
         *                                         |
         *                                      Changed
         *                                         |
         *                                  Ended/Recognized
         */


        var STATE_POSSIBLE = 1;
        var STATE_BEGAN = 2;
        var STATE_CHANGED = 4;
        var STATE_ENDED = 8;
        var STATE_RECOGNIZED = STATE_ENDED;
        var STATE_CANCELLED = 16;
        var STATE_FAILED = 32;
        /**
         * Recognizer
         * Every recognizer needs to extend from this class.
         * @constructor
         * @param {Object} options
         */

        function Recognizer(options) {
          this.options = assign({}, this.defaults, options || {});
          this.id = uniqueId();
          this.manager = null; // default is enable true

          this.options.enable = ifUndefined(this.options.enable, true);
          this.state = STATE_POSSIBLE;
          this.simultaneous = {};
          this.requireFail = [];
        }

        Recognizer.prototype = {
          /**
           * @virtual
           * @type {Object}
           */
          defaults: {},

          /**
           * set options
           * @param {Object} options
           * @return {Recognizer}
           */
          set: function set(options) {
            assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state

            this.manager && this.manager.touchAction.update();
            return this;
          },

          /**
           * recognize simultaneous with an other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          recognizeWith: function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
              return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

            if (!simultaneous[otherRecognizer.id]) {
              simultaneous[otherRecognizer.id] = otherRecognizer;
              otherRecognizer.recognizeWith(this);
            }

            return this;
          },

          /**
           * drop the simultaneous link. it doesnt remove the link on the other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
              return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
          },

          /**
           * recognizer can only run when an other is failing
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          requireFailure: function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
              return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

            if (inArray(requireFail, otherRecognizer) === -1) {
              requireFail.push(otherRecognizer);
              otherRecognizer.requireFailure(this);
            }

            return this;
          },

          /**
           * drop the requireFailure link. it does not remove the link on the other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          dropRequireFailure: function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
              return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);

            if (index > -1) {
              this.requireFail.splice(index, 1);
            }

            return this;
          },

          /**
           * has require failures boolean
           * @returns {boolean}
           */
          hasRequireFailures: function hasRequireFailures() {
            return this.requireFail.length > 0;
          },

          /**
           * if the recognizer can recognize simultaneous with an other recognizer
           * @param {Recognizer} otherRecognizer
           * @returns {Boolean}
           */
          canRecognizeWith: function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
          },

          /**
           * You should use `tryEmit` instead of `emit` directly to check
           * that all the needed recognizers has failed before emitting.
           * @param {Object} input
           */
          emit: function emit(input) {
            var self = this;
            var state = this.state;

            function emit(event) {
              self.manager.emit(event, input);
            } // 'panstart' and 'panmove'


            if (state < STATE_ENDED) {
              emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) {
              // additional event(panleft, panright, pinchin, pinchout...)
              emit(input.additionalEvent);
            } // panend and pancancel


            if (state >= STATE_ENDED) {
              emit(self.options.event + stateStr(state));
            }
          },

          /**
           * Check that all the require failure recognizers has failed,
           * if true, it emits a gesture event,
           * otherwise, setup the state to FAILED.
           * @param {Object} input
           */
          tryEmit: function tryEmit(input) {
            if (this.canEmit()) {
              return this.emit(input);
            } // it's failing anyway


            this.state = STATE_FAILED;
          },

          /**
           * can we emit?
           * @returns {boolean}
           */
          canEmit: function canEmit() {
            var i = 0;

            while (i < this.requireFail.length) {
              if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
              }

              i++;
            }

            return true;
          },

          /**
           * update the recognizer
           * @param {Object} inputData
           */
          recognize: function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?

            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
              this.reset();
              this.state = STATE_FAILED;
              return;
            } // reset when we've reached the end


            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
              this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
            // so trigger an event

            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
              this.tryEmit(inputDataClone);
            }
          },

          /**
           * return the state of the recognizer
           * the actual recognizing happens in this method
           * @virtual
           * @param {Object} inputData
           * @returns {Const} STATE
           */
          process: function process(inputData) {},
          // jshint ignore:line

          /**
           * return the preferred touch-action
           * @virtual
           * @returns {Array}
           */
          getTouchAction: function getTouchAction() {},

          /**
           * called when the gesture isn't allowed to recognize
           * like when another is being recognized or it is disabled
           * @virtual
           */
          reset: function reset() {}
        };
        /**
         * get a usable string, used as event postfix
         * @param {Const} state
         * @returns {String} state
         */

        function stateStr(state) {
          if (state & STATE_CANCELLED) {
            return 'cancel';
          } else if (state & STATE_ENDED) {
            return 'end';
          } else if (state & STATE_CHANGED) {
            return 'move';
          } else if (state & STATE_BEGAN) {
            return 'start';
          }

          return '';
        }
        /**
         * direction cons to string
         * @param {Const} direction
         * @returns {String}
         */


        function directionStr(direction) {
          if (direction == DIRECTION_DOWN) {
            return 'down';
          } else if (direction == DIRECTION_UP) {
            return 'up';
          } else if (direction == DIRECTION_LEFT) {
            return 'left';
          } else if (direction == DIRECTION_RIGHT) {
            return 'right';
          }

          return '';
        }
        /**
         * get a recognizer by name if it is bound to a manager
         * @param {Recognizer|String} otherRecognizer
         * @param {Recognizer} recognizer
         * @returns {Recognizer}
         */


        function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
          var manager = recognizer.manager;

          if (manager) {
            return manager.get(otherRecognizer);
          }

          return otherRecognizer;
        }
        /**
         * This recognizer is just used as a base for the simple attribute recognizers.
         * @constructor
         * @extends Recognizer
         */


        function AttrRecognizer() {
          Recognizer.apply(this, arguments);
        }

        inherit(AttrRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof AttrRecognizer
           */
          defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
          },

          /**
           * Used to check if it the recognizer receives valid input, like input.distance > 10.
           * @memberof AttrRecognizer
           * @param {Object} input
           * @returns {Boolean} recognized
           */
          attrTest: function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
          },

          /**
           * Process the input and return the state for the recognizer
           * @memberof AttrRecognizer
           * @param {Object} input
           * @returns {*} State
           */
          process: function process(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED

            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
              return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
              if (eventType & INPUT_END) {
                return state | STATE_ENDED;
              } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
              }

              return state | STATE_CHANGED;
            }

            return STATE_FAILED;
          }
        });
        /**
         * Pan
         * Recognized when the pointer is down and moved in the allowed direction.
         * @constructor
         * @extends AttrRecognizer
         */

        function PanRecognizer() {
          AttrRecognizer.apply(this, arguments);
          this.pX = null;
          this.pY = null;
        }

        inherit(PanRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof PanRecognizer
           */
          defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
          },
          getTouchAction: function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];

            if (direction & DIRECTION_HORIZONTAL) {
              actions.push(TOUCH_ACTION_PAN_Y);
            }

            if (direction & DIRECTION_VERTICAL) {
              actions.push(TOUCH_ACTION_PAN_X);
            }

            return actions;
          },
          directionTest: function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY; // lock to axis?

            if (!(direction & options.direction)) {
              if (options.direction & DIRECTION_HORIZONTAL) {
                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
              } else {
                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
              }
            }

            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
          },
          attrTest: function attrTest(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
          },
          emit: function emit(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);

            if (direction) {
              input.additionalEvent = this.options.event + direction;
            }

            this._super.emit.call(this, input);
          }
        });
        /**
         * Pinch
         * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
         * @constructor
         * @extends AttrRecognizer
         */

        function PinchRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(PinchRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof PinchRecognizer
           */
          defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
          },
          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
          },
          attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
          },
          emit: function emit(input) {
            if (input.scale !== 1) {
              var inOut = input.scale < 1 ? 'in' : 'out';
              input.additionalEvent = this.options.event + inOut;
            }

            this._super.emit.call(this, input);
          }
        });
        /**
         * Press
         * Recognized when the pointer is down for x ms without any movement.
         * @constructor
         * @extends Recognizer
         */

        function PressRecognizer() {
          Recognizer.apply(this, arguments);
          this._timer = null;
          this._input = null;
        }

        inherit(PressRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof PressRecognizer
           */
          defaults: {
            event: 'press',
            pointers: 1,
            time: 251,
            // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low

          },
          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_AUTO];
          },
          process: function process(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input; // we only allow little movement
            // and we've reached an end event, so a tap is possible

            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
              this.reset();
            } else if (input.eventType & INPUT_START) {
              this.reset();
              this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
              }, options.time, this);
            } else if (input.eventType & INPUT_END) {
              return STATE_RECOGNIZED;
            }

            return STATE_FAILED;
          },
          reset: function reset() {
            clearTimeout(this._timer);
          },
          emit: function emit(input) {
            if (this.state !== STATE_RECOGNIZED) {
              return;
            }

            if (input && input.eventType & INPUT_END) {
              this.manager.emit(this.options.event + 'up', input);
            } else {
              this._input.timeStamp = now();
              this.manager.emit(this.options.event, this._input);
            }
          }
        });
        /**
         * Rotate
         * Recognized when two or more pointer are moving in a circular motion.
         * @constructor
         * @extends AttrRecognizer
         */

        function RotateRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(RotateRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof RotateRecognizer
           */
          defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
          },
          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
          },
          attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
          }
        });
        /**
         * Swipe
         * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
         * @constructor
         * @extends AttrRecognizer
         */

        function SwipeRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(SwipeRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof SwipeRecognizer
           */
          defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
          },
          getTouchAction: function getTouchAction() {
            return PanRecognizer.prototype.getTouchAction.call(this);
          },
          attrTest: function attrTest(input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
              velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
              velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
              velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
          },
          emit: function emit(input) {
            var direction = directionStr(input.offsetDirection);

            if (direction) {
              this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
          }
        });
        /**
         * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
         * between the given interval and position. The delay option can be used to recognize multi-taps without firing
         * a single tap.
         *
         * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
         * multi-taps being recognized.
         * @constructor
         * @extends Recognizer
         */

        function TapRecognizer() {
          Recognizer.apply(this, arguments); // previous time and center,
          // used for tap counting

          this.pTime = false;
          this.pCenter = false;
          this._timer = null;
          this._input = null;
          this.count = 0;
        }

        inherit(TapRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof PinchRecognizer
           */
          defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300,
            // max time between the multi-tap taps
            time: 250,
            // max time of the pointer to be down (like finger on the screen)
            threshold: 9,
            // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position

          },
          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_MANIPULATION];
          },
          process: function process(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();

            if (input.eventType & INPUT_START && this.count === 0) {
              return this.failTimeout();
            } // we only allow little movement
            // and we've reached an end event, so a tap is possible


            if (validMovement && validTouchTime && validPointers) {
              if (input.eventType != INPUT_END) {
                return this.failTimeout();
              }

              var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
              var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
              this.pTime = input.timeStamp;
              this.pCenter = input.center;

              if (!validMultiTap || !validInterval) {
                this.count = 1;
              } else {
                this.count += 1;
              }

              this._input = input; // if tap count matches we have recognized it,
              // else it has began recognizing...

              var tapCount = this.count % options.taps;

              if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                  return STATE_RECOGNIZED;
                } else {
                  this._timer = setTimeoutContext(function () {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                  }, options.interval, this);
                  return STATE_BEGAN;
                }
              }
            }

            return STATE_FAILED;
          },
          failTimeout: function failTimeout() {
            this._timer = setTimeoutContext(function () {
              this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
          },
          reset: function reset() {
            clearTimeout(this._timer);
          },
          emit: function emit() {
            if (this.state == STATE_RECOGNIZED) {
              this._input.tapCount = this.count;
              this.manager.emit(this.options.event, this._input);
            }
          }
        });
        /**
         * Simple way to create a manager with a default set of recognizers.
         * @param {HTMLElement} element
         * @param {Object} [options]
         * @constructor
         */

        function Hammer(element, options) {
          options = options || {};
          options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
          return new Manager(element, options);
        }
        /**
         * @const {string}
         */


        Hammer.VERSION = '2.0.7';
        /**
         * default settings
         * @namespace
         */

        Hammer.defaults = {
          /**
           * set if DOM events are being triggered.
           * But this is slower and unused by simple implementations, so disabled by default.
           * @type {Boolean}
           * @default false
           */
          domEvents: false,

          /**
           * The value for the touchAction property/fallback.
           * When set to `compute` it will magically set the correct value based on the added recognizers.
           * @type {String}
           * @default compute
           */
          touchAction: TOUCH_ACTION_COMPUTE,

          /**
           * @type {Boolean}
           * @default true
           */
          enable: true,

          /**
           * EXPERIMENTAL FEATURE -- can be removed/changed
           * Change the parent input target element.
           * If Null, then it is being set the to main element.
           * @type {Null|EventTarget}
           * @default null
           */
          inputTarget: null,

          /**
           * force an input class
           * @type {Null|Function}
           * @default null
           */
          inputClass: null,

          /**
           * Default recognizer setup when calling `Hammer()`
           * When creating a new Manager these will be skipped.
           * @type {Array}
           */
          preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
          [RotateRecognizer, {
            enable: false
          }], [PinchRecognizer, {
            enable: false
          }, ['rotate']], [SwipeRecognizer, {
            direction: DIRECTION_HORIZONTAL
          }], [PanRecognizer, {
            direction: DIRECTION_HORIZONTAL
          }, ['swipe']], [TapRecognizer], [TapRecognizer, {
            event: 'doubletap',
            taps: 2
          }, ['tap']], [PressRecognizer]],

          /**
           * Some CSS properties can be used to improve the working of Hammer.
           * Add them to this method and they will be set when creating a new Manager.
           * @namespace
           */
          cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
          }
        };
        var STOP = 1;
        var FORCED_STOP = 2;
        /**
         * Manager
         * @param {HTMLElement} element
         * @param {Object} [options]
         * @constructor
         */

        function Manager(element, options) {
          this.options = assign({}, Hammer.defaults, options || {});
          this.options.inputTarget = this.options.inputTarget || element;
          this.handlers = {};
          this.session = {};
          this.recognizers = [];
          this.oldCssProps = {};
          this.element = element;
          this.input = createInputInstance(this);
          this.touchAction = new TouchAction(this, this.options.touchAction);
          toggleCssProps(this, true);
          each(this.options.recognizers, function (item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
          }, this);
        }

        Manager.prototype = {
          /**
           * set options
           * @param {Object} options
           * @returns {Manager}
           */
          set: function set(options) {
            assign(this.options, options); // Options that need a little more setup

            if (options.touchAction) {
              this.touchAction.update();
            }

            if (options.inputTarget) {
              // Clean up existing event listeners and reinitialize
              this.input.destroy();
              this.input.target = options.inputTarget;
              this.input.init();
            }

            return this;
          },

          /**
           * stop recognizing for this session.
           * This session will be discarded, when a new [input]start event is fired.
           * When forced, the recognizer cycle is stopped immediately.
           * @param {Boolean} [force]
           */
          stop: function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
          },

          /**
           * run the recognizers!
           * called by the inputHandler function on every movement of the pointers (touches)
           * it walks through all the recognizers and tries to detect the gesture that is being made
           * @param {Object} inputData
           */
          recognize: function recognize(inputData) {
            var session = this.session;

            if (session.stopped) {
              return;
            } // run the touch-action polyfill


            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`

            var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
            // or when we're in a new session

            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
              curRecognizer = session.curRecognizer = null;
            }

            var i = 0;

            while (i < recognizers.length) {
              recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
              // 1.   allow if the session is NOT forced stopped (see the .stop() method)
              // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
              //      that is being recognized.
              // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
              //      this can be setup with the `recognizeWith()` method on the recognizer.

              if (session.stopped !== FORCED_STOP && ( // 1
              !curRecognizer || recognizer == curRecognizer || // 2
              recognizer.canRecognizeWith(curRecognizer))) {
                // 3
                recognizer.recognize(inputData);
              } else {
                recognizer.reset();
              } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
              // current active recognizer. but only if we don't already have an active recognizer


              if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
              }

              i++;
            }
          },

          /**
           * get a recognizer by its event name.
           * @param {Recognizer|String} recognizer
           * @returns {Recognizer|Null}
           */
          get: function get(recognizer) {
            if (recognizer instanceof Recognizer) {
              return recognizer;
            }

            var recognizers = this.recognizers;

            for (var i = 0; i < recognizers.length; i++) {
              if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
              }
            }

            return null;
          },

          /**
           * add a recognizer to the manager
           * existing recognizers with the same event name will be removed
           * @param {Recognizer} recognizer
           * @returns {Recognizer|Manager}
           */
          add: function add(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
              return this;
            } // remove existing


            var existing = this.get(recognizer.options.event);

            if (existing) {
              this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
          },

          /**
           * remove a recognizer by name or instance
           * @param {Recognizer|String} recognizer
           * @returns {Manager}
           */
          remove: function remove(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
              return this;
            }

            recognizer = this.get(recognizer); // let's make sure this recognizer exists

            if (recognizer) {
              var recognizers = this.recognizers;
              var index = inArray(recognizers, recognizer);

              if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
              }
            }

            return this;
          },

          /**
           * bind event
           * @param {String} events
           * @param {Function} handler
           * @returns {EventEmitter} this
           */
          on: function on(events, handler) {
            if (events === undefined) {
              return;
            }

            if (handler === undefined) {
              return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
              handlers[event] = handlers[event] || [];
              handlers[event].push(handler);
            });
            return this;
          },

          /**
           * unbind event, leave emit blank to remove all handlers
           * @param {String} events
           * @param {Function} [handler]
           * @returns {EventEmitter} this
           */
          off: function off(events, handler) {
            if (events === undefined) {
              return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
              if (!handler) {
                delete handlers[event];
              } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
              }
            });
            return this;
          },

          /**
           * emit event to the listeners
           * @param {String} event
           * @param {Object} data
           */
          emit: function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
              triggerDomEvent(event, data);
            } // no handlers, so skip it all


            var handlers = this.handlers[event] && this.handlers[event].slice();

            if (!handlers || !handlers.length) {
              return;
            }

            data.type = event;

            data.preventDefault = function () {
              data.srcEvent.preventDefault();
            };

            var i = 0;

            while (i < handlers.length) {
              handlers[i](data);
              i++;
            }
          },

          /**
           * destroy the manager and unbinds all events
           * it doesn't unbind dom events, that is the user own responsibility
           */
          destroy: function destroy() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
          }
        };
        /**
         * add/remove the css properties as defined in manager.options.cssProps
         * @param {Manager} manager
         * @param {Boolean} add
         */

        function toggleCssProps(manager, add) {
          var element = manager.element;

          if (!element.style) {
            return;
          }

          var prop;
          each(manager.options.cssProps, function (value, name) {
            prop = prefixed(element.style, name);

            if (add) {
              manager.oldCssProps[prop] = element.style[prop];
              element.style[prop] = value;
            } else {
              element.style[prop] = manager.oldCssProps[prop] || '';
            }
          });

          if (!add) {
            manager.oldCssProps = {};
          }
        }
        /**
         * trigger dom event
         * @param {String} event
         * @param {Object} data
         */


        function triggerDomEvent(event, data) {
          var gestureEvent = document.createEvent('Event');
          gestureEvent.initEvent(event, true, true);
          gestureEvent.gesture = data;
          data.target.dispatchEvent(gestureEvent);
        }

        assign(Hammer, {
          INPUT_START: INPUT_START,
          INPUT_MOVE: INPUT_MOVE,
          INPUT_END: INPUT_END,
          INPUT_CANCEL: INPUT_CANCEL,
          STATE_POSSIBLE: STATE_POSSIBLE,
          STATE_BEGAN: STATE_BEGAN,
          STATE_CHANGED: STATE_CHANGED,
          STATE_ENDED: STATE_ENDED,
          STATE_RECOGNIZED: STATE_RECOGNIZED,
          STATE_CANCELLED: STATE_CANCELLED,
          STATE_FAILED: STATE_FAILED,
          DIRECTION_NONE: DIRECTION_NONE,
          DIRECTION_LEFT: DIRECTION_LEFT,
          DIRECTION_RIGHT: DIRECTION_RIGHT,
          DIRECTION_UP: DIRECTION_UP,
          DIRECTION_DOWN: DIRECTION_DOWN,
          DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
          DIRECTION_VERTICAL: DIRECTION_VERTICAL,
          DIRECTION_ALL: DIRECTION_ALL,
          Manager: Manager,
          Input: Input,
          TouchAction: TouchAction,
          TouchInput: TouchInput,
          MouseInput: MouseInput,
          PointerEventInput: PointerEventInput,
          TouchMouseInput: TouchMouseInput,
          SingleTouchInput: SingleTouchInput,
          Recognizer: Recognizer,
          AttrRecognizer: AttrRecognizer,
          Tap: TapRecognizer,
          Pan: PanRecognizer,
          Swipe: SwipeRecognizer,
          Pinch: PinchRecognizer,
          Rotate: RotateRecognizer,
          Press: PressRecognizer,
          on: addEventListeners,
          off: removeEventListeners,
          each: each,
          merge: merge,
          extend: extend,
          assign: assign,
          inherit: inherit,
          bindFn: bindFn,
          prefixed: prefixed
        }); // this prevents errors when Hammer is loaded in the presence of an AMD
        //  style loader but by script tag, not by the loader.

        var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line

        freeGlobal.Hammer = Hammer;

        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return Hammer;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(window, document, 'Hammer');
      /***/

    },

    /***/
    "yuhW":
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/throttle.js ***!
      \*******************************************************************/

    /*! exports provided: defaultThrottleConfig, throttle */

    /***/
    function yuhW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultThrottleConfig", function () {
        return defaultThrottleConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throttle", function () {
        return throttle;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      var defaultThrottleConfig = {
        leading: true,
        trailing: false
      };

      function throttle(durationSelector) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultThrottleConfig;
        return function (source) {
          return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));
        };
      }

      var ThrottleOperator = /*#__PURE__*/function () {
        function ThrottleOperator(durationSelector, leading, trailing) {
          _classCallCheck(this, ThrottleOperator);

          this.durationSelector = durationSelector;
          this.leading = leading;
          this.trailing = trailing;
        }

        _createClass2(ThrottleOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
          }
        }]);

        return ThrottleOperator;
      }();

      var ThrottleSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP21) {
        _inherits(ThrottleSubscriber, _innerSubscribe__WEBP21);

        var _super180 = _createSuper(ThrottleSubscriber);

        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
          var _this297;

          _classCallCheck(this, ThrottleSubscriber);

          _this297 = _super180.call(this, destination);
          _this297.destination = destination;
          _this297.durationSelector = durationSelector;
          _this297._leading = _leading;
          _this297._trailing = _trailing;
          _this297._hasValue = false;
          return _this297;
        }

        _createClass2(ThrottleSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this._hasValue = true;
            this._sendValue = value;

            if (!this._throttled) {
              if (this._leading) {
                this.send();
              } else {
                this.throttle(value);
              }
            }
          }
        }, {
          key: "send",
          value: function send() {
            var _hasValue = this._hasValue,
                _sendValue = this._sendValue;

            if (_hasValue) {
              this.destination.next(_sendValue);
              this.throttle(_sendValue);
            }

            this._hasValue = false;
            this._sendValue = undefined;
          }
        }, {
          key: "throttle",
          value: function throttle(value) {
            var duration = this.tryDurationSelector(value);

            if (!!duration) {
              this.add(this._throttled = Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(duration, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this)));
            }
          }
        }, {
          key: "tryDurationSelector",
          value: function tryDurationSelector(value) {
            try {
              return this.durationSelector(value);
            } catch (err) {
              this.destination.error(err);
              return null;
            }
          }
        }, {
          key: "throttlingDone",
          value: function throttlingDone() {
            var _throttled = this._throttled,
                _trailing = this._trailing;

            if (_throttled) {
              _throttled.unsubscribe();
            }

            this._throttled = undefined;

            if (_trailing) {
              this.send();
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext() {
            this.throttlingDone();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.throttlingDone();
          }
        }]);

        return ThrottleSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=throttle.js.map

      /***/

    },

    /***/
    "z+Ro":
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js ***!
      \*****************************************************************/

    /*! exports provided: isScheduler */

    /***/
    function zRo(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isScheduler", function () {
        return isScheduler;
      });

      function isScheduler(value) {
        return value && typeof value.schedule === 'function';
      } //# sourceMappingURL=isScheduler.js.map

      /***/

    },

    /***/
    "z6cu":
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/throwError.js ***!
      \**********************************************************************/

    /*! exports provided: throwError */

    /***/
    function z6cu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwError", function () {
        return throwError;
      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      "HDdC");

      function throwError(error, scheduler) {
        if (!scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            return subscriber.error(error);
          });
        } else {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            return scheduler.schedule(dispatch, 0, {
              error: error,
              subscriber: subscriber
            });
          });
        }
      }

      function dispatch(_ref15) {
        var error = _ref15.error,
            subscriber = _ref15.subscriber;
        subscriber.error(error);
      } //# sourceMappingURL=throwError.js.map

      /***/

    },

    /***/
    "zP0r":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skip.js ***!
      \***************************************************************/

    /*! exports provided: skip */

    /***/
    function zP0r(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "skip", function () {
        return skip;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      "7o/Q");

      function skip(count) {
        return function (source) {
          return source.lift(new SkipOperator(count));
        };
      }

      var SkipOperator = /*#__PURE__*/function () {
        function SkipOperator(total) {
          _classCallCheck(this, SkipOperator);

          this.total = total;
        }

        _createClass2(SkipOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SkipSubscriber(subscriber, this.total));
          }
        }]);

        return SkipOperator;
      }();

      var SkipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_47) {
        _inherits(SkipSubscriber, _Subscriber__WEBPACK_47);

        var _super181 = _createSuper(SkipSubscriber);

        function SkipSubscriber(destination, total) {
          var _this298;

          _classCallCheck(this, SkipSubscriber);

          _this298 = _super181.call(this, destination);
          _this298.total = total;
          _this298.count = 0;
          return _this298;
        }

        _createClass2(SkipSubscriber, [{
          key: "_next",
          value: function _next(x) {
            if (++this.count > this.total) {
              this.destination.next(x);
            }
          }
        }]);

        return SkipSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skip.js.map

      /***/

    },

    /***/
    "znLP":
    /*!**********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js ***!
      \**********************************************************************************/

    /*! exports provided: AnimationFrameScheduler */

    /***/
    function znLP(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationFrameScheduler", function () {
        return AnimationFrameScheduler;
      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      "IjjT");

      var AnimationFrameScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP4) {
        _inherits(AnimationFrameScheduler, _AsyncScheduler__WEBP4);

        var _super182 = _createSuper(AnimationFrameScheduler);

        function AnimationFrameScheduler() {
          _classCallCheck(this, AnimationFrameScheduler);

          return _super182.apply(this, arguments);
        }

        _createClass2(AnimationFrameScheduler, [{
          key: "flush",
          value: function flush(action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (++index < count && (action = actions.shift()));

            this.active = false;

            if (error) {
              while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return AnimationFrameScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=AnimationFrameScheduler.js.map

      /***/

    },

    /***/
    "zp1y":
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js ***!
      \*************************************************************************/

    /*! exports provided: withLatestFrom */

    /***/
    function zp1y(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "withLatestFrom", function () {
        return withLatestFrom;
      });
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../OuterSubscriber */
      "l7GE");
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      "ZUHj");

      function withLatestFrom() {
        for (var _len52 = arguments.length, args = new Array(_len52), _key53 = 0; _key53 < _len52; _key53++) {
          args[_key53] = arguments[_key53];
        }

        return function (source) {
          var project;

          if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
          }

          var observables = args;
          return source.lift(new WithLatestFromOperator(observables, project));
        };
      }

      var WithLatestFromOperator = /*#__PURE__*/function () {
        function WithLatestFromOperator(observables, project) {
          _classCallCheck(this, WithLatestFromOperator);

          this.observables = observables;
          this.project = project;
        }

        _createClass2(WithLatestFromOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
          }
        }]);

        return WithLatestFromOperator;
      }();

      var WithLatestFromSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB7) {
        _inherits(WithLatestFromSubscriber, _OuterSubscriber__WEB7);

        var _super183 = _createSuper(WithLatestFromSubscriber);

        function WithLatestFromSubscriber(destination, observables, project) {
          var _this299;

          _classCallCheck(this, WithLatestFromSubscriber);

          _this299 = _super183.call(this, destination);
          _this299.observables = observables;
          _this299.project = project;
          _this299.toRespond = [];
          var len = observables.length;
          _this299.values = new Array(len);

          for (var i = 0; i < len; i++) {
            _this299.toRespond.push(i);
          }

          for (var _i33 = 0; _i33 < len; _i33++) {
            var observable = observables[_i33];

            _this299.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this299), observable, undefined, _i33));
          }

          return _this299;
        }

        _createClass2(WithLatestFromSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, outerIndex) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;

            if (toRespond.length > 0) {
              var found = toRespond.indexOf(outerIndex);

              if (found !== -1) {
                toRespond.splice(found, 1);
              }
            }
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {}
        }, {
          key: "_next",
          value: function _next(value) {
            if (this.toRespond.length === 0) {
              var args = [value].concat(_toConsumableArray(this.values));

              if (this.project) {
                this._tryProject(args);
              } else {
                this.destination.next(args);
              }
            }
          }
        }, {
          key: "_tryProject",
          value: function _tryProject(args) {
            var result;

            try {
              result = this.project.apply(this, args);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return WithLatestFromSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=withLatestFrom.js.map

      /***/

    },

    /***/
    "zt7V":
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaust.js ***!
      \******************************************************************/

    /*! exports provided: exhaust */

    /***/
    function zt7V(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "exhaust", function () {
        return exhaust;
      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      "zx2A");

      function exhaust() {
        return function (source) {
          return source.lift(new SwitchFirstOperator());
        };
      }

      var SwitchFirstOperator = /*#__PURE__*/function () {
        function SwitchFirstOperator() {
          _classCallCheck(this, SwitchFirstOperator);
        }

        _createClass2(SwitchFirstOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SwitchFirstSubscriber(subscriber));
          }
        }]);

        return SwitchFirstOperator;
      }();

      var SwitchFirstSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP22) {
        _inherits(SwitchFirstSubscriber, _innerSubscribe__WEBP22);

        var _super184 = _createSuper(SwitchFirstSubscriber);

        function SwitchFirstSubscriber(destination) {
          var _this300;

          _classCallCheck(this, SwitchFirstSubscriber);

          _this300 = _super184.call(this, destination);
          _this300.hasCompleted = false;
          _this300.hasSubscription = false;
          return _this300;
        }

        _createClass2(SwitchFirstSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (!this.hasSubscription) {
              this.hasSubscription = true;
              this.add(Object(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["innerSubscribe"])(value, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleInnerSubscriber"](this)));
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (!this.hasSubscription) {
              this.destination.complete();
            }
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.hasSubscription = false;

            if (this.hasCompleted) {
              this.destination.complete();
            }
          }
        }]);

        return SwitchFirstSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__["SimpleOuterSubscriber"]); //# sourceMappingURL=exhaust.js.map

      /***/

    },

    /***/
    "zx2A":
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/innerSubscribe.js ***!
      \***************************************************************/

    /*! exports provided: SimpleInnerSubscriber, ComplexInnerSubscriber, SimpleOuterSubscriber, ComplexOuterSubscriber, innerSubscribe */

    /***/
    function zx2A(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SimpleInnerSubscriber", function () {
        return SimpleInnerSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComplexInnerSubscriber", function () {
        return ComplexInnerSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SimpleOuterSubscriber", function () {
        return SimpleOuterSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComplexOuterSubscriber", function () {
        return ComplexOuterSubscriber;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "innerSubscribe", function () {
        return innerSubscribe;
      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      "7o/Q");
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Observable */
      "HDdC");
      /* harmony import */


      var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./util/subscribeTo */
      "SeVD");

      var SimpleInnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_48) {
        _inherits(SimpleInnerSubscriber, _Subscriber__WEBPACK_48);

        var _super185 = _createSuper(SimpleInnerSubscriber);

        function SimpleInnerSubscriber(parent) {
          var _this301;

          _classCallCheck(this, SimpleInnerSubscriber);

          _this301 = _super185.call(this);
          _this301.parent = parent;
          return _this301;
        }

        _createClass2(SimpleInnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(value);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete();
            this.unsubscribe();
          }
        }]);

        return SimpleInnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var ComplexInnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_49) {
        _inherits(ComplexInnerSubscriber, _Subscriber__WEBPACK_49);

        var _super186 = _createSuper(ComplexInnerSubscriber);

        function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
          var _this302;

          _classCallCheck(this, ComplexInnerSubscriber);

          _this302 = _super186.call(this);
          _this302.parent = parent;
          _this302.outerValue = outerValue;
          _this302.outerIndex = outerIndex;
          return _this302;
        }

        _createClass2(ComplexInnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete(this);
            this.unsubscribe();
          }
        }]);

        return ComplexInnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var SimpleOuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_50) {
        _inherits(SimpleOuterSubscriber, _Subscriber__WEBPACK_50);

        var _super187 = _createSuper(SimpleOuterSubscriber);

        function SimpleOuterSubscriber() {
          _classCallCheck(this, SimpleOuterSubscriber);

          return _super187.apply(this, arguments);
        }

        _createClass2(SimpleOuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(err) {
            this.destination.error(err);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.destination.complete();
          }
        }]);

        return SimpleOuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      var ComplexOuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_51) {
        _inherits(ComplexOuterSubscriber, _Subscriber__WEBPACK_51);

        var _super188 = _createSuper(ComplexOuterSubscriber);

        function ComplexOuterSubscriber() {
          _classCallCheck(this, ComplexOuterSubscriber);

          return _super188.apply(this, arguments);
        }

        _createClass2(ComplexOuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, _outerIndex, _innerSub) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(error) {
            this.destination.error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(_innerSub) {
            this.destination.complete();
          }
        }]);

        return ComplexOuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

      function innerSubscribe(result, innerSubscriber) {
        if (innerSubscriber.closed) {
          return undefined;
        }

        if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
          return result.subscribe(innerSubscriber);
        }

        return Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_2__["subscribeTo"])(result)(innerSubscriber);
      } //# sourceMappingURL=innerSubscribe.js.map

      /***/

    }
  }]);
})();
//# sourceMappingURL=vendor-es5.js.map